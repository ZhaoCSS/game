function propertyCount(t) {
  var e = 0;
  for (var i in t) t.hasOwnProperty(i) && ++e;
  return e;
}

var TWEEN =
  TWEEN ||
  (function () {
    var n = [];
    return {
      REVISION: "9",
      getAll: function () {
        return n;
      },
      removeAll: function () {
        n = [];
      },
      add: function (e) {
        n.push(e);
      },
      remove: function (e) {
        -1 !== (e = n.indexOf(e)) && n.splice(e, 1);
      },
      update: function (e) {
        if (0 === n.length) return !1;
        var t = 0,
          o = n.length;
        for (
          e =
            void 0 !== e
              ? e
              : void 0 !== window.performance &&
                void 0 !== window.performance.now
              ? window.performance.now()
              : Date.now();
          t < o;

        )
          n[t].update(e) ? t++ : (n.splice(t, 1), o--);
        return !0;
      },
    };
  })();
(TWEEN.Tween = function (n) {
  var e = {},
    t = {},
    o = {},
    i = 1e3,
    r = 0,
    a = 0,
    s = null,
    c = TWEEN.Easing.Linear.None,
    u = TWEEN.Interpolation.Linear,
    d = [],
    l = null,
    p = !1,
    h = null,
    f = null;
  (this.to = function (n, e) {
    return void 0 !== e && (i = e), (t = n), this;
  }),
    (this.start = function (i) {
      for (var r in (TWEEN.add(this),
      (p = !1),
      (s =
        void 0 !== i
          ? i
          : void 0 !== window.performance && void 0 !== window.performance.now
          ? window.performance.now()
          : Date.now()),
      (s += a),
      t))
        if (!1 != r in n && null !== n[r]) {
          if (t[r] instanceof Array) {
            if (0 === t[r].length) continue;
            t[r] = [n[r]].concat(t[r]);
          }
          (e[r] = n[r]),
            0 == e[r] instanceof Array && (e[r] *= 1),
            (o[r] = e[r]);
        }
      return this;
    }),
    (this.stop = function () {
      return TWEEN.remove(this), this;
    }),
    (this.delay = function (n) {
      return (a = n), this;
    }),
    (this.repeat = function (n) {
      return (r = n), this;
    }),
    (this.easing = function (n) {
      return (c = n), this;
    }),
    (this.interpolation = function (n) {
      return (u = n), this;
    }),
    (this.chain = function () {
      return (d = arguments), this;
    }),
    (this.onStart = function (n) {
      return (l = n), this;
    }),
    (this.onUpdate = function (n) {
      return (h = n), this;
    }),
    (this.onComplete = function (n) {
      return (f = n), this;
    }),
    (this.update = function (w) {
      if (w < s) return !0;
      !1 === p && (null !== l && l.call(n), (p = !0));
      var v,
        m,
        y = c((v = 1 < (v = (w - s) / i) ? 1 : v));
      for (m in e) {
        var g = e[m],
          E = t[m];
        n[m] = E instanceof Array ? u(E, y) : g + (E - g) * y;
      }
      if ((null !== h && h.call(n, y), 1 == v)) {
        if (!(0 < r)) {
          for (null !== f && f.call(n), v = 0, y = d.length; v < y; v++)
            d[v].start(w);
          return !1;
        }
        for (m in (isFinite(r) && r--, o)) e[m] = o[m];
        s = w + a;
      }
      return !0;
    });
}),
  (TWEEN.Easing = {
    Linear: {
      None: function (n) {
        return n;
      },
    },
    Quadratic: {
      In: function (n) {
        return n * n;
      },
      Out: function (n) {
        return n * (2 - n);
      },
      InOut: function (n) {
        return 1 > (n *= 2) ? 0.5 * n * n : -0.5 * (--n * (n - 2) - 1);
      },
    },
    Cubic: {
      In: function (n) {
        return n * n * n;
      },
      Out: function (n) {
        return --n * n * n + 1;
      },
      InOut: function (n) {
        return 1 > (n *= 2) ? 0.5 * n * n * n : 0.5 * ((n -= 2) * n * n + 2);
      },
    },
    Quartic: {
      In: function (n) {
        return n * n * n * n;
      },
      Out: function (n) {
        return 1 - --n * n * n * n;
      },
      InOut: function (n) {
        return 1 > (n *= 2)
          ? 0.5 * n * n * n * n
          : -0.5 * ((n -= 2) * n * n * n - 2);
      },
    },
    Quintic: {
      In: function (n) {
        return n * n * n * n * n;
      },
      Out: function (n) {
        return --n * n * n * n * n + 1;
      },
      InOut: function (n) {
        return 1 > (n *= 2)
          ? 0.5 * n * n * n * n * n
          : 0.5 * ((n -= 2) * n * n * n * n + 2);
      },
    },
    Sinusoidal: {
      In: function (n) {
        return 1 - Math.cos((n * Math.PI) / 2);
      },
      Out: function (n) {
        return Math.sin((n * Math.PI) / 2);
      },
      InOut: function (n) {
        return 0.5 * (1 - Math.cos(Math.PI * n));
      },
    },
    Exponential: {
      In: function (n) {
        return 0 === n ? 0 : Math.pow(1024, n - 1);
      },
      Out: function (n) {
        return 1 === n ? 1 : 1 - Math.pow(2, -10 * n);
      },
      InOut: function (n) {
        return 0 === n
          ? 0
          : 1 === n
          ? 1
          : 1 > (n *= 2)
          ? 0.5 * Math.pow(1024, n - 1)
          : 0.5 * (2 - Math.pow(2, -10 * (n - 1)));
      },
    },
    Circular: {
      In: function (n) {
        return 1 - Math.sqrt(1 - n * n);
      },
      Out: function (n) {
        return Math.sqrt(1 - --n * n);
      },
      InOut: function (n) {
        return 1 > (n *= 2)
          ? -0.5 * (Math.sqrt(1 - n * n) - 1)
          : 0.5 * (Math.sqrt(1 - (n -= 2) * n) + 1);
      },
    },
    Elastic: {
      In: function (n) {
        var e,
          t = 0.1;
        return 0 === n
          ? 0
          : 1 === n
          ? 1
          : (!t || 1 > t
              ? ((t = 1), (e = 0.1))
              : (e = (0.4 * Math.asin(1 / t)) / (2 * Math.PI)),
            -t *
              Math.pow(2, 10 * (n -= 1)) *
              Math.sin((2 * (n - e) * Math.PI) / 0.4));
      },
      Out: function (n) {
        var e,
          t = 0.1;
        return 0 === n
          ? 0
          : 1 === n
          ? 1
          : (!t || 1 > t
              ? ((t = 1), (e = 0.1))
              : (e = (0.4 * Math.asin(1 / t)) / (2 * Math.PI)),
            t * Math.pow(2, -10 * n) * Math.sin((2 * (n - e) * Math.PI) / 0.4) +
              1);
      },
      InOut: function (n) {
        var e,
          t = 0.1;
        return 0 === n
          ? 0
          : 1 === n
          ? 1
          : (!t || 1 > t
              ? ((t = 1), (e = 0.1))
              : (e = (0.4 * Math.asin(1 / t)) / (2 * Math.PI)),
            1 > (n *= 2)
              ? -0.5 *
                t *
                Math.pow(2, 10 * (n -= 1)) *
                Math.sin((2 * (n - e) * Math.PI) / 0.4)
              : 0.5 *
                  t *
                  Math.pow(2, -10 * (n -= 1)) *
                  Math.sin((2 * (n - e) * Math.PI) / 0.4) +
                1);
      },
    },
    Back: {
      In: function (n) {
        return n * n * (2.70158 * n - 1.70158);
      },
      Out: function (n) {
        return --n * n * (2.70158 * n + 1.70158) + 1;
      },
      InOut: function (n) {
        return 1 > (n *= 2)
          ? 0.5 * n * n * (3.5949095 * n - 2.5949095)
          : 0.5 * ((n -= 2) * n * (3.5949095 * n + 2.5949095) + 2);
      },
    },
    Bounce: {
      In: function (n) {
        return 1 - TWEEN.Easing.Bounce.Out(1 - n);
      },
      Out: function (n) {
        return n < 1 / 2.75
          ? 7.5625 * n * n
          : n < 2 / 2.75
          ? 7.5625 * (n -= 1.5 / 2.75) * n + 0.75
          : n < 2.5 / 2.75
          ? 7.5625 * (n -= 2.25 / 2.75) * n + 0.9375
          : 7.5625 * (n -= 2.625 / 2.75) * n + 0.984375;
      },
      InOut: function (n) {
        return 0.5 > n
          ? 0.5 * TWEEN.Easing.Bounce.In(2 * n)
          : 0.5 * TWEEN.Easing.Bounce.Out(2 * n - 1) + 0.5;
      },
    },
  }),
  (TWEEN.Interpolation = {
    Linear: function (n, e) {
      var t = n.length - 1,
        o = t * e,
        i = Math.floor(o),
        r = TWEEN.Interpolation.Utils.Linear;
      return 0 > e
        ? r(n[0], n[1], o)
        : 1 < e
        ? r(n[t], n[t - 1], t - o)
        : r(n[i], n[i + 1 > t ? t : i + 1], o - i);
    },
    Bezier: function (n, e) {
      var t,
        o = 0,
        i = n.length - 1,
        r = Math.pow,
        a = TWEEN.Interpolation.Utils.Bernstein;
      for (t = 0; t <= i; t++) o += r(1 - e, i - t) * r(e, t) * n[t] * a(i, t);
      return o;
    },
    CatmullRom: function (n, e) {
      var t = n.length - 1,
        o = t * e,
        i = Math.floor(o),
        r = TWEEN.Interpolation.Utils.CatmullRom;
      return n[0] === n[t]
        ? (0 > e && (i = Math.floor((o = t * (1 + e)))),
          r(n[(i - 1 + t) % t], n[i], n[(i + 1) % t], n[(i + 2) % t], o - i))
        : 0 > e
        ? n[0] - (r(n[0], n[0], n[1], n[1], -o) - n[0])
        : 1 < e
        ? n[t] - (r(n[t], n[t], n[t - 1], n[t - 1], o - t) - n[t])
        : r(
            n[i ? i - 1 : 0],
            n[i],
            n[t < i + 1 ? t : i + 1],
            n[t < i + 2 ? t : i + 2],
            o - i
          );
    },
    Utils: {
      Linear: function (n, e, t) {
        return (e - n) * t + n;
      },
      Bernstein: function (n, e) {
        var t = TWEEN.Interpolation.Utils.Factorial;
        return t(n) / t(e) / t(n - e);
      },
      Factorial: (function () {
        var n = [1];
        return function (e) {
          var t,
            o = 1;
          if (n[e]) return n[e];
          for (t = e; 1 < t; t--) o *= t;
          return (n[e] = o);
        };
      })(),
      CatmullRom: function (n, e, t, o, i) {
        var r = i * i;
        return (
          (2 * e - 2 * t + (n = 0.5 * (t - n)) + (o = 0.5 * (o - e))) * i * r +
          (-3 * e + 3 * t - 2 * n - o) * r +
          n * i +
          e
        );
      },
    },
  });

function Vector() {
  var e = arguments.length;
  3 === e
    ? ((this.x = arguments[0]),
      (this.y = arguments[1]),
      (this.z = arguments[2]))
    : 1 === e
    ? ((this.x = arguments[0].x),
      (this.y = arguments[0].y),
      (this.z = arguments[0].z))
    : ((this.x = 0), (this.y = 0), (this.z = 0));
}
function Particle(e) {
  (this.position = new Vector()),
    (this.velocity = new Vector()),
    (this.force = new Vector()),
    (this.mass = e),
    (this.fixed = !1),
    (this.age = 0),
    (this.dead = !1);
}
function Spring(e, t, i, r, n) {
  (this.constant = i),
    (this.damping = r),
    (this.length = n),
    (this.a = e),
    (this.b = t),
    (this.on = !0);
}
function Attraction(e, t, i, r) {
  (this.a = e),
    (this.b = t),
    (this.constant = i),
    (this.on = !0),
    (this.distanceMin = r),
    (this.distanceMinSquared = r * r);
}
function RungeKuttaIntegrator(e) {
  (this.s = e),
    (this.originalPositions = []),
    (this.originalVelocities = []),
    (this.k1Forces = []),
    (this.k1Velocities = []),
    (this.k2Forces = []),
    (this.k2Velocities = []),
    (this.k3Forces = []),
    (this.k3Velocities = []),
    (this.k4Forces = []),
    (this.k4Velocities = []);
}
function ParticleSystem() {
  (this.particles = []),
    (this.springs = []),
    (this.attractions = []),
    (this.forces = []),
    (this.integrator = new RungeKuttaIntegrator(this)),
    (this.hasDeadParticles = !1);
  var e = arguments.length;

  if (2 === e) {
    (this.gravity = new Vector(0, arguments[0], 0)), (this.drag = arguments[1]);
  } else {
    if (4 === e) {
      this.gravity = new Vector(arguments[0], arguments[1], arguments[2]);
      this.drag = arguments[3];
    } else {
      (this.gravity = new Vector(0, ParticleSystem.DEFAULT_GRAVITY, 0)),
        (this.drag = ParticleSystem.DEFAULT_DRAG);
    }
  }
}
function PoissonDiskSampler3D(e, t, i, r, n, o, a, s, l) {
  (this.width = e),
    (this.height = t),
    (this.depth = i),
    console.log("PoissonDiskSampler3D", r),
    (this.minDistance = r),
    (this.sampleFrequency = n),
    (this.oldOffset = {
      x: 0,
      y: 0,
      z: 0,
    }),
    null != a && (this.oldOffset.x = a),
    null != s && (this.oldOffset.y = s),
    null != l && (this.oldOffset.z = l),
    (this.newStartIndex = 0),
    (this.fromExisting = !1),
    (this.fromExisting = null != o),
    this.reset(),
    null != o && ((this.newStartIndex = o.length), this.initExistingPoints(o));
}
function Grid3D(e, t, i, r) {
  (this.width = e),
    (this.height = t),
    (this.depth = i),
    (this.minDistance = r),
    (this.cellSize = this.minDistance / Math.SQRT2),
    (this.cellsWide = Math.ceil(this.width / this.cellSize)),
    (this.cellsHigh = Math.ceil(this.height / this.cellSize)),
    (this.cellsDeep = Math.ceil(this.depth / this.cellSize)),
    (this.grid = []);
  for (var n = 0; n < this.cellsWide; n++) {
    this.grid[n] = [];
    for (var o = 0; o < this.cellsHigh; o++) {
      this.grid[n][o] = [];
      for (var a = 0; a < this.cellsDeep; a++) this.grid[n][o][a] = null;
    }
  }
}
function RandomQueue(e) {
  this.queue = e || new Array();
}
function getRandomArbitrary(e, t) {
  return Math.random() * (t - e) + e;
}
function getRandomInt(e, t) {
  return Math.floor(Math.random() * (t - e + 1)) + e;
}
function getPoissonPoints(e) {
  function t(e, t, i, r, n, o) {
    return Math.sqrt((r - e) * (r - e) + (n - t) * (n - t) + (o - i) * (o - i));
  }
  var i,
    r,
    n,
    o,
    a,
    s,
    l,
    h,
    c = e.minDistance,
    u = e.height;
  if (
    ((i = null != e.mode ? e.mode : "dynamic"),
    null != e.count && (r = e.count),
    (n = null != e.center ? e.center : vec3.create()),
    (o = null != e.proxCenter ? e.proxCenter : n),
    null != e.existingPoints && (a = e.existingPoints),
    null != e.sampFreq ? (sampFreq = e.sampFreq) : (sampFreq = 20),
    (s = null != e.newOnly && e.newOnly),
    "dynamic" == i)
  ) {
    var p = r;
    p < 10 && (p += 10);
    var d = 1.4,
      f = (p * Math.pow(c * d, 3)) / u;
    l = h = Math.sqrt(f);
  } else "static" == i && ((l = e.width), (h = e.depth));
  var m,
    E,
    g,
    v = -l / 2 + n.x,
    y = -u / 2 + n.y,
    T = -h / 2 + n.z,
    R = [];
  if (void 0 !== a) {
    for (var x = 0; x < a.length; x++) {
      var H = {
        x: a[x].x,
        y: a[x].y,
        z: a[x].z,
      };
      (H.x -= v), (H.y -= y), (H.z -= T), R.push(H);
    }
    null != e.lastCenter &&
      ((m = n.x - e.lastCenter.x),
      (E = n.y - e.lastCenter.y),
      (g = n.z - e.lastCenter.z));
  }
  var b = new PoissonDiskSampler3D(l, u, h, c, sampFreq, R, m, E, g),
    w = (b.sampleUntilSolution(), new Array(b.outputList.length));
  for (x = 0; x < b.outputList.length; x++) {
    var q = b.outputList[x];
    w[x] = {
      x: q.x,
      y: q.y,
      z: q.z,
    };
  }
  for (x = w.length - 1; x >= 0; x--)
    (w[x].x < 0 ||
      w[x].x > l ||
      w[x].y < 0 ||
      w[x].y > u ||
      w[x].z < 0 ||
      w[x].z > h) &&
      w.splice(x, 1);
  if (0 != R.length && s)
    for (x = 0; x < a.length; x++)
      for (var M = 0; M < w.length; M++) {
        if (t(R[x].x, R[x].y, R[x].z, w[M].x, w[M].y, w[M].z) < 10) {
          w.splice(M, 1);
          break;
        }
      }
  for (x = 0; x < w.length; x++) (w[x].x += v), (w[x].y += y), (w[x].z += T);
  null != e.directionalVec &&
    null != e.maxAngleFromDirVec &&
    (w = filterByDirectionalAngle(
      w,
      e.center,
      e.directionalVec,
      e.maxAngleFromDirVec
    )),
    null != e.borderSampleCount &&
      null != a &&
      (w = filterByAmorphousBorder(w, e.center, a, e.borderSampleCount, !1));
  var _ = new Array(),
    S = {
      x: o.x,
      y: 0,
      z: o.z,
    };
  for (x = 0; x < w.length; x++) {
    var C = {
        x: w[x].x,
        y: 0,
        z: w[x].z,
      },
      L = t(S.x, S.y, S.z, C.x, C.y, C.z);
    _.push({
      index: x,
      distance: L,
    });
  }
  _.sort(function (e, t) {
    return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
  });
  var A = new Array(w.length);
  for (x = 0; x < w.length; x++) A[x] = w[_[x].index];
  return A;
}
function filterByDirectionalAngle(e, t, i, r) {
  cloneVec(t).y = 0;
  for (var n = [], o = 0; o < e.length; o++) {
    angleBetweenVecs(i, subVecs(e[o], t)) < r && n.push(e[o]);
  }
  return n;
}
function filterByAmorphousBorder(e, t, i, r, n) {
  for (var o = 2 * Math.PI, a = new Array(e.length), s = 0; s < e.length; s++)
    a[s] = cloneVecXYZ(e[s]);
  var l = new Array(i.length);
  for (s = 0; s < i.length; s++) l[s] = cloneVecXYZ(i[s]);
  var h = vec3.create();
  for (s = 0; s < l.length; s++) vec3.add(h, h, l[s]);
  vec3.scale(h, h, 1 / l.length), (h[1] = 0);
  var c = o / r,
    u = new Array(r.length),
    p = [],
    d = [];
  for (s = 0; s < r; s++) {
    p.push([]);
    var f = s * c,
      m = vec3.fromValues(1, 0, 0),
      E = quat.create();
    quat.setAxisAngle(E, vec3.fromValues(0, 1, 0), f),
      vec3.transformQuat(m, m, E),
      d.push(m);
  }
  for (s = 0; s < l.length; s++) {
    var g = vec3.clone(l[s]);
    vec3.sub(g, g, h), (g.y = 0), vec3.normalize(g, g);
    for (var v = -1, y = 9999999999, T = 0; T < d.length; T++) {
      (q = vec3.distance(g, d[T])) < y && ((v = T), (y = q));
    }
    p[v].push(s);
  }
  for (s = 0; s < p.length; s++) {
    var R = -1,
      x = 0;
    for (T = 0; T < p[s].length; T++) {
      var H = l[(M = p[s][T])];
      (q = vec3.distance(h, H)) > x && ((R = M), (x = q));
    }
    u[s] = R;
  }
  var b = [],
    w = [];
  for (s = 0; s < a.length; s++) {
    g = vec3.create();
    vec3.sub(g, a[s], h), (g.y = 0), vec3.normalize(g, g);
    for (v = -1, y = 9999999999, T = 0; T < d.length; T++) {
      var q;
      (q = vec3.distance(g, d[T])) < y && ((v = T), (y = q));
    }
    var M,
      _ = l[(M = u[v])],
      S = vec3.distance(h, _),
      C = vec3.distance(h, a[s]),
      L = !1;
    !0 === n ? C < S && (L = !0) : C > S && (L = !0),
      L ? b.push(cloneVec3(a[s])) : w.push(cloneVec3(a[s]));
  }
  return b;
}
function cloneVec(e) {
  return {
    x: e.x,
    y: e.y,
    z: e.z,
  };
}
function cloneVecXYZ(e) {
  return vec3.fromValues(e.x, e.y, e.z);
}
function cloneVec3(e) {
  return {
    x: e[0],
    y: e[1],
    z: e[2],
  };
}
function angleBetweenVecs(e, t) {
  return Math.acos(dot(e, t) / (vecLength(e) * vecLength(t)));
}
function dot(e, t) {
  return e.x * t.x + e.y * t.y + e.z * t.z;
}
function subVecs(e, t) {
  return {
    x: e.x - t.x,
    y: e.y - t.y,
    z: e.z - t.z,
  };
}
function vecLength(e) {
  return Math.sqrt(e.x * e.x + e.y * e.y + e.z * e.z);
}
function lerp(e, t, i) {
  return e + i * (t - e);
}
function lerpVec3(e, t, i) {
  return new THREE.Vector3(
    lerp(e.x, t.x, i),
    lerp(e.y, t.y, i),
    lerp(e.z, t.z, i)
  );
}
function lerpColors(e, t, i) {
  var r = new THREE.Color();
  return r.setRGB(lerp(e.r, t.r, i), lerp(e.g, t.g, i), lerp(e.b, t.b, i)), r;
}
function map(e, t, i, r, n) {
  return r + ((e - t) / (i - t)) * (n - r);
}
function dist2D(e, t, i, r) {
  return Math.sqrt((i - e) * (i - e) + (r - t) * (r - t));
}
function dist3D(e, t, i, r, n, o) {
  return Math.sqrt((r - e) * (r - e) + (n - t) * (n - t) + (o - i) * (o - i));
}
function distVec3(e, t) {
  return dist3D(e.x, e.y, e.z, t.x, t.y, t.z);
}
function nthroot(e, t) {
  try {
    var i = t % 2 == 1 && e < 0;
    i && (e = -e);
    var r = Math.pow(e, 1 / t);
    if (((t = Math.pow(r, t)), Math.abs(e - t) < 1 && e > 0 == t > 0))
      return i ? -r : r;
  } catch (e) {}
}
function approx(e, t, i) {
  return e >= t - i && e <= t + i;
}
!(function (e) {
  function t(t) {
    var i = t || window.event,
      r = [].slice.call(arguments, 1),
      n = 0,
      o = 0,
      a = 0;
    return (
      ((t = e.event.fix(i)).type = "mousewheel"),
      i.wheelDelta && (n = i.wheelDelta / 120),
      i.detail && (n = -i.detail / 3),
      (a = n),
      void 0 !== i.axis &&
        i.axis === i.HORIZONTAL_AXIS &&
        ((a = 0), (o = -1 * n)),
      void 0 !== i.wheelDeltaY && (a = i.wheelDeltaY / 120),
      void 0 !== i.wheelDeltaX && (o = (-1 * i.wheelDeltaX) / 120),
      r.unshift(t, n, o, a),
      (e.event.dispatch || e.event.handle).apply(this, r)
    );
  }
  var i = ["DOMMouseScroll", "mousewheel"];
  if (e.event.fixHooks)
    for (var r = i.length; r; ) e.event.fixHooks[i[--r]] = e.event.mouseHooks;
  (e.event.special.mousewheel = {
    setup: function () {
      if (this.addEventListener)
        for (var e = i.length; e; ) this.addEventListener(i[--e], t, !1);
      else this.onmousewheel = t;
    },
    teardown: function () {
      if (this.removeEventListener)
        for (var e = i.length; e; ) this.removeEventListener(i[--e], t, !1);
      else this.onmousewheel = null;
    },
  }),
    e.fn.extend({
      mousewheel: function (e) {
        console.log(e);
        return e ? this.bind("mousewheel", e) : this.trigger("mousewheel");
      },
      unmousewheel: function (e) {
        return this.unbind("mousewheel", e);
      },
    });
})(jQuery),
  (function (e, t) {
    function i(t, i) {
      var n,
        o,
        a,
        s = t.nodeName.toLowerCase();
      return "area" === s
        ? ((o = (n = t.parentNode).name),
          !(!t.href || !o || "map" !== n.nodeName.toLowerCase()) &&
            !!(a = e("img[usemap=#" + o + "]")[0]) &&
            r(a))
        : (/input|select|textarea|button|object/.test(s)
            ? !t.disabled
            : ("a" === s && t.href) || i) && r(t);
    }
    function r(t) {
      return (
        e.expr.filters.visible(t) &&
        !e(t)
          .parents()
          .addBack()
          .filter(function () {
            return "hidden" === e.css(this, "visibility");
          }).length
      );
    }
    var n = 0,
      o = /^ui-id-\d+$/;
    (e.ui = e.ui || {}),
      e.ui.version ||
        (e.extend(e.ui, {
          version: "1.10.0",
          keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38,
          },
        }),
        e.fn.extend({
          _focus: e.fn.focus,
          focus: function (t, i) {
            return "number" == typeof t
              ? this.each(function () {
                  var r = this;
                  setTimeout(function () {
                    e(r).focus(), i && i.call(r);
                  }, t);
                })
              : this._focus.apply(this, arguments);
          },
          scrollParent: function () {
            var t;
            return (
              (t =
                (e.ui.ie && /(static|relative)/.test(this.css("position"))) ||
                /absolute/.test(this.css("position"))
                  ? this.parents()
                      .filter(function () {
                        return (
                          /(relative|absolute|fixed)/.test(
                            e.css(this, "position")
                          ) &&
                          /(auto|scroll)/.test(
                            e.css(this, "overflow") +
                              e.css(this, "overflow-y") +
                              e.css(this, "overflow-x")
                          )
                        );
                      })
                      .eq(0)
                  : this.parents()
                      .filter(function () {
                        return /(auto|scroll)/.test(
                          e.css(this, "overflow") +
                            e.css(this, "overflow-y") +
                            e.css(this, "overflow-x")
                        );
                      })
                      .eq(0)),
              /fixed/.test(this.css("position")) || !t.length ? e(document) : t
            );
          },
          zIndex: function (i) {
            if (i !== t) return this.css("zIndex", i);
            if (this.length)
              for (var r, n, o = e(this[0]); o.length && o[0] !== document; ) {
                if (
                  ("absolute" === (r = o.css("position")) ||
                    "relative" === r ||
                    "fixed" === r) &&
                  ((n = parseInt(o.css("zIndex"), 10)), !isNaN(n) && 0 !== n)
                )
                  return n;
                o = o.parent();
              }
            return 0;
          },
          uniqueId: function () {
            return this.each(function () {
              this.id || (this.id = "ui-id-" + ++n);
            });
          },
          removeUniqueId: function () {
            return this.each(function () {
              o.test(this.id) && e(this).removeAttr("id");
            });
          },
        }),
        e.extend(e.expr[":"], {
          data: e.expr.createPseudo
            ? e.expr.createPseudo(function (t) {
                return function (i) {
                  return !!e.data(i, t);
                };
              })
            : function (t, i, r) {
                return !!e.data(t, r[3]);
              },
          focusable: function (t) {
            return i(t, !isNaN(e.attr(t, "tabindex")));
          },
          tabbable: function (t) {
            var r = e.attr(t, "tabindex"),
              n = isNaN(r);
            return (n || r >= 0) && i(t, !n);
          },
        }),
        e("<a>").outerWidth(1).jquery ||
          e.each(["Width", "Height"], function (i, r) {
            function n(t, i, r, n) {
              return (
                e.each(o, function () {
                  (i -= parseFloat(e.css(t, "padding" + this)) || 0),
                    r &&
                      (i -=
                        parseFloat(e.css(t, "border" + this + "Width")) || 0),
                    n && (i -= parseFloat(e.css(t, "margin" + this)) || 0);
                }),
                i
              );
            }
            var o = "Width" === r ? ["Left", "Right"] : ["Top", "Bottom"],
              a = r.toLowerCase(),
              s = {
                innerWidth: e.fn.innerWidth,
                innerHeight: e.fn.innerHeight,
                outerWidth: e.fn.outerWidth,
                outerHeight: e.fn.outerHeight,
              };
            (e.fn["inner" + r] = function (i) {
              return i === t
                ? s["inner" + r].call(this)
                : this.each(function () {
                    e(this).css(a, n(this, i) + "px");
                  });
            }),
              (e.fn["outer" + r] = function (t, i) {
                return "number" != typeof t
                  ? s["outer" + r].call(this, t)
                  : this.each(function () {
                      e(this).css(a, n(this, t, !0, i) + "px");
                    });
              });
          }),
        e.fn.addBack ||
          (e.fn.addBack = function (e) {
            return this.add(
              null == e ? this.prevObject : this.prevObject.filter(e)
            );
          }),
        e("<a>").data("a-b", "a").removeData("a-b").data("a-b") &&
          (e.fn.removeData = (function (t) {
            return function (i) {
              return arguments.length
                ? t.call(this, e.camelCase(i))
                : t.call(this);
            };
          })(e.fn.removeData)),
        (e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())),
        (e.support.selectstart =
          "onselectstart" in document.createElement("div")),
        e.fn.extend({
          disableSelection: function () {
            return this.bind(
              (e.support.selectstart ? "selectstart" : "mousedown") +
                ".ui-disableSelection",
              function (e) {
                e.preventDefault();
              }
            );
          },
          enableSelection: function () {
            return this.unbind(".ui-disableSelection");
          },
        }),
        e.extend(e.ui, {
          plugin: {
            add: function (t, i, r) {
              var n,
                o = e.ui[t].prototype;
              for (n in r)
                (o.plugins[n] = o.plugins[n] || []),
                  o.plugins[n].push([i, r[n]]);
            },
            call: function (e, t, i) {
              var r,
                n = e.plugins[t];
              if (
                n &&
                e.element[0].parentNode &&
                11 !== e.element[0].parentNode.nodeType
              )
                for (r = 0; r < n.length; r++)
                  e.options[n[r][0]] && n[r][1].apply(e.element, i);
            },
          },
          hasScroll: function (t, i) {
            if ("hidden" === e(t).css("overflow")) return !1;
            var r = i && "left" === i ? "scrollLeft" : "scrollTop",
              n = !1;
            return t[r] > 0 || ((t[r] = 1), (n = t[r] > 0), (t[r] = 0), n);
          },
        }));
  })(jQuery),
  (function (e, t) {
    var i = 0,
      r = Array.prototype.slice,
      n = e.cleanData;
    (e.cleanData = function (t) {
      for (var i, r = 0; null != (i = t[r]); r++)
        try {
          e(i).triggerHandler("remove");
        } catch (e) {}
      n(t);
    }),
      (e.widget = function (t, i, r) {
        var n,
          o,
          a,
          s,
          l = {},
          h = t.split(".")[0];
        (t = t.split(".")[1]),
          (n = h + "-" + t),
          r || ((r = i), (i = e.Widget)),
          (e.expr[":"][n.toLowerCase()] = function (t) {
            return !!e.data(t, n);
          }),
          (e[h] = e[h] || {}),
          (o = e[h][t]),
          (a = e[h][t] =
            function (e, t) {
              if (!this._createWidget) return new a(e, t);
              arguments.length && this._createWidget(e, t);
            }),
          e.extend(a, o, {
            version: r.version,
            _proto: e.extend({}, r),
            _childConstructors: [],
          }),
          ((s = new i()).options = e.widget.extend({}, s.options)),
          e.each(r, function (t, r) {
            e.isFunction(r)
              ? (l[t] = (function () {
                  var e = function () {
                      return i.prototype[t].apply(this, arguments);
                    },
                    n = function (e) {
                      return i.prototype[t].apply(this, e);
                    };
                  return function () {
                    var t,
                      i = this._super,
                      o = this._superApply;
                    return (
                      (this._super = e),
                      (this._superApply = n),
                      (t = r.apply(this, arguments)),
                      (this._super = i),
                      (this._superApply = o),
                      t
                    );
                  };
                })())
              : (l[t] = r);
          }),
          (a.prototype = e.widget.extend(
            s,
            {
              widgetEventPrefix: o ? s.widgetEventPrefix : t,
            },
            l,
            {
              constructor: a,
              namespace: h,
              widgetName: t,
              widgetFullName: n,
            }
          )),
          o
            ? (e.each(o._childConstructors, function (t, i) {
                var r = i.prototype;
                e.widget(r.namespace + "." + r.widgetName, a, i._proto);
              }),
              delete o._childConstructors)
            : i._childConstructors.push(a),
          e.widget.bridge(t, a);
      }),
      (e.widget.extend = function (i) {
        for (
          var n, o, a = r.call(arguments, 1), s = 0, l = a.length;
          s < l;
          s++
        )
          for (n in a[s])
            (o = a[s][n]),
              a[s].hasOwnProperty(n) &&
                o !== t &&
                (e.isPlainObject(o)
                  ? (i[n] = e.isPlainObject(i[n])
                      ? e.widget.extend({}, i[n], o)
                      : e.widget.extend({}, o))
                  : (i[n] = o));
        return i;
      }),
      (e.widget.bridge = function (i, n) {
        var o = n.prototype.widgetFullName || i;
        e.fn[i] = function (a) {
          var s = "string" == typeof a,
            l = r.call(arguments, 1),
            h = this;
          return (
            (a =
              !s && l.length ? e.widget.extend.apply(null, [a].concat(l)) : a),
            s
              ? this.each(function () {
                  var r,
                    n = e.data(this, o);
                  return n
                    ? e.isFunction(n[a]) && "_" !== a.charAt(0)
                      ? (r = n[a].apply(n, l)) !== n && r !== t
                        ? ((h = r && r.jquery ? h.pushStack(r.get()) : r), !1)
                        : void 0
                      : e.error(
                          "no such method '" +
                            a +
                            "' for " +
                            i +
                            " widget instance"
                        )
                    : e.error(
                        "cannot call methods on " +
                          i +
                          " prior to initialization; attempted to call method '" +
                          a +
                          "'"
                      );
                })
              : this.each(function () {
                  var t = e.data(this, o);
                  t
                    ? t.option(a || {})._init()
                    : e.data(this, o, new n(a, this));
                }),
            h
          );
        };
      }),
      (e.Widget = function () {}),
      (e.Widget._childConstructors = []),
      (e.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
          disabled: !1,
          create: null,
        },
        _createWidget: function (t, r) {
          (r = e(r || this.defaultElement || this)[0]),
            (this.element = e(r)),
            (this.uuid = i++),
            (this.eventNamespace = "." + this.widgetName + this.uuid),
            (this.options = e.widget.extend(
              {},
              this.options,
              this._getCreateOptions(),
              t
            )),
            (this.bindings = e()),
            (this.hoverable = e()),
            (this.focusable = e()),
            r !== this &&
              (e.data(r, this.widgetFullName, this),
              this._on(!0, this.element, {
                remove: function (e) {
                  e.target === r && this.destroy();
                },
              }),
              (this.document = e(r.style ? r.ownerDocument : r.document || r)),
              (this.window = e(
                this.document[0].defaultView || this.document[0].parentWindow
              ))),
            this._create(),
            this._trigger("create", null, this._getCreateEventData()),
            this._init();
        },
        _getCreateOptions: e.noop,
        _getCreateEventData: e.noop,
        _create: e.noop,
        _init: e.noop,
        destroy: function () {
          this._destroy(),
            this.element
              .unbind(this.eventNamespace)
              .removeData(this.widgetName)
              .removeData(this.widgetFullName)
              .removeData(e.camelCase(this.widgetFullName)),
            this.widget()
              .unbind(this.eventNamespace)
              .removeAttr("aria-disabled")
              .removeClass(this.widgetFullName + "-disabled ui-state-disabled"),
            this.bindings.unbind(this.eventNamespace),
            this.hoverable.removeClass("ui-state-hover"),
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: e.noop,
        widget: function () {
          return this.element;
        },
        option: function (i, r) {
          var n,
            o,
            a,
            s = i;
          if (0 === arguments.length) return e.widget.extend({}, this.options);
          if ("string" == typeof i)
            if (((s = {}), (n = i.split(".")), (i = n.shift()), n.length)) {
              for (
                o = s[i] = e.widget.extend({}, this.options[i]), a = 0;
                a < n.length - 1;
                a++
              )
                (o[n[a]] = o[n[a]] || {}), (o = o[n[a]]);
              if (((i = n.pop()), r === t)) return o[i] === t ? null : o[i];
              o[i] = r;
            } else {
              if (r === t)
                return this.options[i] === t ? null : this.options[i];
              s[i] = r;
            }
          return this._setOptions(s), this;
        },
        _setOptions: function (e) {
          var t;
          for (t in e) this._setOption(t, e[t]);
          return this;
        },
        _setOption: function (e, t) {
          return (
            (this.options[e] = t),
            "disabled" === e &&
              (this.widget()
                .toggleClass(
                  this.widgetFullName + "-disabled ui-state-disabled",
                  !!t
                )
                .attr("aria-disabled", t),
              this.hoverable.removeClass("ui-state-hover"),
              this.focusable.removeClass("ui-state-focus")),
            this
          );
        },
        enable: function () {
          return this._setOption("disabled", !1);
        },
        disable: function () {
          return this._setOption("disabled", !0);
        },
        _on: function (t, i, r) {
          var n,
            o = this;
          "boolean" != typeof t && ((r = i), (i = t), (t = !1)),
            r
              ? ((i = n = e(i)), (this.bindings = this.bindings.add(i)))
              : ((r = i), (i = this.element), (n = this.widget())),
            e.each(r, function (r, a) {
              function s() {
                if (
                  t ||
                  (!0 !== o.options.disabled &&
                    !e(this).hasClass("ui-state-disabled"))
                )
                  return ("string" == typeof a ? o[a] : a).apply(o, arguments);
              }
              "string" != typeof a &&
                (s.guid = a.guid = a.guid || s.guid || e.guid++);
              var l = r.match(/^(\w+)\s*(.*)$/),
                h = l[1] + o.eventNamespace,
                c = l[2];
              c ? n.delegate(c, h, s) : i.bind(h, s);
            });
        },
        _off: function (e, t) {
          (t =
            (t || "").split(" ").join(this.eventNamespace + " ") +
            this.eventNamespace),
            e.unbind(t).undelegate(t);
        },
        _delay: function (e, t) {
          function i() {
            return ("string" == typeof e ? r[e] : e).apply(r, arguments);
          }
          var r = this;
          return setTimeout(i, t || 0);
        },
        _hoverable: function (t) {
          (this.hoverable = this.hoverable.add(t)),
            this._on(t, {
              mouseenter: function (t) {
                e(t.currentTarget).addClass("ui-state-hover");
              },
              mouseleave: function (t) {
                e(t.currentTarget).removeClass("ui-state-hover");
              },
            });
        },
        _focusable: function (t) {
          (this.focusable = this.focusable.add(t)),
            this._on(t, {
              focusin: function (t) {
                e(t.currentTarget).addClass("ui-state-focus");
              },
              focusout: function (t) {
                e(t.currentTarget).removeClass("ui-state-focus");
              },
            });
        },
        _trigger: function (t, i, r) {
          var n,
            o,
            a = this.options[t];
          if (
            ((r = r || {}),
            ((i = e.Event(i)).type = (
              t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t
            ).toLowerCase()),
            (i.target = this.element[0]),
            (o = i.originalEvent))
          )
            for (n in o) n in i || (i[n] = o[n]);
          return (
            this.element.trigger(i, r),
            !(
              (e.isFunction(a) &&
                !1 === a.apply(this.element[0], [i].concat(r))) ||
              i.isDefaultPrevented()
            )
          );
        },
      }),
      e.each(
        {
          show: "fadeIn",
          hide: "fadeOut",
        },
        function (t, i) {
          e.Widget.prototype["_" + t] = function (r, n, o) {
            "string" == typeof n &&
              (n = {
                effect: n,
              });
            var a,
              s = n
                ? !0 === n || "number" == typeof n
                  ? i
                  : n.effect || i
                : t;
            "number" == typeof (n = n || {}) &&
              (n = {
                duration: n,
              }),
              (a = !e.isEmptyObject(n)),
              (n.complete = o),
              n.delay && r.delay(n.delay),
              a && e.effects && e.effects.effect[s]
                ? r[t](n)
                : s !== t && r[s]
                ? r[s](n.duration, n.easing, o)
                : r.queue(function (i) {
                    e(this)[t](), o && o.call(r[0]), i();
                  });
          };
        }
      );
  })(jQuery),
  (function (e) {
    var t = !1;
    e(document).mouseup(function () {
      t = !1;
    }),
      e.widget("ui.mouse", {
        version: "1.10.0",
        options: {
          cancel: "input,textarea,button,select,option",
          distance: 1,
          delay: 0,
        },
        _mouseInit: function () {
          var t = this;
          this.element
            .bind("mousedown." + this.widgetName, function (e) {
              return t._mouseDown(e);
            })
            .bind("click." + this.widgetName, function (i) {
              if (!0 === e.data(i.target, t.widgetName + ".preventClickEvent"))
                return (
                  e.removeData(i.target, t.widgetName + ".preventClickEvent"),
                  i.stopImmediatePropagation(),
                  !1
                );
            }),
            (this.started = !1);
        },
        _mouseDestroy: function () {
          this.element.unbind("." + this.widgetName),
            this._mouseMoveDelegate &&
              e(document)
                .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
                .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        _mouseDown: function (i) {
          if (!t) {
            this._mouseStarted && this._mouseUp(i), (this._mouseDownEvent = i);
            var r = this,
              n = 1 === i.which,
              o =
                !(
                  "string" != typeof this.options.cancel || !i.target.nodeName
                ) && e(i.target).closest(this.options.cancel).length;
            return (
              !(n && !o && this._mouseCapture(i)) ||
              ((this.mouseDelayMet = !this.options.delay),
              this.mouseDelayMet ||
                (this._mouseDelayTimer = setTimeout(function () {
                  r.mouseDelayMet = !0;
                }, this.options.delay)),
              this._mouseDistanceMet(i) &&
              this._mouseDelayMet(i) &&
              ((this._mouseStarted = !1 !== this._mouseStart(i)),
              !this._mouseStarted)
                ? (i.preventDefault(), !0)
                : (!0 ===
                    e.data(i.target, this.widgetName + ".preventClickEvent") &&
                    e.removeData(
                      i.target,
                      this.widgetName + ".preventClickEvent"
                    ),
                  (this._mouseMoveDelegate = function (e) {
                    return r._mouseMove(e);
                  }),
                  (this._mouseUpDelegate = function (e) {
                    return r._mouseUp(e);
                  }),
                  e(document)
                    .bind(
                      "mousemove." + this.widgetName,
                      this._mouseMoveDelegate
                    )
                    .bind("mouseup." + this.widgetName, this._mouseUpDelegate),
                  i.preventDefault(),
                  (t = !0),
                  !0))
            );
          }
        },
        _mouseMove: function (t) {
          return e.ui.ie &&
            (!document.documentMode || document.documentMode < 9) &&
            !t.button
            ? this._mouseUp(t)
            : this._mouseStarted
            ? (this._mouseDrag(t), t.preventDefault())
            : (this._mouseDistanceMet(t) &&
                this._mouseDelayMet(t) &&
                ((this._mouseStarted =
                  !1 !== this._mouseStart(this._mouseDownEvent, t)),
                this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)),
              !this._mouseStarted);
        },
        _mouseUp: function (t) {
          return (
            e(document)
              .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
              .unbind("mouseup." + this.widgetName, this._mouseUpDelegate),
            this._mouseStarted &&
              ((this._mouseStarted = !1),
              t.target === this._mouseDownEvent.target &&
                e.data(t.target, this.widgetName + ".preventClickEvent", !0),
              this._mouseStop(t)),
            !1
          );
        },
        _mouseDistanceMet: function (e) {
          return (
            Math.max(
              Math.abs(this._mouseDownEvent.pageX - e.pageX),
              Math.abs(this._mouseDownEvent.pageY - e.pageY)
            ) >= this.options.distance
          );
        },
        _mouseDelayMet: function () {
          return this.mouseDelayMet;
        },
        _mouseStart: function () {},
        _mouseDrag: function () {},
        _mouseStop: function () {},
        _mouseCapture: function () {
          return !0;
        },
      });
  })(jQuery),
  (function (e, t) {
    function i(e, t, i) {
      return [
        parseInt(e[0], 10) * (d.test(e[0]) ? t / 100 : 1),
        parseInt(e[1], 10) * (d.test(e[1]) ? i / 100 : 1),
      ];
    }
    function r(t, i) {
      return parseInt(e.css(t, i), 10) || 0;
    }
    function n(t) {
      var i = t[0];
      return 9 === i.nodeType
        ? {
            width: t.width(),
            height: t.height(),
            offset: {
              top: 0,
              left: 0,
            },
          }
        : e.isWindow(i)
        ? {
            width: t.width(),
            height: t.height(),
            offset: {
              top: t.scrollTop(),
              left: t.scrollLeft(),
            },
          }
        : i.preventDefault
        ? {
            width: 0,
            height: 0,
            offset: {
              top: i.pageY,
              left: i.pageX,
            },
          }
        : {
            width: t.outerWidth(),
            height: t.outerHeight(),
            offset: t.offset(),
          };
    }
    e.ui = e.ui || {};
    var o,
      a = Math.max,
      s = Math.abs,
      l = Math.round,
      h = /left|center|right/,
      c = /top|center|bottom/,
      u = /[\+\-]\d+%?/,
      p = /^\w+/,
      d = /%$/,
      f = e.fn.position;
    (e.position = {
      scrollbarWidth: function () {
        if (o !== t) return o;
        var i,
          r,
          n = e(
            "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"
          ),
          a = n.children()[0];
        return (
          e("body").append(n),
          (i = a.offsetWidth),
          n.css("overflow", "scroll"),
          i === (r = a.offsetWidth) && (r = n[0].clientWidth),
          n.remove(),
          (o = i - r)
        );
      },
      getScrollInfo: function (t) {
        var i = t.isWindow ? "" : t.element.css("overflow-x"),
          r = t.isWindow ? "" : t.element.css("overflow-y"),
          n =
            "scroll" === i ||
            ("auto" === i && t.width < t.element[0].scrollWidth),
          o =
            "scroll" === r ||
            ("auto" === r && t.height < t.element[0].scrollHeight);
        return {
          width: n ? e.position.scrollbarWidth() : 0,
          height: o ? e.position.scrollbarWidth() : 0,
        };
      },
      getWithinInfo: function (t) {
        var i = e(t || window),
          r = e.isWindow(i[0]);
        return {
          element: i,
          isWindow: r,
          offset: i.offset() || {
            left: 0,
            top: 0,
          },
          scrollLeft: i.scrollLeft(),
          scrollTop: i.scrollTop(),
          width: r ? i.width() : i.outerWidth(),
          height: r ? i.height() : i.outerHeight(),
        };
      },
    }),
      (e.fn.position = function (t) {
        if (!t || !t.of) return f.apply(this, arguments);
        t = e.extend({}, t);
        var o,
          d,
          m,
          E,
          g,
          v,
          y = e(t.of),
          T = e.position.getWithinInfo(t.within),
          R = e.position.getScrollInfo(T),
          x = (t.collision || "flip").split(" "),
          H = {};
        return (
          (v = n(y)),
          y[0].preventDefault && (t.at = "left top"),
          (d = v.width),
          (m = v.height),
          (E = v.offset),
          (g = e.extend({}, E)),
          e.each(["my", "at"], function () {
            var e,
              i,
              r = (t[this] || "").split(" ");
            1 === r.length &&
              (r = h.test(r[0])
                ? r.concat(["center"])
                : c.test(r[0])
                ? ["center"].concat(r)
                : ["center", "center"]),
              (r[0] = h.test(r[0]) ? r[0] : "center"),
              (r[1] = c.test(r[1]) ? r[1] : "center"),
              (e = u.exec(r[0])),
              (i = u.exec(r[1])),
              (H[this] = [e ? e[0] : 0, i ? i[0] : 0]),
              (t[this] = [p.exec(r[0])[0], p.exec(r[1])[0]]);
          }),
          1 === x.length && (x[1] = x[0]),
          "right" === t.at[0]
            ? (g.left += d)
            : "center" === t.at[0] && (g.left += d / 2),
          "bottom" === t.at[1]
            ? (g.top += m)
            : "center" === t.at[1] && (g.top += m / 2),
          (o = i(H.at, d, m)),
          (g.left += o[0]),
          (g.top += o[1]),
          this.each(function () {
            var n,
              h,
              c = e(this),
              u = c.outerWidth(),
              p = c.outerHeight(),
              f = r(this, "marginLeft"),
              v = r(this, "marginTop"),
              b = u + f + r(this, "marginRight") + R.width,
              w = p + v + r(this, "marginBottom") + R.height,
              q = e.extend({}, g),
              M = i(H.my, c.outerWidth(), c.outerHeight());
            "right" === t.my[0]
              ? (q.left -= u)
              : "center" === t.my[0] && (q.left -= u / 2),
              "bottom" === t.my[1]
                ? (q.top -= p)
                : "center" === t.my[1] && (q.top -= p / 2),
              (q.left += M[0]),
              (q.top += M[1]),
              e.support.offsetFractions ||
                ((q.left = l(q.left)), (q.top = l(q.top))),
              (n = {
                marginLeft: f,
                marginTop: v,
              }),
              e.each(["left", "top"], function (i, r) {
                e.ui.position[x[i]] &&
                  e.ui.position[x[i]][r](q, {
                    targetWidth: d,
                    targetHeight: m,
                    elemWidth: u,
                    elemHeight: p,
                    collisionPosition: n,
                    collisionWidth: b,
                    collisionHeight: w,
                    offset: [o[0] + M[0], o[1] + M[1]],
                    my: t.my,
                    at: t.at,
                    within: T,
                    elem: c,
                  });
              }),
              t.using &&
                (h = function (e) {
                  var i = E.left - q.left,
                    r = i + d - u,
                    n = E.top - q.top,
                    o = n + m - p,
                    l = {
                      target: {
                        element: y,
                        left: E.left,
                        top: E.top,
                        width: d,
                        height: m,
                      },
                      element: {
                        element: c,
                        left: q.left,
                        top: q.top,
                        width: u,
                        height: p,
                      },
                      horizontal: r < 0 ? "left" : i > 0 ? "right" : "center",
                      vertical: o < 0 ? "top" : n > 0 ? "bottom" : "middle",
                    };
                  d < u && s(i + r) < d && (l.horizontal = "center"),
                    m < p && s(n + o) < m && (l.vertical = "middle"),
                    a(s(i), s(r)) > a(s(n), s(o))
                      ? (l.important = "horizontal")
                      : (l.important = "vertical"),
                    t.using.call(this, e, l);
                }),
              c.offset(
                e.extend(q, {
                  using: h,
                })
              );
          })
        );
      }),
      (e.ui.position = {
        fit: {
          left: function (e, t) {
            var i,
              r = t.within,
              n = r.isWindow ? r.scrollLeft : r.offset.left,
              o = r.width,
              s = e.left - t.collisionPosition.marginLeft,
              l = n - s,
              h = s + t.collisionWidth - o - n;
            t.collisionWidth > o
              ? l > 0 && h <= 0
                ? ((i = e.left + l + t.collisionWidth - o - n),
                  (e.left += l - i))
                : (e.left =
                    h > 0 && l <= 0 ? n : l > h ? n + o - t.collisionWidth : n)
              : l > 0
              ? (e.left += l)
              : h > 0
              ? (e.left -= h)
              : (e.left = a(e.left - s, e.left));
          },
          top: function (e, t) {
            var i,
              r = t.within,
              n = r.isWindow ? r.scrollTop : r.offset.top,
              o = t.within.height,
              s = e.top - t.collisionPosition.marginTop,
              l = n - s,
              h = s + t.collisionHeight - o - n;
            t.collisionHeight > o
              ? l > 0 && h <= 0
                ? ((i = e.top + l + t.collisionHeight - o - n),
                  (e.top += l - i))
                : (e.top =
                    h > 0 && l <= 0 ? n : l > h ? n + o - t.collisionHeight : n)
              : l > 0
              ? (e.top += l)
              : h > 0
              ? (e.top -= h)
              : (e.top = a(e.top - s, e.top));
          },
        },
        flip: {
          left: function (e, t) {
            var i,
              r,
              n = t.within,
              o = n.offset.left + n.scrollLeft,
              a = n.width,
              l = n.isWindow ? n.scrollLeft : n.offset.left,
              h = e.left - t.collisionPosition.marginLeft,
              c = h - l,
              u = h + t.collisionWidth - a - l,
              p =
                "left" === t.my[0]
                  ? -t.elemWidth
                  : "right" === t.my[0]
                  ? t.elemWidth
                  : 0,
              d =
                "left" === t.at[0]
                  ? t.targetWidth
                  : "right" === t.at[0]
                  ? -t.targetWidth
                  : 0,
              f = -2 * t.offset[0];
            c < 0
              ? ((i = e.left + p + d + f + t.collisionWidth - a - o) < 0 ||
                  i < s(c)) &&
                (e.left += p + d + f)
              : u > 0 &&
                ((r = e.left - t.collisionPosition.marginLeft + p + d + f - l) >
                  0 ||
                  s(r) < u) &&
                (e.left += p + d + f);
          },
          top: function (e, t) {
            var i,
              r,
              n = t.within,
              o = n.offset.top + n.scrollTop,
              a = n.height,
              l = n.isWindow ? n.scrollTop : n.offset.top,
              h = e.top - t.collisionPosition.marginTop,
              c = h - l,
              u = h + t.collisionHeight - a - l,
              p =
                "top" === t.my[1]
                  ? -t.elemHeight
                  : "bottom" === t.my[1]
                  ? t.elemHeight
                  : 0,
              d =
                "top" === t.at[1]
                  ? t.targetHeight
                  : "bottom" === t.at[1]
                  ? -t.targetHeight
                  : 0,
              f = -2 * t.offset[1];
            c < 0
              ? ((r = e.top + p + d + f + t.collisionHeight - a - o),
                e.top + p + d + f > c &&
                  (r < 0 || r < s(c)) &&
                  (e.top += p + d + f))
              : u > 0 &&
                ((i = e.top - t.collisionPosition.marginTop + p + d + f - l),
                e.top + p + d + f > u &&
                  (i > 0 || s(i) < u) &&
                  (e.top += p + d + f));
          },
        },
        flipfit: {
          left: function () {
            e.ui.position.flip.left.apply(this, arguments),
              e.ui.position.fit.left.apply(this, arguments);
          },
          top: function () {
            e.ui.position.flip.top.apply(this, arguments),
              e.ui.position.fit.top.apply(this, arguments);
          },
        },
      }),
      (function () {
        var t,
          i,
          r,
          n,
          o,
          a = document.getElementsByTagName("body")[0],
          s = document.createElement("div");
        for (o in ((t = document.createElement(a ? "div" : "body")),
        (r = {
          visibility: "hidden",
          width: 0,
          height: 0,
          border: 0,
          margin: 0,
          background: "none",
        }),
        a &&
          e.extend(r, {
            position: "absolute",
            left: "-1000px",
            top: "-1000px",
          }),
        r))
          t.style[o] = r[o];
        t.appendChild(s),
          (i = a || document.documentElement).insertBefore(t, i.firstChild),
          (s.style.cssText = "position: absolute; left: 10.7432222px;"),
          (n = e(s).offset().left),
          (e.support.offsetFractions = n > 10 && n < 11),
          (t.innerHTML = ""),
          i.removeChild(t);
      })();
  })(jQuery),
  jQuery.effects ||
    (function (e, t) {
      var i = "ui-effects-";
      (e.effects = {
        effect: {},
      }),
        (function (e, t) {
          function i(e, t, i) {
            var r = u[t.type] || {};
            return null == e
              ? i || !t.def
                ? null
                : t.def
              : ((e = r.floor ? ~~e : parseFloat(e)),
                isNaN(e)
                  ? t.def
                  : r.mod
                  ? (e + r.mod) % r.mod
                  : 0 > e
                  ? 0
                  : r.max < e
                  ? r.max
                  : e);
          }
          function r(t) {
            var i = h(),
              r = (i._rgba = []);
            return (
              (t = t.toLowerCase()),
              f(l, function (e, n) {
                var o,
                  a = n.re.exec(t),
                  s = a && n.parse(a),
                  l = n.space || "rgba";
                if (s)
                  return (
                    (o = i[l](s)),
                    (i[c[l].cache] = o[c[l].cache]),
                    (r = i._rgba = o._rgba),
                    !1
                  );
              }),
              r.length
                ? ("0,0,0,0" === r.join() && e.extend(r, o.transparent), i)
                : o[t]
            );
          }
          function n(e, t, i) {
            return 6 * (i = (i + 1) % 1) < 1
              ? e + (t - e) * i * 6
              : 2 * i < 1
              ? t
              : 3 * i < 2
              ? e + (t - e) * (2 / 3 - i) * 6
              : e;
          }
          var o,
            a =
              "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
            s = /^([\-+])=\s*(\d+\.?\d*)/,
            l = [
              {
                re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function (e) {
                  return [e[1], e[2], e[3], e[4]];
                },
              },
              {
                re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function (e) {
                  return [2.55 * e[1], 2.55 * e[2], 2.55 * e[3], e[4]];
                },
              },
              {
                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                parse: function (e) {
                  return [
                    parseInt(e[1], 16),
                    parseInt(e[2], 16),
                    parseInt(e[3], 16),
                  ];
                },
              },
              {
                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                parse: function (e) {
                  return [
                    parseInt(e[1] + e[1], 16),
                    parseInt(e[2] + e[2], 16),
                    parseInt(e[3] + e[3], 16),
                  ];
                },
              },
              {
                re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                space: "hsla",
                parse: function (e) {
                  return [e[1], e[2] / 100, e[3] / 100, e[4]];
                },
              },
            ],
            h = (e.Color = function (t, i, r, n) {
              return new e.Color.fn.parse(t, i, r, n);
            }),
            c = {
              rgba: {
                props: {
                  red: {
                    idx: 0,
                    type: "byte",
                  },
                  green: {
                    idx: 1,
                    type: "byte",
                  },
                  blue: {
                    idx: 2,
                    type: "byte",
                  },
                },
              },
              hsla: {
                props: {
                  hue: {
                    idx: 0,
                    type: "degrees",
                  },
                  saturation: {
                    idx: 1,
                    type: "percent",
                  },
                  lightness: {
                    idx: 2,
                    type: "percent",
                  },
                },
              },
            },
            u = {
              byte: {
                floor: !0,
                max: 255,
              },
              percent: {
                max: 1,
              },
              degrees: {
                mod: 360,
                floor: !0,
              },
            },
            p = (h.support = {}),
            d = e("<p>")[0],
            f = e.each;
          (d.style.cssText = "background-color:rgba(1,1,1,.5)"),
            (p.rgba = d.style.backgroundColor.indexOf("rgba") > -1),
            f(c, function (e, t) {
              (t.cache = "_" + e),
                (t.props.alpha = {
                  idx: 3,
                  type: "percent",
                  def: 1,
                });
            }),
            (h.fn = e.extend(h.prototype, {
              parse: function (n, a, s, l) {
                if (n === t)
                  return (this._rgba = [null, null, null, null]), this;
                (n.jquery || n.nodeType) && ((n = e(n).css(a)), (a = t));
                var u = this,
                  p = e.type(n),
                  d = (this._rgba = []);
                return (
                  a !== t && ((n = [n, a, s, l]), (p = "array")),
                  "string" === p
                    ? this.parse(r(n) || o._default)
                    : "array" === p
                    ? (f(c.rgba.props, function (e, t) {
                        d[t.idx] = i(n[t.idx], t);
                      }),
                      this)
                    : "object" === p
                    ? (f(
                        c,
                        n instanceof h
                          ? function (e, t) {
                              n[t.cache] && (u[t.cache] = n[t.cache].slice());
                            }
                          : function (t, r) {
                              var o = r.cache;
                              f(r.props, function (e, t) {
                                if (!u[o] && r.to) {
                                  if ("alpha" === e || null == n[e]) return;
                                  u[o] = r.to(u._rgba);
                                }
                                u[o][t.idx] = i(n[e], t, !0);
                              }),
                                u[o] &&
                                  e.inArray(null, u[o].slice(0, 3)) < 0 &&
                                  ((u[o][3] = 1),
                                  r.from && (u._rgba = r.from(u[o])));
                            }
                      ),
                      this)
                    : void 0
                );
              },
              is: function (e) {
                var t = h(e),
                  i = !0,
                  r = this;
                return (
                  f(c, function (e, n) {
                    var o,
                      a = t[n.cache];
                    return (
                      a &&
                        ((o = r[n.cache] || (n.to && n.to(r._rgba)) || []),
                        f(n.props, function (e, t) {
                          if (null != a[t.idx])
                            return (i = a[t.idx] === o[t.idx]);
                        })),
                      i
                    );
                  }),
                  i
                );
              },
              _space: function () {
                var e = [],
                  t = this;
                return (
                  f(c, function (i, r) {
                    t[r.cache] && e.push(i);
                  }),
                  e.pop()
                );
              },
              transition: function (e, t) {
                var r = h(e),
                  n = r._space(),
                  o = c[n],
                  a = 0 === this.alpha() ? h("transparent") : this,
                  s = a[o.cache] || o.to(a._rgba),
                  l = s.slice();
                return (
                  (r = r[o.cache]),
                  f(o.props, function (e, n) {
                    var o = n.idx,
                      a = s[o],
                      h = r[o],
                      c = u[n.type] || {};
                    null !== h &&
                      (null === a
                        ? (l[o] = h)
                        : (c.mod &&
                            (h - a > c.mod / 2
                              ? (a += c.mod)
                              : a - h > c.mod / 2 && (a -= c.mod)),
                          (l[o] = i((h - a) * t + a, n))));
                  }),
                  this[n](l)
                );
              },
              blend: function (t) {
                if (1 === this._rgba[3]) return this;
                var i = this._rgba.slice(),
                  r = i.pop(),
                  n = h(t)._rgba;
                return h(
                  e.map(i, function (e, t) {
                    return (1 - r) * n[t] + r * e;
                  })
                );
              },
              toRgbaString: function () {
                var t = "rgba(",
                  i = e.map(this._rgba, function (e, t) {
                    return null == e ? (t > 2 ? 1 : 0) : e;
                  });
                return (
                  1 === i[3] && (i.pop(), (t = "rgb(")), t + i.join() + ")"
                );
              },
              toHslaString: function () {
                var t = "hsla(",
                  i = e.map(this.hsla(), function (e, t) {
                    return (
                      null == e && (e = t > 2 ? 1 : 0),
                      t && t < 3 && (e = Math.round(100 * e) + "%"),
                      e
                    );
                  });
                return (
                  1 === i[3] && (i.pop(), (t = "hsl(")), t + i.join() + ")"
                );
              },
              toHexString: function (t) {
                var i = this._rgba.slice(),
                  r = i.pop();
                return (
                  t && i.push(~~(255 * r)),
                  "#" +
                    e
                      .map(i, function (e) {
                        return 1 === (e = (e || 0).toString(16)).length
                          ? "0" + e
                          : e;
                      })
                      .join("")
                );
              },
              toString: function () {
                return 0 === this._rgba[3]
                  ? "transparent"
                  : this.toRgbaString();
              },
            })),
            (h.fn.parse.prototype = h.fn),
            (c.hsla.to = function (e) {
              if (null == e[0] || null == e[1] || null == e[2])
                return [null, null, null, e[3]];
              var t,
                i,
                r = e[0] / 255,
                n = e[1] / 255,
                o = e[2] / 255,
                a = e[3],
                s = Math.max(r, n, o),
                l = Math.min(r, n, o),
                h = s - l,
                c = s + l,
                u = 0.5 * c;
              return (
                (t =
                  l === s
                    ? 0
                    : r === s
                    ? (60 * (n - o)) / h + 360
                    : n === s
                    ? (60 * (o - r)) / h + 120
                    : (60 * (r - n)) / h + 240),
                (i = 0 === h ? 0 : u <= 0.5 ? h / c : h / (2 - c)),
                [Math.round(t) % 360, i, u, null == a ? 1 : a]
              );
            }),
            (c.hsla.from = function (e) {
              if (null == e[0] || null == e[1] || null == e[2])
                return [null, null, null, e[3]];
              var t = e[0] / 360,
                i = e[1],
                r = e[2],
                o = e[3],
                a = r <= 0.5 ? r * (1 + i) : r + i - r * i,
                s = 2 * r - a;
              return [
                Math.round(255 * n(s, a, t + 1 / 3)),
                Math.round(255 * n(s, a, t)),
                Math.round(255 * n(s, a, t - 1 / 3)),
                o,
              ];
            }),
            f(c, function (r, n) {
              var o = n.props,
                a = n.cache,
                l = n.to,
                c = n.from;
              (h.fn[r] = function (r) {
                if ((l && !this[a] && (this[a] = l(this._rgba)), r === t))
                  return this[a].slice();
                var n,
                  s = e.type(r),
                  u = "array" === s || "object" === s ? r : arguments,
                  p = this[a].slice();
                return (
                  f(o, function (e, t) {
                    var r = u["object" === s ? e : t.idx];
                    null == r && (r = p[t.idx]), (p[t.idx] = i(r, t));
                  }),
                  c ? (((n = h(c(p)))[a] = p), n) : h(p)
                );
              }),
                f(o, function (t, i) {
                  h.fn[t] ||
                    (h.fn[t] = function (n) {
                      var o,
                        a = e.type(n),
                        l = "alpha" === t ? (this._hsla ? "hsla" : "rgba") : r,
                        h = this[l](),
                        c = h[i.idx];
                      return "undefined" === a
                        ? c
                        : ("function" === a &&
                            ((n = n.call(this, c)), (a = e.type(n))),
                          null == n && i.empty
                            ? this
                            : ("string" === a &&
                                (o = s.exec(n)) &&
                                (n =
                                  c +
                                  parseFloat(o[2]) * ("+" === o[1] ? 1 : -1)),
                              (h[i.idx] = n),
                              this[l](h)));
                    });
                });
            }),
            (h.hook = function (t) {
              var i = t.split(" ");
              f(i, function (t, i) {
                (e.cssHooks[i] = {
                  set: function (t, n) {
                    var o,
                      a,
                      s = "";
                    if (
                      "transparent" !== n &&
                      ("string" !== e.type(n) || (o = r(n)))
                    ) {
                      if (((n = h(o || n)), !p.rgba && 1 !== n._rgba[3])) {
                        for (
                          a = "backgroundColor" === i ? t.parentNode : t;
                          ("" === s || "transparent" === s) && a && a.style;

                        )
                          try {
                            (s = e.css(a, "backgroundColor")),
                              (a = a.parentNode);
                          } catch (e) {}
                        n = n.blend(s && "transparent" !== s ? s : "_default");
                      }
                      n = n.toRgbaString();
                    }
                    try {
                      t.style[i] = n;
                    } catch (e) {}
                  },
                }),
                  (e.fx.step[i] = function (t) {
                    t.colorInit ||
                      ((t.start = h(t.elem, i)),
                      (t.end = h(t.end)),
                      (t.colorInit = !0)),
                      e.cssHooks[i].set(
                        t.elem,
                        t.start.transition(t.end, t.pos)
                      );
                  });
              });
            }),
            h.hook(a),
            (e.cssHooks.borderColor = {
              expand: function (e) {
                var t = {};
                return (
                  f(["Top", "Right", "Bottom", "Left"], function (i, r) {
                    t["border" + r + "Color"] = e;
                  }),
                  t
                );
              },
            }),
            (o = e.Color.names =
              {
                aqua: "#00ffff",
                black: "#000000",
                blue: "#0000ff",
                fuchsia: "#ff00ff",
                gray: "#808080",
                green: "#008000",
                lime: "#00ff00",
                maroon: "#800000",
                navy: "#000080",
                olive: "#808000",
                purple: "#800080",
                red: "#ff0000",
                silver: "#c0c0c0",
                teal: "#008080",
                white: "#ffffff",
                yellow: "#ffff00",
                transparent: [null, null, null, 0],
                _default: "#ffffff",
              });
        })(jQuery),
        (function () {
          function i(t) {
            var i,
              r,
              n = t.ownerDocument.defaultView
                ? t.ownerDocument.defaultView.getComputedStyle(t, null)
                : t.currentStyle,
              o = {};
            if (n && n.length && n[0] && n[n[0]])
              for (r = n.length; r--; )
                "string" == typeof n[(i = n[r])] && (o[e.camelCase(i)] = n[i]);
            else for (i in n) "string" == typeof n[i] && (o[i] = n[i]);
            return o;
          }
          function r(t, i) {
            var r,
              n,
              a = {};
            for (r in i)
              (n = i[r]),
                t[r] !== n &&
                  !o[r] &&
                  (e.fx.step[r] || !isNaN(parseFloat(n))) &&
                  (a[r] = n);
            return a;
          }
          var n = ["add", "remove", "toggle"],
            o = {
              border: 1,
              borderBottom: 1,
              borderColor: 1,
              borderLeft: 1,
              borderRight: 1,
              borderTop: 1,
              borderWidth: 1,
              margin: 1,
              padding: 1,
            };
          e.each(
            [
              "borderLeftStyle",
              "borderRightStyle",
              "borderBottomStyle",
              "borderTopStyle",
            ],
            function (t, i) {
              e.fx.step[i] = function (e) {
                (("none" !== e.end && !e.setAttr) ||
                  (1 === e.pos && !e.setAttr)) &&
                  (jQuery.style(e.elem, i, e.end), (e.setAttr = !0));
              };
            }
          ),
            e.fn.addBack ||
              (e.fn.addBack = function (e) {
                return this.add(
                  null == e ? this.prevObject : this.prevObject.filter(e)
                );
              }),
            (e.effects.animateClass = function (t, o, a, s) {
              var l = e.speed(o, a, s);
              return this.queue(function () {
                var o,
                  a = e(this),
                  s = a.attr("class") || "",
                  h = l.children ? a.find("*").addBack() : a;
                (h = h.map(function () {
                  return {
                    el: e(this),
                    start: i(this),
                  };
                })),
                  (o = function () {
                    e.each(n, function (e, i) {
                      t[i] && a[i + "Class"](t[i]);
                    });
                  }),
                  o(),
                  (h = h.map(function () {
                    return (
                      (this.end = i(this.el[0])),
                      (this.diff = r(this.start, this.end)),
                      this
                    );
                  })),
                  a.attr("class", s),
                  (h = h.map(function () {
                    var t = this,
                      i = e.Deferred(),
                      r = e.extend({}, l, {
                        queue: !1,
                        complete: function () {
                          i.resolve(t);
                        },
                      });
                    return this.el.animate(this.diff, r), i.promise();
                  })),
                  e.when.apply(e, h.get()).done(function () {
                    o(),
                      e.each(arguments, function () {
                        var t = this.el;
                        e.each(this.diff, function (e) {
                          t.css(e, "");
                        });
                      }),
                      l.complete.call(a[0]);
                  });
              });
            }),
            e.fn.extend({
              _addClass: e.fn.addClass,
              addClass: function (t, i, r, n) {
                return i
                  ? e.effects.animateClass.call(
                      this,
                      {
                        add: t,
                      },
                      i,
                      r,
                      n
                    )
                  : this._addClass(t);
              },
              _removeClass: e.fn.removeClass,
              removeClass: function (t, i, r, n) {
                return i
                  ? e.effects.animateClass.call(
                      this,
                      {
                        remove: t,
                      },
                      i,
                      r,
                      n
                    )
                  : this._removeClass(t);
              },
              _toggleClass: e.fn.toggleClass,
              toggleClass: function (i, r, n, o, a) {
                return "boolean" == typeof r || r === t
                  ? n
                    ? e.effects.animateClass.call(
                        this,
                        r
                          ? {
                              add: i,
                            }
                          : {
                              remove: i,
                            },
                        n,
                        o,
                        a
                      )
                    : this._toggleClass(i, r)
                  : e.effects.animateClass.call(
                      this,
                      {
                        toggle: i,
                      },
                      r,
                      n,
                      o
                    );
              },
              switchClass: function (t, i, r, n, o) {
                return e.effects.animateClass.call(
                  this,
                  {
                    add: i,
                    remove: t,
                  },
                  r,
                  n,
                  o
                );
              },
            });
        })(),
        (function () {
          function r(t, i, r, n) {
            return (
              e.isPlainObject(t) && ((i = t), (t = t.effect)),
              (t = {
                effect: t,
              }),
              null == i && (i = {}),
              e.isFunction(i) && ((n = i), (r = null), (i = {})),
              ("number" == typeof i || e.fx.speeds[i]) &&
                ((n = r), (r = i), (i = {})),
              e.isFunction(r) && ((n = r), (r = null)),
              i && e.extend(t, i),
              (r = r || i.duration),
              (t.duration = e.fx.off
                ? 0
                : "number" == typeof r
                ? r
                : r in e.fx.speeds
                ? e.fx.speeds[r]
                : e.fx.speeds._default),
              (t.complete = n || i.complete),
              t
            );
          }
          function n(t) {
            return (
              !(t && "number" != typeof t && !e.fx.speeds[t]) ||
              ("string" == typeof t && !e.effects.effect[t])
            );
          }
          e.extend(e.effects, {
            version: "1.10.0",
            save: function (e, t) {
              for (var r = 0; r < t.length; r++)
                null !== t[r] && e.data(i + t[r], e[0].style[t[r]]);
            },
            restore: function (e, r) {
              var n, o;
              for (o = 0; o < r.length; o++)
                null !== r[o] &&
                  ((n = e.data(i + r[o])) === t && (n = ""), e.css(r[o], n));
            },
            setMode: function (e, t) {
              return (
                "toggle" === t && (t = e.is(":hidden") ? "show" : "hide"), t
              );
            },
            getBaseline: function (e, t) {
              var i, r;
              switch (e[0]) {
                case "top":
                  i = 0;
                  break;
                case "middle":
                  i = 0.5;
                  break;
                case "bottom":
                  i = 1;
                  break;
                default:
                  i = e[0] / t.height;
              }
              switch (e[1]) {
                case "left":
                  r = 0;
                  break;
                case "center":
                  r = 0.5;
                  break;
                case "right":
                  r = 1;
                  break;
                default:
                  r = e[1] / t.width;
              }
              return {
                x: r,
                y: i,
              };
            },
            createWrapper: function (t) {
              if (t.parent().is(".ui-effects-wrapper")) return t.parent();
              var i = {
                  width: t.outerWidth(!0),
                  height: t.outerHeight(!0),
                  float: t.css("float"),
                },
                r = e("<div></div>").addClass("ui-effects-wrapper").css({
                  fontSize: "100%",
                  background: "transparent",
                  border: "none",
                  margin: 0,
                  padding: 0,
                }),
                n = {
                  width: t.width(),
                  height: t.height(),
                },
                o = document.activeElement;
              try {
                o.id;
              } catch (e) {
                o = document.body;
              }
              return (
                t.wrap(r),
                (t[0] === o || e.contains(t[0], o)) && e(o).focus(),
                (r = t.parent()),
                "static" === t.css("position")
                  ? (r.css({
                      position: "relative",
                    }),
                    t.css({
                      position: "relative",
                    }))
                  : (e.extend(i, {
                      position: t.css("position"),
                      zIndex: t.css("z-index"),
                    }),
                    e.each(["top", "left", "bottom", "right"], function (e, r) {
                      (i[r] = t.css(r)),
                        isNaN(parseInt(i[r], 10)) && (i[r] = "auto");
                    }),
                    t.css({
                      position: "relative",
                      top: 0,
                      left: 0,
                      right: "auto",
                      bottom: "auto",
                    })),
                t.css(n),
                r.css(i).show()
              );
            },
            removeWrapper: function (t) {
              var i = document.activeElement;
              return (
                t.parent().is(".ui-effects-wrapper") &&
                  (t.parent().replaceWith(t),
                  (t[0] === i || e.contains(t[0], i)) && e(i).focus()),
                t
              );
            },
            setTransition: function (t, i, r, n) {
              return (
                (n = n || {}),
                e.each(i, function (e, i) {
                  var o = t.cssUnit(i);
                  o[0] > 0 && (n[i] = o[0] * r + o[1]);
                }),
                n
              );
            },
          }),
            e.fn.extend({
              effect: function () {
                function t(t) {
                  function r() {
                    e.isFunction(o) && o.call(n[0]), e.isFunction(t) && t();
                  }
                  var n = e(this),
                    o = i.complete,
                    s = i.mode;
                  (n.is(":hidden") ? "hide" === s : "show" === s)
                    ? r()
                    : a.call(n[0], i, r);
                }
                var i = r.apply(this, arguments),
                  n = i.mode,
                  o = i.queue,
                  a = e.effects.effect[i.effect];
                return e.fx.off || !a
                  ? n
                    ? this[n](i.duration, i.complete)
                    : this.each(function () {
                        i.complete && i.complete.call(this);
                      })
                  : !1 === o
                  ? this.each(t)
                  : this.queue(o || "fx", t);
              },
              _show: e.fn.show,
              show: function (e) {
                if (n(e)) return this._show.apply(this, arguments);
                var t = r.apply(this, arguments);
                return (t.mode = "show"), this.effect.call(this, t);
              },
              _hide: e.fn.hide,
              hide: function (e) {
                if (n(e)) return this._hide.apply(this, arguments);
                var t = r.apply(this, arguments);
                return (t.mode = "hide"), this.effect.call(this, t);
              },
              __toggle: e.fn.toggle,
              toggle: function (t) {
                if (n(t) || "boolean" == typeof t || e.isFunction(t))
                  return this.__toggle.apply(this, arguments);
                var i = r.apply(this, arguments);
                return (i.mode = "toggle"), this.effect.call(this, i);
              },
              cssUnit: function (t) {
                var i = this.css(t),
                  r = [];
                return (
                  e.each(["em", "px", "%", "pt"], function (e, t) {
                    i.indexOf(t) > 0 && (r = [parseFloat(i), t]);
                  }),
                  r
                );
              },
            });
        })(),
        (function () {
          var t = {};
          e.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (e, i) {
            t[i] = function (t) {
              return Math.pow(t, e + 2);
            };
          }),
            e.extend(t, {
              Sine: function (e) {
                return 1 - Math.cos((e * Math.PI) / 2);
              },
              Circ: function (e) {
                return 1 - Math.sqrt(1 - e * e);
              },
              Elastic: function (e) {
                return 0 === e || 1 === e
                  ? e
                  : -Math.pow(2, 8 * (e - 1)) *
                      Math.sin(((80 * (e - 1) - 7.5) * Math.PI) / 15);
              },
              Back: function (e) {
                return e * e * (3 * e - 2);
              },
              Bounce: function (e) {
                for (var t, i = 4; e < ((t = Math.pow(2, --i)) - 1) / 11; );
                return (
                  1 / Math.pow(4, 3 - i) -
                  7.5625 * Math.pow((3 * t - 2) / 22 - e, 2)
                );
              },
            }),
            e.each(t, function (t, i) {
              (e.easing["easeIn" + t] = i),
                (e.easing["easeOut" + t] = function (e) {
                  return 1 - i(1 - e);
                }),
                (e.easing["easeInOut" + t] = function (e) {
                  return e < 0.5 ? i(2 * e) / 2 : 1 - i(-2 * e + 2) / 2;
                });
            });
        })();
    })(jQuery),
  (function (e) {
    (e.effects.effect.puff = function (t, i) {
      var r = e(this),
        n = e.effects.setMode(r, t.mode || "hide"),
        o = "hide" === n,
        a = parseInt(t.percent, 10) || 150,
        s = a / 100,
        l = {
          height: r.height(),
          width: r.width(),
          outerHeight: r.outerHeight(),
          outerWidth: r.outerWidth(),
        };
      e.extend(t, {
        effect: "scale",
        queue: !1,
        fade: !0,
        mode: n,
        complete: i,
        percent: o ? a : 100,
        from: o
          ? l
          : {
              height: l.height * s,
              width: l.width * s,
              outerHeight: l.outerHeight * s,
              outerWidth: l.outerWidth * s,
            },
      }),
        r.effect(t);
    }),
      (e.effects.effect.scale = function (t, i) {
        var r = e(this),
          n = e.extend(!0, {}, t),
          o = e.effects.setMode(r, t.mode || "effect"),
          a =
            parseInt(t.percent, 10) ||
            (0 === parseInt(t.percent, 10) || "hide" === o ? 0 : 100),
          s = t.direction || "both",
          l = t.origin,
          h = {
            height: r.height(),
            width: r.width(),
            outerHeight: r.outerHeight(),
            outerWidth: r.outerWidth(),
          },
          c = {
            y: "horizontal" !== s ? a / 100 : 1,
            x: "vertical" !== s ? a / 100 : 1,
          };
        (n.effect = "size"),
          (n.queue = !1),
          (n.complete = i),
          "effect" !== o &&
            ((n.origin = l || ["middle", "center"]), (n.restore = !0)),
          (n.from =
            t.from ||
            ("show" === o
              ? {
                  height: 0,
                  width: 0,
                  outerHeight: 0,
                  outerWidth: 0,
                }
              : h)),
          (n.to = {
            height: h.height * c.y,
            width: h.width * c.x,
            outerHeight: h.outerHeight * c.y,
            outerWidth: h.outerWidth * c.x,
          }),
          n.fade &&
            ("show" === o && ((n.from.opacity = 0), (n.to.opacity = 1)),
            "hide" === o && ((n.from.opacity = 1), (n.to.opacity = 0))),
          r.effect(n);
      }),
      (e.effects.effect.size = function (t, i) {
        var r,
          n,
          o,
          a = e(this),
          s = [
            "position",
            "top",
            "bottom",
            "left",
            "right",
            "width",
            "height",
            "overflow",
            "opacity",
          ],
          l = [
            "position",
            "top",
            "bottom",
            "left",
            "right",
            "overflow",
            "opacity",
          ],
          h = ["width", "height", "overflow"],
          c = ["fontSize"],
          u = [
            "borderTopWidth",
            "borderBottomWidth",
            "paddingTop",
            "paddingBottom",
          ],
          p = [
            "borderLeftWidth",
            "borderRightWidth",
            "paddingLeft",
            "paddingRight",
          ],
          d = e.effects.setMode(a, t.mode || "effect"),
          f = t.restore || "effect" !== d,
          m = t.scale || "both",
          E = t.origin || ["middle", "center"],
          g = a.css("position"),
          v = f ? s : l,
          y = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0,
          };
        "show" === d && a.show(),
          (r = {
            height: a.height(),
            width: a.width(),
            outerHeight: a.outerHeight(),
            outerWidth: a.outerWidth(),
          }),
          "toggle" === t.mode && "show" === d
            ? ((a.from = t.to || y), (a.to = t.from || r))
            : ((a.from = t.from || ("show" === d ? y : r)),
              (a.to = t.to || ("hide" === d ? y : r))),
          (o = {
            from: {
              y: a.from.height / r.height,
              x: a.from.width / r.width,
            },
            to: {
              y: a.to.height / r.height,
              x: a.to.width / r.width,
            },
          }),
          ("box" !== m && "both" !== m) ||
            (o.from.y !== o.to.y &&
              ((v = v.concat(u)),
              (a.from = e.effects.setTransition(a, u, o.from.y, a.from)),
              (a.to = e.effects.setTransition(a, u, o.to.y, a.to))),
            o.from.x !== o.to.x &&
              ((v = v.concat(p)),
              (a.from = e.effects.setTransition(a, p, o.from.x, a.from)),
              (a.to = e.effects.setTransition(a, p, o.to.x, a.to)))),
          ("content" === m || "both" === m) &&
            o.from.y !== o.to.y &&
            ((v = v.concat(c).concat(h)),
            (a.from = e.effects.setTransition(a, c, o.from.y, a.from)),
            (a.to = e.effects.setTransition(a, c, o.to.y, a.to))),
          e.effects.save(a, v),
          a.show(),
          e.effects.createWrapper(a),
          a.css("overflow", "hidden").css(a.from),
          E &&
            ((n = e.effects.getBaseline(E, r)),
            (a.from.top = (r.outerHeight - a.outerHeight()) * n.y),
            (a.from.left = (r.outerWidth - a.outerWidth()) * n.x),
            (a.to.top = (r.outerHeight - a.to.outerHeight) * n.y),
            (a.to.left = (r.outerWidth - a.to.outerWidth) * n.x)),
          a.css(a.from),
          ("content" !== m && "both" !== m) ||
            ((u = u.concat(["marginTop", "marginBottom"]).concat(c)),
            (p = p.concat(["marginLeft", "marginRight"])),
            (h = s.concat(u).concat(p)),
            a.find("*[width]").each(function () {
              var i = e(this),
                r = {
                  height: i.height(),
                  width: i.width(),
                  outerHeight: i.outerHeight(),
                  outerWidth: i.outerWidth(),
                };
              f && e.effects.save(i, h),
                (i.from = {
                  height: r.height * o.from.y,
                  width: r.width * o.from.x,
                  outerHeight: r.outerHeight * o.from.y,
                  outerWidth: r.outerWidth * o.from.x,
                }),
                (i.to = {
                  height: r.height * o.to.y,
                  width: r.width * o.to.x,
                  outerHeight: r.height * o.to.y,
                  outerWidth: r.width * o.to.x,
                }),
                o.from.y !== o.to.y &&
                  ((i.from = e.effects.setTransition(i, u, o.from.y, i.from)),
                  (i.to = e.effects.setTransition(i, u, o.to.y, i.to))),
                o.from.x !== o.to.x &&
                  ((i.from = e.effects.setTransition(i, p, o.from.x, i.from)),
                  (i.to = e.effects.setTransition(i, p, o.to.x, i.to))),
                i.css(i.from),
                i.animate(i.to, t.duration, t.easing, function () {
                  f && e.effects.restore(i, h);
                });
            })),
          a.animate(a.to, {
            queue: !1,
            duration: t.duration,
            easing: t.easing,
            complete: function () {
              0 === a.to.opacity && a.css("opacity", a.from.opacity),
                "hide" === d && a.hide(),
                e.effects.restore(a, v),
                f ||
                  ("static" === g
                    ? a.css({
                        position: "relative",
                        top: a.to.top,
                        left: a.to.left,
                      })
                    : e.each(["top", "left"], function (e, t) {
                        a.css(t, function (t, i) {
                          var r = parseInt(i, 10),
                            n = e ? a.to.left : a.to.top;
                          return "auto" === i ? n + "px" : r + n + "px";
                        });
                      })),
                e.effects.removeWrapper(a),
                i();
            },
          });
      });
  })(jQuery),
  (function (e) {
    e.effects.effect.slide = function (t, i) {
      var r,
        n = e(this),
        o = ["position", "top", "bottom", "left", "right", "width", "height"],
        a = e.effects.setMode(n, t.mode || "show"),
        s = "show" === a,
        l = t.direction || "left",
        h = "up" === l || "down" === l ? "top" : "left",
        c = "up" === l || "left" === l,
        u = {};
      e.effects.save(n, o),
        n.show(),
        (r = t.distance || n["top" === h ? "outerHeight" : "outerWidth"](!0)),
        e.effects.createWrapper(n).css({
          overflow: "hidden",
        }),
        s && n.css(h, c ? (isNaN(r) ? "-" + r : -r) : r),
        (u[h] = (s ? (c ? "+=" : "-=") : c ? "-=" : "+=") + r),
        n.animate(u, {
          queue: !1,
          duration: t.duration,
          easing: t.easing,
          complete: function () {
            "hide" === a && n.hide(),
              e.effects.restore(n, o),
              e.effects.removeWrapper(n),
              i();
          },
        });
    };
  })(jQuery);
var html5Preloader = (function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) if (t[i] === e) return !0;
    return !1;
  }
  function t(e, t) {
    if (e.map) return e.map(t);
    var i,
      r = [];
    for (i = 0; i < e.length; i++) r.push(t(e[i]));
    return r;
  }
  function i(e, t) {
    return e.bind
      ? e.bind(t)
      : function () {
          return e.apply(t, arguments);
        };
  }
  function r(e) {
    var t = [].slice.call(arguments, 1);
    setTimeout(function () {
      e.apply(this, t);
    }, 0);
  }
  function n() {
    var e;
    for (e in n.prototype)
      n.prototype.hasOwnProperty(e) && (this[e] = n.prototype[e]);
    this._listeners = {};
  }
  function o(t, i, n) {
    function a() {
      var e = f.shift(),
        t = null;
      e
        ? ("number" == typeof n &&
            (t = setTimeout(function () {
              r(
                i,
                {
                  e: Error("Load event not fired within " + n + "ms"),
                },
                u
              );
            }, n)),
          new o[e.type](e.path, function (e, r) {
            if (
              (t && clearTimeout(t),
              (u.dom = r && r.dom),
              e && u.alternates.length)
            )
              return a();
            i(e, u);
          }))
        : r(
            i,
            {
              e: Error("No viable alternatives"),
            },
            null
          );
    }
    if (!(this instanceof o)) return new o(t, i, n);
    var s,
      l,
      h,
      c,
      u = this,
      f = [];
    if ("string" == typeof t) {
      for (
        l = (s = t.split("*:"))[s[1] ? 1 : 0].split("||"),
          u.id = s[1] ? s[0] : l[0],
          u.alternates = f,
          s = 0;
        s < l.length;
        s++
      )
        (h = (h = l[s].split("."))[h.length - 1].toLowerCase()),
          (c = p[h] ? p[h].media : e(h, d.imageTypes) ? "image" : "document"),
          (p[h] && !p[h].supported) ||
            f.push({
              type: c,
              path: l[s],
            });
      f.length ||
        f.push({
          type: c,
          path: l[s - 1],
        }),
        a();
    } else r(i, TypeError("Invalid path"), u);
  }
  function a(e) {
    return function (t, i) {
      function r() {
        (o.onload = o.onerror = null),
          o.removeEventListener &&
            o.removeEventListener("canplaythrough", r, !0),
          i(null, n);
      }
      var n = this,
        o = e();
      o.addEventListener && o.addEventListener("canplaythrough", r, !0),
        (o.onload = r),
        (o.onerror = function (e) {
          i(e, n);
        }),
        (n.dom = o),
        (o.src = t),
        o.load && o.load();
    };
  }
  function s() {
    var e = this,
      t = arguments;
    if (!(e instanceof s))
      return (e = new s()), t.length && e.loadFiles.apply(e, t), e;
    (e.files = []),
      s.EventEmitter.call(e),
      (e.loadCallback = i(e.loadCallback, e)),
      t.length && e.loadFiles.apply(e, t);
  }
  var l =
      "undefined" == typeof XMLHttpRequest
        ? function () {
            try {
              return new ActiveXObject("Msxml2.XMLHTTP.6.0");
            } catch (e) {}
            try {
              return new ActiveXObject("Msxml2.XMLHTTP.3.0");
            } catch (e) {}
            return null;
          }
        : XMLHttpRequest,
    h =
      "undefined" != typeof Audio
        ? function () {
            return new Audio();
          }
        : function () {
            return document.createElement("audio");
          },
    c =
      "undefined" != typeof Video
        ? function () {
            return new Video();
          }
        : function () {
            return document.createElement("video");
          },
    u = function () {
      return new Image();
    },
    p = {
      oga: {
        codec: 'audio/ogg; codecs="vorbis"',
        media: "audio",
      },
      wav: {
        codec: 'audio/wav; codecs="1"',
        media: "audio",
      },
      webma: {
        codec: 'audio/webm; codecs="vorbis"',
        media: "audio",
      },
      mp3: {
        codec: 'audio/mpeg; codecs="mp3"',
        media: "audio",
      },
      m4a: {
        codec: 'audio/mp4; codecs="mp4a.40.2"',
        media: "audio",
      },
      ogv: {
        codec: 'video/ogg; codecs="theora, vorbis"',
        media: "video",
      },
      webmv: {
        codec: 'video/webm; codecs="vorbis, vp8"',
        media: "video",
      },
      m4v: {
        codec: 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
        media: "video",
      },
    },
    d = {
      imageTypes: ["jpg", "png", "jpeg", "tiff", "gif"],
    },
    f = "FILE@";
  return (
    (p.ogg = p.oga),
    (p.mp4 = p.m4v),
    (p.webm = p.webmv),
    (n.prototype = {
      _listeners: null,
      emit: function (e, t) {
        if (((t = t || []), this._listeners[e]))
          for (var i = 0; i < this._listeners[e].length; i++)
            this._listeners[e][i].apply(this, t);
        return this;
      },
      on: function (e, t) {
        return (
          (this._listeners[e] = this._listeners[e] || []),
          this._listeners[e].push(t),
          this
        );
      },
      off: function (e, t) {
        if (this._listeners[e]) {
          if (!t) return delete this._listeners[e], this;
          for (var i = 0; i < this._listeners[e].length; i++)
            this._listeners[e][i] === t && this._listeners[e].splice(i--, 1);
          this._listeners[e].length || delete this._listeners[e];
        }
        return this;
      },
      once: function (e, t) {
        function i() {
          return this.off(i), t.apply(this, arguments);
        }
        return this.on(e, i);
      },
    }),
    (o.audio = a(h)),
    (o.video = a(c)),
    (o.image = a(u)),
    (o.document = function (e, t) {
      var i = this,
        n = /(\[(!)?(.+)?\])?$/.exec(e),
        o = n[3],
        a = (i.dom = new l());
      a
        ? ((e = e.substr(0, e.length - n[0].length)),
          (e += n[2]
            ? (-1 === e.indexOf("?") ? "?" : "&") + "fobarz=" + +new Date()
            : ""),
          o &&
            a.overrideMimeType(
              "@" === o ? "text/plain; charset=x-user-defined" : o
            ),
          (a.onreadystatechange = function () {
            if (4 === a.readyState)
              try {
                (i.dom =
                  a.responseXML && a.responseXML.documentElement
                    ? a.responseXML
                    : String(a.responseText || "")),
                  200 === a.status
                    ? t(null, i)
                    : t(
                        {
                          e: Error("Request failed: " + a.status),
                        },
                        i
                      );
              } catch (e) {
                t(
                  {
                    e: e,
                  },
                  i
                );
              }
          }),
          (a.onerror = function (e) {
            t(e, i);
          }),
          a.open("GET", e, !0),
          a.send())
        : r(t, Error("No XHR!"), i);
    }),
    (function () {
      var e,
        t = h(),
        i = c();
      for (e in ((d.audio = !!t.canPlayType),
      (d.video = !!i.canPlayType),
      (d.audioTypes = []),
      (d.videoTypes = []),
      p))
        p.hasOwnProperty(e) &&
          ("video" === p[e].media
            ? (p[e].supported = d.video && i.canPlayType(p[e].codec)) &&
              d.videoTypes.push(e)
            : "audio" === p[e].media &&
              (p[e].supported = d.audio && t.canPlayType(p[e].codec)) &&
              d.audioTypes.push(e));
    })(),
    d.audio ||
      (o.audio = function (e, t) {
        r(t, Error("<AUDIO> not supported."), e);
      }),
    d.video ||
      (o.video = function (e, t) {
        r(t, Error("<VIDEO> not supported."), e);
      }),
    (s.prototype = {
      active: !1,
      files: null,
      filesLoading: 0,
      filesLoaded: 0,
      filesLoadedMap: {},
      timeout: null,
      loadCallback: function (e, t) {
        this.filesLoadedMap[t.id] ||
          (this.filesLoaded++, (this.filesLoadedMap[t.id] = t)),
          this.emit(e ? "error" : "fileloaded", e ? [e, t] : [t]),
          this.filesLoading - this.filesLoaded == 0 &&
            ((this.active = !1),
            this.emit("finish"),
            (this.filesLoading = 0),
            (this.filesLoaded = 0));
      },
      getFile: function (e) {
        return void 0 === e
          ? t(this.files, function (e) {
              return e.dom;
            })
          : "number" == typeof e
          ? this.files[e].dom
          : "string" == typeof e
          ? this.files[f + e].dom
          : null;
      },
      removeFile: function (e) {
        var t, i;
        switch (typeof e) {
          case "undefined":
            this.files = [];
            break;
          case "number":
            (t = this.files[e]),
              this.files[f + t.id] && delete this.files[f + t.id],
              this.files.splice(e, 1);
            break;
          case "string":
            for (
              (t = this.files[f + e]) && delete this.files[f + e], i = 0;
              i < this.files.length;
              i++
            )
              this.files[i] === t && this.files.splice(i--, 1);
        }
      },
      loadFiles: function () {
        var e,
          t,
          i = [].slice.call(arguments);
        for (e = 0; e < i.length; e++)
          (t = s.loadFile(i[e], this.loadCallback, this.timeout)),
            this.files.push(t),
            (this.files[f + t.id] = t),
            this.filesLoading++;
        this.active = this.active || !!this.filesLoading;
      },
      addFiles: function (e) {
        return this.loadFiles.apply(this, e instanceof Array ? e : arguments);
      },
      getProgress: function () {
        return this.filesLoading ? this.filesLoaded / this.filesLoading : 1;
      },
    }),
    (s.support = d),
    (s.loadFile = o),
    (s.EventEmitter = n),
    s
  );
})();
(Vector.prototype.set = function () {
  var e = arguments.length;
  3 === e
    ? ((this.x = arguments[0]),
      (this.y = arguments[1]),
      (this.z = arguments[2]))
    : 1 === e &&
      ((this.x = arguments[0].x),
      (this.y = arguments[0].y),
      (this.z = arguments[0].z));
}),
  (Vector.prototype.add = function (e) {
    var t = arguments.length;
    3 === t
      ? ((this.x += arguments[0]),
        (this.y += arguments[1]),
        (this.z += arguments[2]))
      : 1 === t &&
        ((this.x += arguments[0].x),
        (this.y += arguments[0].y),
        (this.z += arguments[0].z));
  }),
  (Vector.prototype.substract = function (e) {
    var t = arguments.length;
    3 === t
      ? ((this.x -= arguments[0]),
        (this.y -= arguments[1]),
        (this.z -= arguments[2]))
      : 1 === t &&
        ((this.x -= arguments[0].x),
        (this.y -= arguments[0].y),
        (this.z -= arguments[0].z));
  }),
  (Vector.prototype.scale = function (e) {
    (this.x *= e), (this.y *= e), (this.z *= e);
  }),
  (Vector.prototype.distanceTo = function () {
    var e = arguments.length;
    if (3 === e) {
      var t = this.x - arguments[0],
        i = this.y - arguments[1],
        r = this.z - arguments[2];
      return Math.sqrt(t * t + i * i + r * r);
    }
    if (1 === e) return Math.sqrt(this.distanceSquaredTo(arguments[0]));
  }),
  (Vector.prototype.distanceSquaredTo = function (e) {
    var t = this.x - e.x,
      i = this.y - e.y,
      r = this.z - e.z;
    return t * t + i * i + r * r;
  }),
  (Vector.prototype.dot = function (e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }),
  (Vector.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }),
  (Vector.prototype.lengthSquared = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }),
  (Vector.prototype.clear = function () {
    (this.x = 0), (this.y = 0), (this.z = 0);
  }),
  (Vector.prototype.toString = function () {
    return "(" + this.x + "," + this.y + "," + this.z + ")";
  }),
  (Vector.prototype.cross = function (e) {
    return new Vector(
      this.y * e.z - this.z * e.y,
      this.x * e.z - this.z * e.x,
      this.x * e.y - this.y * e.x
    );
  }),
  (Vector.prototype.isZero = function () {
    return 0 === this.x && 0 === this.y && 0 === this.z;
  }),
  (Particle.prototype.distanceTo = function (e) {
    return this.position.distanceTo(e.position);
  }),
  (Particle.prototype.makeFixed = function () {
    (this.fixed = !0), this.velocity.clear();
  }),
  (Particle.prototype.reset = function () {
    (this.age = 0),
      (this.dead = !1),
      this.position.clear(),
      this.velocity.clear(),
      this.force.clear(),
      (this.mass = 1);
  }),
  (Spring.prototype.currentLength = function () {
    return this.a.position.distanceTo(this.b.position);
  }),
  (Spring.prototype.apply = function () {
    var e = this.a,
      t = this.b;
    if (!(!this.on || (e.fixed && t.fixed))) {
      var i = e.position.x - t.position.x,
        r = e.position.y - t.position.y,
        n = e.position.z - t.position.z,
        o = Math.sqrt(i * i + r * r + n * n);
      0 === o ? ((i = 0), (r = 0), (n = 0)) : ((i /= o), (r /= o), (n /= o));
      var a = -1 * (o - this.length) * this.constant,
        s = e.velocity.x - t.velocity.x,
        l = e.velocity.y - t.velocity.y,
        h = e.velocity.z - t.velocity.z,
        c = a + -1 * this.damping * (i * s + r * l + n * h);
      (i *= c),
        (r *= c),
        (n *= c),
        e.fixed || e.force.add(i, r, n),
        t.fixed || t.force.add(-1 * i, -1 * r, -1 * n);
    }
  }),
  (Attraction.prototype.apply = function () {
    var e = this.a,
      t = this.b;
    if (!(!this.on || (e.fixed && t.fixed))) {
      var i = e.position.x - t.position.x,
        r = e.position.y - t.position.y,
        n = e.position.z - t.position.z,
        o = Math.max(i * i + r * r + n * n, this.distanceMinSquared),
        a = (this.constant * e.mass * t.mass) / o,
        s = Math.sqrt(o);
      0 === a || 0 === s
        ? ((i = 0), (r = 0), (n = 0))
        : ((i /= s), (r /= s), (n /= s), (i *= a), (r *= a), (n *= a)),
        e.fixed || e.force.add(-i, -r, -n),
        t.fixed || t.force.add(i, r, n);
    }
  }),
  (RungeKuttaIntegrator.prototype.allocateParticles = function () {
    for (; this.s.particles.length > this.originalPositions.length; )
      this.originalPositions.push(new Vector()),
        this.originalVelocities.push(new Vector()),
        this.k1Forces.push(new Vector()),
        this.k1Velocities.push(new Vector()),
        this.k2Forces.push(new Vector()),
        this.k2Velocities.push(new Vector()),
        this.k3Forces.push(new Vector()),
        this.k3Velocities.push(new Vector()),
        this.k4Forces.push(new Vector()),
        this.k4Velocities.push(new Vector());
  }),
  (RungeKuttaIntegrator.prototype.step = function (e) {
    var t,
      i,
      r,
      n,
      o,
      a,
      s,
      l,
      h,
      c,
      u,
      p,
      d = this.s;
    for (this.allocateParticles(), i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        (this.originalPositions[i].set(t.position),
        this.originalVelocities[i].set(t.velocity)),
        t.force.clear();
    for (d.applyForces(), i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        (this.k1Forces[i].set(t.force), this.k1Velocities[i].set(t.velocity)),
        t.force.clear();
    for (i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        ((r = this.originalPositions[i]),
        (o = this.k1Velocities[i]),
        (t.position.x = r.x + 0.5 * o.x * e),
        (t.position.y = r.y + 0.5 * o.y * e),
        (t.position.z = r.z + 0.5 * o.z * e),
        (n = this.originalVelocities[i]),
        (h = this.k1Forces[i]),
        (t.velocity.x = n.x + (0.5 * h.x * e) / t.mass),
        (t.velocity.y = n.y + (0.5 * h.y * e) / t.mass),
        (t.velocity.z = n.z + (0.5 * h.z * e) / t.mass));
    for (d.applyForces(), i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        (this.k2Forces[i].set(t.force), this.k2Velocities[i].set(t.velocity)),
        t.force.clear();
    for (i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        ((r = this.originalPositions[i]),
        (a = this.k2Velocities[i]),
        (t.position.x = r.x + 0.5 * a.x * e),
        (t.position.y = r.y + 0.5 * a.y * e),
        (t.position.z = r.z + 0.5 * a.z * e),
        (n = this.originalVelocities[i]),
        (c = this.k2Forces[i]),
        (t.velocity.x = n.x + (0.5 * c.x * e) / t.mass),
        (t.velocity.y = n.y + (0.5 * c.y * e) / t.mass),
        (t.velocity.z = n.z + (0.5 * c.z * e) / t.mass));
    for (d.applyForces(), i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        (this.k3Forces[i].set(t.force), this.k3Velocities[i].set(t.velocity)),
        t.force.clear();
    for (i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        ((r = this.originalPositions[i]),
        (s = this.k3Velocities[i]),
        (t.position.x = r.x + s.x * e),
        (t.position.y = r.y + s.y * e),
        (t.position.z = r.z + s.z * e),
        (n = this.originalVelocities[i]),
        (u = this.k3Forces[i]),
        (t.velocity.x = n.x + (u.x * e) / t.mass),
        (t.velocity.y = n.y + (u.y * e) / t.mass),
        (t.velocity.z = n.z + (u.z * e) / t.mass));
    for (d.applyForces(), i = 0; i < d.particles.length; i++)
      (t = d.particles[i]).fixed ||
        (this.k4Forces[i].set(t.force), this.k4Velocities[i].set(t.velocity));
    for (i = 0; i < d.particles.length; i++)
      ((t = d.particles[i]).age += e),
        t.fixed ||
          ((r = this.originalPositions[i]),
          (o = this.k1Velocities[i]),
          (a = this.k2Velocities[i]),
          (s = this.k3Velocities[i]),
          (l = this.k4Velocities[i]),
          (t.position.x = r.x + (e / 6) * (o.x + 2 * a.x + 2 * s.x + l.x)),
          (t.position.y = r.y + (e / 6) * (o.y + 2 * a.y + 2 * s.y + l.y)),
          (t.position.z = r.z + (e / 6) * (o.z + 2 * a.z + 2 * s.z + l.z)),
          (n = this.originalVelocities[i]),
          (h = this.k1Forces[i]),
          (c = this.k2Forces[i]),
          (u = this.k3Forces[i]),
          (p = this.k4Forces[i]),
          (t.velocity.x =
            n.x + (e / (6 * t.mass)) * (h.x + 2 * c.x + 2 * u.x + p.x)),
          (t.velocity.y =
            n.y + (e / (6 * t.mass)) * (h.y + 2 * c.y + 2 * u.y + p.y)),
          (t.velocity.z =
            n.z + (e / (6 * t.mass)) * (h.z + 2 * c.z + 2 * u.z + p.z)));
  }),
  (ParticleSystem.DEFAULT_GRAVITY = 0),
  (ParticleSystem.DEFAULT_DRAG = 0.001),
  (ParticleSystem.prototype.setGravity = function () {
    var e = arguments.length;
    1 === e
      ? this.gravity.set(0, arguments[0], 0)
      : 3 === e && this.gravity.set(arguments[0], arguments[1], arguments[2]);
  }),
  (ParticleSystem.prototype.tick = function () {
    this.integrator.step(0 === arguments.length ? 1 : arguments[0]);
  }),
  (ParticleSystem.prototype.makeParticle = function () {
    var e = 1,
      t = 0,
      i = 0,
      r = 0;
    4 === arguments.length &&
      ((e = arguments[0]),
      (t = arguments[1]),
      (i = arguments[2]),
      (r = arguments[3]));
    var n = new Particle(e);
    return n.position.set(t, i, r), this.particles.push(n), n;
  }),
  (ParticleSystem.prototype.makeSpring = function (e, t, i, r, n) {
    var o = new Spring(e, t, i, r, n);
    return this.springs.push(o), o;
  }),
  (ParticleSystem.prototype.makeAttraction = function (e, t, i, r) {
    var n = new Attraction(e, t, i, r);
    return this.attractions.push(n), n;
  }),
  (ParticleSystem.prototype.clear = function () {
    this.particles.clear(), this.springs.clear(), this.attractions.clear();
  }),
  (ParticleSystem.prototype.applyForces = function () {
    var e, t;
    if (!this.gravity.isZero())
      for (t = 0; t < this.particles.length; t++)
        (e = this.particles[t]).force.add(this.gravity);
    for (t = 0; t < this.particles.length; t++)
      (e = this.particles[t]).force.add(
        -1 * e.velocity.x * this.drag,
        -1 * e.velocity.y * this.drag,
        -1 * e.velocity.z * this.drag
      );
    for (t = 0; t < this.springs.length; t++) (e = this.springs[t]).apply();
    for (t = 0; t < this.attractions.length; t++)
      (e = this.attractions[t]).apply();
    for (t = 0; t < this.forces.length; t++) (e = this.forces[t]).apply();
  }),
  (ParticleSystem.prototype.clearForces = function () {
    var e;
    for (e = 0; e < this.particles.length; e++) this.particles[e].clear();
  }),
  (ParticleSystem.prototype.removeParticleClean = function (e) {
    this.removeParticleForces(e), this.particles.remove(e);
  }),
  (ParticleSystem.prototype.removeParticleForces = function (e) {
    this.removeParticleSprings(e), this.removeParticleAttractions(e);
  }),
  (ParticleSystem.prototype.removeParticleSprings = function (e) {
    for (var t = this.springs.length - 1; t >= 0; t--)
      (e != this.springs[t].a && e != this.springs[t].b) ||
        this.springs.remove(t, 1);
  }),
  (ParticleSystem.prototype.removeParticleAttractions = function (e) {
    for (var t = this.attractions.length - 1; t >= 0; t--)
      (e != this.attractions[t].a && e != this.attractions[t].b) ||
        this.attractions.splice(t, 1);
  }),
  (Array.prototype.remove = function (e) {
    var t;
    if ("number" == typeof e) this.splice(e, 1);
    else
      for (t = 0; t < this.length; t++) this[t] === e && (this.remove(t), t--);
  }),
  (function (e) {
    "use strict";
    var t = {};
    "undefined" == typeof exports
      ? "function" == typeof define &&
        "object" == typeof define.amd &&
        define.amd
        ? ((t.exports = {}),
          define(function () {
            return t.exports;
          }))
        : (t.exports = "undefined" != typeof window ? window : e)
      : (t.exports = exports),
      (function (e) {
        if (!t) var t = 1e-6;
        if (!i)
          var i = "undefined" != typeof Float32Array ? Float32Array : Array;
        if (!r) var r = Math.random;
        var n = {
          setMatrixArrayType: function (e) {
            i = e;
          },
        };
        void 0 !== e && (e.glMatrix = n);
        var o = Math.PI / 180;
        n.toRadian = function (e) {
          return e * o;
        };
        var a = {
          create: function () {
            var e = new i(2);
            return (e[0] = 0), (e[1] = 0), e;
          },
          clone: function (e) {
            var t = new i(2);
            return (t[0] = e[0]), (t[1] = e[1]), t;
          },
          fromValues: function (e, t) {
            var r = new i(2);
            return (r[0] = e), (r[1] = t), r;
          },
          copy: function (e, t) {
            return (e[0] = t[0]), (e[1] = t[1]), e;
          },
          set: function (e, t, i) {
            return (e[0] = t), (e[1] = i), e;
          },
          add: function (e, t, i) {
            return (e[0] = t[0] + i[0]), (e[1] = t[1] + i[1]), e;
          },
          subtract: function (e, t, i) {
            return (e[0] = t[0] - i[0]), (e[1] = t[1] - i[1]), e;
          },
        };
        (a.sub = a.subtract),
          (a.multiply = function (e, t, i) {
            return (e[0] = t[0] * i[0]), (e[1] = t[1] * i[1]), e;
          }),
          (a.mul = a.multiply),
          (a.divide = function (e, t, i) {
            return (e[0] = t[0] / i[0]), (e[1] = t[1] / i[1]), e;
          }),
          (a.div = a.divide),
          (a.min = function (e, t, i) {
            return (
              (e[0] = Math.min(t[0], i[0])), (e[1] = Math.min(t[1], i[1])), e
            );
          }),
          (a.max = function (e, t, i) {
            return (
              (e[0] = Math.max(t[0], i[0])), (e[1] = Math.max(t[1], i[1])), e
            );
          }),
          (a.scale = function (e, t, i) {
            return (e[0] = t[0] * i), (e[1] = t[1] * i), e;
          }),
          (a.scaleAndAdd = function (e, t, i, r) {
            return (e[0] = t[0] + i[0] * r), (e[1] = t[1] + i[1] * r), e;
          }),
          (a.distance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1];
            return Math.sqrt(i * i + r * r);
          }),
          (a.dist = a.distance),
          (a.squaredDistance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1];
            return i * i + r * r;
          }),
          (a.sqrDist = a.squaredDistance),
          (a.length = function (e) {
            var t = e[0],
              i = e[1];
            return Math.sqrt(t * t + i * i);
          }),
          (a.len = a.length),
          (a.squaredLength = function (e) {
            var t = e[0],
              i = e[1];
            return t * t + i * i;
          }),
          (a.sqrLen = a.squaredLength),
          (a.negate = function (e, t) {
            return (e[0] = -t[0]), (e[1] = -t[1]), e;
          }),
          (a.normalize = function (e, t) {
            var i = t[0],
              r = t[1],
              n = i * i + r * r;
            return (
              n > 0 &&
                ((n = 1 / Math.sqrt(n)), (e[0] = t[0] * n), (e[1] = t[1] * n)),
              e
            );
          }),
          (a.dot = function (e, t) {
            return e[0] * t[0] + e[1] * t[1];
          }),
          (a.cross = function (e, t, i) {
            var r = t[0] * i[1] - t[1] * i[0];
            return (e[0] = e[1] = 0), (e[2] = r), e;
          }),
          (a.lerp = function (e, t, i, r) {
            var n = t[0],
              o = t[1];
            return (e[0] = n + r * (i[0] - n)), (e[1] = o + r * (i[1] - o)), e;
          }),
          (a.random = function (e, t) {
            t = t || 1;
            var i = 2 * r() * Math.PI;
            return (e[0] = Math.cos(i) * t), (e[1] = Math.sin(i) * t), e;
          }),
          (a.transformMat2 = function (e, t, i) {
            var r = t[0],
              n = t[1];
            return (
              (e[0] = i[0] * r + i[2] * n), (e[1] = i[1] * r + i[3] * n), e
            );
          }),
          (a.transformMat2d = function (e, t, i) {
            var r = t[0],
              n = t[1];
            return (
              (e[0] = i[0] * r + i[2] * n + i[4]),
              (e[1] = i[1] * r + i[3] * n + i[5]),
              e
            );
          }),
          (a.transformMat3 = function (e, t, i) {
            var r = t[0],
              n = t[1];
            return (
              (e[0] = i[0] * r + i[3] * n + i[6]),
              (e[1] = i[1] * r + i[4] * n + i[7]),
              e
            );
          }),
          (a.transformMat4 = function (e, t, i) {
            var r = t[0],
              n = t[1];
            return (
              (e[0] = i[0] * r + i[4] * n + i[12]),
              (e[1] = i[1] * r + i[5] * n + i[13]),
              e
            );
          }),
          (a.forEach = (function () {
            var e = a.create();
            return function (t, i, r, n, o, a) {
              var s, l;
              for (
                i || (i = 2),
                  r || (r = 0),
                  l = n ? Math.min(n * i + r, t.length) : t.length,
                  s = r;
                s < l;
                s += i
              )
                (e[0] = t[s]),
                  (e[1] = t[s + 1]),
                  o(e, e, a),
                  (t[s] = e[0]),
                  (t[s + 1] = e[1]);
              return t;
            };
          })()),
          (a.str = function (e) {
            return "vec2(" + e[0] + ", " + e[1] + ")";
          }),
          void 0 !== e && (e.vec2 = a);
        var s = {
          create: function () {
            var e = new i(3);
            return (e[0] = 0), (e[1] = 0), (e[2] = 0), e;
          },
          clone: function (e) {
            var t = new i(3);
            return (t[0] = e[0]), (t[1] = e[1]), (t[2] = e[2]), t;
          },
          fromValues: function (e, t, r) {
            var n = new i(3);
            return (n[0] = e), (n[1] = t), (n[2] = r), n;
          },
          copy: function (e, t) {
            return (e[0] = t[0]), (e[1] = t[1]), (e[2] = t[2]), e;
          },
          set: function (e, t, i, r) {
            return (e[0] = t), (e[1] = i), (e[2] = r), e;
          },
          add: function (e, t, i) {
            return (
              (e[0] = t[0] + i[0]),
              (e[1] = t[1] + i[1]),
              (e[2] = t[2] + i[2]),
              e
            );
          },
          subtract: function (e, t, i) {
            return (
              (e[0] = t[0] - i[0]),
              (e[1] = t[1] - i[1]),
              (e[2] = t[2] - i[2]),
              e
            );
          },
        };
        (s.sub = s.subtract),
          (s.multiply = function (e, t, i) {
            return (
              (e[0] = t[0] * i[0]),
              (e[1] = t[1] * i[1]),
              (e[2] = t[2] * i[2]),
              e
            );
          }),
          (s.mul = s.multiply),
          (s.divide = function (e, t, i) {
            return (
              (e[0] = t[0] / i[0]),
              (e[1] = t[1] / i[1]),
              (e[2] = t[2] / i[2]),
              e
            );
          }),
          (s.div = s.divide),
          (s.min = function (e, t, i) {
            return (
              (e[0] = Math.min(t[0], i[0])),
              (e[1] = Math.min(t[1], i[1])),
              (e[2] = Math.min(t[2], i[2])),
              e
            );
          }),
          (s.max = function (e, t, i) {
            return (
              (e[0] = Math.max(t[0], i[0])),
              (e[1] = Math.max(t[1], i[1])),
              (e[2] = Math.max(t[2], i[2])),
              e
            );
          }),
          (s.scale = function (e, t, i) {
            return (e[0] = t[0] * i), (e[1] = t[1] * i), (e[2] = t[2] * i), e;
          }),
          (s.scaleAndAdd = function (e, t, i, r) {
            return (
              (e[0] = t[0] + i[0] * r),
              (e[1] = t[1] + i[1] * r),
              (e[2] = t[2] + i[2] * r),
              e
            );
          }),
          (s.distance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1],
              n = t[2] - e[2];
            return Math.sqrt(i * i + r * r + n * n);
          }),
          (s.dist = s.distance),
          (s.squaredDistance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1],
              n = t[2] - e[2];
            return i * i + r * r + n * n;
          }),
          (s.sqrDist = s.squaredDistance),
          (s.length = function (e) {
            var t = e[0],
              i = e[1],
              r = e[2];
            return Math.sqrt(t * t + i * i + r * r);
          }),
          (s.len = s.length),
          (s.squaredLength = function (e) {
            var t = e[0],
              i = e[1],
              r = e[2];
            return t * t + i * i + r * r;
          }),
          (s.sqrLen = s.squaredLength),
          (s.negate = function (e, t) {
            return (e[0] = -t[0]), (e[1] = -t[1]), (e[2] = -t[2]), e;
          }),
          (s.normalize = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = i * i + r * r + n * n;
            return (
              o > 0 &&
                ((o = 1 / Math.sqrt(o)),
                (e[0] = t[0] * o),
                (e[1] = t[1] * o),
                (e[2] = t[2] * o)),
              e
            );
          }),
          (s.dot = function (e, t) {
            return e[0] * t[0] + e[1] * t[1] + e[2] * t[2];
          }),
          (s.cross = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = i[0],
              s = i[1],
              l = i[2];
            return (
              (e[0] = n * l - o * s),
              (e[1] = o * a - r * l),
              (e[2] = r * s - n * a),
              e
            );
          }),
          (s.lerp = function (e, t, i, r) {
            var n = t[0],
              o = t[1],
              a = t[2];
            return (
              (e[0] = n + r * (i[0] - n)),
              (e[1] = o + r * (i[1] - o)),
              (e[2] = a + r * (i[2] - a)),
              e
            );
          }),
          (s.random = function (e, t) {
            t = t || 1;
            var i = 2 * r() * Math.PI,
              n = 2 * r() - 1,
              o = Math.sqrt(1 - n * n) * t;
            return (
              (e[0] = Math.cos(i) * o),
              (e[1] = Math.sin(i) * o),
              (e[2] = n * t),
              e
            );
          }),
          (s.transformMat4 = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2];
            return (
              (e[0] = i[0] * r + i[4] * n + i[8] * o + i[12]),
              (e[1] = i[1] * r + i[5] * n + i[9] * o + i[13]),
              (e[2] = i[2] * r + i[6] * n + i[10] * o + i[14]),
              e
            );
          }),
          (s.transformMat3 = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2];
            return (
              (e[0] = r * i[0] + n * i[3] + o * i[6]),
              (e[1] = r * i[1] + n * i[4] + o * i[7]),
              (e[2] = r * i[2] + n * i[5] + o * i[8]),
              e
            );
          }),
          (s.transformQuat = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = i[0],
              s = i[1],
              l = i[2],
              h = i[3],
              c = h * r + s * o - l * n,
              u = h * n + l * r - a * o,
              p = h * o + a * n - s * r,
              d = -a * r - s * n - l * o;
            return (
              (e[0] = c * h + d * -a + u * -l - p * -s),
              (e[1] = u * h + d * -s + p * -a - c * -l),
              (e[2] = p * h + d * -l + c * -s - u * -a),
              e
            );
          }),
          (s.rotateX = function (e, t, i, r) {
            var n = [],
              o = [];
            return (
              (n[0] = t[0] - i[0]),
              (n[1] = t[1] - i[1]),
              (n[2] = t[2] - i[2]),
              (o[0] = n[0]),
              (o[1] = n[1] * Math.cos(r) - n[2] * Math.sin(r)),
              (o[2] = n[1] * Math.sin(r) + n[2] * Math.cos(r)),
              (e[0] = o[0] + i[0]),
              (e[1] = o[1] + i[1]),
              (e[2] = o[2] + i[2]),
              e
            );
          }),
          (s.rotateY = function (e, t, i, r) {
            var n = [],
              o = [];
            return (
              (n[0] = t[0] - i[0]),
              (n[1] = t[1] - i[1]),
              (n[2] = t[2] - i[2]),
              (o[0] = n[2] * Math.sin(r) + n[0] * Math.cos(r)),
              (o[1] = n[1]),
              (o[2] = n[2] * Math.cos(r) - n[0] * Math.sin(r)),
              (e[0] = o[0] + i[0]),
              (e[1] = o[1] + i[1]),
              (e[2] = o[2] + i[2]),
              e
            );
          }),
          (s.rotateZ = function (e, t, i, r) {
            var n = [],
              o = [];
            return (
              (n[0] = t[0] - i[0]),
              (n[1] = t[1] - i[1]),
              (n[2] = t[2] - i[2]),
              (o[0] = n[0] * Math.cos(r) - n[1] * Math.sin(r)),
              (o[1] = n[0] * Math.sin(r) + n[1] * Math.cos(r)),
              (o[2] = n[2]),
              (e[0] = o[0] + i[0]),
              (e[1] = o[1] + i[1]),
              (e[2] = o[2] + i[2]),
              e
            );
          }),
          (s.forEach = (function () {
            var e = s.create();
            return function (t, i, r, n, o, a) {
              var s, l;
              for (
                i || (i = 3),
                  r || (r = 0),
                  l = n ? Math.min(n * i + r, t.length) : t.length,
                  s = r;
                s < l;
                s += i
              )
                (e[0] = t[s]),
                  (e[1] = t[s + 1]),
                  (e[2] = t[s + 2]),
                  o(e, e, a),
                  (t[s] = e[0]),
                  (t[s + 1] = e[1]),
                  (t[s + 2] = e[2]);
              return t;
            };
          })()),
          (s.str = function (e) {
            return "vec3(" + e[0] + ", " + e[1] + ", " + e[2] + ")";
          }),
          void 0 !== e && (e.vec3 = s);
        var l = {
          create: function () {
            var e = new i(4);
            return (e[0] = 0), (e[1] = 0), (e[2] = 0), (e[3] = 0), e;
          },
          clone: function (e) {
            var t = new i(4);
            return (
              (t[0] = e[0]), (t[1] = e[1]), (t[2] = e[2]), (t[3] = e[3]), t
            );
          },
          fromValues: function (e, t, r, n) {
            var o = new i(4);
            return (o[0] = e), (o[1] = t), (o[2] = r), (o[3] = n), o;
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]), (e[1] = t[1]), (e[2] = t[2]), (e[3] = t[3]), e
            );
          },
          set: function (e, t, i, r, n) {
            return (e[0] = t), (e[1] = i), (e[2] = r), (e[3] = n), e;
          },
          add: function (e, t, i) {
            return (
              (e[0] = t[0] + i[0]),
              (e[1] = t[1] + i[1]),
              (e[2] = t[2] + i[2]),
              (e[3] = t[3] + i[3]),
              e
            );
          },
          subtract: function (e, t, i) {
            return (
              (e[0] = t[0] - i[0]),
              (e[1] = t[1] - i[1]),
              (e[2] = t[2] - i[2]),
              (e[3] = t[3] - i[3]),
              e
            );
          },
        };
        (l.sub = l.subtract),
          (l.multiply = function (e, t, i) {
            return (
              (e[0] = t[0] * i[0]),
              (e[1] = t[1] * i[1]),
              (e[2] = t[2] * i[2]),
              (e[3] = t[3] * i[3]),
              e
            );
          }),
          (l.mul = l.multiply),
          (l.divide = function (e, t, i) {
            return (
              (e[0] = t[0] / i[0]),
              (e[1] = t[1] / i[1]),
              (e[2] = t[2] / i[2]),
              (e[3] = t[3] / i[3]),
              e
            );
          }),
          (l.div = l.divide),
          (l.min = function (e, t, i) {
            return (
              (e[0] = Math.min(t[0], i[0])),
              (e[1] = Math.min(t[1], i[1])),
              (e[2] = Math.min(t[2], i[2])),
              (e[3] = Math.min(t[3], i[3])),
              e
            );
          }),
          (l.max = function (e, t, i) {
            return (
              (e[0] = Math.max(t[0], i[0])),
              (e[1] = Math.max(t[1], i[1])),
              (e[2] = Math.max(t[2], i[2])),
              (e[3] = Math.max(t[3], i[3])),
              e
            );
          }),
          (l.scale = function (e, t, i) {
            return (
              (e[0] = t[0] * i),
              (e[1] = t[1] * i),
              (e[2] = t[2] * i),
              (e[3] = t[3] * i),
              e
            );
          }),
          (l.scaleAndAdd = function (e, t, i, r) {
            return (
              (e[0] = t[0] + i[0] * r),
              (e[1] = t[1] + i[1] * r),
              (e[2] = t[2] + i[2] * r),
              (e[3] = t[3] + i[3] * r),
              e
            );
          }),
          (l.distance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1],
              n = t[2] - e[2],
              o = t[3] - e[3];
            return Math.sqrt(i * i + r * r + n * n + o * o);
          }),
          (l.dist = l.distance),
          (l.squaredDistance = function (e, t) {
            var i = t[0] - e[0],
              r = t[1] - e[1],
              n = t[2] - e[2],
              o = t[3] - e[3];
            return i * i + r * r + n * n + o * o;
          }),
          (l.sqrDist = l.squaredDistance),
          (l.length = function (e) {
            var t = e[0],
              i = e[1],
              r = e[2],
              n = e[3];
            return Math.sqrt(t * t + i * i + r * r + n * n);
          }),
          (l.len = l.length),
          (l.squaredLength = function (e) {
            var t = e[0],
              i = e[1],
              r = e[2],
              n = e[3];
            return t * t + i * i + r * r + n * n;
          }),
          (l.sqrLen = l.squaredLength),
          (l.negate = function (e, t) {
            return (
              (e[0] = -t[0]), (e[1] = -t[1]), (e[2] = -t[2]), (e[3] = -t[3]), e
            );
          }),
          (l.normalize = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = i * i + r * r + n * n + o * o;
            return (
              a > 0 &&
                ((a = 1 / Math.sqrt(a)),
                (e[0] = t[0] * a),
                (e[1] = t[1] * a),
                (e[2] = t[2] * a),
                (e[3] = t[3] * a)),
              e
            );
          }),
          (l.dot = function (e, t) {
            return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
          }),
          (l.lerp = function (e, t, i, r) {
            var n = t[0],
              o = t[1],
              a = t[2],
              s = t[3];
            return (
              (e[0] = n + r * (i[0] - n)),
              (e[1] = o + r * (i[1] - o)),
              (e[2] = a + r * (i[2] - a)),
              (e[3] = s + r * (i[3] - s)),
              e
            );
          }),
          (l.random = function (e, t) {
            return (
              (t = t || 1),
              (e[0] = r()),
              (e[1] = r()),
              (e[2] = r()),
              (e[3] = r()),
              l.normalize(e, e),
              l.scale(e, e, t),
              e
            );
          }),
          (l.transformMat4 = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3];
            return (
              (e[0] = i[0] * r + i[4] * n + i[8] * o + i[12] * a),
              (e[1] = i[1] * r + i[5] * n + i[9] * o + i[13] * a),
              (e[2] = i[2] * r + i[6] * n + i[10] * o + i[14] * a),
              (e[3] = i[3] * r + i[7] * n + i[11] * o + i[15] * a),
              e
            );
          }),
          (l.transformQuat = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = i[0],
              s = i[1],
              l = i[2],
              h = i[3],
              c = h * r + s * o - l * n,
              u = h * n + l * r - a * o,
              p = h * o + a * n - s * r,
              d = -a * r - s * n - l * o;
            return (
              (e[0] = c * h + d * -a + u * -l - p * -s),
              (e[1] = u * h + d * -s + p * -a - c * -l),
              (e[2] = p * h + d * -l + c * -s - u * -a),
              e
            );
          }),
          (l.forEach = (function () {
            var e = l.create();
            return function (t, i, r, n, o, a) {
              var s, l;
              for (
                i || (i = 4),
                  r || (r = 0),
                  l = n ? Math.min(n * i + r, t.length) : t.length,
                  s = r;
                s < l;
                s += i
              )
                (e[0] = t[s]),
                  (e[1] = t[s + 1]),
                  (e[2] = t[s + 2]),
                  (e[3] = t[s + 3]),
                  o(e, e, a),
                  (t[s] = e[0]),
                  (t[s + 1] = e[1]),
                  (t[s + 2] = e[2]),
                  (t[s + 3] = e[3]);
              return t;
            };
          })()),
          (l.str = function (e) {
            return (
              "vec4(" + e[0] + ", " + e[1] + ", " + e[2] + ", " + e[3] + ")"
            );
          }),
          void 0 !== e && (e.vec4 = l);
        var h = {
          create: function () {
            var e = new i(4);
            return (e[0] = 1), (e[1] = 0), (e[2] = 0), (e[3] = 1), e;
          },
          clone: function (e) {
            var t = new i(4);
            return (
              (t[0] = e[0]), (t[1] = e[1]), (t[2] = e[2]), (t[3] = e[3]), t
            );
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]), (e[1] = t[1]), (e[2] = t[2]), (e[3] = t[3]), e
            );
          },
          identity: function (e) {
            return (e[0] = 1), (e[1] = 0), (e[2] = 0), (e[3] = 1), e;
          },
          transpose: function (e, t) {
            if (e === t) {
              var i = t[1];
              (e[1] = t[2]), (e[2] = i);
            } else (e[0] = t[0]), (e[1] = t[2]), (e[2] = t[1]), (e[3] = t[3]);
            return e;
          },
          invert: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = i * o - n * r;
            return a
              ? ((a = 1 / a),
                (e[0] = o * a),
                (e[1] = -r * a),
                (e[2] = -n * a),
                (e[3] = i * a),
                e)
              : null;
          },
          adjoint: function (e, t) {
            var i = t[0];
            return (e[0] = t[3]), (e[1] = -t[1]), (e[2] = -t[2]), (e[3] = i), e;
          },
          determinant: function (e) {
            return e[0] * e[3] - e[2] * e[1];
          },
          multiply: function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = i[0],
              l = i[1],
              h = i[2],
              c = i[3];
            return (
              (e[0] = r * s + o * l),
              (e[1] = n * s + a * l),
              (e[2] = r * h + o * c),
              (e[3] = n * h + a * c),
              e
            );
          },
        };
        (h.mul = h.multiply),
          (h.rotate = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = Math.sin(i),
              l = Math.cos(i);
            return (
              (e[0] = r * l + o * s),
              (e[1] = n * l + a * s),
              (e[2] = r * -s + o * l),
              (e[3] = n * -s + a * l),
              e
            );
          }),
          (h.scale = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = i[0],
              l = i[1];
            return (
              (e[0] = r * s), (e[1] = n * s), (e[2] = o * l), (e[3] = a * l), e
            );
          }),
          (h.str = function (e) {
            return (
              "mat2(" + e[0] + ", " + e[1] + ", " + e[2] + ", " + e[3] + ")"
            );
          }),
          (h.frob = function (e) {
            return Math.sqrt(
              Math.pow(e[0], 2) +
                Math.pow(e[1], 2) +
                Math.pow(e[2], 2) +
                Math.pow(e[3], 2)
            );
          }),
          (h.LDU = function (e, t, i, r) {
            return (
              (e[2] = r[2] / r[0]),
              (i[0] = r[0]),
              (i[1] = r[1]),
              (i[3] = r[3] - e[2] * i[1]),
              [e, t, i]
            );
          }),
          void 0 !== e && (e.mat2 = h);
        var c = {
          create: function () {
            var e = new i(6);
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 1),
              (e[4] = 0),
              (e[5] = 0),
              e
            );
          },
          clone: function (e) {
            var t = new i(6);
            return (
              (t[0] = e[0]),
              (t[1] = e[1]),
              (t[2] = e[2]),
              (t[3] = e[3]),
              (t[4] = e[4]),
              (t[5] = e[5]),
              t
            );
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[3]),
              (e[4] = t[4]),
              (e[5] = t[5]),
              e
            );
          },
          identity: function (e) {
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 1),
              (e[4] = 0),
              (e[5] = 0),
              e
            );
          },
          invert: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = i * o - r * n;
            return l
              ? ((l = 1 / l),
                (e[0] = o * l),
                (e[1] = -r * l),
                (e[2] = -n * l),
                (e[3] = i * l),
                (e[4] = (n * s - o * a) * l),
                (e[5] = (r * a - i * s) * l),
                e)
              : null;
          },
          determinant: function (e) {
            return e[0] * e[3] - e[1] * e[2];
          },
          multiply: function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = i[0],
              c = i[1],
              u = i[2],
              p = i[3],
              d = i[4],
              f = i[5];
            return (
              (e[0] = r * h + o * c),
              (e[1] = n * h + a * c),
              (e[2] = r * u + o * p),
              (e[3] = n * u + a * p),
              (e[4] = r * d + o * f + s),
              (e[5] = n * d + a * f + l),
              e
            );
          },
        };
        (c.mul = c.multiply),
          (c.rotate = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = Math.sin(i),
              c = Math.cos(i);
            return (
              (e[0] = r * c + o * h),
              (e[1] = n * c + a * h),
              (e[2] = r * -h + o * c),
              (e[3] = n * -h + a * c),
              (e[4] = s),
              (e[5] = l),
              e
            );
          }),
          (c.scale = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = i[0],
              c = i[1];
            return (
              (e[0] = r * h),
              (e[1] = n * h),
              (e[2] = o * c),
              (e[3] = a * c),
              (e[4] = s),
              (e[5] = l),
              e
            );
          }),
          (c.translate = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = i[0],
              c = i[1];
            return (
              (e[0] = r),
              (e[1] = n),
              (e[2] = o),
              (e[3] = a),
              (e[4] = r * h + o * c + s),
              (e[5] = n * h + a * c + l),
              e
            );
          }),
          (c.str = function (e) {
            return (
              "mat2d(" +
              e[0] +
              ", " +
              e[1] +
              ", " +
              e[2] +
              ", " +
              e[3] +
              ", " +
              e[4] +
              ", " +
              e[5] +
              ")"
            );
          }),
          (c.frob = function (e) {
            return Math.sqrt(
              Math.pow(e[0], 2) +
                Math.pow(e[1], 2) +
                Math.pow(e[2], 2) +
                Math.pow(e[3], 2) +
                Math.pow(e[4], 2) +
                Math.pow(e[5], 2) +
                1
            );
          }),
          void 0 !== e && (e.mat2d = c);
        var u = {
          create: function () {
            var e = new i(9);
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 1),
              (e[5] = 0),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 1),
              e
            );
          },
          fromMat4: function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[4]),
              (e[4] = t[5]),
              (e[5] = t[6]),
              (e[6] = t[8]),
              (e[7] = t[9]),
              (e[8] = t[10]),
              e
            );
          },
          clone: function (e) {
            var t = new i(9);
            return (
              (t[0] = e[0]),
              (t[1] = e[1]),
              (t[2] = e[2]),
              (t[3] = e[3]),
              (t[4] = e[4]),
              (t[5] = e[5]),
              (t[6] = e[6]),
              (t[7] = e[7]),
              (t[8] = e[8]),
              t
            );
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[3]),
              (e[4] = t[4]),
              (e[5] = t[5]),
              (e[6] = t[6]),
              (e[7] = t[7]),
              (e[8] = t[8]),
              e
            );
          },
          identity: function (e) {
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 1),
              (e[5] = 0),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 1),
              e
            );
          },
          transpose: function (e, t) {
            if (e === t) {
              var i = t[1],
                r = t[2],
                n = t[5];
              (e[1] = t[3]),
                (e[2] = t[6]),
                (e[3] = i),
                (e[5] = t[7]),
                (e[6] = r),
                (e[7] = n);
            } else
              (e[0] = t[0]),
                (e[1] = t[3]),
                (e[2] = t[6]),
                (e[3] = t[1]),
                (e[4] = t[4]),
                (e[5] = t[7]),
                (e[6] = t[2]),
                (e[7] = t[5]),
                (e[8] = t[8]);
            return e;
          },
          invert: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = t[6],
              h = t[7],
              c = t[8],
              u = c * a - s * h,
              p = -c * o + s * l,
              d = h * o - a * l,
              f = i * u + r * p + n * d;
            return f
              ? ((f = 1 / f),
                (e[0] = u * f),
                (e[1] = (-c * r + n * h) * f),
                (e[2] = (s * r - n * a) * f),
                (e[3] = p * f),
                (e[4] = (c * i - n * l) * f),
                (e[5] = (-s * i + n * o) * f),
                (e[6] = d * f),
                (e[7] = (-h * i + r * l) * f),
                (e[8] = (a * i - r * o) * f),
                e)
              : null;
          },
          adjoint: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = t[6],
              h = t[7],
              c = t[8];
            return (
              (e[0] = a * c - s * h),
              (e[1] = n * h - r * c),
              (e[2] = r * s - n * a),
              (e[3] = s * l - o * c),
              (e[4] = i * c - n * l),
              (e[5] = n * o - i * s),
              (e[6] = o * h - a * l),
              (e[7] = r * l - i * h),
              (e[8] = i * a - r * o),
              e
            );
          },
          determinant: function (e) {
            var t = e[0],
              i = e[1],
              r = e[2],
              n = e[3],
              o = e[4],
              a = e[5],
              s = e[6],
              l = e[7],
              h = e[8];
            return (
              t * (h * o - a * l) + i * (-h * n + a * s) + r * (l * n - o * s)
            );
          },
          multiply: function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = t[6],
              c = t[7],
              u = t[8],
              p = i[0],
              d = i[1],
              f = i[2],
              m = i[3],
              E = i[4],
              g = i[5],
              v = i[6],
              y = i[7],
              T = i[8];
            return (
              (e[0] = p * r + d * a + f * h),
              (e[1] = p * n + d * s + f * c),
              (e[2] = p * o + d * l + f * u),
              (e[3] = m * r + E * a + g * h),
              (e[4] = m * n + E * s + g * c),
              (e[5] = m * o + E * l + g * u),
              (e[6] = v * r + y * a + T * h),
              (e[7] = v * n + y * s + T * c),
              (e[8] = v * o + y * l + T * u),
              e
            );
          },
        };
        (u.mul = u.multiply),
          (u.translate = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = t[6],
              c = t[7],
              u = t[8],
              p = i[0],
              d = i[1];
            return (
              (e[0] = r),
              (e[1] = n),
              (e[2] = o),
              (e[3] = a),
              (e[4] = s),
              (e[5] = l),
              (e[6] = p * r + d * a + h),
              (e[7] = p * n + d * s + c),
              (e[8] = p * o + d * l + u),
              e
            );
          }),
          (u.rotate = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = t[6],
              c = t[7],
              u = t[8],
              p = Math.sin(i),
              d = Math.cos(i);
            return (
              (e[0] = d * r + p * a),
              (e[1] = d * n + p * s),
              (e[2] = d * o + p * l),
              (e[3] = d * a - p * r),
              (e[4] = d * s - p * n),
              (e[5] = d * l - p * o),
              (e[6] = h),
              (e[7] = c),
              (e[8] = u),
              e
            );
          }),
          (u.scale = function (e, t, i) {
            var r = i[0],
              n = i[1];
            return (
              (e[0] = r * t[0]),
              (e[1] = r * t[1]),
              (e[2] = r * t[2]),
              (e[3] = n * t[3]),
              (e[4] = n * t[4]),
              (e[5] = n * t[5]),
              (e[6] = t[6]),
              (e[7] = t[7]),
              (e[8] = t[8]),
              e
            );
          }),
          (u.fromMat2d = function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = 0),
              (e[3] = t[2]),
              (e[4] = t[3]),
              (e[5] = 0),
              (e[6] = t[4]),
              (e[7] = t[5]),
              (e[8] = 1),
              e
            );
          }),
          (u.fromQuat = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = i + i,
              s = r + r,
              l = n + n,
              h = i * a,
              c = r * a,
              u = r * s,
              p = n * a,
              d = n * s,
              f = n * l,
              m = o * a,
              E = o * s,
              g = o * l;
            return (
              (e[0] = 1 - u - f),
              (e[3] = c - g),
              (e[6] = p + E),
              (e[1] = c + g),
              (e[4] = 1 - h - f),
              (e[7] = d - m),
              (e[2] = p - E),
              (e[5] = d + m),
              (e[8] = 1 - h - u),
              e
            );
          }),
          (u.normalFromMat4 = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = t[6],
              h = t[7],
              c = t[8],
              u = t[9],
              p = t[10],
              d = t[11],
              f = t[12],
              m = t[13],
              E = t[14],
              g = t[15],
              v = i * s - r * a,
              y = i * l - n * a,
              T = i * h - o * a,
              R = r * l - n * s,
              x = r * h - o * s,
              H = n * h - o * l,
              b = c * m - u * f,
              w = c * E - p * f,
              q = c * g - d * f,
              M = u * E - p * m,
              _ = u * g - d * m,
              S = p * g - d * E,
              C = v * S - y * _ + T * M + R * q - x * w + H * b;
            return C
              ? ((C = 1 / C),
                (e[0] = (s * S - l * _ + h * M) * C),
                (e[1] = (l * q - a * S - h * w) * C),
                (e[2] = (a * _ - s * q + h * b) * C),
                (e[3] = (n * _ - r * S - o * M) * C),
                (e[4] = (i * S - n * q + o * w) * C),
                (e[5] = (r * q - i * _ - o * b) * C),
                (e[6] = (m * H - E * x + g * R) * C),
                (e[7] = (E * T - f * H - g * y) * C),
                (e[8] = (f * x - m * T + g * v) * C),
                e)
              : null;
          }),
          (u.str = function (e) {
            return (
              "mat3(" +
              e[0] +
              ", " +
              e[1] +
              ", " +
              e[2] +
              ", " +
              e[3] +
              ", " +
              e[4] +
              ", " +
              e[5] +
              ", " +
              e[6] +
              ", " +
              e[7] +
              ", " +
              e[8] +
              ")"
            );
          }),
          (u.frob = function (e) {
            return Math.sqrt(
              Math.pow(e[0], 2) +
                Math.pow(e[1], 2) +
                Math.pow(e[2], 2) +
                Math.pow(e[3], 2) +
                Math.pow(e[4], 2) +
                Math.pow(e[5], 2) +
                Math.pow(e[6], 2) +
                Math.pow(e[7], 2) +
                Math.pow(e[8], 2)
            );
          }),
          void 0 !== e && (e.mat3 = u);
        var p = {
          create: function () {
            var e = new i(16);
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = 1),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 0),
              (e[9] = 0),
              (e[10] = 1),
              (e[11] = 0),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = 0),
              (e[15] = 1),
              e
            );
          },
          clone: function (e) {
            var t = new i(16);
            return (
              (t[0] = e[0]),
              (t[1] = e[1]),
              (t[2] = e[2]),
              (t[3] = e[3]),
              (t[4] = e[4]),
              (t[5] = e[5]),
              (t[6] = e[6]),
              (t[7] = e[7]),
              (t[8] = e[8]),
              (t[9] = e[9]),
              (t[10] = e[10]),
              (t[11] = e[11]),
              (t[12] = e[12]),
              (t[13] = e[13]),
              (t[14] = e[14]),
              (t[15] = e[15]),
              t
            );
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[3]),
              (e[4] = t[4]),
              (e[5] = t[5]),
              (e[6] = t[6]),
              (e[7] = t[7]),
              (e[8] = t[8]),
              (e[9] = t[9]),
              (e[10] = t[10]),
              (e[11] = t[11]),
              (e[12] = t[12]),
              (e[13] = t[13]),
              (e[14] = t[14]),
              (e[15] = t[15]),
              e
            );
          },
          identity: function (e) {
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = 1),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 0),
              (e[9] = 0),
              (e[10] = 1),
              (e[11] = 0),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = 0),
              (e[15] = 1),
              e
            );
          },
          transpose: function (e, t) {
            if (e === t) {
              var i = t[1],
                r = t[2],
                n = t[3],
                o = t[6],
                a = t[7],
                s = t[11];
              (e[1] = t[4]),
                (e[2] = t[8]),
                (e[3] = t[12]),
                (e[4] = i),
                (e[6] = t[9]),
                (e[7] = t[13]),
                (e[8] = r),
                (e[9] = o),
                (e[11] = t[14]),
                (e[12] = n),
                (e[13] = a),
                (e[14] = s);
            } else
              (e[0] = t[0]),
                (e[1] = t[4]),
                (e[2] = t[8]),
                (e[3] = t[12]),
                (e[4] = t[1]),
                (e[5] = t[5]),
                (e[6] = t[9]),
                (e[7] = t[13]),
                (e[8] = t[2]),
                (e[9] = t[6]),
                (e[10] = t[10]),
                (e[11] = t[14]),
                (e[12] = t[3]),
                (e[13] = t[7]),
                (e[14] = t[11]),
                (e[15] = t[15]);
            return e;
          },
          invert: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = t[6],
              h = t[7],
              c = t[8],
              u = t[9],
              p = t[10],
              d = t[11],
              f = t[12],
              m = t[13],
              E = t[14],
              g = t[15],
              v = i * s - r * a,
              y = i * l - n * a,
              T = i * h - o * a,
              R = r * l - n * s,
              x = r * h - o * s,
              H = n * h - o * l,
              b = c * m - u * f,
              w = c * E - p * f,
              q = c * g - d * f,
              M = u * E - p * m,
              _ = u * g - d * m,
              S = p * g - d * E,
              C = v * S - y * _ + T * M + R * q - x * w + H * b;
            return C
              ? ((C = 1 / C),
                (e[0] = (s * S - l * _ + h * M) * C),
                (e[1] = (n * _ - r * S - o * M) * C),
                (e[2] = (m * H - E * x + g * R) * C),
                (e[3] = (p * x - u * H - d * R) * C),
                (e[4] = (l * q - a * S - h * w) * C),
                (e[5] = (i * S - n * q + o * w) * C),
                (e[6] = (E * T - f * H - g * y) * C),
                (e[7] = (c * H - p * T + d * y) * C),
                (e[8] = (a * _ - s * q + h * b) * C),
                (e[9] = (r * q - i * _ - o * b) * C),
                (e[10] = (f * x - m * T + g * v) * C),
                (e[11] = (u * T - c * x - d * v) * C),
                (e[12] = (s * w - a * M - l * b) * C),
                (e[13] = (i * M - r * w + n * b) * C),
                (e[14] = (m * y - f * R - E * v) * C),
                (e[15] = (c * R - u * y + p * v) * C),
                e)
              : null;
          },
          adjoint: function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = t[4],
              s = t[5],
              l = t[6],
              h = t[7],
              c = t[8],
              u = t[9],
              p = t[10],
              d = t[11],
              f = t[12],
              m = t[13],
              E = t[14],
              g = t[15];
            return (
              (e[0] =
                s * (p * g - d * E) -
                u * (l * g - h * E) +
                m * (l * d - h * p)),
              (e[1] = -(
                r * (p * g - d * E) -
                u * (n * g - o * E) +
                m * (n * d - o * p)
              )),
              (e[2] =
                r * (l * g - h * E) -
                s * (n * g - o * E) +
                m * (n * h - o * l)),
              (e[3] = -(
                r * (l * d - h * p) -
                s * (n * d - o * p) +
                u * (n * h - o * l)
              )),
              (e[4] = -(
                a * (p * g - d * E) -
                c * (l * g - h * E) +
                f * (l * d - h * p)
              )),
              (e[5] =
                i * (p * g - d * E) -
                c * (n * g - o * E) +
                f * (n * d - o * p)),
              (e[6] = -(
                i * (l * g - h * E) -
                a * (n * g - o * E) +
                f * (n * h - o * l)
              )),
              (e[7] =
                i * (l * d - h * p) -
                a * (n * d - o * p) +
                c * (n * h - o * l)),
              (e[8] =
                a * (u * g - d * m) -
                c * (s * g - h * m) +
                f * (s * d - h * u)),
              (e[9] = -(
                i * (u * g - d * m) -
                c * (r * g - o * m) +
                f * (r * d - o * u)
              )),
              (e[10] =
                i * (s * g - h * m) -
                a * (r * g - o * m) +
                f * (r * h - o * s)),
              (e[11] = -(
                i * (s * d - h * u) -
                a * (r * d - o * u) +
                c * (r * h - o * s)
              )),
              (e[12] = -(
                a * (u * E - p * m) -
                c * (s * E - l * m) +
                f * (s * p - l * u)
              )),
              (e[13] =
                i * (u * E - p * m) -
                c * (r * E - n * m) +
                f * (r * p - n * u)),
              (e[14] = -(
                i * (s * E - l * m) -
                a * (r * E - n * m) +
                f * (r * l - n * s)
              )),
              (e[15] =
                i * (s * p - l * u) -
                a * (r * p - n * u) +
                c * (r * l - n * s)),
              e
            );
          },
          determinant: function (e) {
            var t = e[0],
              i = e[1],
              r = e[2],
              n = e[3],
              o = e[4],
              a = e[5],
              s = e[6],
              l = e[7],
              h = e[8],
              c = e[9],
              u = e[10],
              p = e[11],
              d = e[12],
              f = e[13],
              m = e[14],
              E = e[15];
            return (
              (t * a - i * o) * (u * E - p * m) -
              (t * s - r * o) * (c * E - p * f) +
              (t * l - n * o) * (c * m - u * f) +
              (i * s - r * a) * (h * E - p * d) -
              (i * l - n * a) * (h * m - u * d) +
              (r * l - n * s) * (h * f - c * d)
            );
          },
          multiply: function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = t[4],
              l = t[5],
              h = t[6],
              c = t[7],
              u = t[8],
              p = t[9],
              d = t[10],
              f = t[11],
              m = t[12],
              E = t[13],
              g = t[14],
              v = t[15],
              y = i[0],
              T = i[1],
              R = i[2],
              x = i[3];
            return (
              (e[0] = y * r + T * s + R * u + x * m),
              (e[1] = y * n + T * l + R * p + x * E),
              (e[2] = y * o + T * h + R * d + x * g),
              (e[3] = y * a + T * c + R * f + x * v),
              (y = i[4]),
              (T = i[5]),
              (R = i[6]),
              (x = i[7]),
              (e[4] = y * r + T * s + R * u + x * m),
              (e[5] = y * n + T * l + R * p + x * E),
              (e[6] = y * o + T * h + R * d + x * g),
              (e[7] = y * a + T * c + R * f + x * v),
              (y = i[8]),
              (T = i[9]),
              (R = i[10]),
              (x = i[11]),
              (e[8] = y * r + T * s + R * u + x * m),
              (e[9] = y * n + T * l + R * p + x * E),
              (e[10] = y * o + T * h + R * d + x * g),
              (e[11] = y * a + T * c + R * f + x * v),
              (y = i[12]),
              (T = i[13]),
              (R = i[14]),
              (x = i[15]),
              (e[12] = y * r + T * s + R * u + x * m),
              (e[13] = y * n + T * l + R * p + x * E),
              (e[14] = y * o + T * h + R * d + x * g),
              (e[15] = y * a + T * c + R * f + x * v),
              e
            );
          },
        };
        (p.mul = p.multiply),
          (p.translate = function (e, t, i) {
            var r,
              n,
              o,
              a,
              s,
              l,
              h,
              c,
              u,
              p,
              d,
              f,
              m = i[0],
              E = i[1],
              g = i[2];
            return (
              t === e
                ? ((e[12] = t[0] * m + t[4] * E + t[8] * g + t[12]),
                  (e[13] = t[1] * m + t[5] * E + t[9] * g + t[13]),
                  (e[14] = t[2] * m + t[6] * E + t[10] * g + t[14]),
                  (e[15] = t[3] * m + t[7] * E + t[11] * g + t[15]))
                : ((r = t[0]),
                  (n = t[1]),
                  (o = t[2]),
                  (a = t[3]),
                  (s = t[4]),
                  (l = t[5]),
                  (h = t[6]),
                  (c = t[7]),
                  (u = t[8]),
                  (p = t[9]),
                  (d = t[10]),
                  (f = t[11]),
                  (e[0] = r),
                  (e[1] = n),
                  (e[2] = o),
                  (e[3] = a),
                  (e[4] = s),
                  (e[5] = l),
                  (e[6] = h),
                  (e[7] = c),
                  (e[8] = u),
                  (e[9] = p),
                  (e[10] = d),
                  (e[11] = f),
                  (e[12] = r * m + s * E + u * g + t[12]),
                  (e[13] = n * m + l * E + p * g + t[13]),
                  (e[14] = o * m + h * E + d * g + t[14]),
                  (e[15] = a * m + c * E + f * g + t[15])),
              e
            );
          }),
          (p.scale = function (e, t, i) {
            var r = i[0],
              n = i[1],
              o = i[2];
            return (
              (e[0] = t[0] * r),
              (e[1] = t[1] * r),
              (e[2] = t[2] * r),
              (e[3] = t[3] * r),
              (e[4] = t[4] * n),
              (e[5] = t[5] * n),
              (e[6] = t[6] * n),
              (e[7] = t[7] * n),
              (e[8] = t[8] * o),
              (e[9] = t[9] * o),
              (e[10] = t[10] * o),
              (e[11] = t[11] * o),
              (e[12] = t[12]),
              (e[13] = t[13]),
              (e[14] = t[14]),
              (e[15] = t[15]),
              e
            );
          }),
          (p.rotate = function (e, i, r, n) {
            var o,
              a,
              s,
              l,
              h,
              c,
              u,
              p,
              d,
              f,
              m,
              E,
              g,
              v,
              y,
              T,
              R,
              x,
              H,
              b,
              w,
              q,
              M,
              _,
              S = n[0],
              C = n[1],
              L = n[2],
              A = Math.sqrt(S * S + C * C + L * L);
            return Math.abs(A) < t
              ? null
              : ((S *= A = 1 / A),
                (C *= A),
                (L *= A),
                (o = Math.sin(r)),
                (s = 1 - (a = Math.cos(r))),
                (l = i[0]),
                (h = i[1]),
                (c = i[2]),
                (u = i[3]),
                (p = i[4]),
                (d = i[5]),
                (f = i[6]),
                (m = i[7]),
                (E = i[8]),
                (g = i[9]),
                (v = i[10]),
                (y = i[11]),
                (T = S * S * s + a),
                (R = C * S * s + L * o),
                (x = L * S * s - C * o),
                (H = S * C * s - L * o),
                (b = C * C * s + a),
                (w = L * C * s + S * o),
                (q = S * L * s + C * o),
                (M = C * L * s - S * o),
                (_ = L * L * s + a),
                (e[0] = l * T + p * R + E * x),
                (e[1] = h * T + d * R + g * x),
                (e[2] = c * T + f * R + v * x),
                (e[3] = u * T + m * R + y * x),
                (e[4] = l * H + p * b + E * w),
                (e[5] = h * H + d * b + g * w),
                (e[6] = c * H + f * b + v * w),
                (e[7] = u * H + m * b + y * w),
                (e[8] = l * q + p * M + E * _),
                (e[9] = h * q + d * M + g * _),
                (e[10] = c * q + f * M + v * _),
                (e[11] = u * q + m * M + y * _),
                i !== e &&
                  ((e[12] = i[12]),
                  (e[13] = i[13]),
                  (e[14] = i[14]),
                  (e[15] = i[15])),
                e);
          }),
          (p.rotateX = function (e, t, i) {
            var r = Math.sin(i),
              n = Math.cos(i),
              o = t[4],
              a = t[5],
              s = t[6],
              l = t[7],
              h = t[8],
              c = t[9],
              u = t[10],
              p = t[11];
            return (
              t !== e &&
                ((e[0] = t[0]),
                (e[1] = t[1]),
                (e[2] = t[2]),
                (e[3] = t[3]),
                (e[12] = t[12]),
                (e[13] = t[13]),
                (e[14] = t[14]),
                (e[15] = t[15])),
              (e[4] = o * n + h * r),
              (e[5] = a * n + c * r),
              (e[6] = s * n + u * r),
              (e[7] = l * n + p * r),
              (e[8] = h * n - o * r),
              (e[9] = c * n - a * r),
              (e[10] = u * n - s * r),
              (e[11] = p * n - l * r),
              e
            );
          }),
          (p.rotateY = function (e, t, i) {
            var r = Math.sin(i),
              n = Math.cos(i),
              o = t[0],
              a = t[1],
              s = t[2],
              l = t[3],
              h = t[8],
              c = t[9],
              u = t[10],
              p = t[11];
            return (
              t !== e &&
                ((e[4] = t[4]),
                (e[5] = t[5]),
                (e[6] = t[6]),
                (e[7] = t[7]),
                (e[12] = t[12]),
                (e[13] = t[13]),
                (e[14] = t[14]),
                (e[15] = t[15])),
              (e[0] = o * n - h * r),
              (e[1] = a * n - c * r),
              (e[2] = s * n - u * r),
              (e[3] = l * n - p * r),
              (e[8] = o * r + h * n),
              (e[9] = a * r + c * n),
              (e[10] = s * r + u * n),
              (e[11] = l * r + p * n),
              e
            );
          }),
          (p.rotateZ = function (e, t, i) {
            var r = Math.sin(i),
              n = Math.cos(i),
              o = t[0],
              a = t[1],
              s = t[2],
              l = t[3],
              h = t[4],
              c = t[5],
              u = t[6],
              p = t[7];
            return (
              t !== e &&
                ((e[8] = t[8]),
                (e[9] = t[9]),
                (e[10] = t[10]),
                (e[11] = t[11]),
                (e[12] = t[12]),
                (e[13] = t[13]),
                (e[14] = t[14]),
                (e[15] = t[15])),
              (e[0] = o * n + h * r),
              (e[1] = a * n + c * r),
              (e[2] = s * n + u * r),
              (e[3] = l * n + p * r),
              (e[4] = h * n - o * r),
              (e[5] = c * n - a * r),
              (e[6] = u * n - s * r),
              (e[7] = p * n - l * r),
              e
            );
          }),
          (p.fromRotationTranslation = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = r + r,
              l = n + n,
              h = o + o,
              c = r * s,
              u = r * l,
              p = r * h,
              d = n * l,
              f = n * h,
              m = o * h,
              E = a * s,
              g = a * l,
              v = a * h;
            return (
              (e[0] = 1 - (d + m)),
              (e[1] = u + v),
              (e[2] = p - g),
              (e[3] = 0),
              (e[4] = u - v),
              (e[5] = 1 - (c + m)),
              (e[6] = f + E),
              (e[7] = 0),
              (e[8] = p + g),
              (e[9] = f - E),
              (e[10] = 1 - (c + d)),
              (e[11] = 0),
              (e[12] = i[0]),
              (e[13] = i[1]),
              (e[14] = i[2]),
              (e[15] = 1),
              e
            );
          }),
          (p.fromQuat = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = i + i,
              s = r + r,
              l = n + n,
              h = i * a,
              c = r * a,
              u = r * s,
              p = n * a,
              d = n * s,
              f = n * l,
              m = o * a,
              E = o * s,
              g = o * l;
            return (
              (e[0] = 1 - u - f),
              (e[1] = c + g),
              (e[2] = p - E),
              (e[3] = 0),
              (e[4] = c - g),
              (e[5] = 1 - h - f),
              (e[6] = d + m),
              (e[7] = 0),
              (e[8] = p + E),
              (e[9] = d - m),
              (e[10] = 1 - h - u),
              (e[11] = 0),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = 0),
              (e[15] = 1),
              e
            );
          }),
          (p.frustum = function (e, t, i, r, n, o, a) {
            var s = 1 / (i - t),
              l = 1 / (n - r),
              h = 1 / (o - a);
            return (
              (e[0] = 2 * o * s),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = 2 * o * l),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = (i + t) * s),
              (e[9] = (n + r) * l),
              (e[10] = (a + o) * h),
              (e[11] = -1),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = a * o * 2 * h),
              (e[15] = 0),
              e
            );
          }),
          (p.perspective = function (e, t, i, r, n) {
            var o = 1 / Math.tan(t / 2),
              a = 1 / (r - n);
            return (
              (e[0] = o / i),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = o),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 0),
              (e[9] = 0),
              (e[10] = (n + r) * a),
              (e[11] = -1),
              (e[12] = 0),
              (e[13] = 0),
              (e[14] = 2 * n * r * a),
              (e[15] = 0),
              e
            );
          }),
          (p.ortho = function (e, t, i, r, n, o, a) {
            var s = 1 / (t - i),
              l = 1 / (r - n),
              h = 1 / (o - a);
            return (
              (e[0] = -2 * s),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 0),
              (e[4] = 0),
              (e[5] = -2 * l),
              (e[6] = 0),
              (e[7] = 0),
              (e[8] = 0),
              (e[9] = 0),
              (e[10] = 2 * h),
              (e[11] = 0),
              (e[12] = (t + i) * s),
              (e[13] = (n + r) * l),
              (e[14] = (a + o) * h),
              (e[15] = 1),
              e
            );
          }),
          (p.lookAt = function (e, i, r, n) {
            var o,
              a,
              s,
              l,
              h,
              c,
              u,
              d,
              f,
              m,
              E = i[0],
              g = i[1],
              v = i[2],
              y = n[0],
              T = n[1],
              R = n[2],
              x = r[0],
              H = r[1],
              b = r[2];
            return Math.abs(E - x) < t &&
              Math.abs(g - H) < t &&
              Math.abs(v - b) < t
              ? p.identity(e)
              : ((u = E - x),
                (d = g - H),
                (f = v - b),
                (o =
                  T * (f *= m = 1 / Math.sqrt(u * u + d * d + f * f)) -
                  R * (d *= m)),
                (a = R * (u *= m) - y * f),
                (s = y * d - T * u),
                (m = Math.sqrt(o * o + a * a + s * s))
                  ? ((o *= m = 1 / m), (a *= m), (s *= m))
                  : ((o = 0), (a = 0), (s = 0)),
                (l = d * s - f * a),
                (h = f * o - u * s),
                (c = u * a - d * o),
                (m = Math.sqrt(l * l + h * h + c * c))
                  ? ((l *= m = 1 / m), (h *= m), (c *= m))
                  : ((l = 0), (h = 0), (c = 0)),
                (e[0] = o),
                (e[1] = l),
                (e[2] = u),
                (e[3] = 0),
                (e[4] = a),
                (e[5] = h),
                (e[6] = d),
                (e[7] = 0),
                (e[8] = s),
                (e[9] = c),
                (e[10] = f),
                (e[11] = 0),
                (e[12] = -(o * E + a * g + s * v)),
                (e[13] = -(l * E + h * g + c * v)),
                (e[14] = -(u * E + d * g + f * v)),
                (e[15] = 1),
                e);
          }),
          (p.str = function (e) {
            return (
              "mat4(" +
              e[0] +
              ", " +
              e[1] +
              ", " +
              e[2] +
              ", " +
              e[3] +
              ", " +
              e[4] +
              ", " +
              e[5] +
              ", " +
              e[6] +
              ", " +
              e[7] +
              ", " +
              e[8] +
              ", " +
              e[9] +
              ", " +
              e[10] +
              ", " +
              e[11] +
              ", " +
              e[12] +
              ", " +
              e[13] +
              ", " +
              e[14] +
              ", " +
              e[15] +
              ")"
            );
          }),
          (p.frob = function (e) {
            return Math.sqrt(
              Math.pow(e[0], 2) +
                Math.pow(e[1], 2) +
                Math.pow(e[2], 2) +
                Math.pow(e[3], 2) +
                Math.pow(e[4], 2) +
                Math.pow(e[5], 2) +
                Math.pow(e[6], 2) +
                Math.pow(e[6], 2) +
                Math.pow(e[7], 2) +
                Math.pow(e[8], 2) +
                Math.pow(e[9], 2) +
                Math.pow(e[10], 2) +
                Math.pow(e[11], 2) +
                Math.pow(e[12], 2) +
                Math.pow(e[13], 2) +
                Math.pow(e[14], 2) +
                Math.pow(e[15], 2)
            );
          }),
          void 0 !== e && (e.mat4 = p);
        var d = {
          create: function () {
            var e = new i(4);
            return (e[0] = 0), (e[1] = 0), (e[2] = 0), (e[3] = 1), e;
          },
        };
        (d.rotationTo = (function () {
          var e = s.create(),
            t = s.fromValues(1, 0, 0),
            i = s.fromValues(0, 1, 0);
          return function (r, n, o) {
            var a = s.dot(n, o);
            return a < -0.999999
              ? (s.cross(e, t, n),
                s.length(e) < 1e-6 && s.cross(e, i, n),
                s.normalize(e, e),
                d.setAxisAngle(r, e, Math.PI),
                r)
              : a > 0.999999
              ? ((r[0] = 0), (r[1] = 0), (r[2] = 0), (r[3] = 1), r)
              : (s.cross(e, n, o),
                (r[0] = e[0]),
                (r[1] = e[1]),
                (r[2] = e[2]),
                (r[3] = 1 + a),
                d.normalize(r, r));
          };
        })()),
          (d.setAxes = (function () {
            var e = u.create();
            return function (t, i, r, n) {
              return (
                (e[0] = r[0]),
                (e[3] = r[1]),
                (e[6] = r[2]),
                (e[1] = n[0]),
                (e[4] = n[1]),
                (e[7] = n[2]),
                (e[2] = -i[0]),
                (e[5] = -i[1]),
                (e[8] = -i[2]),
                d.normalize(t, d.fromMat3(t, e))
              );
            };
          })()),
          (d.clone = l.clone),
          (d.fromValues = l.fromValues),
          (d.copy = l.copy),
          (d.set = l.set),
          (d.identity = function (e) {
            return (e[0] = 0), (e[1] = 0), (e[2] = 0), (e[3] = 1), e;
          }),
          (d.setAxisAngle = function (e, t, i) {
            i *= 0.5;
            var r = Math.sin(i);
            return (
              (e[0] = r * t[0]),
              (e[1] = r * t[1]),
              (e[2] = r * t[2]),
              (e[3] = Math.cos(i)),
              e
            );
          }),
          (d.add = l.add),
          (d.multiply = function (e, t, i) {
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = i[0],
              l = i[1],
              h = i[2],
              c = i[3];
            return (
              (e[0] = r * c + a * s + n * h - o * l),
              (e[1] = n * c + a * l + o * s - r * h),
              (e[2] = o * c + a * h + r * l - n * s),
              (e[3] = a * c - r * s - n * l - o * h),
              e
            );
          }),
          (d.mul = d.multiply),
          (d.scale = l.scale),
          (d.rotateX = function (e, t, i) {
            i *= 0.5;
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = Math.sin(i),
              l = Math.cos(i);
            return (
              (e[0] = r * l + a * s),
              (e[1] = n * l + o * s),
              (e[2] = o * l - n * s),
              (e[3] = a * l - r * s),
              e
            );
          }),
          (d.rotateY = function (e, t, i) {
            i *= 0.5;
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = Math.sin(i),
              l = Math.cos(i);
            return (
              (e[0] = r * l - o * s),
              (e[1] = n * l + a * s),
              (e[2] = o * l + r * s),
              (e[3] = a * l - n * s),
              e
            );
          }),
          (d.rotateZ = function (e, t, i) {
            i *= 0.5;
            var r = t[0],
              n = t[1],
              o = t[2],
              a = t[3],
              s = Math.sin(i),
              l = Math.cos(i);
            return (
              (e[0] = r * l + n * s),
              (e[1] = n * l - r * s),
              (e[2] = o * l + a * s),
              (e[3] = a * l - o * s),
              e
            );
          }),
          (d.calculateW = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2];
            return (
              (e[0] = i),
              (e[1] = r),
              (e[2] = n),
              (e[3] = -Math.sqrt(Math.abs(1 - i * i - r * r - n * n))),
              e
            );
          }),
          (d.dot = l.dot),
          (d.lerp = l.lerp),
          (d.slerp = function (e, t, i, r) {
            var n,
              o,
              a,
              s,
              l,
              h = t[0],
              c = t[1],
              u = t[2],
              p = t[3],
              d = i[0],
              f = i[1],
              m = i[2],
              E = i[3];
            return (
              (o = h * d + c * f + u * m + p * E) < 0 &&
                ((o = -o), (d = -d), (f = -f), (m = -m), (E = -E)),
              1 - o > 1e-6
                ? ((n = Math.acos(o)),
                  (a = Math.sin(n)),
                  (s = Math.sin((1 - r) * n) / a),
                  (l = Math.sin(r * n) / a))
                : ((s = 1 - r), (l = r)),
              (e[0] = s * h + l * d),
              (e[1] = s * c + l * f),
              (e[2] = s * u + l * m),
              (e[3] = s * p + l * E),
              e
            );
          }),
          (d.invert = function (e, t) {
            var i = t[0],
              r = t[1],
              n = t[2],
              o = t[3],
              a = i * i + r * r + n * n + o * o,
              s = a ? 1 / a : 0;
            return (
              (e[0] = -i * s),
              (e[1] = -r * s),
              (e[2] = -n * s),
              (e[3] = o * s),
              e
            );
          }),
          (d.conjugate = function (e, t) {
            return (
              (e[0] = -t[0]), (e[1] = -t[1]), (e[2] = -t[2]), (e[3] = t[3]), e
            );
          }),
          (d.length = l.length),
          (d.len = d.length),
          (d.squaredLength = l.squaredLength),
          (d.sqrLen = d.squaredLength),
          (d.normalize = l.normalize),
          (d.fromMat3 = function (e, t) {
            var i,
              r = t[0] + t[4] + t[8];
            if (r > 0)
              (i = Math.sqrt(r + 1)),
                (e[3] = 0.5 * i),
                (i = 0.5 / i),
                (e[0] = (t[7] - t[5]) * i),
                (e[1] = (t[2] - t[6]) * i),
                (e[2] = (t[3] - t[1]) * i);
            else {
              var n = 0;
              t[4] > t[0] && (n = 1), t[8] > t[3 * n + n] && (n = 2);
              var o = (n + 1) % 3,
                a = (n + 2) % 3;
              (i = Math.sqrt(t[3 * n + n] - t[3 * o + o] - t[3 * a + a] + 1)),
                (e[n] = 0.5 * i),
                (i = 0.5 / i),
                (e[3] = (t[3 * a + o] - t[3 * o + a]) * i),
                (e[o] = (t[3 * o + n] + t[3 * n + o]) * i),
                (e[a] = (t[3 * a + n] + t[3 * n + a]) * i);
            }
            return e;
          }),
          (d.str = function (e) {
            return (
              "quat(" + e[0] + ", " + e[1] + ", " + e[2] + ", " + e[3] + ")"
            );
          }),
          void 0 !== e && (e.quat = d);
      })(t.exports);
  })(this),
  (PoissonDiskSampler3D.prototype.reset = function () {
    (this.grid = new Grid3D(
      this.width,
      this.height,
      this.depth,
      this.minDistance
    )),
      (this.grid.fromExisting = this.fromExisting),
      (this.grid.radius = this.width / 2),
      (this.grid.oldOffset = this.oldOffset),
      (this.outputList = new Array()),
      (this.preProcessQueue = new RandomQueue()),
      (this.processingQueue = new RandomQueue());
  }),
  (PoissonDiskSampler3D.prototype.initExistingPoints = function (e) {
    for (var t = 0; t < e.length; t++)
      this.queueToAll({
        x: e[t].x,
        y: e[t].y,
        z: e[t].z,
      });
  }),
  (PoissonDiskSampler3D.prototype.sampleUntilSolution = function () {
    for (; this.sample(); );
    return this.outputList;
  }),
  (PoissonDiskSampler3D.prototype.sample = function () {
    if (0 == this.outputList.length)
      return this.queueToAll(this.grid.randomPoint()), !0;
    var e = this.processingQueue.pop();
    if (null == e) return !1;
    for (var t = 0; t < this.sampleFrequency; t++)
      (samplePoint = this.grid.randomPointAround(e)),
        this.grid.inNeighborhood(samplePoint) || this.queueToAll(samplePoint);
    return !0;
  }),
  (PoissonDiskSampler3D.prototype.queueToAll = function (e) {
    this.grid.addPointToGrid(e, this.grid.pixelsToGridCoords(e)) &&
      (this.processingQueue.push(e), this.outputList.push(e));
  }),
  (Grid3D.prototype.pixelsToGridCoords = function (e) {
    return {
      x: Math.floor(e.x / this.cellSize),
      y: Math.floor(e.y / this.cellSize),
      z: Math.floor(e.z / this.cellSize),
    };
  }),
  (Grid3D.prototype.addPointToGrid = function (e, t) {
    return (
      !(t.x < 0 || t.x > this.grid.length - 1) &&
      !(t.y < 0 || t.y > this.grid[t.x].length - 1) &&
      !(t.z < 0 || t.z > this.grid[t.x][t.y].length - 1) &&
      this.dist2D(
        e.x,
        e.z,
        this.radius + this.oldOffset.x,
        this.radius + this.oldOffset.z
      ) < this.radius &&
      ((this.grid[t.x][t.y][t.z] = e), !0)
    );
  }),
  (Grid3D.prototype.randomPoint = function () {
    return {
      x: getRandomArbitrary(0, this.width),
      y: getRandomArbitrary(0, this.height),
      z: getRandomArbitrary(0, this.depth),
    };
  }),
  (Grid3D.prototype.dist2D = function (e, t, i, r) {
    return Math.sqrt((i - e) * (i - e) + (r - t) * (r - t));
  }),
  (Grid3D.prototype.randomPointAround = function (e) {
    var t = this.minDistance * (Math.random() + 1),
      i = 2 * Math.random() * Math.PI,
      r = Math.acos(2 * Math.random() - 1);
    return {
      x: e.x + t * Math.sin(r) * Math.cos(i),
      y: e.y + t * Math.sin(r) * Math.sin(i),
      z: e.z + t * Math.cos(r),
    };
  }),
  (Grid3D.prototype.inNeighborhood = function (e) {
    this.pixelsToGridCoords(e);
    for (var t = this.cellsAroundPoint(e), i = 0; i < t.length; i++)
      if (null != t[i] && this.calcDistance(t[i], e) < this.minDistance)
        return !0;
    return !1;
  }),
  (Grid3D.prototype.cellsAroundPoint = function (e) {
    for (
      var t = this.pixelsToGridCoords(e), i = new Array(), r = 2, n = -r;
      n < r + 1;
      n++
    ) {
      var o = t.x + n;
      o < 0 && (o = 0), o > this.grid.length - 1 && (o = this.grid.length - 1);
      for (var a = -r; a < r + 1; a++) {
        var s = t.y + a;
        s < 0 && (s = 0),
          s > this.grid[o].length - 1 && (s = this.grid[o].length - 1);
        for (var l = -r; l < r + 1; l++) {
          var h = t.z + l;
          h < 0 && (h = 0),
            h > this.grid[o][s].length - 1 && (h = this.grid[o][s].length - 1),
            i.push(this.grid[o][s][h]);
        }
      }
    }
    return i;
  }),
  (Grid3D.prototype.calcDistance = function (e, t) {
    return Math.sqrt(
      (t.x - e.x) * (t.x - e.x) +
        (t.y - e.y) * (t.y - e.y) +
        (t.z - e.z) * (t.z - e.z)
    );
  }),
  (RandomQueue.prototype.push = function (e) {
    this.queue.push(e);
  }),
  (RandomQueue.prototype.pop = function () {
    for (
      randomIndex = getRandomInt(0, this.queue.length);
      void 0 === this.queue[randomIndex];

    ) {
      for (var e = !0, t = 0; t < this.queue.length; t++)
        void 0 !== this.queue[t] && (e = !1);
      if (e) return null;
      randomIndex = getRandomInt(0, this.queue.length);
    }
    return (
      (element = this.queue[randomIndex]),
      this.queue.remove2(randomIndex),
      element
    );
  }),
  (Array.prototype.remove2 = function (e, t) {
    var i = this.slice((t || e) + 1 || this.length);
    return (
      (this.length = e < 0 ? this.length + e : e), this.push.apply(this, i)
    );
  });
var GeomUtils = {
    getQuaternionBetweenVecs: function (e, t, i) {
      var r = new THREE.Matrix4();
      r.lookAt(t, e, i);
      var n,
        o,
        a,
        s,
        l,
        h = r.elements[0],
        c = r.elements[4],
        u = r.elements[8],
        p = r.elements[1],
        d = r.elements[5],
        f = r.elements[9],
        m = r.elements[2],
        E = r.elements[6],
        g = r.elements[10],
        v = h + d + g;
      v > 0
        ? ((l = 0.25 * (n = 2 * Math.sqrt(v + 1))),
          (o = (f - E) / n),
          (a = (m - u) / n),
          (s = (c - p) / n))
        : h > d && h > g
        ? ((o = 0.25 * (n = 2 * Math.sqrt(1 + h - d - g))),
          (a = (c + p) / n),
          (s = (m + u) / n),
          (l = (f - E) / n))
        : d > g
        ? ((a = 0.25 * (n = 2 * Math.sqrt(1 + d - h - g))),
          (o = (c + p) / n),
          (s = (f + E) / n),
          (l = (m - u) / n))
        : ((s = 0.25 * (n = 2 * Math.sqrt(1 + g - h - d))),
          (o = (m + u) / n),
          (a = (f + E) / n),
          (l = (c - p) / n));
      var y = new THREE.Quaternion(o, a, s, l);
      return y.normalize(), y;
    },
    angleBetweenVecs: function (e, t) {
      return e.x === t.x && e.y === t.y && e.z === t.z
        ? 0
        : Math.acos(e.dot(t) / (e.length() * t.length()));
    },
    rotateObjectFromAxisAngle: function (e, t, i) {
      var r = new THREE.Matrix4();
      r.makeRotationAxis(t.normalize(), i),
        r.multiply(e.matrix),
        (e.matrix = r);
      var n = e.quaternion.clone();
      n.setFromRotationMatrix(r), (e.quaternion = n), e.quaternion.normalize();
    },
    pointsOnSphere: function (e, t) {
      for (
        var i = [], r = Math.PI * (3 - Math.sqrt(5)), n = 2 / e, o = 0;
        o < e;
        o++
      ) {
        var a = o * n - 1 + n / 2,
          s = Math.sqrt(1 - a * a),
          l = o * r,
          h = new THREE.Vector3(Math.cos(l) * s, a, Math.sin(l) * s);
        t && h.multiplyScalar(t), i.push(h);
      }
      return i;
    },
    pointsOnCircle: function (e, t) {
      for (var i = [], r = (2 * Math.PI) / e, n = 0; n < e; n++) {
        var o = n * r,
          a = new THREE.Vector3();
        (a.x = Math.cos(o)),
          (a.y = Math.sin(o)),
          (a.z = 0),
          t && a.multiplyScalar(t),
          i.push(a);
      }
      return i;
    },
    rotationToDirectionVec: function (e) {
      var t = new THREE.Matrix4();
      t.extractRotation(e.matrix);
      var i = new THREE.Vector3(0, 0, -1);
      return i.applyMatrix4(t), i.normalize();
    },
    getQuaternionFromEuler: function (e) {
      var t = new THREE.Quaternion();
      return t.setFromEuler(e), t;
    },
    getEulerFromQuaternion: function (e) {
      var t = new THREE.Euler();
      return t.setFromQuaternion(e), t;
    },
    getLatLonFromEuler: function (e) {
      var t = new THREE.Vector3(0, 0, -1);
      t.applyEuler(e), t.normalize();
      var i = {};
      return (
        (i.lon = Math.PI / 2 - Math.atan2(t.x, t.z)),
        (i.lat = Math.asin(t.y / t.length())),
        i
      );
    },
    toScreenXY: function (e, t, i, r) {
      var n = i.projectVector(e.clone(), t),
        o = new Object();
      return (
        (o.x =
          (r.domElement.width / 2 +
            Math.round(n.x * (r.domElement.width / 2))) /
          devicePixelRatio),
        (o.y =
          (r.domElement.height / 2 -
            Math.round(n.y * (r.domElement.height / 2))) /
          devicePixelRatio),
        o
      );
    },
    mouseToDirectionalVector: function (e, t, i, r, n) {
      var o = new THREE.Vector3(
        (e / n.domElement.width) * 2 * devicePixelRatio - 1,
        (-t / n.domElement.height) * 2 * devicePixelRatio + 1,
        0.5
      );
      return o.unproject(i), o.sub(i.position).normalize();
    },
    objectScreenXY: function (e, t, i, r) {
      var n = r.domElement.width / 2,
        o = r.domElement.height / 2,
        a = new THREE.Vector3();
      return (
        new THREE.Projector().projectVector(
          a.getPositionFromMatrix(e.matrixWorld),
          t
        ),
        (a.x = a.x * n + n),
        (a.y = -a.y * o + o),
        a
      );
    },
    getSpriteScreenSize: function (e, t, i) {
      var r,
        n = t.position.distanceTo(e.position),
        o = (t.fov * Math.PI) / 180;
      return {
        w: (1 / (r = 2 * Math.tan(o / 2) * n)) * e.scale.x * 0.83 * i,
        h: (r = (1 / r) * e.scale.y * 0.83 * i),
      };
    },
    getRectWorldSize: function (e, t, i, r, n) {
      var o,
        a = r.position.distanceTo(e),
        s = (r.fov * Math.PI) / 180;
      return {
        w: (t / n) * (o = 2 * Math.tan(s / 2) * a),
        h: (o = (i / n) * o),
      };
    },
    getRectScreenSize: function (e, t, i, r, n) {
      var o,
        a = r.position.distanceTo(e),
        s = (r.fov * Math.PI) / 180;
      return {
        w: (t / (o = 2 * Math.tan(s / 2) * a)) * n,
        h: (o = (i / o) * n),
      };
    },
    getCircleScreenSize: function (e, t, i, r) {
      var n = i.position.distanceTo(e),
        o = (i.fov * Math.PI) / 180;
      return (t / (2 * Math.tan(o / 2) * n)) * r;
    },
    createHullMesh: function (e, t, i) {
      var r = new THREE.Geometry();
      if (e.length > 3) {
        for (var n = 0; n < e.length; n++)
          r.vertices.push(new THREE.Vector3(e[n].x, e[n].y, e[n].z));
        try {
          var o = new Polygon();
          for (n = 0; n < e.length; n++) {
            var a = new Vertex(e[n].x, e[n].y, e[n].z);
            o.push(a);
          }
          var s = new ConvexHull3D();
          s.vlist = o;
          var l = o.toArray();
          if (s.doubleTriangle()) {
            s.constructHull();
            var h = s.flist.head;
            do {
              var c = l.indexOf(h.vertex[0]),
                u = l.indexOf(h.vertex[1]),
                p = l.indexOf(h.vertex[2]);
              r.faces.push(new THREE.Face3(c, u, p)), (h = h.next);
            } while (h != s.flist.head);
          }
        } catch (e) {
          console.log(e);
        }
      } else if (3 === e.length) {
        for (n = 0; n < e.length; n++)
          r.vertices.push(new THREE.Vector3(e[n].x, e[n].y, e[n].z));
        r.faces.push(new THREE.Face3(0, 1, 2)),
          r.faces.push(new THREE.Face3(2, 1, 0));
      }
      r.computeFaceNormals(), r.computeCentroids(), (r.dynamic = !0);
      var d = new THREE.MeshLambertMaterial({
        color: t,
        transparent: !0,
        opacity: i,
        blending: THREE.AdditiveBlending,
        depthTest: !1,
        fog: !0,
      });
      return (
        (mesh = new THREE.Mesh(r, d)),
        mesh.position.set(0, 0, 0),
        (mesh.doubleSided = !0),
        mesh
      );
    },
  },
  THREE = {
    REVISION: "74",
  };
"function" == typeof define && define.amd
  ? define("three", THREE)
  : "undefined" != typeof exports &&
    "undefined" != typeof module &&
    (module.exports = THREE),
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)),
  void 0 === Math.sign &&
    (Math.sign = function (e) {
      return e < 0 ? -1 : e > 0 ? 1 : +e;
    }),
  void 0 === Function.prototype.name &&
    void 0 !== Object.defineProperty &&
    Object.defineProperty(Function.prototype, "name", {
      get: function () {
        return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
      },
    }),
  void 0 === Object.assign &&
    Object.defineProperty(Object, "assign", {
      writable: !0,
      configurable: !0,
      value: function (e) {
        "use strict";
        if (null == e)
          throw new TypeError("Cannot convert first argument to object");
        for (var t = Object(e), i = 1, r = arguments.length; i !== r; ++i) {
          var n = arguments[i];
          if (null != n) {
            n = Object(n);
            for (var o = Object.keys(n), a = 0, s = o.length; a !== s; ++a) {
              var l = o[a],
                h = Object.getOwnPropertyDescriptor(n, l);
              void 0 !== h && h.enumerable && (t[l] = n[l]);
            }
          }
        }
        return t;
      },
    }),
  (THREE.MOUSE = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
  }),
  (THREE.CullFaceNone = 0),
  (THREE.CullFaceBack = 1),
  (THREE.CullFaceFront = 2),
  (THREE.CullFaceFrontBack = 3),
  (THREE.FrontFaceDirectionCW = 0),
  (THREE.FrontFaceDirectionCCW = 1),
  (THREE.BasicShadowMap = 0),
  (THREE.PCFShadowMap = 1),
  (THREE.PCFSoftShadowMap = 2),
  (THREE.FrontSide = 0),
  (THREE.BackSide = 1),
  (THREE.DoubleSide = 2),
  (THREE.FlatShading = 1),
  (THREE.SmoothShading = 2),
  (THREE.NoColors = 0),
  (THREE.FaceColors = 1),
  (THREE.VertexColors = 2),
  (THREE.NoBlending = 0),
  (THREE.NormalBlending = 1),
  (THREE.AdditiveBlending = 2),
  (THREE.SubtractiveBlending = 3),
  (THREE.MultiplyBlending = 4),
  (THREE.CustomBlending = 5),
  (THREE.AddEquation = 100),
  (THREE.SubtractEquation = 101),
  (THREE.ReverseSubtractEquation = 102),
  (THREE.MinEquation = 103),
  (THREE.MaxEquation = 104),
  (THREE.ZeroFactor = 200),
  (THREE.OneFactor = 201),
  (THREE.SrcColorFactor = 202),
  (THREE.OneMinusSrcColorFactor = 203),
  (THREE.SrcAlphaFactor = 204),
  (THREE.OneMinusSrcAlphaFactor = 205),
  (THREE.DstAlphaFactor = 206),
  (THREE.OneMinusDstAlphaFactor = 207),
  (THREE.DstColorFactor = 208),
  (THREE.OneMinusDstColorFactor = 209),
  (THREE.SrcAlphaSaturateFactor = 210),
  (THREE.NeverDepth = 0),
  (THREE.AlwaysDepth = 1),
  (THREE.LessDepth = 2),
  (THREE.LessEqualDepth = 3),
  (THREE.EqualDepth = 4),
  (THREE.GreaterEqualDepth = 5),
  (THREE.GreaterDepth = 6),
  (THREE.NotEqualDepth = 7),
  (THREE.MultiplyOperation = 0),
  (THREE.MixOperation = 1),
  (THREE.AddOperation = 2),
  (THREE.UVMapping = 300),
  (THREE.CubeReflectionMapping = 301),
  (THREE.CubeRefractionMapping = 302),
  (THREE.EquirectangularReflectionMapping = 303),
  (THREE.EquirectangularRefractionMapping = 304),
  (THREE.SphericalReflectionMapping = 305),
  (THREE.RepeatWrapping = 1e3),
  (THREE.ClampToEdgeWrapping = 1001),
  (THREE.MirroredRepeatWrapping = 1002),
  (THREE.NearestFilter = 1003),
  (THREE.NearestMipMapNearestFilter = 1004),
  (THREE.NearestMipMapLinearFilter = 1005),
  (THREE.LinearFilter = 1006),
  (THREE.LinearMipMapNearestFilter = 1007),
  (THREE.LinearMipMapLinearFilter = 1008),
  (THREE.UnsignedByteType = 1009),
  (THREE.ByteType = 1010),
  (THREE.ShortType = 1011),
  (THREE.UnsignedShortType = 1012),
  (THREE.IntType = 1013),
  (THREE.UnsignedIntType = 1014),
  (THREE.FloatType = 1015),
  (THREE.HalfFloatType = 1025),
  (THREE.UnsignedShort4444Type = 1016),
  (THREE.UnsignedShort5551Type = 1017),
  (THREE.UnsignedShort565Type = 1018),
  (THREE.AlphaFormat = 1019),
  (THREE.RGBFormat = 1020),
  (THREE.RGBAFormat = 1021),
  (THREE.LuminanceFormat = 1022),
  (THREE.LuminanceAlphaFormat = 1023),
  (THREE.RGBEFormat = THREE.RGBAFormat),
  (THREE.RGB_S3TC_DXT1_Format = 2001),
  (THREE.RGBA_S3TC_DXT1_Format = 2002),
  (THREE.RGBA_S3TC_DXT3_Format = 2003),
  (THREE.RGBA_S3TC_DXT5_Format = 2004),
  (THREE.RGB_PVRTC_4BPPV1_Format = 2100),
  (THREE.RGB_PVRTC_2BPPV1_Format = 2101),
  (THREE.RGBA_PVRTC_4BPPV1_Format = 2102),
  (THREE.RGBA_PVRTC_2BPPV1_Format = 2103),
  (THREE.RGB_ETC1_Format = 2151),
  (THREE.LoopOnce = 2200),
  (THREE.LoopRepeat = 2201),
  (THREE.LoopPingPong = 2202),
  (THREE.InterpolateDiscrete = 2300),
  (THREE.InterpolateLinear = 2301),
  (THREE.InterpolateSmooth = 2302),
  (THREE.ZeroCurvatureEnding = 2400),
  (THREE.ZeroSlopeEnding = 2401),
  (THREE.WrapAroundEnding = 2402),
  (THREE.TrianglesDrawMode = 0),
  (THREE.TriangleStripDrawMode = 1),
  (THREE.TriangleFanDrawMode = 2),
  (THREE.Color = function (e) {
    return 3 === arguments.length ? this.fromArray(arguments) : this.set(e);
  }),
  (THREE.Color.prototype = {
    constructor: THREE.Color,
    r: 1,
    g: 1,
    b: 1,
    set: function (e) {
      return (
        e instanceof THREE.Color
          ? this.copy(e)
          : "number" == typeof e
          ? this.setHex(e)
          : "string" == typeof e && this.setStyle(e),
        this
      );
    },
    setScalar: function (e) {
      (this.r = e), (this.g = e), (this.b = e);
    },
    setHex: function (e) {
      return (
        (e = Math.floor(e)),
        (this.r = ((e >> 16) & 255) / 255),
        (this.g = ((e >> 8) & 255) / 255),
        (this.b = (255 & e) / 255),
        this
      );
    },
    setRGB: function (e, t, i) {
      return (this.r = e), (this.g = t), (this.b = i), this;
    },
    setHSL: (function () {
      function e(e, t, i) {
        return (
          i < 0 && (i += 1),
          i > 1 && (i -= 1),
          i < 1 / 6
            ? e + 6 * (t - e) * i
            : i < 0.5
            ? t
            : i < 2 / 3
            ? e + 6 * (t - e) * (2 / 3 - i)
            : e
        );
      }
      return function (t, i, r) {
        if (
          ((t = THREE.Math.euclideanModulo(t, 1)),
          (i = THREE.Math.clamp(i, 0, 1)),
          (r = THREE.Math.clamp(r, 0, 1)),
          0 === i)
        )
          this.r = this.g = this.b = r;
        else {
          var n = r <= 0.5 ? r * (1 + i) : r + i - r * i,
            o = 2 * r - n;
          (this.r = e(o, n, t + 1 / 3)),
            (this.g = e(o, n, t)),
            (this.b = e(o, n, t - 1 / 3));
        }
        return this;
      };
    })(),
    setStyle: function (e) {
      function t(t) {
        void 0 !== t &&
          parseFloat(t) < 1 &&
          console.warn(
            "THREE.Color: Alpha component of " + e + " will be ignored."
          );
      }
      var i;
      if ((i = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e))) {
        var r,
          n = i[1],
          o = i[2];
        switch (n) {
          case "rgb":
          case "rgba":
            if (
              (r =
                /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                  o
                ))
            )
              return (
                (this.r = Math.min(255, parseInt(r[1], 10)) / 255),
                (this.g = Math.min(255, parseInt(r[2], 10)) / 255),
                (this.b = Math.min(255, parseInt(r[3], 10)) / 255),
                t(r[5]),
                this
              );
            if (
              (r =
                /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                  o
                ))
            )
              return (
                (this.r = Math.min(100, parseInt(r[1], 10)) / 100),
                (this.g = Math.min(100, parseInt(r[2], 10)) / 100),
                (this.b = Math.min(100, parseInt(r[3], 10)) / 100),
                t(r[5]),
                this
              );
            break;
          case "hsl":
          case "hsla":
            if (
              (r =
                /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                  o
                ))
            ) {
              var a = parseFloat(r[1]) / 360,
                s = parseInt(r[2], 10) / 100,
                l = parseInt(r[3], 10) / 100;
              return t(r[5]), this.setHSL(a, s, l);
            }
        }
      } else if ((i = /^\#([A-Fa-f0-9]+)$/.exec(e))) {
        var h,
          c = (h = i[1]).length;
        if (3 === c)
          return (
            (this.r = parseInt(h.charAt(0) + h.charAt(0), 16) / 255),
            (this.g = parseInt(h.charAt(1) + h.charAt(1), 16) / 255),
            (this.b = parseInt(h.charAt(2) + h.charAt(2), 16) / 255),
            this
          );
        if (6 === c)
          return (
            (this.r = parseInt(h.charAt(0) + h.charAt(1), 16) / 255),
            (this.g = parseInt(h.charAt(2) + h.charAt(3), 16) / 255),
            (this.b = parseInt(h.charAt(4) + h.charAt(5), 16) / 255),
            this
          );
      }
      e &&
        e.length > 0 &&
        (void 0 !== (h = THREE.ColorKeywords[e])
          ? this.setHex(h)
          : console.warn("THREE.Color: Unknown color " + e));
      return this;
    },
    clone: function () {
      return new this.constructor(this.r, this.g, this.b);
    },
    copy: function (e) {
      return (this.r = e.r), (this.g = e.g), (this.b = e.b), this;
    },
    copyGammaToLinear: function (e, t) {
      return (
        void 0 === t && (t = 2),
        (this.r = Math.pow(e.r, t)),
        (this.g = Math.pow(e.g, t)),
        (this.b = Math.pow(e.b, t)),
        this
      );
    },
    copyLinearToGamma: function (e, t) {
      void 0 === t && (t = 2);
      var i = t > 0 ? 1 / t : 1;
      return (
        (this.r = Math.pow(e.r, i)),
        (this.g = Math.pow(e.g, i)),
        (this.b = Math.pow(e.b, i)),
        this
      );
    },
    convertGammaToLinear: function () {
      var e = this.r,
        t = this.g,
        i = this.b;
      return (this.r = e * e), (this.g = t * t), (this.b = i * i), this;
    },
    convertLinearToGamma: function () {
      return (
        (this.r = Math.sqrt(this.r)),
        (this.g = Math.sqrt(this.g)),
        (this.b = Math.sqrt(this.b)),
        this
      );
    },
    getHex: function () {
      return (
        ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0)
      );
    },
    getHexString: function () {
      return ("000000" + this.getHex().toString(16)).slice(-6);
    },
    getHSL: function (e) {
      var t,
        i,
        r = e || {
          h: 0,
          s: 0,
          l: 0,
        },
        n = this.r,
        o = this.g,
        a = this.b,
        s = Math.max(n, o, a),
        l = Math.min(n, o, a),
        h = (l + s) / 2;
      if (l === s) (t = 0), (i = 0);
      else {
        var c = s - l;
        switch (((i = h <= 0.5 ? c / (s + l) : c / (2 - s - l)), s)) {
          case n:
            t = (o - a) / c + (o < a ? 6 : 0);
            break;
          case o:
            t = (a - n) / c + 2;
            break;
          case a:
            t = (n - o) / c + 4;
        }
        t /= 6;
      }
      return (r.h = t), (r.s = i), (r.l = h), r;
    },
    getStyle: function () {
      return (
        "rgb(" +
        ((255 * this.r) | 0) +
        "," +
        ((255 * this.g) | 0) +
        "," +
        ((255 * this.b) | 0) +
        ")"
      );
    },
    offsetHSL: function (e, t, i) {
      var r = this.getHSL();
      return (
        (r.h += e), (r.s += t), (r.l += i), this.setHSL(r.h, r.s, r.l), this
      );
    },
    add: function (e) {
      return (this.r += e.r), (this.g += e.g), (this.b += e.b), this;
    },
    addColors: function (e, t) {
      return (
        (this.r = e.r + t.r), (this.g = e.g + t.g), (this.b = e.b + t.b), this
      );
    },
    addScalar: function (e) {
      return (this.r += e), (this.g += e), (this.b += e), this;
    },
    multiply: function (e) {
      return (this.r *= e.r), (this.g *= e.g), (this.b *= e.b), this;
    },
    multiplyScalar: function (e) {
      return (this.r *= e), (this.g *= e), (this.b *= e), this;
    },
    lerp: function (e, t) {
      return (
        (this.r += (e.r - this.r) * t),
        (this.g += (e.g - this.g) * t),
        (this.b += (e.b - this.b) * t),
        this
      );
    },
    equals: function (e) {
      return e.r === this.r && e.g === this.g && e.b === this.b;
    },
    fromArray: function (e, t) {
      return (
        void 0 === t && (t = 0),
        (this.r = e[t]),
        (this.g = e[t + 1]),
        (this.b = e[t + 2]),
        this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this.r),
        (e[t + 1] = this.g),
        (e[t + 2] = this.b),
        e
      );
    },
  }),
  (THREE.ColorKeywords = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074,
  }),
  (THREE.Quaternion = function (e, t, i, r) {
    (this._x = e || 0),
      (this._y = t || 0),
      (this._z = i || 0),
      (this._w = void 0 !== r ? r : 1);
  }),
  (THREE.Quaternion.prototype = {
    constructor: THREE.Quaternion,
    get x() {
      return this._x;
    },
    set x(e) {
      (this._x = e), this.onChangeCallback();
    },
    get y() {
      return this._y;
    },
    set y(e) {
      (this._y = e), this.onChangeCallback();
    },
    get z() {
      return this._z;
    },
    set z(e) {
      (this._z = e), this.onChangeCallback();
    },
    get w() {
      return this._w;
    },
    set w(e) {
      (this._w = e), this.onChangeCallback();
    },
    set: function (e, t, i, r) {
      return (
        (this._x = e),
        (this._y = t),
        (this._z = i),
        (this._w = r),
        this.onChangeCallback(),
        this
      );
    },
    clone: function () {
      return new this.constructor(this._x, this._y, this._z, this._w);
    },
    copy: function (e) {
      return (
        (this._x = e.x),
        (this._y = e.y),
        (this._z = e.z),
        (this._w = e.w),
        this.onChangeCallback(),
        this
      );
    },
    setFromEuler: function (e, t) {
      if (e instanceof THREE.Euler == !1)
        throw new Error(
          "THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order."
        );
      var i = Math.cos(e._x / 2),
        r = Math.cos(e._y / 2),
        n = Math.cos(e._z / 2),
        o = Math.sin(e._x / 2),
        a = Math.sin(e._y / 2),
        s = Math.sin(e._z / 2),
        l = e.order;
      return (
        "XYZ" === l
          ? ((this._x = o * r * n + i * a * s),
            (this._y = i * a * n - o * r * s),
            (this._z = i * r * s + o * a * n),
            (this._w = i * r * n - o * a * s))
          : "YXZ" === l
          ? ((this._x = o * r * n + i * a * s),
            (this._y = i * a * n - o * r * s),
            (this._z = i * r * s - o * a * n),
            (this._w = i * r * n + o * a * s))
          : "ZXY" === l
          ? ((this._x = o * r * n - i * a * s),
            (this._y = i * a * n + o * r * s),
            (this._z = i * r * s + o * a * n),
            (this._w = i * r * n - o * a * s))
          : "ZYX" === l
          ? ((this._x = o * r * n - i * a * s),
            (this._y = i * a * n + o * r * s),
            (this._z = i * r * s - o * a * n),
            (this._w = i * r * n + o * a * s))
          : "YZX" === l
          ? ((this._x = o * r * n + i * a * s),
            (this._y = i * a * n + o * r * s),
            (this._z = i * r * s - o * a * n),
            (this._w = i * r * n - o * a * s))
          : "XZY" === l &&
            ((this._x = o * r * n - i * a * s),
            (this._y = i * a * n - o * r * s),
            (this._z = i * r * s + o * a * n),
            (this._w = i * r * n + o * a * s)),
        !1 !== t && this.onChangeCallback(),
        this
      );
    },
    setFromAxisAngle: function (e, t) {
      var i = t / 2,
        r = Math.sin(i);
      return (
        (this._x = e.x * r),
        (this._y = e.y * r),
        (this._z = e.z * r),
        (this._w = Math.cos(i)),
        this.onChangeCallback(),
        this
      );
    },
    setFromRotationMatrix: function (e) {
      var t,
        i = e.elements,
        r = i[0],
        n = i[4],
        o = i[8],
        a = i[1],
        s = i[5],
        l = i[9],
        h = i[2],
        c = i[6],
        u = i[10],
        p = r + s + u;
      return (
        p > 0
          ? ((t = 0.5 / Math.sqrt(p + 1)),
            (this._w = 0.25 / t),
            (this._x = (c - l) * t),
            (this._y = (o - h) * t),
            (this._z = (a - n) * t))
          : r > s && r > u
          ? ((t = 2 * Math.sqrt(1 + r - s - u)),
            (this._w = (c - l) / t),
            (this._x = 0.25 * t),
            (this._y = (n + a) / t),
            (this._z = (o + h) / t))
          : s > u
          ? ((t = 2 * Math.sqrt(1 + s - r - u)),
            (this._w = (o - h) / t),
            (this._x = (n + a) / t),
            (this._y = 0.25 * t),
            (this._z = (l + c) / t))
          : ((t = 2 * Math.sqrt(1 + u - r - s)),
            (this._w = (a - n) / t),
            (this._x = (o + h) / t),
            (this._y = (l + c) / t),
            (this._z = 0.25 * t)),
        this.onChangeCallback(),
        this
      );
    },
    setFromUnitVectors: (function () {
      var e,
        t,
        i = 1e-6;
      return function (r, n) {
        return (
          void 0 === e && (e = new THREE.Vector3()),
          (t = r.dot(n) + 1) < i
            ? ((t = 0),
              Math.abs(r.x) > Math.abs(r.z)
                ? e.set(-r.y, r.x, 0)
                : e.set(0, -r.z, r.y))
            : e.crossVectors(r, n),
          (this._x = e.x),
          (this._y = e.y),
          (this._z = e.z),
          (this._w = t),
          this.normalize(),
          this
        );
      };
    })(),
    inverse: function () {
      return this.conjugate().normalize(), this;
    },
    conjugate: function () {
      return (
        (this._x *= -1),
        (this._y *= -1),
        (this._z *= -1),
        this.onChangeCallback(),
        this
      );
    },
    dot: function (e) {
      return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
    },
    lengthSq: function () {
      return (
        this._x * this._x +
        this._y * this._y +
        this._z * this._z +
        this._w * this._w
      );
    },
    length: function () {
      return Math.sqrt(
        this._x * this._x +
          this._y * this._y +
          this._z * this._z +
          this._w * this._w
      );
    },
    normalize: function () {
      var e = this.length();
      return (
        0 === e
          ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
          : ((e = 1 / e),
            (this._x = this._x * e),
            (this._y = this._y * e),
            (this._z = this._z * e),
            (this._w = this._w * e)),
        this.onChangeCallback(),
        this
      );
    },
    multiply: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."
          ),
          this.multiplyQuaternions(e, t))
        : this.multiplyQuaternions(this, e);
    },
    multiplyQuaternions: function (e, t) {
      var i = e._x,
        r = e._y,
        n = e._z,
        o = e._w,
        a = t._x,
        s = t._y,
        l = t._z,
        h = t._w;
      return (
        (this._x = i * h + o * a + r * l - n * s),
        (this._y = r * h + o * s + n * a - i * l),
        (this._z = n * h + o * l + i * s - r * a),
        (this._w = o * h - i * a - r * s - n * l),
        this.onChangeCallback(),
        this
      );
    },
    slerp: function (e, t) {
      if (0 === t) return this;
      if (1 === t) return this.copy(e);
      var i = this._x,
        r = this._y,
        n = this._z,
        o = this._w,
        a = o * e._w + i * e._x + r * e._y + n * e._z;
      if (
        (a < 0
          ? ((this._w = -e._w),
            (this._x = -e._x),
            (this._y = -e._y),
            (this._z = -e._z),
            (a = -a))
          : this.copy(e),
        a >= 1)
      )
        return (this._w = o), (this._x = i), (this._y = r), (this._z = n), this;
      var s = Math.sqrt(1 - a * a);
      if (Math.abs(s) < 0.001)
        return (
          (this._w = 0.5 * (o + this._w)),
          (this._x = 0.5 * (i + this._x)),
          (this._y = 0.5 * (r + this._y)),
          (this._z = 0.5 * (n + this._z)),
          this
        );
      var l = Math.atan2(s, a),
        h = Math.sin((1 - t) * l) / s,
        c = Math.sin(t * l) / s;
      return (
        (this._w = o * h + this._w * c),
        (this._x = i * h + this._x * c),
        (this._y = r * h + this._y * c),
        (this._z = n * h + this._z * c),
        this.onChangeCallback(),
        this
      );
    },
    equals: function (e) {
      return (
        e._x === this._x &&
        e._y === this._y &&
        e._z === this._z &&
        e._w === this._w
      );
    },
    fromArray: function (e, t) {
      return (
        void 0 === t && (t = 0),
        (this._x = e[t]),
        (this._y = e[t + 1]),
        (this._z = e[t + 2]),
        (this._w = e[t + 3]),
        this.onChangeCallback(),
        this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this._x),
        (e[t + 1] = this._y),
        (e[t + 2] = this._z),
        (e[t + 3] = this._w),
        e
      );
    },
    onChange: function (e) {
      return (this.onChangeCallback = e), this;
    },
    onChangeCallback: function () {},
  }),
  Object.assign(THREE.Quaternion, {
    slerp: function (e, t, i, r) {
      return i.copy(e).slerp(t, r);
    },
    slerpFlat: function (e, t, i, r, n, o, a) {
      var s = i[r + 0],
        l = i[r + 1],
        h = i[r + 2],
        c = i[r + 3],
        u = n[o + 0],
        p = n[o + 1],
        d = n[o + 2],
        f = n[o + 3];
      if (c !== f || s !== u || l !== p || h !== d) {
        var m = 1 - a,
          E = s * u + l * p + h * d + c * f,
          g = E >= 0 ? 1 : -1,
          v = 1 - E * E;
        if (v > Number.EPSILON) {
          var y = Math.sqrt(v),
            T = Math.atan2(y, E * g);
          (m = Math.sin(m * T) / y), (a = Math.sin(a * T) / y);
        }
        var R = a * g;
        if (
          ((s = s * m + u * R),
          (l = l * m + p * R),
          (h = h * m + d * R),
          (c = c * m + f * R),
          m === 1 - a)
        ) {
          var x = 1 / Math.sqrt(s * s + l * l + h * h + c * c);
          (s *= x), (l *= x), (h *= x), (c *= x);
        }
      }
      (e[t] = s), (e[t + 1] = l), (e[t + 2] = h), (e[t + 3] = c);
    },
  }),
  (THREE.Vector2 = function (e, t) {
    (this.x = e || 0), (this.y = t || 0);
  }),
  (THREE.Vector2.prototype = {
    constructor: THREE.Vector2,
    get width() {
      return this.x;
    },
    set width(e) {
      this.x = e;
    },
    get height() {
      return this.y;
    },
    set height(e) {
      this.y = e;
    },
    set: function (e, t) {
      return (this.x = e), (this.y = t), this;
    },
    setScalar: function (e) {
      return (this.x = e), (this.y = e), this;
    },
    setX: function (e) {
      return (this.x = e), this;
    },
    setY: function (e) {
      return (this.y = e), this;
    },
    setComponent: function (e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    getComponent: function (e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    clone: function () {
      return new this.constructor(this.x, this.y);
    },
    copy: function (e) {
      return (this.x = e.x), (this.y = e.y), this;
    },
    add: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."
          ),
          this.addVectors(e, t))
        : ((this.x += e.x), (this.y += e.y), this);
    },
    addScalar: function (e) {
      return (this.x += e), (this.y += e), this;
    },
    addVectors: function (e, t) {
      return (this.x = e.x + t.x), (this.y = e.y + t.y), this;
    },
    addScaledVector: function (e, t) {
      return (this.x += e.x * t), (this.y += e.y * t), this;
    },
    sub: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."
          ),
          this.subVectors(e, t))
        : ((this.x -= e.x), (this.y -= e.y), this);
    },
    subScalar: function (e) {
      return (this.x -= e), (this.y -= e), this;
    },
    subVectors: function (e, t) {
      return (this.x = e.x - t.x), (this.y = e.y - t.y), this;
    },
    multiply: function (e) {
      return (this.x *= e.x), (this.y *= e.y), this;
    },
    multiplyScalar: function (e) {
      return (
        isFinite(e)
          ? ((this.x *= e), (this.y *= e))
          : ((this.x = 0), (this.y = 0)),
        this
      );
    },
    divide: function (e) {
      return (this.x /= e.x), (this.y /= e.y), this;
    },
    divideScalar: function (e) {
      return this.multiplyScalar(1 / e);
    },
    min: function (e) {
      return (
        (this.x = Math.min(this.x, e.x)), (this.y = Math.min(this.y, e.y)), this
      );
    },
    max: function (e) {
      return (
        (this.x = Math.max(this.x, e.x)), (this.y = Math.max(this.y, e.y)), this
      );
    },
    clamp: function (e, t) {
      return (
        (this.x = Math.max(e.x, Math.min(t.x, this.x))),
        (this.y = Math.max(e.y, Math.min(t.y, this.y))),
        this
      );
    },
    clampScalar: (function () {
      var e, t;
      return function (i, r) {
        return (
          void 0 === e &&
            ((e = new THREE.Vector2()), (t = new THREE.Vector2())),
          e.set(i, i),
          t.set(r, r),
          this.clamp(e, t)
        );
      };
    })(),
    clampLength: function (e, t) {
      var i = this.length();
      return this.multiplyScalar(Math.max(e, Math.min(t, i)) / i), this;
    },
    floor: function () {
      return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this;
    },
    ceil: function () {
      return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this;
    },
    round: function () {
      return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this;
    },
    roundToZero: function () {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        this
      );
    },
    negate: function () {
      return (this.x = -this.x), (this.y = -this.y), this;
    },
    dot: function (e) {
      return this.x * e.x + this.y * e.y;
    },
    lengthSq: function () {
      return this.x * this.x + this.y * this.y;
    },
    length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    lengthManhattan: function () {
      return Math.abs(this.x) + Math.abs(this.y);
    },
    normalize: function () {
      return this.divideScalar(this.length());
    },
    angle: function () {
      var e = Math.atan2(this.y, this.x);
      return e < 0 && (e += 2 * Math.PI), e;
    },
    distanceTo: function (e) {
      return Math.sqrt(this.distanceToSquared(e));
    },
    distanceToSquared: function (e) {
      var t = this.x - e.x,
        i = this.y - e.y;
      return t * t + i * i;
    },
    setLength: function (e) {
      return this.multiplyScalar(e / this.length());
    },
    lerp: function (e, t) {
      return (
        (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), this
      );
    },
    lerpVectors: function (e, t, i) {
      return this.subVectors(t, e).multiplyScalar(i).add(e), this;
    },
    equals: function (e) {
      return e.x === this.x && e.y === this.y;
    },
    fromArray: function (e, t) {
      return (
        void 0 === t && (t = 0), (this.x = e[t]), (this.y = e[t + 1]), this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this.x),
        (e[t + 1] = this.y),
        e
      );
    },
    fromAttribute: function (e, t, i) {
      return (
        void 0 === i && (i = 0),
        (t = t * e.itemSize + i),
        (this.x = e.array[t]),
        (this.y = e.array[t + 1]),
        this
      );
    },
    rotateAround: function (e, t) {
      var i = Math.cos(t),
        r = Math.sin(t),
        n = this.x - e.x,
        o = this.y - e.y;
      return (
        (this.x = n * i - o * r + e.x), (this.y = n * r + o * i + e.y), this
      );
    },
  }),
  (THREE.Vector3 = function (e, t, i) {
    (this.x = e || 0), (this.y = t || 0), (this.z = i || 0);
  }),
  (THREE.Vector3.prototype = {
    constructor: THREE.Vector3,
    set: function (e, t, i) {
      return (this.x = e), (this.y = t), (this.z = i), this;
    },
    setScalar: function (e) {
      return (this.x = e), (this.y = e), (this.z = e), this;
    },
    setX: function (e) {
      return (this.x = e), this;
    },
    setY: function (e) {
      return (this.y = e), this;
    },
    setZ: function (e) {
      return (this.z = e), this;
    },
    setComponent: function (e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        case 2:
          this.z = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    getComponent: function (e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    clone: function () {
      return new this.constructor(this.x, this.y, this.z);
    },
    copy: function (e) {
      return (this.x = e.x), (this.y = e.y), (this.z = e.z), this;
    },
    add: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."
          ),
          this.addVectors(e, t))
        : ((this.x += e.x), (this.y += e.y), (this.z += e.z), this);
    },
    addScalar: function (e) {
      return (this.x += e), (this.y += e), (this.z += e), this;
    },
    addVectors: function (e, t) {
      return (
        (this.x = e.x + t.x), (this.y = e.y + t.y), (this.z = e.z + t.z), this
      );
    },
    addScaledVector: function (e, t) {
      return (
        (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), this
      );
    },
    sub: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."
          ),
          this.subVectors(e, t))
        : ((this.x -= e.x), (this.y -= e.y), (this.z -= e.z), this);
    },
    subScalar: function (e) {
      return (this.x -= e), (this.y -= e), (this.z -= e), this;
    },
    subVectors: function (e, t) {
      return (
        (this.x = e.x - t.x), (this.y = e.y - t.y), (this.z = e.z - t.z), this
      );
    },
    multiply: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."
          ),
          this.multiplyVectors(e, t))
        : ((this.x *= e.x), (this.y *= e.y), (this.z *= e.z), this);
    },
    multiplyScalar: function (e) {
      return (
        isFinite(e)
          ? ((this.x *= e), (this.y *= e), (this.z *= e))
          : ((this.x = 0), (this.y = 0), (this.z = 0)),
        this
      );
    },
    multiplyVectors: function (e, t) {
      return (
        (this.x = e.x * t.x), (this.y = e.y * t.y), (this.z = e.z * t.z), this
      );
    },
    applyEuler: (function () {
      var e;
      return function (t) {
        return (
          t instanceof THREE.Euler == !1 &&
            console.error(
              "THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."
            ),
          void 0 === e && (e = new THREE.Quaternion()),
          this.applyQuaternion(e.setFromEuler(t)),
          this
        );
      };
    })(),
    applyAxisAngle: (function () {
      var e;
      return function (t, i) {
        return (
          void 0 === e && (e = new THREE.Quaternion()),
          this.applyQuaternion(e.setFromAxisAngle(t, i)),
          this
        );
      };
    })(),
    applyMatrix3: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = e.elements;
      return (
        (this.x = n[0] * t + n[3] * i + n[6] * r),
        (this.y = n[1] * t + n[4] * i + n[7] * r),
        (this.z = n[2] * t + n[5] * i + n[8] * r),
        this
      );
    },
    applyMatrix4: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = e.elements;
      return (
        (this.x = n[0] * t + n[4] * i + n[8] * r + n[12]),
        (this.y = n[1] * t + n[5] * i + n[9] * r + n[13]),
        (this.z = n[2] * t + n[6] * i + n[10] * r + n[14]),
        this
      );
    },
    applyProjection: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = e.elements,
        o = 1 / (n[3] * t + n[7] * i + n[11] * r + n[15]);
      return (
        (this.x = (n[0] * t + n[4] * i + n[8] * r + n[12]) * o),
        (this.y = (n[1] * t + n[5] * i + n[9] * r + n[13]) * o),
        (this.z = (n[2] * t + n[6] * i + n[10] * r + n[14]) * o),
        this
      );
    },
    applyQuaternion: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = e.x,
        o = e.y,
        a = e.z,
        s = e.w,
        l = s * t + o * r - a * i,
        h = s * i + a * t - n * r,
        c = s * r + n * i - o * t,
        u = -n * t - o * i - a * r;
      return (
        (this.x = l * s + u * -n + h * -a - c * -o),
        (this.y = h * s + u * -o + c * -n - l * -a),
        (this.z = c * s + u * -a + l * -o - h * -n),
        this
      );
    },
    project: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.multiplyMatrices(t.projectionMatrix, e.getInverse(t.matrixWorld)),
          this.applyProjection(e)
        );
      };
    })(),
    unproject: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.multiplyMatrices(t.matrixWorld, e.getInverse(t.projectionMatrix)),
          this.applyProjection(e)
        );
      };
    })(),
    transformDirection: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = e.elements;
      return (
        (this.x = n[0] * t + n[4] * i + n[8] * r),
        (this.y = n[1] * t + n[5] * i + n[9] * r),
        (this.z = n[2] * t + n[6] * i + n[10] * r),
        this.normalize(),
        this
      );
    },
    divide: function (e) {
      return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), this;
    },
    divideScalar: function (e) {
      return this.multiplyScalar(1 / e);
    },
    min: function (e) {
      return (
        (this.x = Math.min(this.x, e.x)),
        (this.y = Math.min(this.y, e.y)),
        (this.z = Math.min(this.z, e.z)),
        this
      );
    },
    max: function (e) {
      return (
        (this.x = Math.max(this.x, e.x)),
        (this.y = Math.max(this.y, e.y)),
        (this.z = Math.max(this.z, e.z)),
        this
      );
    },
    clamp: function (e, t) {
      return (
        (this.x = Math.max(e.x, Math.min(t.x, this.x))),
        (this.y = Math.max(e.y, Math.min(t.y, this.y))),
        (this.z = Math.max(e.z, Math.min(t.z, this.z))),
        this
      );
    },
    clampScalar: (function () {
      var e, t;
      return function (i, r) {
        return (
          void 0 === e &&
            ((e = new THREE.Vector3()), (t = new THREE.Vector3())),
          e.set(i, i, i),
          t.set(r, r, r),
          this.clamp(e, t)
        );
      };
    })(),
    clampLength: function (e, t) {
      var i = this.length();
      return this.multiplyScalar(Math.max(e, Math.min(t, i)) / i), this;
    },
    floor: function () {
      return (
        (this.x = Math.floor(this.x)),
        (this.y = Math.floor(this.y)),
        (this.z = Math.floor(this.z)),
        this
      );
    },
    ceil: function () {
      return (
        (this.x = Math.ceil(this.x)),
        (this.y = Math.ceil(this.y)),
        (this.z = Math.ceil(this.z)),
        this
      );
    },
    round: function () {
      return (
        (this.x = Math.round(this.x)),
        (this.y = Math.round(this.y)),
        (this.z = Math.round(this.z)),
        this
      );
    },
    roundToZero: function () {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
        this
      );
    },
    negate: function () {
      return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
    },
    dot: function (e) {
      return this.x * e.x + this.y * e.y + this.z * e.z;
    },
    lengthSq: function () {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    length: function () {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    lengthManhattan: function () {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    },
    normalize: function () {
      return this.divideScalar(this.length());
    },
    setLength: function (e) {
      return this.multiplyScalar(e / this.length());
    },
    lerp: function (e, t) {
      return (
        (this.x += (e.x - this.x) * t),
        (this.y += (e.y - this.y) * t),
        (this.z += (e.z - this.z) * t),
        this
      );
    },
    lerpVectors: function (e, t, i) {
      return this.subVectors(t, e).multiplyScalar(i).add(e), this;
    },
    cross: function (e, t) {
      if (void 0 !== t)
        return (
          console.warn(
            "THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."
          ),
          this.crossVectors(e, t)
        );
      var i = this.x,
        r = this.y,
        n = this.z;
      return (
        (this.x = r * e.z - n * e.y),
        (this.y = n * e.x - i * e.z),
        (this.z = i * e.y - r * e.x),
        this
      );
    },
    crossVectors: function (e, t) {
      var i = e.x,
        r = e.y,
        n = e.z,
        o = t.x,
        a = t.y,
        s = t.z;
      return (
        (this.x = r * s - n * a),
        (this.y = n * o - i * s),
        (this.z = i * a - r * o),
        this
      );
    },
    projectOnVector: (function () {
      var e, t;
      return function (i) {
        return (
          void 0 === e && (e = new THREE.Vector3()),
          e.copy(i).normalize(),
          (t = this.dot(e)),
          this.copy(e).multiplyScalar(t)
        );
      };
    })(),
    projectOnPlane: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Vector3()),
          e.copy(this).projectOnVector(t),
          this.sub(e)
        );
      };
    })(),
    reflect: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Vector3()),
          this.sub(e.copy(t).multiplyScalar(2 * this.dot(t)))
        );
      };
    })(),
    angleTo: function (e) {
      var t = this.dot(e) / Math.sqrt(this.lengthSq() * e.lengthSq());
      return Math.acos(THREE.Math.clamp(t, -1, 1));
    },
    distanceTo: function (e) {
      return Math.sqrt(this.distanceToSquared(e));
    },
    distanceToSquared: function (e) {
      var t = this.x - e.x,
        i = this.y - e.y,
        r = this.z - e.z;
      return t * t + i * i + r * r;
    },
    setFromMatrixPosition: function (e) {
      return (
        (this.x = e.elements[12]),
        (this.y = e.elements[13]),
        (this.z = e.elements[14]),
        this
      );
    },
    setFromMatrixScale: function (e) {
      var t = this.set(e.elements[0], e.elements[1], e.elements[2]).length(),
        i = this.set(e.elements[4], e.elements[5], e.elements[6]).length(),
        r = this.set(e.elements[8], e.elements[9], e.elements[10]).length();
      return (this.x = t), (this.y = i), (this.z = r), this;
    },
    setFromMatrixColumn: function (e, t) {
      var i = 4 * e,
        r = t.elements;
      return (this.x = r[i]), (this.y = r[i + 1]), (this.z = r[i + 2]), this;
    },
    equals: function (e) {
      return e.x === this.x && e.y === this.y && e.z === this.z;
    },
    fromArray: function (e, t) {
      return (
        void 0 === t && (t = 0),
        (this.x = e[t]),
        (this.y = e[t + 1]),
        (this.z = e[t + 2]),
        this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this.x),
        (e[t + 1] = this.y),
        (e[t + 2] = this.z),
        e
      );
    },
    fromAttribute: function (e, t, i) {
      return (
        void 0 === i && (i = 0),
        (t = t * e.itemSize + i),
        (this.x = e.array[t]),
        (this.y = e.array[t + 1]),
        (this.z = e.array[t + 2]),
        this
      );
    },
  }),
  (THREE.Vector4 = function (e, t, i, r) {
    (this.x = e || 0),
      (this.y = t || 0),
      (this.z = i || 0),
      (this.w = void 0 !== r ? r : 1);
  }),
  (THREE.Vector4.prototype = {
    constructor: THREE.Vector4,
    set: function (e, t, i, r) {
      return (this.x = e), (this.y = t), (this.z = i), (this.w = r), this;
    },
    setScalar: function (e) {
      return (this.x = e), (this.y = e), (this.z = e), (this.w = e), this;
    },
    setX: function (e) {
      return (this.x = e), this;
    },
    setY: function (e) {
      return (this.y = e), this;
    },
    setZ: function (e) {
      return (this.z = e), this;
    },
    setW: function (e) {
      return (this.w = e), this;
    },
    setComponent: function (e, t) {
      switch (e) {
        case 0:
          this.x = t;
          break;
        case 1:
          this.y = t;
          break;
        case 2:
          this.z = t;
          break;
        case 3:
          this.w = t;
          break;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    getComponent: function (e) {
      switch (e) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + e);
      }
    },
    clone: function () {
      return new this.constructor(this.x, this.y, this.z, this.w);
    },
    copy: function (e) {
      return (
        (this.x = e.x),
        (this.y = e.y),
        (this.z = e.z),
        (this.w = void 0 !== e.w ? e.w : 1),
        this
      );
    },
    add: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."
          ),
          this.addVectors(e, t))
        : ((this.x += e.x),
          (this.y += e.y),
          (this.z += e.z),
          (this.w += e.w),
          this);
    },
    addScalar: function (e) {
      return (this.x += e), (this.y += e), (this.z += e), (this.w += e), this;
    },
    addVectors: function (e, t) {
      return (
        (this.x = e.x + t.x),
        (this.y = e.y + t.y),
        (this.z = e.z + t.z),
        (this.w = e.w + t.w),
        this
      );
    },
    addScaledVector: function (e, t) {
      return (
        (this.x += e.x * t),
        (this.y += e.y * t),
        (this.z += e.z * t),
        (this.w += e.w * t),
        this
      );
    },
    sub: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."
          ),
          this.subVectors(e, t))
        : ((this.x -= e.x),
          (this.y -= e.y),
          (this.z -= e.z),
          (this.w -= e.w),
          this);
    },
    subScalar: function (e) {
      return (this.x -= e), (this.y -= e), (this.z -= e), (this.w -= e), this;
    },
    subVectors: function (e, t) {
      return (
        (this.x = e.x - t.x),
        (this.y = e.y - t.y),
        (this.z = e.z - t.z),
        (this.w = e.w - t.w),
        this
      );
    },
    multiplyScalar: function (e) {
      return (
        isFinite(e)
          ? ((this.x *= e), (this.y *= e), (this.z *= e), (this.w *= e))
          : ((this.x = 0), (this.y = 0), (this.z = 0), (this.w = 0)),
        this
      );
    },
    applyMatrix4: function (e) {
      var t = this.x,
        i = this.y,
        r = this.z,
        n = this.w,
        o = e.elements;
      return (
        (this.x = o[0] * t + o[4] * i + o[8] * r + o[12] * n),
        (this.y = o[1] * t + o[5] * i + o[9] * r + o[13] * n),
        (this.z = o[2] * t + o[6] * i + o[10] * r + o[14] * n),
        (this.w = o[3] * t + o[7] * i + o[11] * r + o[15] * n),
        this
      );
    },
    divideScalar: function (e) {
      return this.multiplyScalar(1 / e);
    },
    setAxisAngleFromQuaternion: function (e) {
      this.w = 2 * Math.acos(e.w);
      var t = Math.sqrt(1 - e.w * e.w);
      return (
        t < 1e-4
          ? ((this.x = 1), (this.y = 0), (this.z = 0))
          : ((this.x = e.x / t), (this.y = e.y / t), (this.z = e.z / t)),
        this
      );
    },
    setAxisAngleFromRotationMatrix: function (e) {
      var t,
        i,
        r,
        n,
        o = 0.01,
        a = 0.1,
        s = e.elements,
        l = s[0],
        h = s[4],
        c = s[8],
        u = s[1],
        p = s[5],
        d = s[9],
        f = s[2],
        m = s[6],
        E = s[10];
      if (Math.abs(h - u) < o && Math.abs(c - f) < o && Math.abs(d - m) < o) {
        if (
          Math.abs(h + u) < a &&
          Math.abs(c + f) < a &&
          Math.abs(d + m) < a &&
          Math.abs(l + p + E - 3) < a
        )
          return this.set(1, 0, 0, 0), this;
        t = Math.PI;
        var g = (l + 1) / 2,
          v = (p + 1) / 2,
          y = (E + 1) / 2,
          T = (h + u) / 4,
          R = (c + f) / 4,
          x = (d + m) / 4;
        return (
          g > v && g > y
            ? g < o
              ? ((i = 0), (r = 0.707106781), (n = 0.707106781))
              : ((r = T / (i = Math.sqrt(g))), (n = R / i))
            : v > y
            ? v < o
              ? ((i = 0.707106781), (r = 0), (n = 0.707106781))
              : ((i = T / (r = Math.sqrt(v))), (n = x / r))
            : y < o
            ? ((i = 0.707106781), (r = 0.707106781), (n = 0))
            : ((i = R / (n = Math.sqrt(y))), (r = x / n)),
          this.set(i, r, n, t),
          this
        );
      }
      var H = Math.sqrt(
        (m - d) * (m - d) + (c - f) * (c - f) + (u - h) * (u - h)
      );
      return (
        Math.abs(H) < 0.001 && (H = 1),
        (this.x = (m - d) / H),
        (this.y = (c - f) / H),
        (this.z = (u - h) / H),
        (this.w = Math.acos((l + p + E - 1) / 2)),
        this
      );
    },
    min: function (e) {
      return (
        (this.x = Math.min(this.x, e.x)),
        (this.y = Math.min(this.y, e.y)),
        (this.z = Math.min(this.z, e.z)),
        (this.w = Math.min(this.w, e.w)),
        this
      );
    },
    max: function (e) {
      return (
        (this.x = Math.max(this.x, e.x)),
        (this.y = Math.max(this.y, e.y)),
        (this.z = Math.max(this.z, e.z)),
        (this.w = Math.max(this.w, e.w)),
        this
      );
    },
    clamp: function (e, t) {
      return (
        (this.x = Math.max(e.x, Math.min(t.x, this.x))),
        (this.y = Math.max(e.y, Math.min(t.y, this.y))),
        (this.z = Math.max(e.z, Math.min(t.z, this.z))),
        (this.w = Math.max(e.w, Math.min(t.w, this.w))),
        this
      );
    },
    clampScalar: (function () {
      var e, t;
      return function (i, r) {
        return (
          void 0 === e &&
            ((e = new THREE.Vector4()), (t = new THREE.Vector4())),
          e.set(i, i, i, i),
          t.set(r, r, r, r),
          this.clamp(e, t)
        );
      };
    })(),
    floor: function () {
      return (
        (this.x = Math.floor(this.x)),
        (this.y = Math.floor(this.y)),
        (this.z = Math.floor(this.z)),
        (this.w = Math.floor(this.w)),
        this
      );
    },
    ceil: function () {
      return (
        (this.x = Math.ceil(this.x)),
        (this.y = Math.ceil(this.y)),
        (this.z = Math.ceil(this.z)),
        (this.w = Math.ceil(this.w)),
        this
      );
    },
    round: function () {
      return (
        (this.x = Math.round(this.x)),
        (this.y = Math.round(this.y)),
        (this.z = Math.round(this.z)),
        (this.w = Math.round(this.w)),
        this
      );
    },
    roundToZero: function () {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
        (this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w)),
        this
      );
    },
    negate: function () {
      return (
        (this.x = -this.x),
        (this.y = -this.y),
        (this.z = -this.z),
        (this.w = -this.w),
        this
      );
    },
    dot: function (e) {
      return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
    },
    lengthSq: function () {
      return (
        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
      );
    },
    length: function () {
      return Math.sqrt(
        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
      );
    },
    lengthManhattan: function () {
      return (
        Math.abs(this.x) +
        Math.abs(this.y) +
        Math.abs(this.z) +
        Math.abs(this.w)
      );
    },
    normalize: function () {
      return this.divideScalar(this.length());
    },
    setLength: function (e) {
      return this.multiplyScalar(e / this.length());
    },
    lerp: function (e, t) {
      return (
        (this.x += (e.x - this.x) * t),
        (this.y += (e.y - this.y) * t),
        (this.z += (e.z - this.z) * t),
        (this.w += (e.w - this.w) * t),
        this
      );
    },
    lerpVectors: function (e, t, i) {
      return this.subVectors(t, e).multiplyScalar(i).add(e), this;
    },
    equals: function (e) {
      return (
        e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w
      );
    },
    fromArray: function (e, t) {
      return (
        void 0 === t && (t = 0),
        (this.x = e[t]),
        (this.y = e[t + 1]),
        (this.z = e[t + 2]),
        (this.w = e[t + 3]),
        this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this.x),
        (e[t + 1] = this.y),
        (e[t + 2] = this.z),
        (e[t + 3] = this.w),
        e
      );
    },
    fromAttribute: function (e, t, i) {
      return (
        void 0 === i && (i = 0),
        (t = t * e.itemSize + i),
        (this.x = e.array[t]),
        (this.y = e.array[t + 1]),
        (this.z = e.array[t + 2]),
        (this.w = e.array[t + 3]),
        this
      );
    },
  }),
  (THREE.Euler = function (e, t, i, r) {
    (this._x = e || 0),
      (this._y = t || 0),
      (this._z = i || 0),
      (this._order = r || THREE.Euler.DefaultOrder);
  }),
  (THREE.Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"]),
  (THREE.Euler.DefaultOrder = "XYZ"),
  (THREE.Euler.prototype = {
    constructor: THREE.Euler,
    get x() {
      return this._x;
    },
    set x(e) {
      (this._x = e), this.onChangeCallback();
    },
    get y() {
      return this._y;
    },
    set y(e) {
      (this._y = e), this.onChangeCallback();
    },
    get z() {
      return this._z;
    },
    set z(e) {
      (this._z = e), this.onChangeCallback();
    },
    get order() {
      return this._order;
    },
    set order(e) {
      (this._order = e), this.onChangeCallback();
    },
    set: function (e, t, i, r) {
      return (
        (this._x = e),
        (this._y = t),
        (this._z = i),
        (this._order = r || this._order),
        this.onChangeCallback(),
        this
      );
    },
    clone: function () {
      return new this.constructor(this._x, this._y, this._z, this._order);
    },
    copy: function (e) {
      return (
        (this._x = e._x),
        (this._y = e._y),
        (this._z = e._z),
        (this._order = e._order),
        this.onChangeCallback(),
        this
      );
    },
    setFromRotationMatrix: function (e, t, i) {
      var r = THREE.Math.clamp,
        n = e.elements,
        o = n[0],
        a = n[4],
        s = n[8],
        l = n[1],
        h = n[5],
        c = n[9],
        u = n[2],
        p = n[6],
        d = n[10];
      return (
        "XYZ" === (t = t || this._order)
          ? ((this._y = Math.asin(r(s, -1, 1))),
            Math.abs(s) < 0.99999
              ? ((this._x = Math.atan2(-c, d)), (this._z = Math.atan2(-a, o)))
              : ((this._x = Math.atan2(p, h)), (this._z = 0)))
          : "YXZ" === t
          ? ((this._x = Math.asin(-r(c, -1, 1))),
            Math.abs(c) < 0.99999
              ? ((this._y = Math.atan2(s, d)), (this._z = Math.atan2(l, h)))
              : ((this._y = Math.atan2(-u, o)), (this._z = 0)))
          : "ZXY" === t
          ? ((this._x = Math.asin(r(p, -1, 1))),
            Math.abs(p) < 0.99999
              ? ((this._y = Math.atan2(-u, d)), (this._z = Math.atan2(-a, h)))
              : ((this._y = 0), (this._z = Math.atan2(l, o))))
          : "ZYX" === t
          ? ((this._y = Math.asin(-r(u, -1, 1))),
            Math.abs(u) < 0.99999
              ? ((this._x = Math.atan2(p, d)), (this._z = Math.atan2(l, o)))
              : ((this._x = 0), (this._z = Math.atan2(-a, h))))
          : "YZX" === t
          ? ((this._z = Math.asin(r(l, -1, 1))),
            Math.abs(l) < 0.99999
              ? ((this._x = Math.atan2(-c, h)), (this._y = Math.atan2(-u, o)))
              : ((this._x = 0), (this._y = Math.atan2(s, d))))
          : "XZY" === t
          ? ((this._z = Math.asin(-r(a, -1, 1))),
            Math.abs(a) < 0.99999
              ? ((this._x = Math.atan2(p, h)), (this._y = Math.atan2(s, o)))
              : ((this._x = Math.atan2(-c, d)), (this._y = 0)))
          : console.warn(
              "THREE.Euler: .setFromRotationMatrix() given unsupported order: " +
                t
            ),
        (this._order = t),
        !1 !== i && this.onChangeCallback(),
        this
      );
    },
    setFromQuaternion: (function () {
      var e;
      return function (t, i, r) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationFromQuaternion(t),
          this.setFromRotationMatrix(e, i, r),
          this
        );
      };
    })(),
    setFromVector3: function (e, t) {
      return this.set(e.x, e.y, e.z, t || this._order);
    },
    reorder: (function () {
      var e = new THREE.Quaternion();
      return function (t) {
        e.setFromEuler(this), this.setFromQuaternion(e, t);
      };
    })(),
    equals: function (e) {
      return (
        e._x === this._x &&
        e._y === this._y &&
        e._z === this._z &&
        e._order === this._order
      );
    },
    fromArray: function (e) {
      return (
        (this._x = e[0]),
        (this._y = e[1]),
        (this._z = e[2]),
        void 0 !== e[3] && (this._order = e[3]),
        this.onChangeCallback(),
        this
      );
    },
    toArray: function (e, t) {
      return (
        void 0 === e && (e = []),
        void 0 === t && (t = 0),
        (e[t] = this._x),
        (e[t + 1] = this._y),
        (e[t + 2] = this._z),
        (e[t + 3] = this._order),
        e
      );
    },
    toVector3: function (e) {
      return e
        ? e.set(this._x, this._y, this._z)
        : new THREE.Vector3(this._x, this._y, this._z);
    },
    onChange: function (e) {
      return (this.onChangeCallback = e), this;
    },
    onChangeCallback: function () {},
  }),
  (THREE.Line3 = function (e, t) {
    (this.start = void 0 !== e ? e : new THREE.Vector3()),
      (this.end = void 0 !== t ? t : new THREE.Vector3());
  }),
  (THREE.Line3.prototype = {
    constructor: THREE.Line3,
    set: function (e, t) {
      return this.start.copy(e), this.end.copy(t), this;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.start.copy(e.start), this.end.copy(e.end), this;
    },
    center: function (e) {
      return (e || new THREE.Vector3())
        .addVectors(this.start, this.end)
        .multiplyScalar(0.5);
    },
    delta: function (e) {
      return (e || new THREE.Vector3()).subVectors(this.end, this.start);
    },
    distanceSq: function () {
      return this.start.distanceToSquared(this.end);
    },
    distance: function () {
      return this.start.distanceTo(this.end);
    },
    at: function (e, t) {
      var i = t || new THREE.Vector3();
      return this.delta(i).multiplyScalar(e).add(this.start);
    },
    closestPointToPointParameter: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3();
      return function (i, r) {
        e.subVectors(i, this.start), t.subVectors(this.end, this.start);
        var n = t.dot(t),
          o = t.dot(e) / n;
        return r && (o = THREE.Math.clamp(o, 0, 1)), o;
      };
    })(),
    closestPointToPoint: function (e, t, i) {
      var r = this.closestPointToPointParameter(e, t),
        n = i || new THREE.Vector3();
      return this.delta(n).multiplyScalar(r).add(this.start);
    },
    applyMatrix4: function (e) {
      return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
    },
    equals: function (e) {
      return e.start.equals(this.start) && e.end.equals(this.end);
    },
  }),
  (THREE.Box2 = function (e, t) {
    (this.min = void 0 !== e ? e : new THREE.Vector2(1 / 0, 1 / 0)),
      (this.max = void 0 !== t ? t : new THREE.Vector2(-1 / 0, -1 / 0));
  }),
  (THREE.Box2.prototype = {
    constructor: THREE.Box2,
    set: function (e, t) {
      return this.min.copy(e), this.max.copy(t), this;
    },
    setFromPoints: function (e) {
      this.makeEmpty();
      for (var t = 0, i = e.length; t < i; t++) this.expandByPoint(e[t]);
      return this;
    },
    setFromCenterAndSize: (function () {
      var e = new THREE.Vector2();
      return function (t, i) {
        var r = e.copy(i).multiplyScalar(0.5);
        return this.min.copy(t).sub(r), this.max.copy(t).add(r), this;
      };
    })(),
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.min.copy(e.min), this.max.copy(e.max), this;
    },
    makeEmpty: function () {
      return (
        (this.min.x = this.min.y = 1 / 0),
        (this.max.x = this.max.y = -1 / 0),
        this
      );
    },
    isEmpty: function () {
      return this.max.x < this.min.x || this.max.y < this.min.y;
    },
    center: function (e) {
      return (e || new THREE.Vector2())
        .addVectors(this.min, this.max)
        .multiplyScalar(0.5);
    },
    size: function (e) {
      return (e || new THREE.Vector2()).subVectors(this.max, this.min);
    },
    expandByPoint: function (e) {
      return this.min.min(e), this.max.max(e), this;
    },
    expandByVector: function (e) {
      return this.min.sub(e), this.max.add(e), this;
    },
    expandByScalar: function (e) {
      return this.min.addScalar(-e), this.max.addScalar(e), this;
    },
    containsPoint: function (e) {
      return !(
        e.x < this.min.x ||
        e.x > this.max.x ||
        e.y < this.min.y ||
        e.y > this.max.y
      );
    },
    containsBox: function (e) {
      return (
        this.min.x <= e.min.x &&
        e.max.x <= this.max.x &&
        this.min.y <= e.min.y &&
        e.max.y <= this.max.y
      );
    },
    getParameter: function (e, t) {
      return (t || new THREE.Vector2()).set(
        (e.x - this.min.x) / (this.max.x - this.min.x),
        (e.y - this.min.y) / (this.max.y - this.min.y)
      );
    },
    intersectsBox: function (e) {
      return !(
        e.max.x < this.min.x ||
        e.min.x > this.max.x ||
        e.max.y < this.min.y ||
        e.min.y > this.max.y
      );
    },
    clampPoint: function (e, t) {
      return (t || new THREE.Vector2()).copy(e).clamp(this.min, this.max);
    },
    distanceToPoint: (function () {
      var e = new THREE.Vector2();
      return function (t) {
        return e.copy(t).clamp(this.min, this.max).sub(t).length();
      };
    })(),
    intersect: function (e) {
      return this.min.max(e.min), this.max.min(e.max), this;
    },
    union: function (e) {
      return this.min.min(e.min), this.max.max(e.max), this;
    },
    translate: function (e) {
      return this.min.add(e), this.max.add(e), this;
    },
    equals: function (e) {
      return e.min.equals(this.min) && e.max.equals(this.max);
    },
  }),
  (THREE.Box3 = function (e, t) {
    (this.min = void 0 !== e ? e : new THREE.Vector3(1 / 0, 1 / 0, 1 / 0)),
      (this.max = void 0 !== t ? t : new THREE.Vector3(-1 / 0, -1 / 0, -1 / 0));
  }),
  (THREE.Box3.prototype = {
    constructor: THREE.Box3,
    set: function (e, t) {
      return this.min.copy(e), this.max.copy(t), this;
    },
    setFromArray: function (e) {
      this.makeEmpty();
      for (
        var t = 1 / 0,
          i = 1 / 0,
          r = 1 / 0,
          n = -1 / 0,
          o = -1 / 0,
          a = -1 / 0,
          s = 0,
          l = e.length;
        s < l;
        s += 3
      ) {
        var h = e[s],
          c = e[s + 1],
          u = e[s + 2];
        h < t && (t = h),
          c < i && (i = c),
          u < r && (r = u),
          h > n && (n = h),
          c > o && (o = c),
          u > a && (a = u);
      }
      this.min.set(t, i, r), this.max.set(n, o, a);
    },
    setFromPoints: function (e) {
      this.makeEmpty();
      for (var t = 0, i = e.length; t < i; t++) this.expandByPoint(e[t]);
      return this;
    },
    setFromCenterAndSize: (function () {
      var e = new THREE.Vector3();
      return function (t, i) {
        var r = e.copy(i).multiplyScalar(0.5);
        return this.min.copy(t).sub(r), this.max.copy(t).add(r), this;
      };
    })(),
    setFromObject: (function () {
      var e;
      return function (t) {
        void 0 === e && (e = new THREE.Box3());
        var i = this;
        return (
          this.makeEmpty(),
          t.updateMatrixWorld(!0),
          t.traverse(function (t) {
            var r = t.geometry;
            void 0 !== r &&
              (null === r.boundingBox && r.computeBoundingBox(),
              e.copy(r.boundingBox),
              e.applyMatrix4(t.matrixWorld),
              i.union(e));
          }),
          this
        );
      };
    })(),
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.min.copy(e.min), this.max.copy(e.max), this;
    },
    makeEmpty: function () {
      return (
        (this.min.x = this.min.y = this.min.z = 1 / 0),
        (this.max.x = this.max.y = this.max.z = -1 / 0),
        this
      );
    },
    isEmpty: function () {
      return (
        this.max.x < this.min.x ||
        this.max.y < this.min.y ||
        this.max.z < this.min.z
      );
    },
    center: function (e) {
      return (e || new THREE.Vector3())
        .addVectors(this.min, this.max)
        .multiplyScalar(0.5);
    },
    size: function (e) {
      return (e || new THREE.Vector3()).subVectors(this.max, this.min);
    },
    expandByPoint: function (e) {
      return this.min.min(e), this.max.max(e), this;
    },
    expandByVector: function (e) {
      return this.min.sub(e), this.max.add(e), this;
    },
    expandByScalar: function (e) {
      return this.min.addScalar(-e), this.max.addScalar(e), this;
    },
    containsPoint: function (e) {
      return !(
        e.x < this.min.x ||
        e.x > this.max.x ||
        e.y < this.min.y ||
        e.y > this.max.y ||
        e.z < this.min.z ||
        e.z > this.max.z
      );
    },
    containsBox: function (e) {
      return (
        this.min.x <= e.min.x &&
        e.max.x <= this.max.x &&
        this.min.y <= e.min.y &&
        e.max.y <= this.max.y &&
        this.min.z <= e.min.z &&
        e.max.z <= this.max.z
      );
    },
    getParameter: function (e, t) {
      return (t || new THREE.Vector3()).set(
        (e.x - this.min.x) / (this.max.x - this.min.x),
        (e.y - this.min.y) / (this.max.y - this.min.y),
        (e.z - this.min.z) / (this.max.z - this.min.z)
      );
    },
    intersectsBox: function (e) {
      return !(
        e.max.x < this.min.x ||
        e.min.x > this.max.x ||
        e.max.y < this.min.y ||
        e.min.y > this.max.y ||
        e.max.z < this.min.z ||
        e.min.z > this.max.z
      );
    },
    intersectsSphere: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Vector3()),
          this.clampPoint(t.center, e),
          e.distanceToSquared(t.center) <= t.radius * t.radius
        );
      };
    })(),
    intersectsPlane: function (e) {
      var t, i;
      return (
        e.normal.x > 0
          ? ((t = e.normal.x * this.min.x), (i = e.normal.x * this.max.x))
          : ((t = e.normal.x * this.max.x), (i = e.normal.x * this.min.x)),
        e.normal.y > 0
          ? ((t += e.normal.y * this.min.y), (i += e.normal.y * this.max.y))
          : ((t += e.normal.y * this.max.y), (i += e.normal.y * this.min.y)),
        e.normal.z > 0
          ? ((t += e.normal.z * this.min.z), (i += e.normal.z * this.max.z))
          : ((t += e.normal.z * this.max.z), (i += e.normal.z * this.min.z)),
        t <= e.constant && i >= e.constant
      );
    },
    clampPoint: function (e, t) {
      return (t || new THREE.Vector3()).copy(e).clamp(this.min, this.max);
    },
    distanceToPoint: (function () {
      var e = new THREE.Vector3();
      return function (t) {
        return e.copy(t).clamp(this.min, this.max).sub(t).length();
      };
    })(),
    getBoundingSphere: (function () {
      var e = new THREE.Vector3();
      return function (t) {
        var i = t || new THREE.Sphere();
        return (
          (i.center = this.center()),
          (i.radius = 0.5 * this.size(e).length()),
          i
        );
      };
    })(),
    intersect: function (e) {
      return this.min.max(e.min), this.max.min(e.max), this;
    },
    union: function (e) {
      return this.min.min(e.min), this.max.max(e.max), this;
    },
    applyMatrix4: (function () {
      var e = [
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
      ];
      return function (t) {
        return (
          e[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
          e[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
          e[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
          e[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
          e[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
          e[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
          e[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
          e[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
          this.makeEmpty(),
          this.setFromPoints(e),
          this
        );
      };
    })(),
    translate: function (e) {
      return this.min.add(e), this.max.add(e), this;
    },
    equals: function (e) {
      return e.min.equals(this.min) && e.max.equals(this.max);
    },
  }),
  (THREE.Matrix3 = function () {
    (this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])),
      arguments.length > 0 &&
        console.error(
          "THREE.Matrix3: the constructor no longer reads arguments. use .set() instead."
        );
  }),
  (THREE.Matrix3.prototype = {
    constructor: THREE.Matrix3,
    set: function (e, t, i, r, n, o, a, s, l) {
      var h = this.elements;
      return (
        (h[0] = e),
        (h[3] = t),
        (h[6] = i),
        (h[1] = r),
        (h[4] = n),
        (h[7] = o),
        (h[2] = a),
        (h[5] = s),
        (h[8] = l),
        this
      );
    },
    identity: function () {
      return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    },
    clone: function () {
      return new this.constructor().fromArray(this.elements);
    },
    copy: function (e) {
      var t = e.elements;
      return (
        this.set(t[0], t[3], t[6], t[1], t[4], t[7], t[2], t[5], t[8]), this
      );
    },
    applyToVector3Array: (function () {
      var e;
      return function (t, i, r) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === i && (i = 0),
          void 0 === r && (r = t.length);
        for (var n = 0, o = i; n < r; n += 3, o += 3)
          e.fromArray(t, o), e.applyMatrix3(this), e.toArray(t, o);
        return t;
      };
    })(),
    applyToBuffer: (function () {
      var e;
      return function (t, i, r) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === i && (i = 0),
          void 0 === r && (r = t.length / t.itemSize);
        for (var n = 0, o = i; n < r; n++, o++)
          (e.x = t.getX(o)),
            (e.y = t.getY(o)),
            (e.z = t.getZ(o)),
            e.applyMatrix3(this),
            t.setXYZ(e.x, e.y, e.z);
        return t;
      };
    })(),
    multiplyScalar: function (e) {
      var t = this.elements;
      return (
        (t[0] *= e),
        (t[3] *= e),
        (t[6] *= e),
        (t[1] *= e),
        (t[4] *= e),
        (t[7] *= e),
        (t[2] *= e),
        (t[5] *= e),
        (t[8] *= e),
        this
      );
    },
    determinant: function () {
      var e = this.elements,
        t = e[0],
        i = e[1],
        r = e[2],
        n = e[3],
        o = e[4],
        a = e[5],
        s = e[6],
        l = e[7],
        h = e[8];
      return (
        t * o * h - t * a * l - i * n * h + i * a * s + r * n * l - r * o * s
      );
    },
    getInverse: function (e, t) {
      var i = e.elements,
        r = this.elements;
      (r[0] = i[10] * i[5] - i[6] * i[9]),
        (r[1] = -i[10] * i[1] + i[2] * i[9]),
        (r[2] = i[6] * i[1] - i[2] * i[5]),
        (r[3] = -i[10] * i[4] + i[6] * i[8]),
        (r[4] = i[10] * i[0] - i[2] * i[8]),
        (r[5] = -i[6] * i[0] + i[2] * i[4]),
        (r[6] = i[9] * i[4] - i[5] * i[8]),
        (r[7] = -i[9] * i[0] + i[1] * i[8]),
        (r[8] = i[5] * i[0] - i[1] * i[4]);
      var n = i[0] * r[0] + i[1] * r[3] + i[2] * r[6];
      if (0 === n) {
        var o =
          "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";
        if (t) throw new Error(o);
        return console.warn(o), this.identity(), this;
      }
      return this.multiplyScalar(1 / n), this;
    },
    transpose: function () {
      var e,
        t = this.elements;
      return (
        (e = t[1]),
        (t[1] = t[3]),
        (t[3] = e),
        (e = t[2]),
        (t[2] = t[6]),
        (t[6] = e),
        (e = t[5]),
        (t[5] = t[7]),
        (t[7] = e),
        this
      );
    },
    flattenToArrayOffset: function (e, t) {
      var i = this.elements;
      return (
        (e[t] = i[0]),
        (e[t + 1] = i[1]),
        (e[t + 2] = i[2]),
        (e[t + 3] = i[3]),
        (e[t + 4] = i[4]),
        (e[t + 5] = i[5]),
        (e[t + 6] = i[6]),
        (e[t + 7] = i[7]),
        (e[t + 8] = i[8]),
        e
      );
    },
    getNormalMatrix: function (e) {
      return this.getInverse(e).transpose(), this;
    },
    transposeIntoArray: function (e) {
      var t = this.elements;
      return (
        (e[0] = t[0]),
        (e[1] = t[3]),
        (e[2] = t[6]),
        (e[3] = t[1]),
        (e[4] = t[4]),
        (e[5] = t[7]),
        (e[6] = t[2]),
        (e[7] = t[5]),
        (e[8] = t[8]),
        this
      );
    },
    fromArray: function (e) {
      return this.elements.set(e), this;
    },
    toArray: function () {
      var e = this.elements;
      return [e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]];
    },
  }),
  (THREE.Matrix4 = function () {
    (this.elements = new Float32Array([
      1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    ])),
      arguments.length > 0 &&
        console.error(
          "THREE.Matrix4: the constructor no longer reads arguments. use .set() instead."
        );
  }),
  (THREE.Matrix4.prototype = {
    constructor: THREE.Matrix4,
    set: function (e, t, i, r, n, o, a, s, l, h, c, u, p, d, f, m) {
      var E = this.elements;
      return (
        (E[0] = e),
        (E[4] = t),
        (E[8] = i),
        (E[12] = r),
        (E[1] = n),
        (E[5] = o),
        (E[9] = a),
        (E[13] = s),
        (E[2] = l),
        (E[6] = h),
        (E[10] = c),
        (E[14] = u),
        (E[3] = p),
        (E[7] = d),
        (E[11] = f),
        (E[15] = m),
        this
      );
    },
    identity: function () {
      return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    },
    clone: function () {
      return new THREE.Matrix4().fromArray(this.elements);
    },
    copy: function (e) {
      return this.elements.set(e.elements), this;
    },
    copyPosition: function (e) {
      var t = this.elements,
        i = e.elements;
      return (t[12] = i[12]), (t[13] = i[13]), (t[14] = i[14]), this;
    },
    extractBasis: function (e, t, i) {
      var r = this.elements;
      return (
        e.set(r[0], r[1], r[2]),
        t.set(r[4], r[5], r[6]),
        i.set(r[8], r[9], r[10]),
        this
      );
    },
    makeBasis: function (e, t, i) {
      return (
        this.set(
          e.x,
          t.x,
          i.x,
          0,
          e.y,
          t.y,
          i.y,
          0,
          e.z,
          t.z,
          i.z,
          0,
          0,
          0,
          0,
          1
        ),
        this
      );
    },
    extractRotation: (function () {
      var e;
      return function (t) {
        void 0 === e && (e = new THREE.Vector3());
        var i = this.elements,
          r = t.elements,
          n = 1 / e.set(r[0], r[1], r[2]).length(),
          o = 1 / e.set(r[4], r[5], r[6]).length(),
          a = 1 / e.set(r[8], r[9], r[10]).length();
        return (
          (i[0] = r[0] * n),
          (i[1] = r[1] * n),
          (i[2] = r[2] * n),
          (i[4] = r[4] * o),
          (i[5] = r[5] * o),
          (i[6] = r[6] * o),
          (i[8] = r[8] * a),
          (i[9] = r[9] * a),
          (i[10] = r[10] * a),
          this
        );
      };
    })(),
    makeRotationFromEuler: function (e) {
      e instanceof THREE.Euler == !1 &&
        console.error(
          "THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order."
        );
      var t = this.elements,
        i = e.x,
        r = e.y,
        n = e.z,
        o = Math.cos(i),
        a = Math.sin(i),
        s = Math.cos(r),
        l = Math.sin(r),
        h = Math.cos(n),
        c = Math.sin(n);
      if ("XYZ" === e.order) {
        var u = o * h,
          p = o * c,
          d = a * h,
          f = a * c;
        (t[0] = s * h),
          (t[4] = -s * c),
          (t[8] = l),
          (t[1] = p + d * l),
          (t[5] = u - f * l),
          (t[9] = -a * s),
          (t[2] = f - u * l),
          (t[6] = d + p * l),
          (t[10] = o * s);
      } else if ("YXZ" === e.order) {
        var m = s * h,
          E = s * c,
          g = l * h,
          v = l * c;
        (t[0] = m + v * a),
          (t[4] = g * a - E),
          (t[8] = o * l),
          (t[1] = o * c),
          (t[5] = o * h),
          (t[9] = -a),
          (t[2] = E * a - g),
          (t[6] = v + m * a),
          (t[10] = o * s);
      } else if ("ZXY" === e.order) {
        (m = s * h), (E = s * c), (g = l * h), (v = l * c);
        (t[0] = m - v * a),
          (t[4] = -o * c),
          (t[8] = g + E * a),
          (t[1] = E + g * a),
          (t[5] = o * h),
          (t[9] = v - m * a),
          (t[2] = -o * l),
          (t[6] = a),
          (t[10] = o * s);
      } else if ("ZYX" === e.order) {
        (u = o * h), (p = o * c), (d = a * h), (f = a * c);
        (t[0] = s * h),
          (t[4] = d * l - p),
          (t[8] = u * l + f),
          (t[1] = s * c),
          (t[5] = f * l + u),
          (t[9] = p * l - d),
          (t[2] = -l),
          (t[6] = a * s),
          (t[10] = o * s);
      } else if ("YZX" === e.order) {
        var y = o * s,
          T = o * l,
          R = a * s,
          x = a * l;
        (t[0] = s * h),
          (t[4] = x - y * c),
          (t[8] = R * c + T),
          (t[1] = c),
          (t[5] = o * h),
          (t[9] = -a * h),
          (t[2] = -l * h),
          (t[6] = T * c + R),
          (t[10] = y - x * c);
      } else if ("XZY" === e.order) {
        (y = o * s), (T = o * l), (R = a * s), (x = a * l);
        (t[0] = s * h),
          (t[4] = -c),
          (t[8] = l * h),
          (t[1] = y * c + x),
          (t[5] = o * h),
          (t[9] = T * c - R),
          (t[2] = R * c - T),
          (t[6] = a * h),
          (t[10] = x * c + y);
      }
      return (
        (t[3] = 0),
        (t[7] = 0),
        (t[11] = 0),
        (t[12] = 0),
        (t[13] = 0),
        (t[14] = 0),
        (t[15] = 1),
        this
      );
    },
    makeRotationFromQuaternion: function (e) {
      var t = this.elements,
        i = e.x,
        r = e.y,
        n = e.z,
        o = e.w,
        a = i + i,
        s = r + r,
        l = n + n,
        h = i * a,
        c = i * s,
        u = i * l,
        p = r * s,
        d = r * l,
        f = n * l,
        m = o * a,
        E = o * s,
        g = o * l;
      return (
        (t[0] = 1 - (p + f)),
        (t[4] = c - g),
        (t[8] = u + E),
        (t[1] = c + g),
        (t[5] = 1 - (h + f)),
        (t[9] = d - m),
        (t[2] = u - E),
        (t[6] = d + m),
        (t[10] = 1 - (h + p)),
        (t[3] = 0),
        (t[7] = 0),
        (t[11] = 0),
        (t[12] = 0),
        (t[13] = 0),
        (t[14] = 0),
        (t[15] = 1),
        this
      );
    },
    lookAt: (function () {
      var e, t, i;
      return function (r, n, o) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === t && (t = new THREE.Vector3()),
          void 0 === i && (i = new THREE.Vector3());
        var a = this.elements;
        return (
          i.subVectors(r, n).normalize(),
          0 === i.lengthSq() && (i.z = 1),
          e.crossVectors(o, i).normalize(),
          0 === e.lengthSq() &&
            ((i.x += 1e-4), e.crossVectors(o, i).normalize()),
          t.crossVectors(i, e),
          (a[0] = e.x),
          (a[4] = t.x),
          (a[8] = i.x),
          (a[1] = e.y),
          (a[5] = t.y),
          (a[9] = i.y),
          (a[2] = e.z),
          (a[6] = t.z),
          (a[10] = i.z),
          this
        );
      };
    })(),
    multiply: function (e, t) {
      return void 0 !== t
        ? (console.warn(
            "THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."
          ),
          this.multiplyMatrices(e, t))
        : this.multiplyMatrices(this, e);
    },
    multiplyMatrices: function (e, t) {
      var i = e.elements,
        r = t.elements,
        n = this.elements,
        o = i[0],
        a = i[4],
        s = i[8],
        l = i[12],
        h = i[1],
        c = i[5],
        u = i[9],
        p = i[13],
        d = i[2],
        f = i[6],
        m = i[10],
        E = i[14],
        g = i[3],
        v = i[7],
        y = i[11],
        T = i[15],
        R = r[0],
        x = r[4],
        H = r[8],
        b = r[12],
        w = r[1],
        q = r[5],
        M = r[9],
        _ = r[13],
        S = r[2],
        C = r[6],
        L = r[10],
        A = r[14],
        k = r[3],
        D = r[7],
        P = r[11],
        I = r[15];
      return (
        (n[0] = o * R + a * w + s * S + l * k),
        (n[4] = o * x + a * q + s * C + l * D),
        (n[8] = o * H + a * M + s * L + l * P),
        (n[12] = o * b + a * _ + s * A + l * I),
        (n[1] = h * R + c * w + u * S + p * k),
        (n[5] = h * x + c * q + u * C + p * D),
        (n[9] = h * H + c * M + u * L + p * P),
        (n[13] = h * b + c * _ + u * A + p * I),
        (n[2] = d * R + f * w + m * S + E * k),
        (n[6] = d * x + f * q + m * C + E * D),
        (n[10] = d * H + f * M + m * L + E * P),
        (n[14] = d * b + f * _ + m * A + E * I),
        (n[3] = g * R + v * w + y * S + T * k),
        (n[7] = g * x + v * q + y * C + T * D),
        (n[11] = g * H + v * M + y * L + T * P),
        (n[15] = g * b + v * _ + y * A + T * I),
        this
      );
    },
    multiplyToArray: function (e, t, i) {
      var r = this.elements;
      return (
        this.multiplyMatrices(e, t),
        (i[0] = r[0]),
        (i[1] = r[1]),
        (i[2] = r[2]),
        (i[3] = r[3]),
        (i[4] = r[4]),
        (i[5] = r[5]),
        (i[6] = r[6]),
        (i[7] = r[7]),
        (i[8] = r[8]),
        (i[9] = r[9]),
        (i[10] = r[10]),
        (i[11] = r[11]),
        (i[12] = r[12]),
        (i[13] = r[13]),
        (i[14] = r[14]),
        (i[15] = r[15]),
        this
      );
    },
    multiplyScalar: function (e) {
      var t = this.elements;
      return (
        (t[0] *= e),
        (t[4] *= e),
        (t[8] *= e),
        (t[12] *= e),
        (t[1] *= e),
        (t[5] *= e),
        (t[9] *= e),
        (t[13] *= e),
        (t[2] *= e),
        (t[6] *= e),
        (t[10] *= e),
        (t[14] *= e),
        (t[3] *= e),
        (t[7] *= e),
        (t[11] *= e),
        (t[15] *= e),
        this
      );
    },
    applyToVector3Array: (function () {
      var e;
      return function (t, i, r) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === i && (i = 0),
          void 0 === r && (r = t.length);
        for (var n = 0, o = i; n < r; n += 3, o += 3)
          e.fromArray(t, o), e.applyMatrix4(this), e.toArray(t, o);
        return t;
      };
    })(),
    applyToBuffer: (function () {
      var e;
      return function (t, i, r) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === i && (i = 0),
          void 0 === r && (r = t.length / t.itemSize);
        for (var n = 0, o = i; n < r; n++, o++)
          (e.x = t.getX(o)),
            (e.y = t.getY(o)),
            (e.z = t.getZ(o)),
            e.applyMatrix4(this),
            t.setXYZ(e.x, e.y, e.z);
        return t;
      };
    })(),
    determinant: function () {
      var e = this.elements,
        t = e[0],
        i = e[4],
        r = e[8],
        n = e[12],
        o = e[1],
        a = e[5],
        s = e[9],
        l = e[13],
        h = e[2],
        c = e[6],
        u = e[10],
        p = e[14];
      return (
        e[3] *
          (+n * s * c -
            r * l * c -
            n * a * u +
            i * l * u +
            r * a * p -
            i * s * p) +
        e[7] *
          (+t * s * p -
            t * l * u +
            n * o * u -
            r * o * p +
            r * l * h -
            n * s * h) +
        e[11] *
          (+t * l * c -
            t * a * p -
            n * o * c +
            i * o * p +
            n * a * h -
            i * l * h) +
        e[15] *
          (-r * a * h -
            t * s * c +
            t * a * u +
            r * o * c -
            i * o * u +
            i * s * h)
      );
    },
    transpose: function () {
      var e,
        t = this.elements;
      return (
        (e = t[1]),
        (t[1] = t[4]),
        (t[4] = e),
        (e = t[2]),
        (t[2] = t[8]),
        (t[8] = e),
        (e = t[6]),
        (t[6] = t[9]),
        (t[9] = e),
        (e = t[3]),
        (t[3] = t[12]),
        (t[12] = e),
        (e = t[7]),
        (t[7] = t[13]),
        (t[13] = e),
        (e = t[11]),
        (t[11] = t[14]),
        (t[14] = e),
        this
      );
    },
    flattenToArrayOffset: function (e, t) {
      var i = this.elements;
      return (
        (e[t] = i[0]),
        (e[t + 1] = i[1]),
        (e[t + 2] = i[2]),
        (e[t + 3] = i[3]),
        (e[t + 4] = i[4]),
        (e[t + 5] = i[5]),
        (e[t + 6] = i[6]),
        (e[t + 7] = i[7]),
        (e[t + 8] = i[8]),
        (e[t + 9] = i[9]),
        (e[t + 10] = i[10]),
        (e[t + 11] = i[11]),
        (e[t + 12] = i[12]),
        (e[t + 13] = i[13]),
        (e[t + 14] = i[14]),
        (e[t + 15] = i[15]),
        e
      );
    },
    getPosition: (function () {
      var e;
      return function () {
        void 0 === e && (e = new THREE.Vector3()),
          console.warn(
            "THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."
          );
        var t = this.elements;
        return e.set(t[12], t[13], t[14]);
      };
    })(),
    setPosition: function (e) {
      var t = this.elements;
      return (t[12] = e.x), (t[13] = e.y), (t[14] = e.z), this;
    },
    getInverse: function (e, t) {
      var i = this.elements,
        r = e.elements,
        n = r[0],
        o = r[4],
        a = r[8],
        s = r[12],
        l = r[1],
        h = r[5],
        c = r[9],
        u = r[13],
        p = r[2],
        d = r[6],
        f = r[10],
        m = r[14],
        E = r[3],
        g = r[7],
        v = r[11],
        y = r[15];
      (i[0] =
        c * m * g - u * f * g + u * d * v - h * m * v - c * d * y + h * f * y),
        (i[4] =
          s * f * g -
          a * m * g -
          s * d * v +
          o * m * v +
          a * d * y -
          o * f * y),
        (i[8] =
          a * u * g -
          s * c * g +
          s * h * v -
          o * u * v -
          a * h * y +
          o * c * y),
        (i[12] =
          s * c * d -
          a * u * d -
          s * h * f +
          o * u * f +
          a * h * m -
          o * c * m),
        (i[1] =
          u * f * E -
          c * m * E -
          u * p * v +
          l * m * v +
          c * p * y -
          l * f * y),
        (i[5] =
          a * m * E -
          s * f * E +
          s * p * v -
          n * m * v -
          a * p * y +
          n * f * y),
        (i[9] =
          s * c * E -
          a * u * E -
          s * l * v +
          n * u * v +
          a * l * y -
          n * c * y),
        (i[13] =
          a * u * p -
          s * c * p +
          s * l * f -
          n * u * f -
          a * l * m +
          n * c * m),
        (i[2] =
          h * m * E -
          u * d * E +
          u * p * g -
          l * m * g -
          h * p * y +
          l * d * y),
        (i[6] =
          s * d * E -
          o * m * E -
          s * p * g +
          n * m * g +
          o * p * y -
          n * d * y),
        (i[10] =
          o * u * E -
          s * h * E +
          s * l * g -
          n * u * g -
          o * l * y +
          n * h * y),
        (i[14] =
          s * h * p -
          o * u * p -
          s * l * d +
          n * u * d +
          o * l * m -
          n * h * m),
        (i[3] =
          c * d * E -
          h * f * E -
          c * p * g +
          l * f * g +
          h * p * v -
          l * d * v),
        (i[7] =
          o * f * E -
          a * d * E +
          a * p * g -
          n * f * g -
          o * p * v +
          n * d * v),
        (i[11] =
          a * h * E -
          o * c * E -
          a * l * g +
          n * c * g +
          o * l * v -
          n * h * v),
        (i[15] =
          o * c * p -
          a * h * p +
          a * l * d -
          n * c * d -
          o * l * f +
          n * h * f);
      var T = n * i[0] + l * i[4] + p * i[8] + E * i[12];
      if (0 === T) {
        var R =
          "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";
        if (t) throw new Error(R);
        return console.warn(R), this.identity(), this;
      }
      return this.multiplyScalar(1 / T), this;
    },
    scale: function (e) {
      var t = this.elements,
        i = e.x,
        r = e.y,
        n = e.z;
      return (
        (t[0] *= i),
        (t[4] *= r),
        (t[8] *= n),
        (t[1] *= i),
        (t[5] *= r),
        (t[9] *= n),
        (t[2] *= i),
        (t[6] *= r),
        (t[10] *= n),
        (t[3] *= i),
        (t[7] *= r),
        (t[11] *= n),
        this
      );
    },
    getMaxScaleOnAxis: function () {
      var e = this.elements,
        t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],
        i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6],
        r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
      return Math.sqrt(Math.max(t, i, r));
    },
    makeTranslation: function (e, t, i) {
      return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1), this;
    },
    makeRotationX: function (e) {
      var t = Math.cos(e),
        i = Math.sin(e);
      return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1), this;
    },
    makeRotationY: function (e) {
      var t = Math.cos(e),
        i = Math.sin(e);
      return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1), this;
    },
    makeRotationZ: function (e) {
      var t = Math.cos(e),
        i = Math.sin(e);
      return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    },
    makeRotationAxis: function (e, t) {
      var i = Math.cos(t),
        r = Math.sin(t),
        n = 1 - i,
        o = e.x,
        a = e.y,
        s = e.z,
        l = n * o,
        h = n * a;
      return (
        this.set(
          l * o + i,
          l * a - r * s,
          l * s + r * a,
          0,
          l * a + r * s,
          h * a + i,
          h * s - r * o,
          0,
          l * s - r * a,
          h * s + r * o,
          n * s * s + i,
          0,
          0,
          0,
          0,
          1
        ),
        this
      );
    },
    makeScale: function (e, t, i) {
      return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1), this;
    },
    compose: function (e, t, i) {
      return (
        this.makeRotationFromQuaternion(t),
        this.scale(i),
        this.setPosition(e),
        this
      );
    },
    decompose: (function () {
      var e, t;
      return function (i, r, n) {
        void 0 === e && (e = new THREE.Vector3()),
          void 0 === t && (t = new THREE.Matrix4());
        var o = this.elements,
          a = e.set(o[0], o[1], o[2]).length(),
          s = e.set(o[4], o[5], o[6]).length(),
          l = e.set(o[8], o[9], o[10]).length();
        this.determinant() < 0 && (a = -a),
          (i.x = o[12]),
          (i.y = o[13]),
          (i.z = o[14]),
          t.elements.set(this.elements);
        var h = 1 / a,
          c = 1 / s,
          u = 1 / l;
        return (
          (t.elements[0] *= h),
          (t.elements[1] *= h),
          (t.elements[2] *= h),
          (t.elements[4] *= c),
          (t.elements[5] *= c),
          (t.elements[6] *= c),
          (t.elements[8] *= u),
          (t.elements[9] *= u),
          (t.elements[10] *= u),
          r.setFromRotationMatrix(t),
          (n.x = a),
          (n.y = s),
          (n.z = l),
          this
        );
      };
    })(),
    makeFrustum: function (e, t, i, r, n, o) {
      var a = this.elements,
        s = (2 * n) / (t - e),
        l = (2 * n) / (r - i),
        h = (t + e) / (t - e),
        c = (r + i) / (r - i),
        u = -(o + n) / (o - n),
        p = (-2 * o * n) / (o - n);
      return (
        (a[0] = s),
        (a[4] = 0),
        (a[8] = h),
        (a[12] = 0),
        (a[1] = 0),
        (a[5] = l),
        (a[9] = c),
        (a[13] = 0),
        (a[2] = 0),
        (a[6] = 0),
        (a[10] = u),
        (a[14] = p),
        (a[3] = 0),
        (a[7] = 0),
        (a[11] = -1),
        (a[15] = 0),
        this
      );
    },
    makePerspective: function (e, t, i, r) {
      var n = i * Math.tan(THREE.Math.degToRad(0.5 * e)),
        o = -n,
        a = o * t,
        s = n * t;
      return this.makeFrustum(a, s, o, n, i, r);
    },
    makeOrthographic: function (e, t, i, r, n, o) {
      var a = this.elements,
        s = t - e,
        l = i - r,
        h = o - n,
        c = (t + e) / s,
        u = (i + r) / l,
        p = (o + n) / h;
      return (
        (a[0] = 2 / s),
        (a[4] = 0),
        (a[8] = 0),
        (a[12] = -c),
        (a[1] = 0),
        (a[5] = 2 / l),
        (a[9] = 0),
        (a[13] = -u),
        (a[2] = 0),
        (a[6] = 0),
        (a[10] = -2 / h),
        (a[14] = -p),
        (a[3] = 0),
        (a[7] = 0),
        (a[11] = 0),
        (a[15] = 1),
        this
      );
    },
    equals: function (e) {
      for (var t = this.elements, i = e.elements, r = 0; r < 16; r++)
        if (t[r] !== i[r]) return !1;
      return !0;
    },
    fromArray: function (e) {
      return this.elements.set(e), this;
    },
    toArray: function () {
      var e = this.elements;
      return [
        e[0],
        e[1],
        e[2],
        e[3],
        e[4],
        e[5],
        e[6],
        e[7],
        e[8],
        e[9],
        e[10],
        e[11],
        e[12],
        e[13],
        e[14],
        e[15],
      ];
    },
  }),
  (THREE.Ray = function (e, t) {
    (this.origin = void 0 !== e ? e : new THREE.Vector3()),
      (this.direction = void 0 !== t ? t : new THREE.Vector3());
  }),
  (THREE.Ray.prototype = {
    constructor: THREE.Ray,
    set: function (e, t) {
      return this.origin.copy(e), this.direction.copy(t), this;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
    },
    at: function (e, t) {
      return (t || new THREE.Vector3())
        .copy(this.direction)
        .multiplyScalar(e)
        .add(this.origin);
    },
    lookAt: function (e) {
      this.direction.copy(e).sub(this.origin).normalize();
    },
    recast: (function () {
      var e = new THREE.Vector3();
      return function (t) {
        return this.origin.copy(this.at(t, e)), this;
      };
    })(),
    closestPointToPoint: function (e, t) {
      var i = t || new THREE.Vector3();
      i.subVectors(e, this.origin);
      var r = i.dot(this.direction);
      return r < 0
        ? i.copy(this.origin)
        : i.copy(this.direction).multiplyScalar(r).add(this.origin);
    },
    distanceToPoint: function (e) {
      return Math.sqrt(this.distanceSqToPoint(e));
    },
    distanceSqToPoint: (function () {
      var e = new THREE.Vector3();
      return function (t) {
        var i = e.subVectors(t, this.origin).dot(this.direction);
        return i < 0
          ? this.origin.distanceToSquared(t)
          : (e.copy(this.direction).multiplyScalar(i).add(this.origin),
            e.distanceToSquared(t));
      };
    })(),
    distanceSqToSegment: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3(),
        i = new THREE.Vector3();
      return function (r, n, o, a) {
        e.copy(r).add(n).multiplyScalar(0.5),
          t.copy(n).sub(r).normalize(),
          i.copy(this.origin).sub(e);
        var s,
          l,
          h,
          c,
          u = 0.5 * r.distanceTo(n),
          p = -this.direction.dot(t),
          d = i.dot(this.direction),
          f = -i.dot(t),
          m = i.lengthSq(),
          E = Math.abs(1 - p * p);
        if (E > 0)
          if (((l = p * d - f), (c = u * E), (s = p * f - d) >= 0))
            if (l >= -c)
              if (l <= c) {
                var g = 1 / E;
                h =
                  (s *= g) * (s + p * (l *= g) + 2 * d) +
                  l * (p * s + l + 2 * f) +
                  m;
              } else
                (l = u),
                  (h =
                    -(s = Math.max(0, -(p * l + d))) * s + l * (l + 2 * f) + m);
            else
              (l = -u),
                (h =
                  -(s = Math.max(0, -(p * l + d))) * s + l * (l + 2 * f) + m);
          else
            l <= -c
              ? (h =
                  -(s = Math.max(0, -(-p * u + d))) * s +
                  (l = s > 0 ? -u : Math.min(Math.max(-u, -f), u)) *
                    (l + 2 * f) +
                  m)
              : l <= c
              ? ((s = 0),
                (h = (l = Math.min(Math.max(-u, -f), u)) * (l + 2 * f) + m))
              : (h =
                  -(s = Math.max(0, -(p * u + d))) * s +
                  (l = s > 0 ? u : Math.min(Math.max(-u, -f), u)) *
                    (l + 2 * f) +
                  m);
        else
          (l = p > 0 ? -u : u),
            (h = -(s = Math.max(0, -(p * l + d))) * s + l * (l + 2 * f) + m);
        return (
          o && o.copy(this.direction).multiplyScalar(s).add(this.origin),
          a && a.copy(t).multiplyScalar(l).add(e),
          h
        );
      };
    })(),
    intersectSphere: (function () {
      var e = new THREE.Vector3();
      return function (t, i) {
        e.subVectors(t.center, this.origin);
        var r = e.dot(this.direction),
          n = e.dot(e) - r * r,
          o = t.radius * t.radius;
        if (n > o) return null;
        var a = Math.sqrt(o - n),
          s = r - a,
          l = r + a;
        return s < 0 && l < 0 ? null : s < 0 ? this.at(l, i) : this.at(s, i);
      };
    })(),
    intersectsSphere: function (e) {
      return this.distanceToPoint(e.center) <= e.radius;
    },
    distanceToPlane: function (e) {
      var t = e.normal.dot(this.direction);
      if (0 === t) return 0 === e.distanceToPoint(this.origin) ? 0 : null;
      var i = -(this.origin.dot(e.normal) + e.constant) / t;
      return i >= 0 ? i : null;
    },
    intersectPlane: function (e, t) {
      var i = this.distanceToPlane(e);
      return null === i ? null : this.at(i, t);
    },
    intersectsPlane: function (e) {
      var t = e.distanceToPoint(this.origin);
      return 0 === t || e.normal.dot(this.direction) * t < 0;
    },
    intersectBox: function (e, t) {
      var i,
        r,
        n,
        o,
        a,
        s,
        l = 1 / this.direction.x,
        h = 1 / this.direction.y,
        c = 1 / this.direction.z,
        u = this.origin;
      return (
        l >= 0
          ? ((i = (e.min.x - u.x) * l), (r = (e.max.x - u.x) * l))
          : ((i = (e.max.x - u.x) * l), (r = (e.min.x - u.x) * l)),
        h >= 0
          ? ((n = (e.min.y - u.y) * h), (o = (e.max.y - u.y) * h))
          : ((n = (e.max.y - u.y) * h), (o = (e.min.y - u.y) * h)),
        i > o || n > r
          ? null
          : ((n > i || i != i) && (i = n),
            (o < r || r != r) && (r = o),
            c >= 0
              ? ((a = (e.min.z - u.z) * c), (s = (e.max.z - u.z) * c))
              : ((a = (e.max.z - u.z) * c), (s = (e.min.z - u.z) * c)),
            i > s || a > r
              ? null
              : ((a > i || i != i) && (i = a),
                (s < r || r != r) && (r = s),
                r < 0 ? null : this.at(i >= 0 ? i : r, t)))
      );
    },
    intersectsBox: (function () {
      var e = new THREE.Vector3();
      return function (t) {
        return null !== this.intersectBox(t, e);
      };
    })(),
    intersectTriangle: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3(),
        i = new THREE.Vector3(),
        r = new THREE.Vector3();
      return function (n, o, a, s, l) {
        t.subVectors(o, n), i.subVectors(a, n), r.crossVectors(t, i);
        var h,
          c = this.direction.dot(r);
        if (c > 0) {
          if (s) return null;
          h = 1;
        } else {
          if (!(c < 0)) return null;
          (h = -1), (c = -c);
        }
        e.subVectors(this.origin, n);
        var u = h * this.direction.dot(i.crossVectors(e, i));
        if (u < 0) return null;
        var p = h * this.direction.dot(t.cross(e));
        if (p < 0) return null;
        if (u + p > c) return null;
        var d = -h * e.dot(r);
        return d < 0 ? null : this.at(d / c, l);
      };
    })(),
    applyMatrix4: function (e) {
      return (
        this.direction.add(this.origin).applyMatrix4(e),
        this.origin.applyMatrix4(e),
        this.direction.sub(this.origin),
        this.direction.normalize(),
        this
      );
    },
    equals: function (e) {
      return e.origin.equals(this.origin) && e.direction.equals(this.direction);
    },
  }),
  (THREE.Sphere = function (e, t) {
    (this.center = void 0 !== e ? e : new THREE.Vector3()),
      (this.radius = void 0 !== t ? t : 0);
  }),
  (THREE.Sphere.prototype = {
    constructor: THREE.Sphere,
    set: function (e, t) {
      return this.center.copy(e), (this.radius = t), this;
    },
    setFromPoints: (function () {
      var e = new THREE.Box3();
      return function (t, i) {
        var r = this.center;
        void 0 !== i ? r.copy(i) : e.setFromPoints(t).center(r);
        for (var n = 0, o = 0, a = t.length; o < a; o++)
          n = Math.max(n, r.distanceToSquared(t[o]));
        return (this.radius = Math.sqrt(n)), this;
      };
    })(),
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.center.copy(e.center), (this.radius = e.radius), this;
    },
    empty: function () {
      return this.radius <= 0;
    },
    containsPoint: function (e) {
      return e.distanceToSquared(this.center) <= this.radius * this.radius;
    },
    distanceToPoint: function (e) {
      return e.distanceTo(this.center) - this.radius;
    },
    intersectsSphere: function (e) {
      var t = this.radius + e.radius;
      return e.center.distanceToSquared(this.center) <= t * t;
    },
    intersectsBox: function (e) {
      return e.intersectsSphere(this);
    },
    intersectsPlane: function (e) {
      return Math.abs(this.center.dot(e.normal) - e.constant) <= this.radius;
    },
    clampPoint: function (e, t) {
      var i = this.center.distanceToSquared(e),
        r = t || new THREE.Vector3();
      return (
        r.copy(e),
        i > this.radius * this.radius &&
          (r.sub(this.center).normalize(),
          r.multiplyScalar(this.radius).add(this.center)),
        r
      );
    },
    getBoundingBox: function (e) {
      var t = e || new THREE.Box3();
      return t.set(this.center, this.center), t.expandByScalar(this.radius), t;
    },
    applyMatrix4: function (e) {
      return (
        this.center.applyMatrix4(e),
        (this.radius = this.radius * e.getMaxScaleOnAxis()),
        this
      );
    },
    translate: function (e) {
      return this.center.add(e), this;
    },
    equals: function (e) {
      return e.center.equals(this.center) && e.radius === this.radius;
    },
  }),
  (THREE.Frustum = function (e, t, i, r, n, o) {
    this.planes = [
      void 0 !== e ? e : new THREE.Plane(),
      void 0 !== t ? t : new THREE.Plane(),
      void 0 !== i ? i : new THREE.Plane(),
      void 0 !== r ? r : new THREE.Plane(),
      void 0 !== n ? n : new THREE.Plane(),
      void 0 !== o ? o : new THREE.Plane(),
    ];
  }),
  (THREE.Frustum.prototype = {
    constructor: THREE.Frustum,
    set: function (e, t, i, r, n, o) {
      var a = this.planes;
      return (
        a[0].copy(e),
        a[1].copy(t),
        a[2].copy(i),
        a[3].copy(r),
        a[4].copy(n),
        a[5].copy(o),
        this
      );
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      for (var t = this.planes, i = 0; i < 6; i++) t[i].copy(e.planes[i]);
      return this;
    },
    setFromMatrix: function (e) {
      var t = this.planes,
        i = e.elements,
        r = i[0],
        n = i[1],
        o = i[2],
        a = i[3],
        s = i[4],
        l = i[5],
        h = i[6],
        c = i[7],
        u = i[8],
        p = i[9],
        d = i[10],
        f = i[11],
        m = i[12],
        E = i[13],
        g = i[14],
        v = i[15];
      return (
        t[0].setComponents(a - r, c - s, f - u, v - m).normalize(),
        t[1].setComponents(a + r, c + s, f + u, v + m).normalize(),
        t[2].setComponents(a + n, c + l, f + p, v + E).normalize(),
        t[3].setComponents(a - n, c - l, f - p, v - E).normalize(),
        t[4].setComponents(a - o, c - h, f - d, v - g).normalize(),
        t[5].setComponents(a + o, c + h, f + d, v + g).normalize(),
        this
      );
    },
    intersectsObject: (function () {
      var e = new THREE.Sphere();
      return function (t) {
        var i = t.geometry;
        return (
          null === i.boundingSphere && i.computeBoundingSphere(),
          e.copy(i.boundingSphere),
          e.applyMatrix4(t.matrixWorld),
          this.intersectsSphere(e)
        );
      };
    })(),
    intersectsSphere: function (e) {
      for (
        var t = this.planes, i = e.center, r = -e.radius, n = 0;
        n < 6;
        n++
      ) {
        if (t[n].distanceToPoint(i) < r) return !1;
      }
      return !0;
    },
    intersectsBox: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3();
      return function (i) {
        for (var r = this.planes, n = 0; n < 6; n++) {
          var o = r[n];
          (e.x = o.normal.x > 0 ? i.min.x : i.max.x),
            (t.x = o.normal.x > 0 ? i.max.x : i.min.x),
            (e.y = o.normal.y > 0 ? i.min.y : i.max.y),
            (t.y = o.normal.y > 0 ? i.max.y : i.min.y),
            (e.z = o.normal.z > 0 ? i.min.z : i.max.z),
            (t.z = o.normal.z > 0 ? i.max.z : i.min.z);
          var a = o.distanceToPoint(e),
            s = o.distanceToPoint(t);
          if (a < 0 && s < 0) return !1;
        }
        return !0;
      };
    })(),
    containsPoint: function (e) {
      for (var t = this.planes, i = 0; i < 6; i++)
        if (t[i].distanceToPoint(e) < 0) return !1;
      return !0;
    },
  }),
  (THREE.Plane = function (e, t) {
    (this.normal = void 0 !== e ? e : new THREE.Vector3(1, 0, 0)),
      (this.constant = void 0 !== t ? t : 0);
  }),
  (THREE.Plane.prototype = {
    constructor: THREE.Plane,
    set: function (e, t) {
      return this.normal.copy(e), (this.constant = t), this;
    },
    setComponents: function (e, t, i, r) {
      return this.normal.set(e, t, i), (this.constant = r), this;
    },
    setFromNormalAndCoplanarPoint: function (e, t) {
      return this.normal.copy(e), (this.constant = -t.dot(this.normal)), this;
    },
    setFromCoplanarPoints: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3();
      return function (i, r, n) {
        var o = e.subVectors(n, r).cross(t.subVectors(i, r)).normalize();
        return this.setFromNormalAndCoplanarPoint(o, i), this;
      };
    })(),
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.normal.copy(e.normal), (this.constant = e.constant), this;
    },
    normalize: function () {
      var e = 1 / this.normal.length();
      return this.normal.multiplyScalar(e), (this.constant *= e), this;
    },
    negate: function () {
      return (this.constant *= -1), this.normal.negate(), this;
    },
    distanceToPoint: function (e) {
      return this.normal.dot(e) + this.constant;
    },
    distanceToSphere: function (e) {
      return this.distanceToPoint(e.center) - e.radius;
    },
    projectPoint: function (e, t) {
      return this.orthoPoint(e, t).sub(e).negate();
    },
    orthoPoint: function (e, t) {
      var i = this.distanceToPoint(e);
      return (t || new THREE.Vector3()).copy(this.normal).multiplyScalar(i);
    },
    intersectLine: (function () {
      var e = new THREE.Vector3();
      return function (t, i) {
        var r = i || new THREE.Vector3(),
          n = t.delta(e),
          o = this.normal.dot(n);
        if (0 === o)
          return 0 === this.distanceToPoint(t.start) ? r.copy(t.start) : void 0;
        var a = -(t.start.dot(this.normal) + this.constant) / o;
        return a < 0 || a > 1
          ? void 0
          : r.copy(n).multiplyScalar(a).add(t.start);
      };
    })(),
    intersectsLine: function (e) {
      var t = this.distanceToPoint(e.start),
        i = this.distanceToPoint(e.end);
      return (t < 0 && i > 0) || (i < 0 && t > 0);
    },
    intersectsBox: function (e) {
      return e.intersectsPlane(this);
    },
    intersectsSphere: function (e) {
      return e.intersectsPlane(this);
    },
    coplanarPoint: function (e) {
      return (e || new THREE.Vector3())
        .copy(this.normal)
        .multiplyScalar(-this.constant);
    },
    applyMatrix4: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3(),
        i = new THREE.Matrix3();
      return function (r, n) {
        var o = n || i.getNormalMatrix(r),
          a = e.copy(this.normal).applyMatrix3(o),
          s = this.coplanarPoint(t);
        return (
          s.applyMatrix4(r), this.setFromNormalAndCoplanarPoint(a, s), this
        );
      };
    })(),
    translate: function (e) {
      return (this.constant = this.constant - e.dot(this.normal)), this;
    },
    equals: function (e) {
      return e.normal.equals(this.normal) && e.constant === this.constant;
    },
  }),
  (THREE.Math = {
    generateUUID: (function () {
      var e,
        t =
          "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(
            ""
          ),
        i = new Array(36),
        r = 0;
      return function () {
        for (var n = 0; n < 36; n++)
          8 === n || 13 === n || 18 === n || 23 === n
            ? (i[n] = "-")
            : 14 === n
            ? (i[n] = "4")
            : (r <= 2 && (r = (33554432 + 16777216 * Math.random()) | 0),
              (e = 15 & r),
              (r >>= 4),
              (i[n] = t[19 === n ? (3 & e) | 8 : e]));
        return i.join("");
      };
    })(),
    clamp: function (e, t, i) {
      return Math.max(t, Math.min(i, e));
    },
    euclideanModulo: function (e, t) {
      return ((e % t) + t) % t;
    },
    mapLinear: function (e, t, i, r, n) {
      return r + ((e - t) * (n - r)) / (i - t);
    },
    smoothstep: function (e, t, i) {
      return e <= t
        ? 0
        : e >= i
        ? 1
        : (e = (e - t) / (i - t)) * e * (3 - 2 * e);
    },
    smootherstep: function (e, t, i) {
      return e <= t
        ? 0
        : e >= i
        ? 1
        : (e = (e - t) / (i - t)) * e * e * (e * (6 * e - 15) + 10);
    },
    random16: function () {
      return (
        console.warn(
          "THREE.Math.random16() has been deprecated. Use Math.random() instead."
        ),
        Math.random()
      );
    },
    randInt: function (e, t) {
      return e + Math.floor(Math.random() * (t - e + 1));
    },
    randFloat: function (e, t) {
      return e + Math.random() * (t - e);
    },
    randFloatSpread: function (e) {
      return e * (0.5 - Math.random());
    },
    degToRad: (function () {
      var e = Math.PI / 180;
      return function (t) {
        return t * e;
      };
    })(),
    radToDeg: (function () {
      var e = 180 / Math.PI;
      return function (t) {
        return t * e;
      };
    })(),
    isPowerOfTwo: function (e) {
      return 0 == (e & (e - 1)) && 0 !== e;
    },
    nearestPowerOfTwo: function (e) {
      return Math.pow(2, Math.round(Math.log(e) / Math.LN2));
    },
    nextPowerOfTwo: function (e) {
      return (
        e--,
        (e |= e >> 1),
        (e |= e >> 2),
        (e |= e >> 4),
        (e |= e >> 8),
        (e |= e >> 16),
        ++e
      );
    },
  }),
  (THREE.Spline = function (e) {
    function t(e, t, i, r, n, o, a) {
      var s = 0.5 * (i - e),
        l = 0.5 * (r - t);
      return (
        (2 * (t - i) + s + l) * a + (-3 * (t - i) - 2 * s - l) * o + s * n + t
      );
    }
    this.points = e;
    var i,
      r,
      n,
      o,
      a,
      s,
      l,
      h,
      c,
      u = [],
      p = {
        x: 0,
        y: 0,
        z: 0,
      };
    (this.initFromArray = function (e) {
      this.points = [];
      for (var t = 0; t < e.length; t++)
        this.points[t] = {
          x: e[t][0],
          y: e[t][1],
          z: e[t][2],
        };
    }),
      (this.getPoint = function (e) {
        return (
          (i = (this.points.length - 1) * e),
          (r = Math.floor(i)),
          (n = i - r),
          (u[0] = 0 === r ? r : r - 1),
          (u[1] = r),
          (u[2] = r > this.points.length - 2 ? this.points.length - 1 : r + 1),
          (u[3] = r > this.points.length - 3 ? this.points.length - 1 : r + 2),
          (s = this.points[u[0]]),
          (l = this.points[u[1]]),
          (h = this.points[u[2]]),
          (c = this.points[u[3]]),
          (a = n * (o = n * n)),
          (p.x = t(s.x, l.x, h.x, c.x, n, o, a)),
          (p.y = t(s.y, l.y, h.y, c.y, n, o, a)),
          (p.z = t(s.z, l.z, h.z, c.z, n, o, a)),
          p
        );
      }),
      (this.getControlPointsArray = function () {
        var e,
          t,
          i = this.points.length,
          r = [];
        for (e = 0; e < i; e++) (t = this.points[e]), (r[e] = [t.x, t.y, t.z]);
        return r;
      }),
      (this.getLength = function (e) {
        var t,
          i,
          r,
          n,
          o = 0,
          a = 0,
          s = 0,
          l = new THREE.Vector3(),
          h = new THREE.Vector3(),
          c = [],
          u = 0;
        for (
          c[0] = 0,
            e || (e = 100),
            r = this.points.length * e,
            l.copy(this.points[0]),
            t = 1;
          t < r;
          t++
        )
          (i = t / r),
            (n = this.getPoint(i)),
            h.copy(n),
            (u += h.distanceTo(l)),
            l.copy(n),
            (o = (this.points.length - 1) * i),
            (a = Math.floor(o)) !== s && ((c[a] = u), (s = a));
        return (
          (c[c.length] = u),
          {
            chunks: c,
            total: u,
          }
        );
      }),
      (this.reparametrizeByArcLength = function (e) {
        var t,
          i,
          r,
          n,
          o,
          a,
          s,
          l,
          h = [],
          c = new THREE.Vector3(),
          u = this.getLength();
        for (
          h.push(c.copy(this.points[0]).clone()), t = 1;
          t < this.points.length;
          t++
        ) {
          for (
            a = u.chunks[t] - u.chunks[t - 1],
              s = Math.ceil((e * a) / u.total),
              n = (t - 1) / (this.points.length - 1),
              o = t / (this.points.length - 1),
              i = 1;
            i < s - 1;
            i++
          )
            (r = n + i * (1 / s) * (o - n)),
              (l = this.getPoint(r)),
              h.push(c.copy(l).clone());
          h.push(c.copy(this.points[t]).clone());
        }
        this.points = h;
      });
  }),
  (THREE.Triangle = function (e, t, i) {
    (this.a = void 0 !== e ? e : new THREE.Vector3()),
      (this.b = void 0 !== t ? t : new THREE.Vector3()),
      (this.c = void 0 !== i ? i : new THREE.Vector3());
  }),
  (THREE.Triangle.normal = (function () {
    var e = new THREE.Vector3();
    return function (t, i, r, n) {
      var o = n || new THREE.Vector3();
      o.subVectors(r, i), e.subVectors(t, i), o.cross(e);
      var a = o.lengthSq();
      return a > 0 ? o.multiplyScalar(1 / Math.sqrt(a)) : o.set(0, 0, 0);
    };
  })()),
  (THREE.Triangle.barycoordFromPoint = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3(),
      i = new THREE.Vector3();
    return function (r, n, o, a, s) {
      e.subVectors(a, n), t.subVectors(o, n), i.subVectors(r, n);
      var l = e.dot(e),
        h = e.dot(t),
        c = e.dot(i),
        u = t.dot(t),
        p = t.dot(i),
        d = l * u - h * h,
        f = s || new THREE.Vector3();
      if (0 === d) return f.set(-2, -1, -1);
      var m = 1 / d,
        E = (u * c - h * p) * m,
        g = (l * p - h * c) * m;
      return f.set(1 - E - g, g, E);
    };
  })()),
  (THREE.Triangle.containsPoint = (function () {
    var e = new THREE.Vector3();
    return function (t, i, r, n) {
      var o = THREE.Triangle.barycoordFromPoint(t, i, r, n, e);
      return o.x >= 0 && o.y >= 0 && o.x + o.y <= 1;
    };
  })()),
  (THREE.Triangle.prototype = {
    constructor: THREE.Triangle,
    set: function (e, t, i) {
      return this.a.copy(e), this.b.copy(t), this.c.copy(i), this;
    },
    setFromPointsAndIndices: function (e, t, i, r) {
      return this.a.copy(e[t]), this.b.copy(e[i]), this.c.copy(e[r]), this;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
    },
    area: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3();
      return function () {
        return (
          e.subVectors(this.c, this.b),
          t.subVectors(this.a, this.b),
          0.5 * e.cross(t).length()
        );
      };
    })(),
    midpoint: function (e) {
      return (e || new THREE.Vector3())
        .addVectors(this.a, this.b)
        .add(this.c)
        .multiplyScalar(1 / 3);
    },
    normal: function (e) {
      return THREE.Triangle.normal(this.a, this.b, this.c, e);
    },
    plane: function (e) {
      return (e || new THREE.Plane()).setFromCoplanarPoints(
        this.a,
        this.b,
        this.c
      );
    },
    barycoordFromPoint: function (e, t) {
      return THREE.Triangle.barycoordFromPoint(e, this.a, this.b, this.c, t);
    },
    containsPoint: function (e) {
      return THREE.Triangle.containsPoint(e, this.a, this.b, this.c);
    },
    equals: function (e) {
      return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
    },
  }),
  (THREE.Interpolant = function (e, t, i, r) {
    (this.parameterPositions = e),
      (this._cachedIndex = 0),
      (this.resultBuffer = void 0 !== r ? r : new t.constructor(i)),
      (this.sampleValues = t),
      (this.valueSize = i);
  }),
  (THREE.Interpolant.prototype = {
    constructor: THREE.Interpolant,
    evaluate: function (e) {
      var t = this.parameterPositions,
        i = this._cachedIndex,
        r = t[i],
        n = t[i - 1];
      e: {
        t: {
          var o;
          i: {
            r: if (!(e < r)) {
              for (var a = i + 2; ; ) {
                if (void 0 === r) {
                  if (e < n) break r;
                  return (
                    (i = t.length),
                    (this._cachedIndex = i),
                    this.afterEnd_(i - 1, e, n)
                  );
                }
                if (i === a) break;
                if (((n = r), e < (r = t[++i]))) break t;
              }
              o = t.length;
              break i;
            }
            if (e >= n) break e;
            var s = t[1];
            e < s && ((i = 2), (n = s));
            for (a = i - 2; ; ) {
              if (void 0 === n)
                return (this._cachedIndex = 0), this.beforeStart_(0, e, r);
              if (i === a) break;
              if (((r = n), e >= (n = t[--i - 1]))) break t;
            }
            (o = i), (i = 0);
          }
          for (; i < o; ) {
            var l = (i + o) >>> 1;
            e < t[l] ? (o = l) : (i = l + 1);
          }
          if (((r = t[i]), void 0 === (n = t[i - 1])))
            return (this._cachedIndex = 0), this.beforeStart_(0, e, r);
          if (void 0 === r)
            return (
              (i = t.length),
              (this._cachedIndex = i),
              this.afterEnd_(i - 1, n, e)
            );
        }
        (this._cachedIndex = i), this.intervalChanged_(i, n, r);
      }
      return this.interpolate_(i, n, e, r);
    },
    settings: null,
    DefaultSettings_: {},
    getSettings_: function () {
      return this.settings || this.DefaultSettings_;
    },
    copySampleValue_: function (e) {
      for (
        var t = this.resultBuffer,
          i = this.sampleValues,
          r = this.valueSize,
          n = e * r,
          o = 0;
        o !== r;
        ++o
      )
        t[o] = i[n + o];
      return t;
    },
    interpolate_: function () {
      throw new Error("call to abstract method");
    },
    intervalChanged_: function () {},
  }),
  Object.assign(THREE.Interpolant.prototype, {
    beforeStart_: THREE.Interpolant.prototype.copySampleValue_,
    afterEnd_: THREE.Interpolant.prototype.copySampleValue_,
  }),
  (THREE.CubicInterpolant = function (e, t, i, r) {
    THREE.Interpolant.call(this, e, t, i, r),
      (this._weightPrev = -0),
      (this._offsetPrev = -0),
      (this._weightNext = -0),
      (this._offsetNext = -0);
  }),
  (THREE.CubicInterpolant.prototype = Object.assign(
    Object.create(THREE.Interpolant.prototype),
    {
      constructor: THREE.CubicInterpolant,
      DefaultSettings_: {
        endingStart: THREE.ZeroCurvatureEnding,
        endingEnd: THREE.ZeroCurvatureEnding,
      },
      intervalChanged_: function (e, t, i) {
        var r = this.parameterPositions,
          n = e - 2,
          o = e + 1,
          a = r[n],
          s = r[o];
        if (void 0 === a)
          switch (this.getSettings_().endingStart) {
            case THREE.ZeroSlopeEnding:
              (n = e), (a = 2 * t - i);
              break;
            case THREE.WrapAroundEnding:
              a = t + r[(n = r.length - 2)] - r[n + 1];
              break;
            default:
              (n = e), (a = i);
          }
        if (void 0 === s)
          switch (this.getSettings_().endingEnd) {
            case THREE.ZeroSlopeEnding:
              (o = e), (s = 2 * i - t);
              break;
            case THREE.WrapAroundEnding:
              (o = 1), (s = i + r[1] - r[0]);
              break;
            default:
              (o = e - 1), (s = t);
          }
        var l = 0.5 * (i - t),
          h = this.valueSize;
        (this._weightPrev = l / (t - a)),
          (this._weightNext = l / (s - i)),
          (this._offsetPrev = n * h),
          (this._offsetNext = o * h);
      },
      interpolate_: function (e, t, i, r) {
        for (
          var n = this.resultBuffer,
            o = this.sampleValues,
            a = this.valueSize,
            s = e * a,
            l = s - a,
            h = this._offsetPrev,
            c = this._offsetNext,
            u = this._weightPrev,
            p = this._weightNext,
            d = (i - t) / (r - t),
            f = d * d,
            m = f * d,
            E = -u * m + 2 * u * f - u * d,
            g = (1 + u) * m + (-1.5 - 2 * u) * f + (-0.5 + u) * d + 1,
            v = (-1 - p) * m + (1.5 + p) * f + 0.5 * d,
            y = p * m - p * f,
            T = 0;
          T !== a;
          ++T
        )
          n[T] = E * o[h + T] + g * o[l + T] + v * o[s + T] + y * o[c + T];
        return n;
      },
    }
  )),
  (THREE.DiscreteInterpolant = function (e, t, i, r) {
    THREE.Interpolant.call(this, e, t, i, r);
  }),
  (THREE.DiscreteInterpolant.prototype = Object.assign(
    Object.create(THREE.Interpolant.prototype),
    {
      constructor: THREE.DiscreteInterpolant,
      interpolate_: function (e) {
        return this.copySampleValue_(e - 1);
      },
    }
  )),
  (THREE.LinearInterpolant = function (e, t, i, r) {
    THREE.Interpolant.call(this, e, t, i, r);
  }),
  (THREE.LinearInterpolant.prototype = Object.assign(
    Object.create(THREE.Interpolant.prototype),
    {
      constructor: THREE.LinearInterpolant,
      interpolate_: function (e, t, i, r) {
        for (
          var n = this.resultBuffer,
            o = this.sampleValues,
            a = this.valueSize,
            s = e * a,
            l = s - a,
            h = (i - t) / (r - t),
            c = 1 - h,
            u = 0;
          u !== a;
          ++u
        )
          n[u] = o[l + u] * c + o[s + u] * h;
        return n;
      },
    }
  )),
  (THREE.QuaternionLinearInterpolant = function (e, t, i, r) {
    THREE.Interpolant.call(this, e, t, i, r);
  }),
  (THREE.QuaternionLinearInterpolant.prototype = Object.assign(
    Object.create(THREE.Interpolant.prototype),
    {
      constructor: THREE.QuaternionLinearInterpolant,
      interpolate_: function (e, t, i, r) {
        for (
          var n = this.resultBuffer,
            o = this.sampleValues,
            a = this.valueSize,
            s = e * a,
            l = (i - t) / (r - t),
            h = s + a;
          s !== h;
          s += 4
        )
          THREE.Quaternion.slerpFlat(n, 0, o, s - a, o, s, l);
        return n;
      },
    }
  )),
  (THREE.Clock = function (e) {
    (this.autoStart = void 0 === e || e),
      (this.startTime = 0),
      (this.oldTime = 0),
      (this.elapsedTime = 0),
      (this.running = !1);
  }),
  (THREE.Clock.prototype = {
    constructor: THREE.Clock,
    start: function () {
      (this.startTime = performance.now()),
        (this.oldTime = this.startTime),
        (this.running = !0);
    },
    stop: function () {
      this.getElapsedTime(), (this.running = !1);
    },
    getElapsedTime: function () {
      return this.getDelta(), this.elapsedTime;
    },
    getDelta: function () {
      var e = 0;
      if ((this.autoStart && !this.running && this.start(), this.running)) {
        var t = performance.now();
        (e = 0.001 * (t - this.oldTime)),
          (this.oldTime = t),
          (this.elapsedTime += e);
      }
      return e;
    },
  }),
  (THREE.EventDispatcher = function () {}),
  (THREE.EventDispatcher.prototype = {
    constructor: THREE.EventDispatcher,
    apply: function (e) {
      (e.addEventListener = THREE.EventDispatcher.prototype.addEventListener),
        (e.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener),
        (e.removeEventListener =
          THREE.EventDispatcher.prototype.removeEventListener),
        (e.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent);
    },
    addEventListener: function (e, t) {
      void 0 === this._listeners && (this._listeners = {});
      var i = this._listeners;
      void 0 === i[e] && (i[e] = []), -1 === i[e].indexOf(t) && i[e].push(t);
    },
    hasEventListener: function (e, t) {
      if (void 0 === this._listeners) return !1;
      var i = this._listeners;
      return void 0 !== i[e] && -1 !== i[e].indexOf(t);
    },
    removeEventListener: function (e, t) {
      if (void 0 !== this._listeners) {
        var i = this._listeners[e];
        if (void 0 !== i) {
          var r = i.indexOf(t);
          -1 !== r && i.splice(r, 1);
        }
      }
    },
    dispatchEvent: function (e) {
      if (void 0 !== this._listeners) {
        var t = this._listeners[e.type];
        if (void 0 !== t) {
          e.target = this;
          for (var i = [], r = t.length, n = 0; n < r; n++) i[n] = t[n];
          for (n = 0; n < r; n++) i[n].call(this, e);
        }
      }
    },
  }),
  (THREE.Layers = function () {
    this.mask = 1;
  }),
  (THREE.Layers.prototype = {
    constructor: THREE.Layers,
    set: function (e) {
      this.mask = 1 << e;
    },
    enable: function (e) {
      this.mask |= 1 << e;
    },
    toggle: function (e) {
      this.mask ^= 1 << e;
    },
    disable: function (e) {
      this.mask &= ~(1 << e);
    },
    test: function (e) {
      return 0 != (this.mask & e.mask);
    },
  }),
  (function (e) {
    function t(e, t) {
      return e.distance - t.distance;
    }
    function i(e, t, r, n) {
      if (!1 !== e.visible && (e.raycast(t, r), !0 === n))
        for (var o = e.children, a = 0, s = o.length; a < s; a++)
          i(o[a], t, r, !0);
    }
    (e.Raycaster = function (t, i, r, n) {
      (this.ray = new e.Ray(t, i)),
        (this.near = r || 0),
        (this.far = n || 1 / 0),
        (this.params = {
          Mesh: {},
          Line: {},
          LOD: {},
          Points: {
            threshold: 1,
          },
          Sprite: {},
        }),
        Object.defineProperties(this.params, {
          PointCloud: {
            get: function () {
              return (
                console.warn(
                  "THREE.Raycaster: params.PointCloud has been renamed to params.Points."
                ),
                this.Points
              );
            },
          },
        });
    }),
      (e.Raycaster.prototype = {
        constructor: e.Raycaster,
        linePrecision: 1,
        set: function (e, t) {
          this.ray.set(e, t);
        },
        setFromCamera: function (t, i) {
          i instanceof e.PerspectiveCamera
            ? (this.ray.origin.setFromMatrixPosition(i.matrixWorld),
              this.ray.direction
                .set(t.x, t.y, 0.5)
                .unproject(i)
                .sub(this.ray.origin)
                .normalize())
            : i instanceof e.OrthographicCamera
            ? (this.ray.origin.set(t.x, t.y, -1).unproject(i),
              this.ray.direction
                .set(0, 0, -1)
                .transformDirection(i.matrixWorld))
            : console.error("THREE.Raycaster: Unsupported camera type.");
        },
        intersectObject: function (e, r) {
          var n = [];
          return i(e, this, n, r), n.sort(t), n;
        },
        intersectObjects: function (e, r) {
          var n = [];
          if (!1 === Array.isArray(e))
            return (
              console.warn(
                "THREE.Raycaster.intersectObjects: objects is not an Array."
              ),
              n
            );
          for (var o = 0, a = e.length; o < a; o++) i(e[o], this, n, r);
          return n.sort(t), n;
        },
      });
  })(THREE),
  (THREE.Object3D = function () {
    function e() {
      n.setFromEuler(r, !1);
    }
    function t() {
      r.setFromQuaternion(n, void 0, !1);
    }
    Object.defineProperty(this, "id", {
      value: THREE.Object3DIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.type = "Object3D"),
      (this.parent = null),
      (this.children = []),
      (this.up = THREE.Object3D.DefaultUp.clone());
    var i = new THREE.Vector3(),
      r = new THREE.Euler(),
      n = new THREE.Quaternion(),
      o = new THREE.Vector3(1, 1, 1);
    r.onChange(e),
      n.onChange(t),
      Object.defineProperties(this, {
        position: {
          enumerable: !0,
          value: i,
        },
        rotation: {
          enumerable: !0,
          value: r,
        },
        quaternion: {
          enumerable: !0,
          value: n,
        },
        scale: {
          enumerable: !0,
          value: o,
        },
        modelViewMatrix: {
          value: new THREE.Matrix4(),
        },
        normalMatrix: {
          value: new THREE.Matrix3(),
        },
      }),
      (this.rotationAutoUpdate = !0),
      (this.matrix = new THREE.Matrix4()),
      (this.matrixWorld = new THREE.Matrix4()),
      (this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate),
      (this.matrixWorldNeedsUpdate = !1),
      (this.layers = new THREE.Layers()),
      (this.visible = !0),
      (this.castShadow = !1),
      (this.receiveShadow = !1),
      (this.frustumCulled = !0),
      (this.renderOrder = 0),
      (this.userData = {});
  }),
  (THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0)),
  (THREE.Object3D.DefaultMatrixAutoUpdate = !0),
  (THREE.Object3D.prototype = {
    constructor: THREE.Object3D,
    applyMatrix: function (e) {
      this.matrix.multiplyMatrices(e, this.matrix),
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    },
    setRotationFromAxisAngle: function (e, t) {
      this.quaternion.setFromAxisAngle(e, t);
    },
    setRotationFromEuler: function (e) {
      this.quaternion.setFromEuler(e, !0);
    },
    setRotationFromMatrix: function (e) {
      this.quaternion.setFromRotationMatrix(e);
    },
    setRotationFromQuaternion: function (e) {
      this.quaternion.copy(e);
    },
    rotateOnAxis: (function () {
      var e = new THREE.Quaternion();
      return function (t, i) {
        return e.setFromAxisAngle(t, i), this.quaternion.multiply(e), this;
      };
    })(),
    rotateX: (function () {
      var e = new THREE.Vector3(1, 0, 0);
      return function (t) {
        return this.rotateOnAxis(e, t);
      };
    })(),
    rotateY: (function () {
      var e = new THREE.Vector3(0, 1, 0);
      return function (t) {
        return this.rotateOnAxis(e, t);
      };
    })(),
    rotateZ: (function () {
      var e = new THREE.Vector3(0, 0, 1);
      return function (t) {
        return this.rotateOnAxis(e, t);
      };
    })(),
    translateOnAxis: (function () {
      var e = new THREE.Vector3();
      return function (t, i) {
        return (
          e.copy(t).applyQuaternion(this.quaternion),
          this.position.add(e.multiplyScalar(i)),
          this
        );
      };
    })(),
    translateX: (function () {
      var e = new THREE.Vector3(1, 0, 0);
      return function (t) {
        return this.translateOnAxis(e, t);
      };
    })(),
    translateY: (function () {
      var e = new THREE.Vector3(0, 1, 0);
      return function (t) {
        return this.translateOnAxis(e, t);
      };
    })(),
    translateZ: (function () {
      var e = new THREE.Vector3(0, 0, 1);
      return function (t) {
        return this.translateOnAxis(e, t);
      };
    })(),
    localToWorld: function (e) {
      return e.applyMatrix4(this.matrixWorld);
    },
    worldToLocal: (function () {
      var e = new THREE.Matrix4();
      return function (t) {
        return t.applyMatrix4(e.getInverse(this.matrixWorld));
      };
    })(),
    lookAt: (function () {
      var e = new THREE.Matrix4();
      return function (t) {
        e.lookAt(t, this.position, this.up),
          this.quaternion.setFromRotationMatrix(e);
      };
    })(),
    add: function (e) {
      if (arguments.length > 1) {
        for (var t = 0; t < arguments.length; t++) this.add(arguments[t]);
        return this;
      }
      return e === this
        ? (console.error(
            "THREE.Object3D.add: object can't be added as a child of itself.",
            e
          ),
          this)
        : (e instanceof THREE.Object3D
            ? (null !== e.parent && e.parent.remove(e),
              (e.parent = this),
              e.dispatchEvent({
                type: "added",
              }),
              this.children.push(e))
            : console.error(
                "THREE.Object3D.add: object not an instance of THREE.Object3D.",
                e
              ),
          this);
    },
    remove: function (e) {
      if (arguments.length > 1)
        for (var t = 0; t < arguments.length; t++) this.remove(arguments[t]);
      var i = this.children.indexOf(e);
      -1 !== i &&
        ((e.parent = null),
        e.dispatchEvent({
          type: "removed",
        }),
        this.children.splice(i, 1));
    },
    getObjectById: function (e) {
      return this.getObjectByProperty("id", e);
    },
    getObjectByName: function (e) {
      return this.getObjectByProperty("name", e);
    },
    getObjectByProperty: function (e, t) {
      if (this[e] === t) return this;
      for (var i = 0, r = this.children.length; i < r; i++) {
        var n = this.children[i].getObjectByProperty(e, t);
        if (void 0 !== n) return n;
      }
    },
    getWorldPosition: function (e) {
      var t = e || new THREE.Vector3();
      return (
        this.updateMatrixWorld(!0), t.setFromMatrixPosition(this.matrixWorld)
      );
    },
    getWorldQuaternion: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Vector3();
      return function (i) {
        var r = i || new THREE.Quaternion();
        return (
          this.updateMatrixWorld(!0), this.matrixWorld.decompose(e, r, t), r
        );
      };
    })(),
    getWorldRotation: (function () {
      var e = new THREE.Quaternion();
      return function (t) {
        var i = t || new THREE.Euler();
        return (
          this.getWorldQuaternion(e),
          i.setFromQuaternion(e, this.rotation.order, !1)
        );
      };
    })(),
    getWorldScale: (function () {
      var e = new THREE.Vector3(),
        t = new THREE.Quaternion();
      return function (i) {
        var r = i || new THREE.Vector3();
        return (
          this.updateMatrixWorld(!0), this.matrixWorld.decompose(e, t, r), r
        );
      };
    })(),
    getWorldDirection: (function () {
      var e = new THREE.Quaternion();
      return function (t) {
        var i = t || new THREE.Vector3();
        return this.getWorldQuaternion(e), i.set(0, 0, 1).applyQuaternion(e);
      };
    })(),
    raycast: function () {},
    traverse: function (e) {
      e(this);
      for (var t = this.children, i = 0, r = t.length; i < r; i++)
        t[i].traverse(e);
    },
    traverseVisible: function (e) {
      if (!1 !== this.visible) {
        e(this);
        for (var t = this.children, i = 0, r = t.length; i < r; i++)
          t[i].traverseVisible(e);
      }
    },
    traverseAncestors: function (e) {
      var t = this.parent;
      null !== t && (e(t), t.traverseAncestors(e));
    },
    updateMatrix: function () {
      this.matrix.compose(this.position, this.quaternion, this.scale),
        (this.matrixWorldNeedsUpdate = !0);
    },
    updateMatrixWorld: function (e) {
      !0 === this.matrixAutoUpdate && this.updateMatrix(),
        (!0 !== this.matrixWorldNeedsUpdate && !0 !== e) ||
          (null === this.parent
            ? this.matrixWorld.copy(this.matrix)
            : this.matrixWorld.multiplyMatrices(
                this.parent.matrixWorld,
                this.matrix
              ),
          (this.matrixWorldNeedsUpdate = !1),
          (e = !0));
      for (var t = 0, i = this.children.length; t < i; t++)
        this.children[t].updateMatrixWorld(e);
    },
    toJSON: function (e) {
      function t(e) {
        var t = [];
        for (var i in e) {
          var r = e[i];
          delete r.metadata, t.push(r);
        }
        return t;
      }
      var i = void 0 === e,
        r = {};
      i &&
        ((e = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
        }),
        (r.metadata = {
          version: 4.4,
          type: "Object",
          generator: "Object3D.toJSON",
        }));
      var n = {};
      if (
        ((n.uuid = this.uuid),
        (n.type = this.type),
        "" !== this.name && (n.name = this.name),
        "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData),
        !0 === this.castShadow && (n.castShadow = !0),
        !0 === this.receiveShadow && (n.receiveShadow = !0),
        !1 === this.visible && (n.visible = !1),
        (n.matrix = this.matrix.toArray()),
        void 0 !== this.geometry &&
          (void 0 === e.geometries[this.geometry.uuid] &&
            (e.geometries[this.geometry.uuid] = this.geometry.toJSON(e)),
          (n.geometry = this.geometry.uuid)),
        void 0 !== this.material &&
          (void 0 === e.materials[this.material.uuid] &&
            (e.materials[this.material.uuid] = this.material.toJSON(e)),
          (n.material = this.material.uuid)),
        this.children.length > 0)
      ) {
        n.children = [];
        for (var o = 0; o < this.children.length; o++)
          n.children.push(this.children[o].toJSON(e).object);
      }
      if (i) {
        var a = t(e.geometries),
          s = t(e.materials),
          l = t(e.textures),
          h = t(e.images);
        a.length > 0 && (r.geometries = a),
          s.length > 0 && (r.materials = s),
          l.length > 0 && (r.textures = l),
          h.length > 0 && (r.images = h);
      }
      return (r.object = n), r;
    },
    clone: function (e) {
      return new this.constructor().copy(this, e);
    },
    copy: function (e, t) {
      if (
        (void 0 === t && (t = !0),
        (this.name = e.name),
        this.up.copy(e.up),
        this.position.copy(e.position),
        this.quaternion.copy(e.quaternion),
        this.scale.copy(e.scale),
        (this.rotationAutoUpdate = e.rotationAutoUpdate),
        this.matrix.copy(e.matrix),
        this.matrixWorld.copy(e.matrixWorld),
        (this.matrixAutoUpdate = e.matrixAutoUpdate),
        (this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate),
        (this.visible = e.visible),
        (this.castShadow = e.castShadow),
        (this.receiveShadow = e.receiveShadow),
        (this.frustumCulled = e.frustumCulled),
        (this.renderOrder = e.renderOrder),
        (this.userData = JSON.parse(JSON.stringify(e.userData))),
        !0 === t)
      )
        for (var i = 0; i < e.children.length; i++) {
          var r = e.children[i];
          this.add(r.clone());
        }
      return this;
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype),
  (THREE.Object3DIdCount = 0),
  (THREE.Face3 = function (e, t, i, r, n, o) {
    (this.a = e),
      (this.b = t),
      (this.c = i),
      (this.normal = r instanceof THREE.Vector3 ? r : new THREE.Vector3()),
      (this.vertexNormals = Array.isArray(r) ? r : []),
      (this.color = n instanceof THREE.Color ? n : new THREE.Color()),
      (this.vertexColors = Array.isArray(n) ? n : []),
      (this.materialIndex = void 0 !== o ? o : 0);
  }),
  (THREE.Face3.prototype = {
    constructor: THREE.Face3,
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      (this.a = e.a),
        (this.b = e.b),
        (this.c = e.c),
        this.normal.copy(e.normal),
        this.color.copy(e.color),
        (this.materialIndex = e.materialIndex);
      for (var t = 0, i = e.vertexNormals.length; t < i; t++)
        this.vertexNormals[t] = e.vertexNormals[t].clone();
      for (t = 0, i = e.vertexColors.length; t < i; t++)
        this.vertexColors[t] = e.vertexColors[t].clone();
      return this;
    },
  }),
  (THREE.BufferAttribute = function (e, t) {
    (this.uuid = THREE.Math.generateUUID()),
      (this.array = e),
      (this.itemSize = t),
      (this.dynamic = !1),
      (this.updateRange = {
        offset: 0,
        count: -1,
      }),
      (this.version = 0);
  }),
  (THREE.BufferAttribute.prototype = {
    constructor: THREE.BufferAttribute,
    get count() {
      return this.array.length / this.itemSize;
    },
    set needsUpdate(e) {
      !0 === e && this.version++;
    },
    setDynamic: function (e) {
      return (this.dynamic = e), this;
    },
    copy: function (e) {
      return (
        (this.array = new e.array.constructor(e.array)),
        (this.itemSize = e.itemSize),
        (this.dynamic = e.dynamic),
        this
      );
    },
    copyAt: function (e, t, i) {
      (e *= this.itemSize), (i *= t.itemSize);
      for (var r = 0, n = this.itemSize; r < n; r++)
        this.array[e + r] = t.array[i + r];
      return this;
    },
    copyArray: function (e) {
      return this.array.set(e), this;
    },
    copyColorsArray: function (e) {
      for (var t = this.array, i = 0, r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        void 0 === o &&
          (console.warn(
            "THREE.BufferAttribute.copyColorsArray(): color is undefined",
            r
          ),
          (o = new THREE.Color())),
          (t[i++] = o.r),
          (t[i++] = o.g),
          (t[i++] = o.b);
      }
      return this;
    },
    copyIndicesArray: function (e) {
      for (var t = this.array, i = 0, r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        (t[i++] = o.a), (t[i++] = o.b), (t[i++] = o.c);
      }
      return this;
    },
    copyVector2sArray: function (e) {
      for (var t = this.array, i = 0, r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        void 0 === o &&
          (console.warn(
            "THREE.BufferAttribute.copyVector2sArray(): vector is undefined",
            r
          ),
          (o = new THREE.Vector2())),
          (t[i++] = o.x),
          (t[i++] = o.y);
      }
      return this;
    },
    copyVector3sArray: function (e) {
      for (var t = this.array, i = 0, r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        void 0 === o &&
          (console.warn(
            "THREE.BufferAttribute.copyVector3sArray(): vector is undefined",
            r
          ),
          (o = new THREE.Vector3())),
          (t[i++] = o.x),
          (t[i++] = o.y),
          (t[i++] = o.z);
      }
      return this;
    },
    copyVector4sArray: function (e) {
      for (var t = this.array, i = 0, r = 0, n = e.length; r < n; r++) {
        var o = e[r];
        void 0 === o &&
          (console.warn(
            "THREE.BufferAttribute.copyVector4sArray(): vector is undefined",
            r
          ),
          (o = new THREE.Vector4())),
          (t[i++] = o.x),
          (t[i++] = o.y),
          (t[i++] = o.z),
          (t[i++] = o.w);
      }
      return this;
    },
    set: function (e, t) {
      return void 0 === t && (t = 0), this.array.set(e, t), this;
    },
    getX: function (e) {
      return this.array[e * this.itemSize];
    },
    setX: function (e, t) {
      return (this.array[e * this.itemSize] = t), this;
    },
    getY: function (e) {
      return this.array[e * this.itemSize + 1];
    },
    setY: function (e, t) {
      return (this.array[e * this.itemSize + 1] = t), this;
    },
    getZ: function (e) {
      return this.array[e * this.itemSize + 2];
    },
    setZ: function (e, t) {
      return (this.array[e * this.itemSize + 2] = t), this;
    },
    getW: function (e) {
      return this.array[e * this.itemSize + 3];
    },
    setW: function (e, t) {
      return (this.array[e * this.itemSize + 3] = t), this;
    },
    setXY: function (e, t, i) {
      return (
        (e *= this.itemSize),
        (this.array[e + 0] = t),
        (this.array[e + 1] = i),
        this
      );
    },
    setXYZ: function (e, t, i, r) {
      return (
        (e *= this.itemSize),
        (this.array[e + 0] = t),
        (this.array[e + 1] = i),
        (this.array[e + 2] = r),
        this
      );
    },
    setXYZW: function (e, t, i, r, n) {
      return (
        (e *= this.itemSize),
        (this.array[e + 0] = t),
        (this.array[e + 1] = i),
        (this.array[e + 2] = r),
        (this.array[e + 3] = n),
        this
      );
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
  }),
  (THREE.Int8Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Int8Array(e), t);
  }),
  (THREE.Uint8Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Uint8Array(e), t);
  }),
  (THREE.Uint8ClampedAttribute = function (e, t) {
    return new THREE.BufferAttribute(new Uint8ClampedArray(e), t);
  }),
  (THREE.Int16Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Int16Array(e), t);
  }),
  (THREE.Uint16Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Uint16Array(e), t);
  }),
  (THREE.Int32Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Int32Array(e), t);
  }),
  (THREE.Uint32Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Uint32Array(e), t);
  }),
  (THREE.Float32Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Float32Array(e), t);
  }),
  (THREE.Float64Attribute = function (e, t) {
    return new THREE.BufferAttribute(new Float64Array(e), t);
  }),
  (THREE.DynamicBufferAttribute = function (e, t) {
    return (
      console.warn(
        "THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."
      ),
      new THREE.BufferAttribute(e, t).setDynamic(!0)
    );
  }),
  (THREE.InstancedBufferAttribute = function (e, t, i) {
    THREE.BufferAttribute.call(this, e, t), (this.meshPerAttribute = i || 1);
  }),
  (THREE.InstancedBufferAttribute.prototype = Object.create(
    THREE.BufferAttribute.prototype
  )),
  (THREE.InstancedBufferAttribute.prototype.constructor =
    THREE.InstancedBufferAttribute),
  (THREE.InstancedBufferAttribute.prototype.copy = function (e) {
    return (
      THREE.BufferAttribute.prototype.copy.call(this, e),
      (this.meshPerAttribute = e.meshPerAttribute),
      this
    );
  }),
  (THREE.InterleavedBuffer = function (e, t) {
    (this.uuid = THREE.Math.generateUUID()),
      (this.array = e),
      (this.stride = t),
      (this.dynamic = !1),
      (this.updateRange = {
        offset: 0,
        count: -1,
      }),
      (this.version = 0);
  }),
  (THREE.InterleavedBuffer.prototype = {
    constructor: THREE.InterleavedBuffer,
    get length() {
      return this.array.length;
    },
    get count() {
      return this.array.length / this.stride;
    },
    set needsUpdate(e) {
      !0 === e && this.version++;
    },
    setDynamic: function (e) {
      return (this.dynamic = e), this;
    },
    copy: function (e) {
      return (
        (this.array = new e.array.constructor(e.array)),
        (this.stride = e.stride),
        (this.dynamic = e.dynamic),
        this
      );
    },
    copyAt: function (e, t, i) {
      (e *= this.stride), (i *= t.stride);
      for (var r = 0, n = this.stride; r < n; r++)
        this.array[e + r] = t.array[i + r];
      return this;
    },
    set: function (e, t) {
      return void 0 === t && (t = 0), this.array.set(e, t), this;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
  }),
  (THREE.InstancedInterleavedBuffer = function (e, t, i) {
    THREE.InterleavedBuffer.call(this, e, t), (this.meshPerAttribute = i || 1);
  }),
  (THREE.InstancedInterleavedBuffer.prototype = Object.create(
    THREE.InterleavedBuffer.prototype
  )),
  (THREE.InstancedInterleavedBuffer.prototype.constructor =
    THREE.InstancedInterleavedBuffer),
  (THREE.InstancedInterleavedBuffer.prototype.copy = function (e) {
    return (
      THREE.InterleavedBuffer.prototype.copy.call(this, e),
      (this.meshPerAttribute = e.meshPerAttribute),
      this
    );
  }),
  (THREE.InterleavedBufferAttribute = function (e, t, i) {
    (this.uuid = THREE.Math.generateUUID()),
      (this.data = e),
      (this.itemSize = t),
      (this.offset = i);
  }),
  (THREE.InterleavedBufferAttribute.prototype = {
    constructor: THREE.InterleavedBufferAttribute,
    get length() {
      return (
        console.warn(
          "THREE.BufferAttribute: .length has been deprecated. Please use .count."
        ),
        this.array.length
      );
    },
    get count() {
      return this.data.count;
    },
    setX: function (e, t) {
      return (this.data.array[e * this.data.stride + this.offset] = t), this;
    },
    setY: function (e, t) {
      return (
        (this.data.array[e * this.data.stride + this.offset + 1] = t), this
      );
    },
    setZ: function (e, t) {
      return (
        (this.data.array[e * this.data.stride + this.offset + 2] = t), this
      );
    },
    setW: function (e, t) {
      return (
        (this.data.array[e * this.data.stride + this.offset + 3] = t), this
      );
    },
    getX: function (e) {
      return this.data.array[e * this.data.stride + this.offset];
    },
    getY: function (e) {
      return this.data.array[e * this.data.stride + this.offset + 1];
    },
    getZ: function (e) {
      return this.data.array[e * this.data.stride + this.offset + 2];
    },
    getW: function (e) {
      return this.data.array[e * this.data.stride + this.offset + 3];
    },
    setXY: function (e, t, i) {
      return (
        (e = e * this.data.stride + this.offset),
        (this.data.array[e + 0] = t),
        (this.data.array[e + 1] = i),
        this
      );
    },
    setXYZ: function (e, t, i, r) {
      return (
        (e = e * this.data.stride + this.offset),
        (this.data.array[e + 0] = t),
        (this.data.array[e + 1] = i),
        (this.data.array[e + 2] = r),
        this
      );
    },
    setXYZW: function (e, t, i, r, n) {
      return (
        (e = e * this.data.stride + this.offset),
        (this.data.array[e + 0] = t),
        (this.data.array[e + 1] = i),
        (this.data.array[e + 2] = r),
        (this.data.array[e + 3] = n),
        this
      );
    },
  }),
  (THREE.Geometry = function () {
    Object.defineProperty(this, "id", {
      value: THREE.GeometryIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.type = "Geometry"),
      (this.vertices = []),
      (this.colors = []),
      (this.faces = []),
      (this.faceVertexUvs = [[]]),
      (this.morphTargets = []),
      (this.morphNormals = []),
      (this.skinWeights = []),
      (this.skinIndices = []),
      (this.lineDistances = []),
      (this.boundingBox = null),
      (this.boundingSphere = null),
      (this.verticesNeedUpdate = !1),
      (this.elementsNeedUpdate = !1),
      (this.uvsNeedUpdate = !1),
      (this.normalsNeedUpdate = !1),
      (this.colorsNeedUpdate = !1),
      (this.lineDistancesNeedUpdate = !1),
      (this.groupsNeedUpdate = !1);
  }),
  (THREE.Geometry.prototype = {
    constructor: THREE.Geometry,
    applyMatrix: function (e) {
      for (
        var t = new THREE.Matrix3().getNormalMatrix(e),
          i = 0,
          r = this.vertices.length;
        i < r;
        i++
      ) {
        this.vertices[i].applyMatrix4(e);
      }
      for (i = 0, r = this.faces.length; i < r; i++) {
        var n = this.faces[i];
        n.normal.applyMatrix3(t).normalize();
        for (var o = 0, a = n.vertexNormals.length; o < a; o++)
          n.vertexNormals[o].applyMatrix3(t).normalize();
      }
      null !== this.boundingBox && this.computeBoundingBox(),
        null !== this.boundingSphere && this.computeBoundingSphere(),
        (this.verticesNeedUpdate = !0),
        (this.normalsNeedUpdate = !0);
    },
    rotateX: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationX(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    rotateY: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationY(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    rotateZ: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationZ(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    translate: (function () {
      var e;
      return function (t, i, r) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeTranslation(t, i, r),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    scale: (function () {
      var e;
      return function (t, i, r) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeScale(t, i, r),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    lookAt: (function () {
      var e;
      return function (t) {
        void 0 === e && (e = new THREE.Object3D()),
          e.lookAt(t),
          e.updateMatrix(),
          this.applyMatrix(e.matrix);
      };
    })(),
    fromBufferGeometry: function (e) {
      function t(e, t, r) {
        var n = void 0 !== a ? [c[e].clone(), c[t].clone(), c[r].clone()] : [],
          o =
            void 0 !== s
              ? [i.colors[e].clone(), i.colors[t].clone(), i.colors[r].clone()]
              : [],
          d = new THREE.Face3(e, t, r, n, o);
        i.faces.push(d),
          void 0 !== l &&
            i.faceVertexUvs[0].push([u[e].clone(), u[t].clone(), u[r].clone()]),
          void 0 !== h &&
            i.faceVertexUvs[1].push([p[e].clone(), p[t].clone(), p[r].clone()]);
      }
      var i = this,
        r = null !== e.index ? e.index.array : void 0,
        n = e.attributes,
        o = n.position.array,
        a = void 0 !== n.normal ? n.normal.array : void 0,
        s = void 0 !== n.color ? n.color.array : void 0,
        l = void 0 !== n.uv ? n.uv.array : void 0,
        h = void 0 !== n.uv2 ? n.uv2.array : void 0;
      void 0 !== h && (this.faceVertexUvs[1] = []);
      for (
        var c = [], u = [], p = [], d = 0, f = 0;
        d < o.length;
        d += 3, f += 2
      )
        i.vertices.push(new THREE.Vector3(o[d], o[d + 1], o[d + 2])),
          void 0 !== a && c.push(new THREE.Vector3(a[d], a[d + 1], a[d + 2])),
          void 0 !== s &&
            i.colors.push(new THREE.Color(s[d], s[d + 1], s[d + 2])),
          void 0 !== l && u.push(new THREE.Vector2(l[f], l[f + 1])),
          void 0 !== h && p.push(new THREE.Vector2(h[f], h[f + 1]));
      if (void 0 !== r) {
        var m = e.groups;
        if (m.length > 0)
          for (d = 0; d < m.length; d++)
            for (
              var E = m[d], g = E.start, v = ((f = g), g + E.count);
              f < v;
              f += 3
            )
              t(r[f], r[f + 1], r[f + 2]);
        else for (d = 0; d < r.length; d += 3) t(r[d], r[d + 1], r[d + 2]);
      } else for (d = 0; d < o.length / 3; d += 3) t(d, d + 1, d + 2);
      return (
        this.computeFaceNormals(),
        null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone()),
        null !== e.boundingSphere &&
          (this.boundingSphere = e.boundingSphere.clone()),
        this
      );
    },
    center: function () {
      this.computeBoundingBox();
      var e = this.boundingBox.center().negate();
      return this.translate(e.x, e.y, e.z), e;
    },
    normalize: function () {
      this.computeBoundingSphere();
      var e = this.boundingSphere.center,
        t = this.boundingSphere.radius,
        i = 0 === t ? 1 : 1 / t,
        r = new THREE.Matrix4();
      return (
        r.set(
          i,
          0,
          0,
          -i * e.x,
          0,
          i,
          0,
          -i * e.y,
          0,
          0,
          i,
          -i * e.z,
          0,
          0,
          0,
          1
        ),
        this.applyMatrix(r),
        this
      );
    },
    computeFaceNormals: function () {
      for (
        var e = new THREE.Vector3(),
          t = new THREE.Vector3(),
          i = 0,
          r = this.faces.length;
        i < r;
        i++
      ) {
        var n = this.faces[i],
          o = this.vertices[n.a],
          a = this.vertices[n.b],
          s = this.vertices[n.c];
        e.subVectors(s, a),
          t.subVectors(o, a),
          e.cross(t),
          e.normalize(),
          n.normal.copy(e);
      }
    },
    computeVertexNormals: function (e) {
      var t, i, r, n, o, a;
      for (
        void 0 === e && (e = !0),
          a = new Array(this.vertices.length),
          t = 0,
          i = this.vertices.length;
        t < i;
        t++
      )
        a[t] = new THREE.Vector3();
      if (e) {
        var s,
          l,
          h,
          c = new THREE.Vector3(),
          u = new THREE.Vector3();
        for (r = 0, n = this.faces.length; r < n; r++)
          (o = this.faces[r]),
            (s = this.vertices[o.a]),
            (l = this.vertices[o.b]),
            (h = this.vertices[o.c]),
            c.subVectors(h, l),
            u.subVectors(s, l),
            c.cross(u),
            a[o.a].add(c),
            a[o.b].add(c),
            a[o.c].add(c);
      } else
        for (r = 0, n = this.faces.length; r < n; r++)
          a[(o = this.faces[r]).a].add(o.normal),
            a[o.b].add(o.normal),
            a[o.c].add(o.normal);
      for (t = 0, i = this.vertices.length; t < i; t++) a[t].normalize();
      for (r = 0, n = this.faces.length; r < n; r++) {
        var p = (o = this.faces[r]).vertexNormals;
        3 === p.length
          ? (p[0].copy(a[o.a]), p[1].copy(a[o.b]), p[2].copy(a[o.c]))
          : ((p[0] = a[o.a].clone()),
            (p[1] = a[o.b].clone()),
            (p[2] = a[o.c].clone()));
      }
      this.faces.length > 0 && (this.normalsNeedUpdate = !0);
    },
    computeMorphNormals: function () {
      var e, t, i, r, n;
      for (i = 0, r = this.faces.length; i < r; i++)
        for (
          (n = this.faces[i]).__originalFaceNormal
            ? n.__originalFaceNormal.copy(n.normal)
            : (n.__originalFaceNormal = n.normal.clone()),
            n.__originalVertexNormals || (n.__originalVertexNormals = []),
            e = 0,
            t = n.vertexNormals.length;
          e < t;
          e++
        )
          n.__originalVertexNormals[e]
            ? n.__originalVertexNormals[e].copy(n.vertexNormals[e])
            : (n.__originalVertexNormals[e] = n.vertexNormals[e].clone());
      var o = new THREE.Geometry();
      for (
        o.faces = this.faces, e = 0, t = this.morphTargets.length;
        e < t;
        e++
      ) {
        if (!this.morphNormals[e]) {
          (this.morphNormals[e] = {}),
            (this.morphNormals[e].faceNormals = []),
            (this.morphNormals[e].vertexNormals = []);
          var a = this.morphNormals[e].faceNormals,
            s = this.morphNormals[e].vertexNormals;
          for (i = 0, r = this.faces.length; i < r; i++)
            (l = new THREE.Vector3()),
              (h = {
                a: new THREE.Vector3(),
                b: new THREE.Vector3(),
                c: new THREE.Vector3(),
              }),
              a.push(l),
              s.push(h);
        }
        var l,
          h,
          c = this.morphNormals[e];
        for (
          o.vertices = this.morphTargets[e].vertices,
            o.computeFaceNormals(),
            o.computeVertexNormals(),
            i = 0,
            r = this.faces.length;
          i < r;
          i++
        )
          (n = this.faces[i]),
            (l = c.faceNormals[i]),
            (h = c.vertexNormals[i]),
            l.copy(n.normal),
            h.a.copy(n.vertexNormals[0]),
            h.b.copy(n.vertexNormals[1]),
            h.c.copy(n.vertexNormals[2]);
      }
      for (i = 0, r = this.faces.length; i < r; i++)
        ((n = this.faces[i]).normal = n.__originalFaceNormal),
          (n.vertexNormals = n.__originalVertexNormals);
    },
    computeTangents: function () {
      console.warn("THREE.Geometry: .computeTangents() has been removed.");
    },
    computeLineDistances: function () {
      for (var e = 0, t = this.vertices, i = 0, r = t.length; i < r; i++)
        i > 0 && (e += t[i].distanceTo(t[i - 1])), (this.lineDistances[i] = e);
    },
    computeBoundingBox: function () {
      null === this.boundingBox && (this.boundingBox = new THREE.Box3()),
        this.boundingBox.setFromPoints(this.vertices);
    },
    computeBoundingSphere: function () {
      null === this.boundingSphere &&
        (this.boundingSphere = new THREE.Sphere()),
        this.boundingSphere.setFromPoints(this.vertices);
    },
    merge: function (e, t, i) {
      if (e instanceof THREE.Geometry != !1) {
        var r,
          n = this.vertices.length,
          o = this.vertices,
          a = e.vertices,
          s = this.faces,
          l = e.faces,
          h = this.faceVertexUvs[0],
          c = e.faceVertexUvs[0];
        void 0 === i && (i = 0),
          void 0 !== t && (r = new THREE.Matrix3().getNormalMatrix(t));
        for (var u = 0, p = a.length; u < p; u++) {
          var d = a[u].clone();
          void 0 !== t && d.applyMatrix4(t), o.push(d);
        }
        for (u = 0, p = l.length; u < p; u++) {
          var f,
            m,
            E,
            g = l[u],
            v = g.vertexNormals,
            y = g.vertexColors;
          (f = new THREE.Face3(g.a + n, g.b + n, g.c + n)).normal.copy(
            g.normal
          ),
            void 0 !== r && f.normal.applyMatrix3(r).normalize();
          for (var T = 0, R = v.length; T < R; T++)
            (m = v[T].clone()),
              void 0 !== r && m.applyMatrix3(r).normalize(),
              f.vertexNormals.push(m);
          f.color.copy(g.color);
          for (T = 0, R = y.length; T < R; T++)
            (E = y[T]), f.vertexColors.push(E.clone());
          (f.materialIndex = g.materialIndex + i), s.push(f);
        }
        for (u = 0, p = c.length; u < p; u++) {
          var x = c[u],
            H = [];
          if (void 0 !== x) {
            for (T = 0, R = x.length; T < R; T++) H.push(x[T].clone());
            h.push(H);
          }
        }
      } else
        console.error(
          "THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",
          e
        );
    },
    mergeMesh: function (e) {
      e instanceof THREE.Mesh != !1
        ? (e.matrixAutoUpdate && e.updateMatrix(),
          this.merge(e.geometry, e.matrix))
        : console.error(
            "THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",
            e
          );
    },
    mergeVertices: function () {
      var e,
        t,
        i,
        r,
        n,
        o,
        a,
        s,
        l = {},
        h = [],
        c = [],
        u = 4,
        p = Math.pow(10, u);
      for (i = 0, r = this.vertices.length; i < r; i++)
        (e = this.vertices[i]),
          void 0 ===
          l[
            (t =
              Math.round(e.x * p) +
              "_" +
              Math.round(e.y * p) +
              "_" +
              Math.round(e.z * p))
          ]
            ? ((l[t] = i), h.push(this.vertices[i]), (c[i] = h.length - 1))
            : (c[i] = c[l[t]]);
      var d = [];
      for (i = 0, r = this.faces.length; i < r; i++) {
        ((n = this.faces[i]).a = c[n.a]),
          (n.b = c[n.b]),
          (n.c = c[n.c]),
          (o = [n.a, n.b, n.c]);
        for (var f = 0; f < 3; f++)
          if (o[f] === o[(f + 1) % 3]) {
            f, d.push(i);
            break;
          }
      }
      for (i = d.length - 1; i >= 0; i--) {
        var m = d[i];
        for (
          this.faces.splice(m, 1), a = 0, s = this.faceVertexUvs.length;
          a < s;
          a++
        )
          this.faceVertexUvs[a].splice(m, 1);
      }
      var E = this.vertices.length - h.length;
      return (this.vertices = h), E;
    },
    sortFacesByMaterialIndex: function () {
      function e(e, t) {
        return e.materialIndex - t.materialIndex;
      }
      for (var t = this.faces, i = t.length, r = 0; r < i; r++) t[r]._id = r;
      t.sort(e);
      var n,
        o,
        a = this.faceVertexUvs[0],
        s = this.faceVertexUvs[1];
      a && a.length === i && (n = []), s && s.length === i && (o = []);
      for (r = 0; r < i; r++) {
        var l = t[r]._id;
        n && n.push(a[l]), o && o.push(s[l]);
      }
      n && (this.faceVertexUvs[0] = n), o && (this.faceVertexUvs[1] = o);
    },
    toJSON: function () {
      function e(e, t, i) {
        return i ? e | (1 << t) : e & ~(1 << t);
      }
      function t(e) {
        var t = e.x.toString() + e.y.toString() + e.z.toString();
        return (
          void 0 !== p[t] || ((p[t] = u.length / 3), u.push(e.x, e.y, e.z)),
          p[t]
        );
      }
      function i(e) {
        var t = e.r.toString() + e.g.toString() + e.b.toString();
        return void 0 !== f[t] || ((f[t] = d.length), d.push(e.getHex())), f[t];
      }
      function r(e) {
        var t = e.x.toString() + e.y.toString();
        return (
          void 0 !== E[t] || ((E[t] = m.length / 2), m.push(e.x, e.y)), E[t]
        );
      }
      var n = {
        metadata: {
          version: 4.4,
          type: "Geometry",
          generator: "Geometry.toJSON",
        },
      };
      if (
        ((n.uuid = this.uuid),
        (n.type = this.type),
        "" !== this.name && (n.name = this.name),
        void 0 !== this.parameters)
      ) {
        var o = this.parameters;
        for (var a in o) void 0 !== o[a] && (n[a] = o[a]);
        return n;
      }
      for (var s = [], l = 0; l < this.vertices.length; l++) {
        var h = this.vertices[l];
        s.push(h.x, h.y, h.z);
      }
      var c = [],
        u = [],
        p = {},
        d = [],
        f = {},
        m = [],
        E = {};
      for (l = 0; l < this.faces.length; l++) {
        var g = this.faces[l],
          v = !0,
          y = !1,
          T = void 0 !== this.faceVertexUvs[0][l],
          R = g.normal.length() > 0,
          x = g.vertexNormals.length > 0,
          H = 1 !== g.color.r || 1 !== g.color.g || 1 !== g.color.b,
          b = g.vertexColors.length > 0,
          w = 0;
        if (
          ((w = e(w, 0, 0)),
          (w = e(w, 1, v)),
          (w = e(w, 2, y)),
          (w = e(w, 3, T)),
          (w = e(w, 4, R)),
          (w = e(w, 5, x)),
          (w = e(w, 6, H)),
          (w = e(w, 7, b)),
          c.push(w),
          c.push(g.a, g.b, g.c),
          c.push(g.materialIndex),
          T)
        ) {
          var q = this.faceVertexUvs[0][l];
          c.push(r(q[0]), r(q[1]), r(q[2]));
        }
        if ((R && c.push(t(g.normal)), x)) {
          var M = g.vertexNormals;
          c.push(t(M[0]), t(M[1]), t(M[2]));
        }
        if ((H && c.push(i(g.color)), b)) {
          var _ = g.vertexColors;
          c.push(i(_[0]), i(_[1]), i(_[2]));
        }
      }
      return (
        (n.data = {}),
        (n.data.vertices = s),
        (n.data.normals = u),
        d.length > 0 && (n.data.colors = d),
        m.length > 0 && (n.data.uvs = [m]),
        (n.data.faces = c),
        n
      );
    },
    clone: function () {
      return new THREE.Geometry().copy(this);
    },
    copy: function (e) {
      (this.vertices = []), (this.faces = []), (this.faceVertexUvs = [[]]);
      for (var t = e.vertices, i = 0, r = t.length; i < r; i++)
        this.vertices.push(t[i].clone());
      var n = e.faces;
      for (i = 0, r = n.length; i < r; i++) this.faces.push(n[i].clone());
      for (i = 0, r = e.faceVertexUvs.length; i < r; i++) {
        var o = e.faceVertexUvs[i];
        void 0 === this.faceVertexUvs[i] && (this.faceVertexUvs[i] = []);
        for (var a = 0, s = o.length; a < s; a++) {
          for (var l = o[a], h = [], c = 0, u = l.length; c < u; c++) {
            var p = l[c];
            h.push(p.clone());
          }
          this.faceVertexUvs[i].push(h);
        }
      }
      return this;
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype),
  (THREE.GeometryIdCount = 0),
  (THREE.DirectGeometry = function () {
    Object.defineProperty(this, "id", {
      value: THREE.GeometryIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.type = "DirectGeometry"),
      (this.indices = []),
      (this.vertices = []),
      (this.normals = []),
      (this.colors = []),
      (this.uvs = []),
      (this.uvs2 = []),
      (this.groups = []),
      (this.morphTargets = {}),
      (this.skinWeights = []),
      (this.skinIndices = []),
      (this.boundingBox = null),
      (this.boundingSphere = null),
      (this.verticesNeedUpdate = !1),
      (this.normalsNeedUpdate = !1),
      (this.colorsNeedUpdate = !1),
      (this.uvsNeedUpdate = !1),
      (this.groupsNeedUpdate = !1);
  }),
  (THREE.DirectGeometry.prototype = {
    constructor: THREE.DirectGeometry,
    computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
    computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,
    computeFaceNormals: function () {
      console.warn(
        "THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry."
      );
    },
    computeVertexNormals: function () {
      console.warn(
        "THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry."
      );
    },
    computeGroups: function (e) {
      for (var t, i, r = [], n = e.faces, o = 0; o < n.length; o++) {
        var a = n[o];
        a.materialIndex !== i &&
          ((i = a.materialIndex),
          void 0 !== t && ((t.count = 3 * o - t.start), r.push(t)),
          (t = {
            start: 3 * o,
            materialIndex: i,
          }));
      }
      void 0 !== t && ((t.count = 3 * o - t.start), r.push(t)),
        (this.groups = r);
    },
    fromGeometry: function (e) {
      var t,
        i = e.faces,
        r = e.vertices,
        n = e.faceVertexUvs,
        o = n[0] && n[0].length > 0,
        a = n[1] && n[1].length > 0,
        s = e.morphTargets,
        l = s.length;
      if (l > 0) {
        t = [];
        for (var h = 0; h < l; h++) t[h] = [];
        this.morphTargets.position = t;
      }
      var c,
        u = e.morphNormals,
        p = u.length;
      if (p > 0) {
        c = [];
        for (h = 0; h < p; h++) c[h] = [];
        this.morphTargets.normal = c;
      }
      var d = e.skinIndices,
        f = e.skinWeights,
        m = d.length === r.length,
        E = f.length === r.length;
      for (h = 0; h < i.length; h++) {
        var g = i[h];
        this.vertices.push(r[g.a], r[g.b], r[g.c]);
        var v = g.vertexNormals;
        if (3 === v.length) this.normals.push(v[0], v[1], v[2]);
        else {
          var y = g.normal;
          this.normals.push(y, y, y);
        }
        var T,
          R = g.vertexColors;
        if (3 === R.length) this.colors.push(R[0], R[1], R[2]);
        else {
          var x = g.color;
          this.colors.push(x, x, x);
        }
        if (!0 === o)
          void 0 !== (T = n[0][h])
            ? this.uvs.push(T[0], T[1], T[2])
            : (console.warn(
                "THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",
                h
              ),
              this.uvs.push(
                new THREE.Vector2(),
                new THREE.Vector2(),
                new THREE.Vector2()
              ));
        if (!0 === a)
          void 0 !== (T = n[1][h])
            ? this.uvs2.push(T[0], T[1], T[2])
            : (console.warn(
                "THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",
                h
              ),
              this.uvs2.push(
                new THREE.Vector2(),
                new THREE.Vector2(),
                new THREE.Vector2()
              ));
        for (var H = 0; H < l; H++) {
          var b = s[H].vertices;
          t[H].push(b[g.a], b[g.b], b[g.c]);
        }
        for (H = 0; H < p; H++) {
          var w = u[H].vertexNormals[h];
          c[H].push(w.a, w.b, w.c);
        }
        m && this.skinIndices.push(d[g.a], d[g.b], d[g.c]),
          E && this.skinWeights.push(f[g.a], f[g.b], f[g.c]);
      }
      return (
        this.computeGroups(e),
        (this.verticesNeedUpdate = e.verticesNeedUpdate),
        (this.normalsNeedUpdate = e.normalsNeedUpdate),
        (this.colorsNeedUpdate = e.colorsNeedUpdate),
        (this.uvsNeedUpdate = e.uvsNeedUpdate),
        (this.groupsNeedUpdate = e.groupsNeedUpdate),
        this
      );
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.DirectGeometry.prototype),
  (THREE.BufferGeometry = function () {
    Object.defineProperty(this, "id", {
      value: THREE.GeometryIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.type = "BufferGeometry"),
      (this.index = null),
      (this.attributes = {}),
      (this.morphAttributes = {}),
      (this.groups = []),
      (this.boundingBox = null),
      (this.boundingSphere = null),
      (this.drawRange = {
        start: 0,
        count: 1 / 0,
      });
  }),
  (THREE.BufferGeometry.prototype = {
    constructor: THREE.BufferGeometry,
    getIndex: function () {
      return this.index;
    },
    setIndex: function (e) {
      this.index = e;
    },
    addAttribute: function (e, t) {
      return t instanceof THREE.BufferAttribute == !1 &&
        t instanceof THREE.InterleavedBufferAttribute == !1
        ? (console.warn(
            "THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."
          ),
          void this.addAttribute(
            e,
            new THREE.BufferAttribute(arguments[1], arguments[2])
          ))
        : "index" === e
        ? (console.warn(
            "THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."
          ),
          void this.setIndex(t))
        : ((this.attributes[e] = t), this);
    },
    getAttribute: function (e) {
      return this.attributes[e];
    },
    removeAttribute: function (e) {
      return delete this.attributes[e], this;
    },
    addGroup: function (e, t, i) {
      this.groups.push({
        start: e,
        count: t,
        materialIndex: void 0 !== i ? i : 0,
      });
    },
    clearGroups: function () {
      this.groups = [];
    },
    setDrawRange: function (e, t) {
      (this.drawRange.start = e), (this.drawRange.count = t);
    },
    applyMatrix: function (e) {
      var t = this.attributes.position;
      void 0 !== t && (e.applyToVector3Array(t.array), (t.needsUpdate = !0));
      var i = this.attributes.normal;
      void 0 !== i &&
        (new THREE.Matrix3().getNormalMatrix(e).applyToVector3Array(i.array),
        (i.needsUpdate = !0));
      null !== this.boundingBox && this.computeBoundingBox(),
        null !== this.boundingSphere && this.computeBoundingSphere();
    },
    rotateX: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationX(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    rotateY: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationY(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    rotateZ: (function () {
      var e;
      return function (t) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeRotationZ(t),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    translate: (function () {
      var e;
      return function (t, i, r) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeTranslation(t, i, r),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    scale: (function () {
      var e;
      return function (t, i, r) {
        return (
          void 0 === e && (e = new THREE.Matrix4()),
          e.makeScale(t, i, r),
          this.applyMatrix(e),
          this
        );
      };
    })(),
    lookAt: (function () {
      var e;
      return function (t) {
        void 0 === e && (e = new THREE.Object3D()),
          e.lookAt(t),
          e.updateMatrix(),
          this.applyMatrix(e.matrix);
      };
    })(),
    center: function () {
      this.computeBoundingBox();
      var e = this.boundingBox.center().negate();
      return this.translate(e.x, e.y, e.z), e;
    },
    setFromObject: function (e) {
      var t = e.geometry;
      if (e instanceof THREE.Points || e instanceof THREE.Line) {
        var i = new THREE.Float32Attribute(3 * t.vertices.length, 3),
          r = new THREE.Float32Attribute(3 * t.colors.length, 3);
        if (
          (this.addAttribute("position", i.copyVector3sArray(t.vertices)),
          this.addAttribute("color", r.copyColorsArray(t.colors)),
          t.lineDistances && t.lineDistances.length === t.vertices.length)
        ) {
          var n = new THREE.Float32Attribute(t.lineDistances.length, 1);
          this.addAttribute("lineDistance", n.copyArray(t.lineDistances));
        }
        null !== t.boundingSphere &&
          (this.boundingSphere = t.boundingSphere.clone()),
          null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone());
      } else
        e instanceof THREE.Mesh &&
          t instanceof THREE.Geometry &&
          this.fromGeometry(t);
      return this;
    },
    updateFromObject: function (e) {
      var t,
        i = e.geometry;
      if (e instanceof THREE.Mesh) {
        var r = i.__directGeometry;
        if (void 0 === r) return this.fromGeometry(i);
        (r.verticesNeedUpdate = i.verticesNeedUpdate),
          (r.normalsNeedUpdate = i.normalsNeedUpdate),
          (r.colorsNeedUpdate = i.colorsNeedUpdate),
          (r.uvsNeedUpdate = i.uvsNeedUpdate),
          (r.groupsNeedUpdate = i.groupsNeedUpdate),
          (i.verticesNeedUpdate = !1),
          (i.normalsNeedUpdate = !1),
          (i.colorsNeedUpdate = !1),
          (i.uvsNeedUpdate = !1),
          (i.groupsNeedUpdate = !1),
          (i = r);
      }
      !0 === i.verticesNeedUpdate &&
        (void 0 !== (t = this.attributes.position) &&
          (t.copyVector3sArray(i.vertices), (t.needsUpdate = !0)),
        (i.verticesNeedUpdate = !1));
      !0 === i.normalsNeedUpdate &&
        (void 0 !== (t = this.attributes.normal) &&
          (t.copyVector3sArray(i.normals), (t.needsUpdate = !0)),
        (i.normalsNeedUpdate = !1));
      !0 === i.colorsNeedUpdate &&
        (void 0 !== (t = this.attributes.color) &&
          (t.copyColorsArray(i.colors), (t.needsUpdate = !0)),
        (i.colorsNeedUpdate = !1));
      i.uvsNeedUpdate &&
        (void 0 !== (t = this.attributes.uv) &&
          (t.copyVector2sArray(i.uvs), (t.needsUpdate = !0)),
        (i.uvsNeedUpdate = !1));
      i.lineDistancesNeedUpdate &&
        (void 0 !== (t = this.attributes.lineDistance) &&
          (t.copyArray(i.lineDistances), (t.needsUpdate = !0)),
        (i.lineDistancesNeedUpdate = !1));
      return (
        i.groupsNeedUpdate &&
          (i.computeGroups(e.geometry),
          (this.groups = i.groups),
          (i.groupsNeedUpdate = !1)),
        this
      );
    },
    fromGeometry: function (e) {
      return (
        (e.__directGeometry = new THREE.DirectGeometry().fromGeometry(e)),
        this.fromDirectGeometry(e.__directGeometry)
      );
    },
    fromDirectGeometry: function (e) {
      var t = new Float32Array(3 * e.vertices.length);
      if (
        (this.addAttribute(
          "position",
          new THREE.BufferAttribute(t, 3).copyVector3sArray(e.vertices)
        ),
        e.normals.length > 0)
      ) {
        var i = new Float32Array(3 * e.normals.length);
        this.addAttribute(
          "normal",
          new THREE.BufferAttribute(i, 3).copyVector3sArray(e.normals)
        );
      }
      if (e.colors.length > 0) {
        var r = new Float32Array(3 * e.colors.length);
        this.addAttribute(
          "color",
          new THREE.BufferAttribute(r, 3).copyColorsArray(e.colors)
        );
      }
      if (e.uvs.length > 0) {
        var n = new Float32Array(2 * e.uvs.length);
        this.addAttribute(
          "uv",
          new THREE.BufferAttribute(n, 2).copyVector2sArray(e.uvs)
        );
      }
      if (e.uvs2.length > 0) {
        var o = new Float32Array(2 * e.uvs2.length);
        this.addAttribute(
          "uv2",
          new THREE.BufferAttribute(o, 2).copyVector2sArray(e.uvs2)
        );
      }
      if (e.indices.length > 0) {
        var a = new (e.vertices.length > 65535 ? Uint32Array : Uint16Array)(
          3 * e.indices.length
        );
        this.setIndex(
          new THREE.BufferAttribute(a, 1).copyIndicesArray(e.indices)
        );
      }
      for (var s in ((this.groups = e.groups), e.morphTargets)) {
        for (
          var l = [], h = e.morphTargets[s], c = 0, u = h.length;
          c < u;
          c++
        ) {
          var p = h[c],
            d = new THREE.Float32Attribute(3 * p.length, 3);
          l.push(d.copyVector3sArray(p));
        }
        this.morphAttributes[s] = l;
      }
      if (e.skinIndices.length > 0) {
        var f = new THREE.Float32Attribute(4 * e.skinIndices.length, 4);
        this.addAttribute("skinIndex", f.copyVector4sArray(e.skinIndices));
      }
      if (e.skinWeights.length > 0) {
        var m = new THREE.Float32Attribute(4 * e.skinWeights.length, 4);
        this.addAttribute("skinWeight", m.copyVector4sArray(e.skinWeights));
      }
      return (
        null !== e.boundingSphere &&
          (this.boundingSphere = e.boundingSphere.clone()),
        null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone()),
        this
      );
    },
    computeBoundingBox: (function () {
      new THREE.Vector3();
      return function () {
        null === this.boundingBox && (this.boundingBox = new THREE.Box3());
        var e = this.attributes.position.array;
        e && this.boundingBox.setFromArray(e),
          (void 0 !== e && 0 !== e.length) ||
            (this.boundingBox.min.set(0, 0, 0),
            this.boundingBox.max.set(0, 0, 0)),
          (isNaN(this.boundingBox.min.x) ||
            isNaN(this.boundingBox.min.y) ||
            isNaN(this.boundingBox.min.z)) &&
            console.error(
              'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
              this
            );
      };
    })(),
    computeBoundingSphere: (function () {
      var e = new THREE.Box3(),
        t = new THREE.Vector3();
      return function () {
        null === this.boundingSphere &&
          (this.boundingSphere = new THREE.Sphere());
        var i = this.attributes.position.array;
        if (i) {
          var r = this.boundingSphere.center;
          e.setFromArray(i), e.center(r);
          for (var n = 0, o = 0, a = i.length; o < a; o += 3)
            t.fromArray(i, o), (n = Math.max(n, r.distanceToSquared(t)));
          (this.boundingSphere.radius = Math.sqrt(n)),
            isNaN(this.boundingSphere.radius) &&
              console.error(
                'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
                this
              );
        }
      };
    })(),
    computeFaceNormals: function () {},
    computeVertexNormals: function () {
      var e = this.index,
        t = this.attributes,
        i = this.groups;
      if (t.position) {
        var r = t.position.array;
        if (void 0 === t.normal)
          this.addAttribute(
            "normal",
            new THREE.BufferAttribute(new Float32Array(r.length), 3)
          );
        else
          for (var n = t.normal.array, o = 0, a = n.length; o < a; o++)
            n[o] = 0;
        var s,
          l,
          h,
          c = t.normal.array,
          u = new THREE.Vector3(),
          p = new THREE.Vector3(),
          d = new THREE.Vector3(),
          f = new THREE.Vector3(),
          m = new THREE.Vector3();
        if (e) {
          var E = e.array;
          0 === i.length && this.addGroup(0, E.length);
          for (var g = 0, v = i.length; g < v; ++g) {
            var y = i[g],
              T = y.start;
            for (o = T, a = T + y.count; o < a; o += 3)
              (s = 3 * E[o + 0]),
                (l = 3 * E[o + 1]),
                (h = 3 * E[o + 2]),
                u.fromArray(r, s),
                p.fromArray(r, l),
                d.fromArray(r, h),
                f.subVectors(d, p),
                m.subVectors(u, p),
                f.cross(m),
                (c[s] += f.x),
                (c[s + 1] += f.y),
                (c[s + 2] += f.z),
                (c[l] += f.x),
                (c[l + 1] += f.y),
                (c[l + 2] += f.z),
                (c[h] += f.x),
                (c[h + 1] += f.y),
                (c[h + 2] += f.z);
          }
        } else
          for (o = 0, a = r.length; o < a; o += 9)
            u.fromArray(r, o),
              p.fromArray(r, o + 3),
              d.fromArray(r, o + 6),
              f.subVectors(d, p),
              m.subVectors(u, p),
              f.cross(m),
              (c[o] = f.x),
              (c[o + 1] = f.y),
              (c[o + 2] = f.z),
              (c[o + 3] = f.x),
              (c[o + 4] = f.y),
              (c[o + 5] = f.z),
              (c[o + 6] = f.x),
              (c[o + 7] = f.y),
              (c[o + 8] = f.z);
        this.normalizeNormals(), (t.normal.needsUpdate = !0);
      }
    },
    merge: function (e, t) {
      if (e instanceof THREE.BufferGeometry != !1) {
        void 0 === t && (t = 0);
        var i = this.attributes;
        for (var r in i)
          if (void 0 !== e.attributes[r])
            for (
              var n = i[r].array,
                o = e.attributes[r],
                a = o.array,
                s = 0,
                l = o.itemSize * t;
              s < a.length;
              s++, l++
            )
              n[l] = a[s];
        return this;
      }
      console.error(
        "THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",
        e
      );
    },
    normalizeNormals: function () {
      for (
        var e, t, i, r, n = this.attributes.normal.array, o = 0, a = n.length;
        o < a;
        o += 3
      )
        (e = n[o]),
          (t = n[o + 1]),
          (i = n[o + 2]),
          (r = 1 / Math.sqrt(e * e + t * t + i * i)),
          (n[o] *= r),
          (n[o + 1] *= r),
          (n[o + 2] *= r);
    },
    toNonIndexed: function () {
      if (null === this.index)
        return (
          console.warn(
            "THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."
          ),
          this
        );
      var e = new THREE.BufferGeometry(),
        t = this.index.array,
        i = this.attributes;
      for (var r in i) {
        for (
          var n = i[r],
            o = n.array,
            a = n.itemSize,
            s = new o.constructor(t.length * a),
            l = 0,
            h = 0,
            c = 0,
            u = t.length;
          c < u;
          c++
        ) {
          l = t[c] * a;
          for (var p = 0; p < a; p++) s[h++] = o[l++];
        }
        e.addAttribute(r, new THREE.BufferAttribute(s, a));
      }
      return e;
    },
    toJSON: function () {
      var e = {
        metadata: {
          version: 4.4,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON",
        },
      };
      if (
        ((e.uuid = this.uuid),
        (e.type = this.type),
        "" !== this.name && (e.name = this.name),
        void 0 !== this.parameters)
      ) {
        var t = this.parameters;
        for (var i in t) void 0 !== t[i] && (e[i] = t[i]);
        return e;
      }
      e.data = {
        attributes: {},
      };
      var r = this.index;
      if (null !== r) {
        var n = Array.prototype.slice.call(r.array);
        e.data.index = {
          type: r.array.constructor.name,
          array: n,
        };
      }
      var o = this.attributes;
      for (var i in o) {
        var a = o[i];
        n = Array.prototype.slice.call(a.array);
        e.data.attributes[i] = {
          itemSize: a.itemSize,
          type: a.array.constructor.name,
          array: n,
        };
      }
      var s = this.groups;
      s.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(s)));
      var l = this.boundingSphere;
      return (
        null !== l &&
          (e.data.boundingSphere = {
            center: l.center.toArray(),
            radius: l.radius,
          }),
        e
      );
    },
    clone: function () {
      return new THREE.BufferGeometry().copy(this);
    },
    copy: function (e) {
      var t = e.index;
      null !== t && this.setIndex(t.clone());
      var i = e.attributes;
      for (var r in i) {
        var n = i[r];
        this.addAttribute(r, n.clone());
      }
      for (var o = e.groups, a = 0, s = o.length; a < s; a++) {
        var l = o[a];
        this.addGroup(l.start, l.count);
      }
      return this;
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype),
  (THREE.BufferGeometry.MaxIndex = 65535),
  (THREE.InstancedBufferGeometry = function () {
    THREE.BufferGeometry.call(this),
      (this.type = "InstancedBufferGeometry"),
      (this.maxInstancedCount = void 0);
  }),
  (THREE.InstancedBufferGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.InstancedBufferGeometry.prototype.constructor =
    THREE.InstancedBufferGeometry),
  (THREE.InstancedBufferGeometry.prototype.addGroup = function (e, t, i) {
    this.groups.push({
      start: e,
      count: t,
      instances: i,
    });
  }),
  (THREE.InstancedBufferGeometry.prototype.copy = function (e) {
    var t = e.index;
    null !== t && this.setIndex(t.clone());
    var i = e.attributes;
    for (var r in i) {
      var n = i[r];
      this.addAttribute(r, n.clone());
    }
    for (var o = e.groups, a = 0, s = o.length; a < s; a++) {
      var l = o[a];
      this.addGroup(l.start, l.count, l.instances);
    }
    return this;
  }),
  THREE.EventDispatcher.prototype.apply(
    THREE.InstancedBufferGeometry.prototype
  ),
  (THREE.Uniform = function (e, t) {
    (this.type = e), (this.value = t), (this.dynamic = !1);
  }),
  (THREE.Uniform.prototype = {
    constructor: THREE.Uniform,
    onUpdate: function (e) {
      return (this.dynamic = !0), (this.onUpdateCallback = e), this;
    },
  }),
  (THREE.AnimationClip = function (e, t, i) {
    (this.name = e || THREE.Math.generateUUID()),
      (this.tracks = i),
      (this.duration = void 0 !== t ? t : -1),
      this.duration < 0 && this.resetDuration(),
      this.trim(),
      this.optimize();
  }),
  (THREE.AnimationClip.prototype = {
    constructor: THREE.AnimationClip,
    resetDuration: function () {
      for (var e = 0, t = 0, i = this.tracks.length; t !== i; ++t) {
        var r = this.tracks[t];
        e = Math.max(e, r.times[r.times.length - 1]);
      }
      this.duration = e;
    },
    trim: function () {
      for (var e = 0; e < this.tracks.length; e++)
        this.tracks[e].trim(0, this.duration);
      return this;
    },
    optimize: function () {
      for (var e = 0; e < this.tracks.length; e++) this.tracks[e].optimize();
      return this;
    },
  }),
  Object.assign(THREE.AnimationClip, {
    parse: function (e) {
      for (
        var t = [], i = e.tracks, r = 1 / (e.fps || 1), n = 0, o = i.length;
        n !== o;
        ++n
      )
        t.push(THREE.KeyframeTrack.parse(i[n]).scale(r));
      return new THREE.AnimationClip(e.name, e.duration, t);
    },
    toJSON: function (e) {
      for (
        var t = [],
          i = e.tracks,
          r = {
            name: e.name,
            duration: e.duration,
            tracks: t,
          },
          n = 0,
          o = i.length;
        n !== o;
        ++n
      )
        t.push(THREE.KeyframeTrack.toJSON(i[n]));
      return r;
    },
    CreateFromMorphTargetSequence: function (e, t, i) {
      for (var r = t.length, n = [], o = 0; o < r; o++) {
        var a = [],
          s = [];
        a.push((o + r - 1) % r, o, (o + 1) % r), s.push(0, 1, 0);
        var l = THREE.AnimationUtils.getKeyframeOrder(a);
        (a = THREE.AnimationUtils.sortedArray(a, 1, l)),
          (s = THREE.AnimationUtils.sortedArray(s, 1, l)),
          0 === a[0] && (a.push(r), s.push(s[0])),
          n.push(
            new THREE.NumberKeyframeTrack(
              ".morphTargetInfluences[" + t[o].name + "]",
              a,
              s
            ).scale(1 / i)
          );
      }
      return new THREE.AnimationClip(e, -1, n);
    },
    findByName: function (e, t) {
      for (var i = 0; i < e.length; i++) if (e[i].name === t) return e[i];
      return null;
    },
    CreateClipsFromMorphTargetSequences: function (e, t) {
      for (
        var i = {}, r = /^([\w-]*?)([\d]+)$/, n = 0, o = e.length;
        n < o;
        n++
      ) {
        var a = e[n],
          s = a.name.match(r);
        if (s && s.length > 1) {
          var l = i[(c = s[1])];
          l || (i[c] = l = []), l.push(a);
        }
      }
      var h = [];
      for (var c in i)
        h.push(THREE.AnimationClip.CreateFromMorphTargetSequence(c, i[c], t));
      return h;
    },
    parseAnimation: function (e, t) {
      if (!e) return console.error("  no animation in JSONLoader data"), null;
      for (
        var i = function (e, t, i, r, n) {
            if (0 !== i.length) {
              var o = [],
                a = [];
              THREE.AnimationUtils.flattenJSON(i, o, a, r),
                0 !== o.length && n.push(new e(t, o, a));
            }
          },
          r = [],
          n = e.name || "default",
          o = e.length || -1,
          a = e.fps || 30,
          s = e.hierarchy || [],
          l = 0;
        l < s.length;
        l++
      ) {
        var h = s[l].keys;
        if (h && 0 != h.length)
          if (h[0].morphTargets) {
            for (var c = {}, u = 0; u < h.length; u++)
              if (h[u].morphTargets)
                for (var p = 0; p < h[u].morphTargets.length; p++)
                  c[h[u].morphTargets[p]] = -1;
            for (var d in c) {
              var f = [],
                m = [];
              for (p = 0; p !== h[u].morphTargets.length; ++p) {
                var E = h[u];
                f.push(E.time), m.push(E.morphTarget === d ? 1 : 0);
              }
              r.push(
                new THREE.NumberKeyframeTrack(
                  ".morphTargetInfluence[" + d + "]",
                  f,
                  m
                )
              );
            }
            o = c.length * (a || 1);
          } else {
            var g = ".bones[" + t[l].name + "]";
            i(THREE.VectorKeyframeTrack, g + ".position", h, "pos", r),
              i(THREE.QuaternionKeyframeTrack, g + ".quaternion", h, "rot", r),
              i(THREE.VectorKeyframeTrack, g + ".scale", h, "scl", r);
          }
      }
      return 0 === r.length ? null : new THREE.AnimationClip(n, o, r);
    },
  }),
  (THREE.AnimationMixer = function (e) {
    (this._root = e),
      this._initMemoryManager(),
      (this._accuIndex = 0),
      (this.time = 0),
      (this.timeScale = 1);
  }),
  (THREE.AnimationMixer.prototype = {
    constructor: THREE.AnimationMixer,
    clipAction: function (e, t) {
      var i,
        r = (t || this._root).uuid,
        n = "string" == typeof e ? e : e.name,
        o = e !== n ? e : null,
        a = this._actionsByClip[n];
      if (void 0 !== a) {
        var s = a.actionByRoot[r];
        if (void 0 !== s) return s;
        if (((o = (i = a.knownActions[0])._clip), e !== n && e !== o))
          throw new Error("Different clips with the same name detected!");
      }
      if (null === o) return null;
      var l = new THREE.AnimationMixer._Action(this, o, t);
      return this._bindAction(l, i), this._addInactiveAction(l, n, r), l;
    },
    existingAction: function (e, t) {
      var i = (t || this._root).uuid,
        r = "string" == typeof e ? e : e.name,
        n = this._actionsByClip[r];
      return (void 0 !== n && n.actionByRoot[i]) || null;
    },
    stopAllAction: function () {
      var e = this._actions,
        t = this._nActiveActions,
        i = this._bindings,
        r = this._nActiveBindings;
      (this._nActiveActions = 0), (this._nActiveBindings = 0);
      for (var n = 0; n !== t; ++n) e[n].reset();
      for (n = 0; n !== r; ++n) i[n].useCount = 0;
      return this;
    },
    update: function (e) {
      e *= this.timeScale;
      for (
        var t = this._actions,
          i = this._nActiveActions,
          r = (this.time += e),
          n = Math.sign(e),
          o = (this._accuIndex ^= 1),
          a = 0;
        a !== i;
        ++a
      ) {
        var s = t[a];
        s.enabled && s._update(r, e, n, o);
      }
      var l = this._bindings,
        h = this._nActiveBindings;
      for (a = 0; a !== h; ++a) l[a].apply(o);
      return this;
    },
    getRoot: function () {
      return this._root;
    },
    uncacheClip: function (e) {
      var t = this._actions,
        i = e.name,
        r = this._actionsByClip,
        n = r[i];
      if (void 0 !== n) {
        for (var o = n.knownActions, a = 0, s = o.length; a !== s; ++a) {
          var l = o[a];
          this._deactivateAction(l);
          var h = l._cacheIndex,
            c = t[t.length - 1];
          (l._cacheIndex = null),
            (l._byClipCacheIndex = null),
            (c._cacheIndex = h),
            (t[h] = c),
            t.pop(),
            this._removeInactiveBindingsForAction(l);
        }
        delete r[i];
      }
    },
    uncacheRoot: function (e) {
      var t = e.uuid,
        i = this._actionsByClip;
      for (var r in i) {
        var n = i[r].actionByRoot[t];
        void 0 !== n &&
          (this._deactivateAction(n), this._removeInactiveAction(n));
      }
      var o = this._bindingsByRootAndName[t];
      if (void 0 !== o)
        for (var a in o) {
          var s = o[a];
          s.restoreOriginalState(), this._removeInactiveBinding(s);
        }
    },
    uncacheAction: function (e, t) {
      var i = this.existingAction(e, t);
      null !== i && (this._deactivateAction(i), this._removeInactiveAction(i));
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.AnimationMixer.prototype),
  (THREE.AnimationMixer._Action = function (e, t, i) {
    (this._mixer = e), (this._clip = t), (this._localRoot = i || null);
    for (
      var r = t.tracks,
        n = r.length,
        o = new Array(n),
        a = {
          endingStart: THREE.ZeroCurvatureEnding,
          endingEnd: THREE.ZeroCurvatureEnding,
        },
        s = 0;
      s !== n;
      ++s
    ) {
      var l = r[s].createInterpolant(null);
      (o[s] = l), (l.settings = a);
    }
    (this._interpolantSettings = a),
      (this._interpolants = o),
      (this._propertyBindings = new Array(n)),
      (this._cacheIndex = null),
      (this._byClipCacheIndex = null),
      (this._timeScaleInterpolant = null),
      (this._weightInterpolant = null),
      (this.loop = THREE.LoopRepeat),
      (this._loopCount = -1),
      (this._startTime = null),
      (this.time = 0),
      (this.timeScale = 1),
      (this._effectiveTimeScale = 1),
      (this.weight = 1),
      (this._effectiveWeight = 1),
      (this.repetitions = 1 / 0),
      (this.paused = !1),
      (this.enabled = !0),
      (this.clampWhenFinished = !1),
      (this.zeroSlopeAtStart = !0),
      (this.zeroSlopeAtEnd = !0);
  }),
  (THREE.AnimationMixer._Action.prototype = {
    constructor: THREE.AnimationMixer._Action,
    play: function () {
      return this._mixer._activateAction(this), this;
    },
    stop: function () {
      return this._mixer._deactivateAction(this), this.reset();
    },
    reset: function () {
      return (
        (this.paused = !1),
        (this.enabled = !0),
        (this.time = 0),
        (this._loopCount = -1),
        (this._startTime = null),
        this.stopFading().stopWarping()
      );
    },
    isRunning: function () {
      this._startTime;
      return (
        this.enabled &&
        !this.paused &&
        0 !== this.timeScale &&
        null === this._startTime &&
        this._mixer._isActiveAction(this)
      );
    },
    isScheduled: function () {
      return this._mixer._isActiveAction(this);
    },
    startAt: function (e) {
      return (this._startTime = e), this;
    },
    setLoop: function (e, t) {
      return (this.loop = e), (this.repetitions = t), this;
    },
    setEffectiveWeight: function (e) {
      return (
        (this.weight = e),
        (this._effectiveWeight = this.enabled ? e : 0),
        this.stopFading()
      );
    },
    getEffectiveWeight: function () {
      return this._effectiveWeight;
    },
    fadeIn: function (e) {
      return this._scheduleFading(e, 0, 1);
    },
    fadeOut: function (e) {
      return this._scheduleFading(e, 1, 0);
    },
    crossFadeFrom: function (e, t, i) {
      this._mixer;
      if ((e.fadeOut(t), this.fadeIn(t), i)) {
        var r = this._clip.duration,
          n = e._clip.duration,
          o = n / r,
          a = r / n;
        e.warp(1, o, t), this.warp(a, 1, t);
      }
      return this;
    },
    crossFadeTo: function (e, t, i) {
      return e.crossFadeFrom(this, t, i);
    },
    stopFading: function () {
      var e = this._weightInterpolant;
      return (
        null !== e &&
          ((this._weightInterpolant = null),
          this._mixer._takeBackControlInterpolant(e)),
        this
      );
    },
    setEffectiveTimeScale: function (e) {
      return (
        (this.timeScale = e),
        (this._effectiveTimeScale = this.paused ? 0 : e),
        this.stopWarping()
      );
    },
    getEffectiveTimeScale: function () {
      return this._effectiveTimeScale;
    },
    setDuration: function (e) {
      return (this.timeScale = this._clip.duration / e), this.stopWarping();
    },
    syncWith: function (e) {
      return (
        (this.time = e.time), (this.timeScale = e.timeScale), this.stopWarping()
      );
    },
    halt: function (e) {
      return this.warp(this._currentTimeScale, 0, e);
    },
    warp: function (e, t, i) {
      var r = this._mixer,
        n = r.time,
        o = this._timeScaleInterpolant,
        a = this.timeScale;
      null === o &&
        ((o = r._lendControlInterpolant()), (this._timeScaleInterpolant = o));
      var s = o.parameterPositions,
        l = o.sampleValues;
      return (s[0] = n), (s[1] = n + i), (l[0] = e / a), (l[1] = t / a), this;
    },
    stopWarping: function () {
      var e = this._timeScaleInterpolant;
      return (
        null !== e &&
          ((this._timeScaleInterpolant = null),
          this._mixer._takeBackControlInterpolant(e)),
        this
      );
    },
    getMixer: function () {
      return this._mixer;
    },
    getClip: function () {
      return this._clip;
    },
    getRoot: function () {
      return this._localRoot || this._mixer._root;
    },
    _update: function (e, t, i, r) {
      var n = this._startTime;
      if (null !== n) {
        var o = (e - n) * i;
        if (o < 0 || 0 === i) return;
        (this._startTime = null), (t = i * o);
      }
      t *= this._updateTimeScale(e);
      var a = this._updateTime(t),
        s = this._updateWeight(e);
      if (s > 0)
        for (
          var l = this._interpolants,
            h = this._propertyBindings,
            c = 0,
            u = l.length;
          c !== u;
          ++c
        )
          l[c].evaluate(a), h[c].accumulate(r, s);
    },
    _updateWeight: function (e) {
      var t = 0;
      if (this.enabled) {
        t = this.weight;
        var i = this._weightInterpolant;
        if (null !== i) {
          var r = i.evaluate(e)[0];
          (t *= r),
            e > i.parameterPositions[1] &&
              (this.stopFading(), 0 === r && (this.enabled = !1));
        }
      }
      return (this._effectiveWeight = t), t;
    },
    _updateTimeScale: function (e) {
      var t = 0;
      if (!this.paused) {
        t = this.timeScale;
        var i = this._timeScaleInterpolant;
        if (null !== i)
          (t *= i.evaluate(e)[0]),
            e > i.parameterPositions[1] &&
              (this.stopWarping(),
              0 === t ? (this.pause = !0) : (this.timeScale = t));
      }
      return (this._effectiveTimeScale = t), t;
    },
    _updateTime: function (e) {
      var t = this.time + e;
      if (0 === e) return t;
      var i = this._clip.duration,
        r = this.loop,
        n = this._loopCount,
        o = !1;
      switch (r) {
        case THREE.LoopOnce:
          if (
            (-1 === n && ((this.loopCount = 0), this._setEndings(!0, !0, !1)),
            t >= i)
          )
            t = i;
          else {
            if (!(t < 0)) break;
            t = 0;
          }
          this.clampWhenFinished ? (this.pause = !0) : (this.enabled = !1),
            this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: e < 0 ? -1 : 1,
            });
          break;
        case THREE.LoopPingPong:
          o = !0;
        case THREE.LoopRepeat:
          if (
            (-1 === n &&
              (e > 0
                ? ((n = 0), this._setEndings(!0, 0 === this.repetitions, o))
                : this._setEndings(0 === this.repetitions, !0, o)),
            t >= i || t < 0)
          ) {
            var a = Math.floor(t / i);
            (t -= i * a), (n += Math.abs(a));
            var s = this.repetitions - n;
            if (s < 0) {
              this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1),
                (t = e > 0 ? i : 0),
                this._mixer.dispatchEvent({
                  type: "finished",
                  action: this,
                  direction: e > 0 ? 1 : -1,
                });
              break;
            }
            if (0 === s) {
              var l = e < 0;
              this._setEndings(l, !l, o);
            } else this._setEndings(!1, !1, o);
            (this._loopCount = n),
              this._mixer.dispatchEvent({
                type: "loop",
                action: this,
                loopDelta: a,
              });
          }
          if (r === THREE.LoopPingPong && 1 == (1 & n))
            return (this.time = t), i - t;
      }
      return (this.time = t), t;
    },
    _setEndings: function (e, t, i) {
      var r = this._interpolantSettings;
      i
        ? ((r.endingStart = THREE.ZeroSlopeEnding),
          (r.endingEnd = THREE.ZeroSlopeEnding))
        : ((r.endingStart = e
            ? this.zeroSlopeAtStart
              ? THREE.ZeroSlopeEnding
              : THREE.ZeroCurvatureEnding
            : THREE.WrapAroundEnding),
          (r.endingEnd = t
            ? this.zeroSlopeAtEnd
              ? THREE.ZeroSlopeEnding
              : THREE.ZeroCurvatureEnding
            : THREE.WrapAroundEnding));
    },
    _scheduleFading: function (e, t, i) {
      var r = this._mixer,
        n = r.time,
        o = this._weightInterpolant;
      null === o &&
        ((o = r._lendControlInterpolant()), (this._weightInterpolant = o));
      var a = o.parameterPositions,
        s = o.sampleValues;
      return (a[0] = n), (s[0] = t), (a[1] = n + e), (s[1] = i), this;
    },
  }),
  Object.assign(THREE.AnimationMixer.prototype, {
    _bindAction: function (e, t) {
      var i = e._localRoot || this._root,
        r = e._clip.tracks,
        n = r.length,
        o = e._propertyBindings,
        a = e._interpolants,
        s = i.uuid,
        l = this._bindingsByRootAndName,
        h = l[s];
      void 0 === h && ((h = {}), (l[s] = h));
      for (var c = 0; c !== n; ++c) {
        var u = r[c],
          p = u.name,
          d = h[p];
        if (void 0 !== d) o[c] = d;
        else {
          if (void 0 !== (d = o[c])) {
            null === d._cacheIndex &&
              (++d.referenceCount, this._addInactiveBinding(d, s, p));
            continue;
          }
          var f = t && t._propertyBindings[c].binding.parsedPath;
          ++(d = new THREE.PropertyMixer(
            THREE.PropertyBinding.create(i, p, f),
            u.ValueTypeName,
            u.getValueSize()
          )).referenceCount,
            this._addInactiveBinding(d, s, p),
            (o[c] = d);
        }
        a[c].resultBuffer = d.buffer;
      }
    },
    _activateAction: function (e) {
      if (!this._isActiveAction(e)) {
        if (null === e._cacheIndex) {
          var t = (e._localRoot || this._root).uuid,
            i = e._clip.name,
            r = this._actionsByClip[i];
          this._bindAction(e, r && r.knownActions[0]),
            this._addInactiveAction(e, i, t);
        }
        for (var n = e._propertyBindings, o = 0, a = n.length; o !== a; ++o) {
          var s = n[o];
          0 == s.useCount++ && (this._lendBinding(s), s.saveOriginalState());
        }
        this._lendAction(e);
      }
    },
    _deactivateAction: function (e) {
      if (this._isActiveAction(e)) {
        for (var t = e._propertyBindings, i = 0, r = t.length; i !== r; ++i) {
          var n = t[i];
          0 == --n.useCount &&
            (n.restoreOriginalState(), this._takeBackBinding(n));
        }
        this._takeBackAction(e);
      }
    },
    _initMemoryManager: function () {
      (this._actions = []),
        (this._nActiveActions = 0),
        (this._actionsByClip = {}),
        (this._bindings = []),
        (this._nActiveBindings = 0),
        (this._bindingsByRootAndName = {}),
        (this._controlInterpolants = []),
        (this._nActiveControlInterpolants = 0);
      var e = this;
      this.stats = {
        actions: {
          get total() {
            return e._actions.length;
          },
          get inUse() {
            return e._nActiveActions;
          },
        },
        bindings: {
          get total() {
            return e._bindings.length;
          },
          get inUse() {
            return e._nActiveBindings;
          },
        },
        controlInterpolants: {
          get total() {
            return e._controlInterpolants.length;
          },
          get inUse() {
            return e._nActiveControlInterpolants;
          },
        },
      };
    },
    _isActiveAction: function (e) {
      var t = e._cacheIndex;
      return null !== t && t < this._nActiveActions;
    },
    _addInactiveAction: function (e, t, i) {
      var r = this._actions,
        n = this._actionsByClip,
        o = n[t];
      if (void 0 === o)
        (o = {
          knownActions: [e],
          actionByRoot: {},
        }),
          (e._byClipCacheIndex = 0),
          (n[t] = o);
      else {
        var a = o.knownActions;
        (e._byClipCacheIndex = a.length), a.push(e);
      }
      (e._cacheIndex = r.length), r.push(e), (o.actionByRoot[i] = e);
    },
    _removeInactiveAction: function (e) {
      var t = this._actions,
        i = t[t.length - 1],
        r = e._cacheIndex;
      (i._cacheIndex = r), (t[r] = i), t.pop(), (e._cacheIndex = null);
      var n = e._clip.name,
        o = this._actionsByClip,
        a = o[n],
        s = a.knownActions,
        l = s[s.length - 1],
        h = e._byClipCacheIndex;
      (l._byClipCacheIndex = h),
        (s[h] = l),
        s.pop(),
        (e._byClipCacheIndex = null),
        delete a.actionByRoot[(t._localRoot || this._root).uuid],
        0 === s.length && delete o[n],
        this._removeInactiveBindingsForAction(e);
    },
    _removeInactiveBindingsForAction: function (e) {
      for (var t = e._propertyBindings, i = 0, r = t.length; i !== r; ++i) {
        var n = t[i];
        0 == --n.referenceCount && this._removeInactiveBinding(n);
      }
    },
    _lendAction: function (e) {
      var t = this._actions,
        i = e._cacheIndex,
        r = this._nActiveActions++,
        n = t[r];
      (e._cacheIndex = r), (t[r] = e), (n._cacheIndex = i), (t[i] = n);
    },
    _takeBackAction: function (e) {
      var t = this._actions,
        i = e._cacheIndex,
        r = --this._nActiveActions,
        n = t[r];
      (e._cacheIndex = r), (t[r] = e), (n._cacheIndex = i), (t[i] = n);
    },
    _addInactiveBinding: function (e, t, i) {
      var r = this._bindingsByRootAndName,
        n = r[t],
        o = this._bindings;
      void 0 === n && ((n = {}), (r[t] = n)),
        (n[i] = e),
        (e._cacheIndex = o.length),
        o.push(e);
    },
    _removeInactiveBinding: function (e) {
      var t = this._bindings,
        i = e.binding,
        r = i.rootNode.uuid,
        n = i.path,
        o = this._bindingsByRootAndName,
        a = o[r],
        s = t[t.length - 1],
        l = e._cacheIndex;
      (s._cacheIndex = l), (t[l] = s), t.pop(), delete a[n];
      e: {
        for (var h in a) break e;
        delete o[r];
      }
    },
    _lendBinding: function (e) {
      var t = this._bindings,
        i = e._cacheIndex,
        r = this._nActiveBindings++,
        n = t[r];
      (e._cacheIndex = r), (t[r] = e), (n._cacheIndex = i), (t[i] = n);
    },
    _takeBackBinding: function (e) {
      var t = this._bindings,
        i = e._cacheIndex,
        r = --this._nActiveBindings,
        n = t[r];
      (e._cacheIndex = r), (t[r] = e), (n._cacheIndex = i), (t[i] = n);
    },
    _lendControlInterpolant: function () {
      var e = this._controlInterpolants,
        t = this._nActiveControlInterpolants++,
        i = e[t];
      return (
        void 0 === i &&
          (((i = new THREE.LinearInterpolant(
            new Float32Array(2),
            new Float32Array(2),
            1,
            this._controlInterpolantsResultBuffer
          )).__cacheIndex = t),
          (e[t] = i)),
        i
      );
    },
    _takeBackControlInterpolant: function (e) {
      var t = this._controlInterpolants,
        i = e.__cacheIndex,
        r = --this._nActiveControlInterpolants,
        n = t[r];
      (e.__cacheIndex = r), (t[r] = e), (n.__cacheIndex = i), (t[i] = n);
    },
    _controlInterpolantsResultBuffer: new Float32Array(1),
  }),
  (THREE.AnimationObjectGroup = function (e) {
    (this.uuid = THREE.Math.generateUUID()),
      (this._objects = Array.prototype.slice.call(arguments)),
      (this.nCachedObjects_ = 0);
    var t = {};
    this._indicesByUUID = t;
    for (var i = 0, r = arguments.length; i !== r; ++i)
      t[arguments[i].uuid] = i;
    (this._paths = []),
      (this._parsedPaths = []),
      (this._bindings = []),
      (this._bindingsIndicesByPath = {});
    var n = this;
    this.stats = {
      objects: {
        get total() {
          return n._objects.length;
        },
        get inUse() {
          return this.total - n.nCachedObjects_;
        },
      },
      get bindingsPerObject() {
        return n._bindings.length;
      },
    };
  }),
  (THREE.AnimationObjectGroup.prototype = {
    constructor: THREE.AnimationObjectGroup,
    add: function (e) {
      for (
        var t = this._objects,
          i = t.length,
          r = this.nCachedObjects_,
          n = this._indicesByUUID,
          o = this._paths,
          a = this._parsedPaths,
          s = this._bindings,
          l = s.length,
          h = 0,
          c = arguments.length;
        h !== c;
        ++h
      ) {
        var u = arguments[h],
          p = u.uuid,
          d = n[p];
        if (void 0 === d) {
          (d = i++), (n[p] = d), t.push(u);
          for (var f = 0, m = l; f !== m; ++f)
            s[f].push(new THREE.PropertyBinding(u, o[f], a[f]));
        } else if (d < r) {
          var E = t[d],
            g = --r,
            v = t[g];
          (n[v.uuid] = d), (t[d] = v), (n[p] = g), (t[g] = u);
          for (f = 0, m = l; f !== m; ++f) {
            var y = s[f],
              T = y[g],
              R = y[d];
            (y[d] = T),
              void 0 === R && (R = new THREE.PropertyBinding(u, o[f], a[f])),
              (y[g] = R);
          }
        } else
          t[d] !== E &&
            console.error(
              "Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes..."
            );
      }
      this.nCachedObjects_ = r;
    },
    remove: function (e) {
      for (
        var t = this._objects,
          i = (t.length, this.nCachedObjects_),
          r = this._indicesByUUID,
          n = this._bindings,
          o = n.length,
          a = 0,
          s = arguments.length;
        a !== s;
        ++a
      ) {
        var l = arguments[a],
          h = l.uuid,
          c = r[h];
        if (void 0 !== c && c >= i) {
          var u = i++,
            p = t[u];
          (r[p.uuid] = c), (t[c] = p), (r[h] = u), (t[u] = l);
          for (var d = 0, f = o; d !== f; ++d) {
            var m = n[d],
              E = m[u],
              g = m[c];
            (m[c] = E), (m[u] = g);
          }
        }
      }
      this.nCachedObjects_ = i;
    },
    uncache: function (e) {
      for (
        var t = this._objects,
          i = t.length,
          r = this.nCachedObjects_,
          n = this._indicesByUUID,
          o = this._bindings,
          a = o.length,
          s = 0,
          l = arguments.length;
        s !== l;
        ++s
      ) {
        var h = arguments[s].uuid,
          c = n[h];
        if (void 0 !== c)
          if ((delete n[h], c < r)) {
            var u = --r,
              p = t[u],
              d = t[(v = --i)];
            (n[p.uuid] = c), (t[c] = p), (n[d.uuid] = u), (t[u] = d), t.pop();
            for (var f = 0, m = a; f !== m; ++f) {
              var E = (y = o[f])[u],
                g = y[v];
              (y[c] = E), (y[u] = g), y.pop();
            }
          } else {
            var v;
            (n[(d = t[(v = --i)]).uuid] = c), (t[c] = d), t.pop();
            for (f = 0, m = a; f !== m; ++f) {
              var y;
              ((y = o[f])[c] = y[v]), y.pop();
            }
          }
      }
      this.nCachedObjects_ = r;
    },
    subscribe_: function (e, t) {
      var i = this._bindingsIndicesByPath,
        r = i[e],
        n = this._bindings;
      if (void 0 !== r) return n[r];
      var o = this._paths,
        a = this._parsedPaths,
        s = this._objects,
        l = s.length,
        h = this.nCachedObjects_,
        c = new Array(l);
      (r = n.length), (i[e] = r), o.push(e), a.push(t), n.push(c);
      for (var u = h, p = s.length; u !== p; ++u) {
        var d = s[u];
        c[u] = new THREE.PropertyBinding(d, e, t);
      }
      return c;
    },
    unsubscribe_: function (e) {
      var t = this._bindingsIndicesByPath,
        i = t[e];
      if (void 0 !== i) {
        var r = this._paths,
          n = this._parsedPaths,
          o = this._bindings,
          a = o.length - 1,
          s = o[a];
        (t[e[a]] = i),
          (o[i] = s),
          o.pop(),
          (n[i] = n[a]),
          n.pop(),
          (r[i] = r[a]),
          r.pop();
      }
    },
  }),
  (THREE.AnimationUtils = {
    arraySlice: function (e, t, i) {
      return THREE.AnimationUtils.isTypedArray(e)
        ? new e.constructor(e.subarray(t, i))
        : e.slice(t, i);
    },
    convertArray: function (e, t, i) {
      return !e || (!i && e.constructor === t)
        ? e
        : "number" == typeof t.BYTES_PER_ELEMENT
        ? new t(e)
        : Array.prototype.slice.call(e);
    },
    isTypedArray: function (e) {
      return ArrayBuffer.isView(e) && !(e instanceof DataView);
    },
    getKeyframeOrder: function (e) {
      function t(t, i) {
        return e[t] - e[i];
      }
      for (var i = e.length, r = new Array(i), n = 0; n !== i; ++n) r[n] = n;
      return r.sort(t), r;
    },
    sortedArray: function (e, t, i) {
      for (
        var r = e.length, n = new e.constructor(r), o = 0, a = 0;
        a !== r;
        ++o
      )
        for (var s = i[o] * t, l = 0; l !== t; ++l) n[a++] = e[s + l];
      return n;
    },
    flattenJSON: function (e, t, i, r) {
      for (var n = 1, o = e[0]; void 0 !== o && void 0 === o[r]; ) o = e[n++];
      if (void 0 !== o) {
        var a = o[r];
        if (void 0 !== a)
          if (Array.isArray(a))
            do {
              void 0 !== (a = o[r]) && (t.push(o.time), i.push.apply(i, a)),
                (o = e[n++]);
            } while (void 0 !== o);
          else if (void 0 !== a.toArray)
            do {
              void 0 !== (a = o[r]) && (t.push(o.time), a.toArray(i, i.length)),
                (o = e[n++]);
            } while (void 0 !== o);
          else
            do {
              void 0 !== (a = o[r]) && (t.push(o.time), i.push(a)),
                (o = e[n++]);
            } while (void 0 !== o);
      }
    },
  }),
  (THREE.KeyframeTrack = function (e, t, i, r) {
    if (void 0 === e) throw new Error("track name is undefined");
    if (void 0 === t || 0 === t.length)
      throw new Error("no keyframes in track named " + e);
    (this.name = e),
      (this.times = THREE.AnimationUtils.convertArray(t, this.TimeBufferType)),
      (this.values = THREE.AnimationUtils.convertArray(
        i,
        this.ValueBufferType
      )),
      this.setInterpolation(r || this.DefaultInterpolation),
      this.validate(),
      this.optimize();
  }),
  (THREE.KeyframeTrack.prototype = {
    constructor: THREE.KeyframeTrack,
    TimeBufferType: Float32Array,
    ValueBufferType: Float32Array,
    DefaultInterpolation: THREE.InterpolateLinear,
    InterpolantFactoryMethodDiscrete: function (e) {
      return new THREE.DiscreteInterpolant(
        this.times,
        this.values,
        this.getValueSize(),
        e
      );
    },
    InterpolantFactoryMethodLinear: function (e) {
      return new THREE.LinearInterpolant(
        this.times,
        this.values,
        this.getValueSize(),
        e
      );
    },
    InterpolantFactoryMethodSmooth: function (e) {
      return new THREE.CubicInterpolant(
        this.times,
        this.values,
        this.getValueSize(),
        e
      );
    },
    setInterpolation: function (e) {
      var t = void 0;
      switch (e) {
        case THREE.InterpolateDiscrete:
          t = this.InterpolantFactoryMethodDiscrete;
          break;
        case THREE.InterpolateLinear:
          t = this.InterpolantFactoryMethodLinear;
          break;
        case THREE.InterpolateSmooth:
          t = this.InterpolantFactoryMethodSmooth;
      }
      if (void 0 !== t) this.createInterpolant = t;
      else {
        var i =
          "unsupported interpolation for " +
          this.ValueTypeName +
          " keyframe track named " +
          this.name;
        if (void 0 === this.createInterpolant) {
          if (e === this.DefaultInterpolation) throw new Error(i);
          this.setInterpolation(this.DefaultInterpolation);
        }
        console.warn(i);
      }
    },
    getInterpolation: function () {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return THREE.InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return THREE.InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return THREE.InterpolateSmooth;
      }
    },
    getValueSize: function () {
      return this.values.length / this.times.length;
    },
    shift: function (e) {
      if (0 !== e)
        for (var t = this.times, i = 0, r = t.length; i !== r; ++i) t[i] += e;
      return this;
    },
    scale: function (e) {
      if (1 !== e)
        for (var t = this.times, i = 0, r = t.length; i !== r; ++i) t[i] *= e;
      return this;
    },
    trim: function (e, t) {
      for (
        var i = this.times, r = i.length, n = 0, o = r - 1;
        n !== r && i[n] < e;

      )
        ++n;
      for (; -1 !== o && i[o] > t; ) --o;
      if ((++o, 0 !== n || o !== r)) {
        n >= o && (n = (o = Math.max(o, 1)) - 1);
        var a = this.getValueSize();
        (this.times = THREE.AnimationUtils.arraySlice(i, n, o)),
          (this.values = THREE.AnimationUtils.arraySlice(
            this.values,
            n * a,
            o * a
          ));
      }
      return this;
    },
    validate: function () {
      var e = !0,
        t = this.getValueSize();
      t - Math.floor(t) != 0 &&
        (console.error("invalid value size in track", this), (e = !1));
      var i = this.times,
        r = this.values,
        n = i.length;
      0 === n && (console.error("track is empty", this), (e = !1));
      for (var o = null, a = 0; a !== n; a++) {
        var s = i[a];
        if ("number" == typeof s && isNaN(s)) {
          console.error("time is not a valid number", this, a, s), (e = !1);
          break;
        }
        if (null !== o && o > s) {
          console.error("out of order keys", this, a, s, o), (e = !1);
          break;
        }
        o = s;
      }
      if (void 0 !== r && THREE.AnimationUtils.isTypedArray(r)) {
        a = 0;
        for (var l = r.length; a !== l; ++a) {
          var h = r[a];
          if (isNaN(h)) {
            console.error("value is not a valid number", this, a, h), (e = !1);
            break;
          }
        }
      }
      return e;
    },
    optimize: function () {
      for (
        var e = this.times,
          t = this.values,
          i = this.getValueSize(),
          r = 1,
          n = 1,
          o = e.length - 1;
        n <= o;
        ++n
      ) {
        var a = !1,
          s = e[n];
        if (s !== e[n + 1] && (1 !== n || s !== s[0]))
          for (var l = n * i, h = l - i, c = l + i, u = 0; u !== i; ++u) {
            var p = t[l + u];
            if (p !== t[h + u] || p !== t[c + u]) {
              a = !0;
              break;
            }
          }
        if (a) {
          if (n !== r) {
            e[r] = e[n];
            var d = n * i,
              f = r * i;
            for (u = 0; u !== i; ++u) t[f + u] = t[d + u];
          }
          ++r;
        }
      }
      return (
        r !== e.length &&
          ((this.times = THREE.AnimationUtils.arraySlice(e, 0, r)),
          (this.values = THREE.AnimationUtils.arraySlice(t, 0, r * i))),
        this
      );
    },
  }),
  Object.assign(THREE.KeyframeTrack, {
    parse: function (e) {
      if (void 0 === e.type)
        throw new Error("track type undefined, can not parse");
      var t = THREE.KeyframeTrack._getTrackTypeForValueTypeName(e.type);
      if (void 0 === e.times) {
        console.warn("legacy JSON format detected, converting");
        var i = [],
          r = [];
        THREE.AnimationUtils.flattenJSON(e.keys, i, r, "value"),
          (e.times = i),
          (e.values = r);
      }
      return void 0 !== t.parse
        ? t.parse(e)
        : new t(e.name, e.times, e.values, e.interpolation);
    },
    toJSON: function (e) {
      var t,
        i = e.constructor;
      if (void 0 !== i.toJSON) t = i.toJSON(e);
      else {
        t = {
          name: e.name,
          times: THREE.AnimationUtils.convertArray(e.times, Array),
          values: THREE.AnimationUtils.convertArray(e.values, Array),
        };
        var r = e.getInterpolation();
        r !== e.DefaultInterpolation && (t.interpolation = r);
      }
      return (t.type = e.ValueTypeName), t;
    },
    _getTrackTypeForValueTypeName: function (e) {
      switch (e.toLowerCase()) {
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
          return THREE.NumberKeyframeTrack;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
          return THREE.VectorKeyframeTrack;
        case "color":
          return THREE.ColorKeyframeTrack;
        case "quaternion":
          return THREE.QuaternionKeyframeTrack;
        case "bool":
        case "boolean":
          return THREE.BooleanKeyframeTrack;
        case "string":
          return THREE.StringKeyframeTrack;
      }
      throw new Error("Unsupported typeName: " + e);
    },
  }),
  (THREE.PropertyBinding = function (e, t, i) {
    (this.path = t),
      (this.parsedPath = i || THREE.PropertyBinding.parseTrackName(t)),
      (this.node =
        THREE.PropertyBinding.findNode(e, this.parsedPath.nodeName) || e),
      (this.rootNode = e);
  }),
  (THREE.PropertyBinding.prototype = {
    constructor: THREE.PropertyBinding,
    getValue: function (e, t) {
      this.bind(), this.getValue(e, t);
    },
    setValue: function (e, t) {
      this.bind(), this.setValue(e, t);
    },
    bind: function () {
      var e = this.node,
        t = this.parsedPath,
        i = t.objectName,
        r = t.propertyName,
        n = t.propertyIndex;
      if (
        (e ||
          ((e =
            THREE.PropertyBinding.findNode(this.rootNode, t.nodeName) ||
            this.rootNode),
          (this.node = e)),
        (this.getValue = this._getValue_unavailable),
        (this.setValue = this._setValue_unavailable),
        e)
      ) {
        if (i) {
          var o = t.objectIndex;
          switch (i) {
            case "materials":
              if (!e.material)
                return void console.error(
                  "  can not bind to material as node does not have a material",
                  this
                );
              if (!e.material.materials)
                return void console.error(
                  "  can not bind to material.materials as node.material does not have a materials array",
                  this
                );
              e = e.material.materials;
              break;
            case "bones":
              if (!e.skeleton)
                return void console.error(
                  "  can not bind to bones as node does not have a skeleton",
                  this
                );
              e = e.skeleton.bones;
              for (var a = 0; a < e.length; a++)
                if (e[a].name === o) {
                  o = a;
                  break;
                }
              break;
            default:
              if (void 0 === e[i])
                return void console.error(
                  "  can not bind to objectName of node, undefined",
                  this
                );
              e = e[i];
          }
          if (void 0 !== o) {
            if (void 0 === e[o])
              return void console.error(
                "  trying to bind to objectIndex of objectName, but is undefined:",
                this,
                e
              );
            e = e[o];
          }
        }
        var s = e[r];
        if (s) {
          var l = this.Versioning.None;
          void 0 !== e.needsUpdate
            ? ((l = this.Versioning.NeedsUpdate), (this.targetObject = e))
            : void 0 !== e.matrixWorldNeedsUpdate &&
              ((l = this.Versioning.MatrixWorldNeedsUpdate),
              (this.targetObject = e));
          var h = this.BindingType.Direct;
          if (void 0 !== n) {
            if ("morphTargetInfluences" === r) {
              if (!e.geometry)
                return void console.error(
                  "  can not bind to morphTargetInfluences becasuse node does not have a geometry",
                  this
                );
              if (!e.geometry.morphTargets)
                return void console.error(
                  "  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",
                  this
                );
              for (a = 0; a < this.node.geometry.morphTargets.length; a++)
                if (e.geometry.morphTargets[a].name === n) {
                  n = a;
                  break;
                }
            }
            (h = this.BindingType.ArrayElement),
              (this.resolvedProperty = s),
              (this.propertyIndex = n);
          } else
            void 0 !== s.fromArray && void 0 !== s.toArray
              ? ((h = this.BindingType.HasFromToArray),
                (this.resolvedProperty = s))
              : void 0 !== s.length
              ? ((h = this.BindingType.EntireArray),
                (this.resolvedProperty = s))
              : (this.propertyName = r);
          (this.getValue = this.GetterByBindingType[h]),
            (this.setValue = this.SetterByBindingTypeAndVersioning[h][l]);
        } else {
          var c = t.nodeName;
          console.error(
            "  trying to update property for track: " +
              c +
              "." +
              r +
              " but it wasn't found.",
            e
          );
        }
      } else
        console.error(
          "  trying to update node for track: " +
            this.path +
            " but it wasn't found."
        );
    },
    unbind: function () {
      (this.node = null),
        (this.getValue = this._getValue_unbound),
        (this.setValue = this._setValue_unbound);
    },
  }),
  Object.assign(THREE.PropertyBinding.prototype, {
    _getValue_unavailable: function () {},
    _setValue_unavailable: function () {},
    _getValue_unbound: THREE.PropertyBinding.prototype.getValue,
    _setValue_unbound: THREE.PropertyBinding.prototype.setValue,
    BindingType: {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3,
    },
    Versioning: {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2,
    },
    GetterByBindingType: [
      function (e, t) {
        e[t] = this.node[this.propertyName];
      },
      function (e, t) {
        for (var i = this.resolvedProperty, r = 0, n = i.length; r !== n; ++r)
          e[t++] = i[r];
      },
      function (e, t) {
        e[t] = this.resolvedProperty[this.propertyIndex];
      },
      function (e, t) {
        this.resolvedProperty.toArray(e, t);
      },
    ],
    SetterByBindingTypeAndVersioning: [
      [
        function (e, t) {
          this.node[this.propertyName] = e[t];
        },
        function (e, t) {
          (this.node[this.propertyName] = e[t]),
            (this.targetObject.needsUpdate = !0);
        },
        function (e, t) {
          (this.node[this.propertyName] = e[t]),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        },
      ],
      [
        function (e, t) {
          for (var i = this.resolvedProperty, r = 0, n = i.length; r !== n; ++r)
            i[r] = e[t++];
        },
        function (e, t) {
          for (var i = this.resolvedProperty, r = 0, n = i.length; r !== n; ++r)
            i[r] = e[t++];
          this.targetObject.needsUpdate = !0;
        },
        function (e, t) {
          for (var i = this.resolvedProperty, r = 0, n = i.length; r !== n; ++r)
            i[r] = e[t++];
          this.targetObject.matrixWorldNeedsUpdate = !0;
        },
      ],
      [
        function (e, t) {
          this.resolvedProperty[this.propertyIndex] = e[t];
        },
        function (e, t) {
          (this.resolvedProperty[this.propertyIndex] = e[t]),
            (this.targetObject.needsUpdate = !0);
        },
        function (e, t) {
          (this.resolvedProperty[this.propertyIndex] = e[t]),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        },
      ],
      [
        function (e, t) {
          this.resolvedProperty.fromArray(e, t);
        },
        function (e, t) {
          this.resolvedProperty.fromArray(e, t),
            (this.targetObject.needsUpdate = !0);
        },
        function (e, t) {
          this.resolvedProperty.fromArray(e, t),
            (this.targetObject.matrixWorldNeedsUpdate = !0);
        },
      ],
    ],
  }),
  (THREE.PropertyBinding.Composite = function (e, t, i) {
    var r = i || THREE.PropertyBinding.parseTrackName(t);
    (this._targetGroup = e), (this._bindings = e.subscribe_(t, r));
  }),
  (THREE.PropertyBinding.Composite.prototype = {
    constructor: THREE.PropertyBinding.Composite,
    getValue: function (e, t) {
      this.bind();
      var i = this._targetGroup.nCachedObjects_,
        r = this._bindings[i];
      void 0 !== r && r.getValue(e, t);
    },
    setValue: function (e, t) {
      for (
        var i = this._bindings,
          r = this._targetGroup.nCachedObjects_,
          n = i.length;
        r !== n;
        ++r
      )
        i[r].setValue(e, t);
    },
    bind: function () {
      for (
        var e = this._bindings,
          t = this._targetGroup.nCachedObjects_,
          i = e.length;
        t !== i;
        ++t
      )
        e[t].bind();
    },
    unbind: function () {
      for (
        var e = this._bindings,
          t = this._targetGroup.nCachedObjects_,
          i = e.length;
        t !== i;
        ++t
      )
        e[t].unbind();
    },
  }),
  (THREE.PropertyBinding.create = function (e, t, i) {
    return e instanceof THREE.AnimationObjectGroup
      ? new THREE.PropertyBinding.Composite(e, t, i)
      : new THREE.PropertyBinding(e, t, i);
  }),
  (THREE.PropertyBinding.parseTrackName = function (e) {
    var t =
        /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,
      i = t.exec(e);
    if (!i) throw new Error("cannot parse trackName at all: " + e);
    i.index === t.lastIndex && t.lastIndex++;
    var r = {
      nodeName: i[3],
      objectName: i[5],
      objectIndex: i[7],
      propertyName: i[9],
      propertyIndex: i[11],
    };
    if (null === r.propertyName || 0 === r.propertyName.length)
      throw new Error("can not parse propertyName from trackName: " + e);
    return r;
  }),
  (THREE.PropertyBinding.findNode = function (e, t) {
    if (
      !t ||
      "" === t ||
      "root" === t ||
      "." === t ||
      -1 === t ||
      t === e.name ||
      t === e.uuid
    )
      return e;
    if (e.skeleton) {
      var i = function (e) {
          for (var i = 0; i < e.bones.length; i++) {
            var r = e.bones[i];
            if (r.name === t) return r;
          }
          return null;
        },
        r = i(e.skeleton);
      if (r) return r;
    }
    if (e.children) {
      var n = function (e) {
          for (var i = 0; i < e.length; i++) {
            var r = e[i];
            if (r.name === t || r.uuid === t) return r;
            var o = n(r.children);
            if (o) return o;
          }
          return null;
        },
        o = n(e.children);
      if (o) return o;
    }
    return null;
  }),
  (THREE.PropertyMixer = function (e, t, i) {
    (this.binding = e), (this.valueSize = i);
    var r,
      n = Float64Array;
    switch (t) {
      case "quaternion":
        r = this._slerp;
        break;
      case "string":
      case "bool":
        (n = Array), (r = this._select);
        break;
      default:
        r = this._lerp;
    }
    (this.buffer = new n(4 * i)),
      (this._mixBufferRegion = r),
      (this.cumulativeWeight = 0),
      (this.useCount = 0),
      (this.referenceCount = 0);
  }),
  (THREE.PropertyMixer.prototype = {
    constructor: THREE.PropertyMixer,
    accumulate: function (e, t) {
      var i = this.buffer,
        r = this.valueSize,
        n = e * r + r,
        o = this.cumulativeWeight;
      if (0 === o) {
        for (var a = 0; a !== r; ++a) i[n + a] = i[a];
        o = t;
      } else {
        var s = t / (o += t);
        this._mixBufferRegion(i, n, 0, s, r);
      }
      this.cumulativeWeight = o;
    },
    apply: function (e) {
      var t = this.valueSize,
        i = this.buffer,
        r = e * t + t,
        n = this.cumulativeWeight,
        o = this.binding;
      if (((this.cumulativeWeight = 0), n < 1)) {
        var a = 3 * t;
        this._mixBufferRegion(i, r, a, 1 - n, t);
      }
      for (var s = t, l = t + t; s !== l; ++s)
        if (i[s] !== i[s + t]) {
          o.setValue(i, r);
          break;
        }
    },
    saveOriginalState: function () {
      var e = this.binding,
        t = this.buffer,
        i = this.valueSize,
        r = 3 * i;
      e.getValue(t, r);
      for (var n = i, o = r; n !== o; ++n) t[n] = t[r + (n % i)];
      this.cumulativeWeight = 0;
    },
    restoreOriginalState: function () {
      var e = 3 * this.valueSize;
      this.binding.setValue(this.buffer, e);
    },
    _select: function (e, t, i, r, n) {
      if (r >= 0.5) for (var o = 0; o !== n; ++o) e[t + o] = e[i + o];
    },
    _slerp: function (e, t, i, r) {
      THREE.Quaternion.slerpFlat(e, t, e, t, e, i, r);
    },
    _lerp: function (e, t, i, r, n) {
      for (var o = 1 - r, a = 0; a !== n; ++a) {
        var s = t + a;
        e[s] = e[s] * o + e[i + a] * r;
      }
    },
  }),
  (THREE.BooleanKeyframeTrack = function (e, t, i) {
    THREE.KeyframeTrack.call(this, e, t, i);
  }),
  (THREE.BooleanKeyframeTrack.prototype = Object.assign(
    Object.create(THREE.KeyframeTrack.prototype),
    {
      constructor: THREE.BooleanKeyframeTrack,
      ValueTypeName: "bool",
      ValueBufferType: Array,
      DefaultInterpolation: THREE.IntepolateDiscrete,
      InterpolantFactoryMethodLinear: void 0,
      InterpolantFactoryMethodSmooth: void 0,
    }
  )),
  (THREE.NumberKeyframeTrack = function (e, t, i, r) {
    THREE.KeyframeTrack.call(this, e, t, i, r);
  }),
  (THREE.NumberKeyframeTrack.prototype = Object.assign(
    Object.create(THREE.KeyframeTrack.prototype),
    {
      constructor: THREE.NumberKeyframeTrack,
      ValueTypeName: "number",
    }
  )),
  (THREE.QuaternionKeyframeTrack = function (e, t, i, r) {
    THREE.KeyframeTrack.call(this, e, t, i, r);
  }),
  (THREE.QuaternionKeyframeTrack.prototype = Object.assign(
    Object.create(THREE.KeyframeTrack.prototype),
    {
      constructor: THREE.QuaternionKeyframeTrack,
      ValueTypeName: "quaternion",
      DefaultInterpolation: THREE.InterpolateLinear,
      InterpolantFactoryMethodLinear: function (e) {
        return new THREE.QuaternionLinearInterpolant(
          this.times,
          this.values,
          this.getValueSize(),
          e
        );
      },
      InterpolantFactoryMethodSmooth: void 0,
    }
  )),
  (THREE.StringKeyframeTrack = function (e, t, i, r) {
    THREE.KeyframeTrack.call(this, e, t, i, r);
  }),
  (THREE.StringKeyframeTrack.prototype = Object.assign(
    Object.create(THREE.KeyframeTrack.prototype),
    {
      constructor: THREE.StringKeyframeTrack,
      ValueTypeName: "string",
      ValueBufferType: Array,
      DefaultInterpolation: THREE.IntepolateDiscrete,
      InterpolantFactoryMethodLinear: void 0,
      InterpolantFactoryMethodSmooth: void 0,
    }
  )),
  (THREE.VectorKeyframeTrack = function (e, t, i, r) {
    THREE.KeyframeTrack.call(this, e, t, i, r);
  }),
  (THREE.VectorKeyframeTrack.prototype = Object.assign(
    Object.create(THREE.KeyframeTrack.prototype),
    {
      constructor: THREE.VectorKeyframeTrack,
      ValueTypeName: "vector",
    }
  )),
  (THREE.Audio = function (e) {
    THREE.Object3D.call(this),
      (this.type = "Audio"),
      (this.context = e.context),
      (this.source = this.context.createBufferSource()),
      (this.source.onended = this.onEnded.bind(this)),
      (this.gain = this.context.createGain()),
      this.gain.connect(e.getInput()),
      (this.autoplay = !1),
      (this.startTime = 0),
      (this.playbackRate = 1),
      (this.isPlaying = !1),
      (this.hasPlaybackControl = !0),
      (this.sourceType = "empty"),
      (this.filter = null);
  }),
  (THREE.Audio.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Audio.prototype.constructor = THREE.Audio),
  (THREE.Audio.prototype.getOutput = function () {
    return this.gain;
  }),
  (THREE.Audio.prototype.load = function (e) {
    var t = new THREE.AudioBuffer(this.context);
    return t.load(e), this.setBuffer(t), this;
  }),
  (THREE.Audio.prototype.setNodeSource = function (e) {
    return (
      (this.hasPlaybackControl = !1),
      (this.sourceType = "audioNode"),
      (this.source = e),
      this.connect(),
      this
    );
  }),
  (THREE.Audio.prototype.setBuffer = function (e) {
    var t = this;
    return (
      e.onReady(function (e) {
        (t.source.buffer = e),
          (t.sourceType = "buffer"),
          t.autoplay && t.play();
      }),
      this
    );
  }),
  (THREE.Audio.prototype.play = function () {
    if (!0 !== this.isPlaying)
      if (!1 !== this.hasPlaybackControl) {
        var e = this.context.createBufferSource();
        (e.buffer = this.source.buffer),
          (e.loop = this.source.loop),
          (e.onended = this.source.onended),
          e.start(0, this.startTime),
          (e.playbackRate.value = this.playbackRate),
          (this.isPlaying = !0),
          (this.source = e),
          this.connect();
      } else console.warn("THREE.Audio: this Audio has no playback control.");
    else console.warn("THREE.Audio: Audio is already playing.");
  }),
  (THREE.Audio.prototype.pause = function () {
    !1 !== this.hasPlaybackControl
      ? (this.source.stop(), (this.startTime = this.context.currentTime))
      : console.warn("THREE.Audio: this Audio has no playback control.");
  }),
  (THREE.Audio.prototype.stop = function () {
    !1 !== this.hasPlaybackControl
      ? (this.source.stop(), (this.startTime = 0))
      : console.warn("THREE.Audio: this Audio has no playback control.");
  }),
  (THREE.Audio.prototype.connect = function () {
    null !== this.filter
      ? (this.source.connect(this.filter),
        this.filter.connect(this.getOutput()))
      : this.source.connect(this.getOutput());
  }),
  (THREE.Audio.prototype.disconnect = function () {
    null !== this.filter
      ? (this.source.disconnect(this.filter),
        this.filter.disconnect(this.getOutput()))
      : this.source.disconnect(this.getOutput());
  }),
  (THREE.Audio.prototype.getFilter = function () {
    return this.filter;
  }),
  (THREE.Audio.prototype.setFilter = function (e) {
    void 0 === e && (e = null),
      !0 === this.isPlaying
        ? (this.disconnect(), (this.filter = e), this.connect())
        : (this.filter = e);
  }),
  (THREE.Audio.prototype.setPlaybackRate = function (e) {
    !1 !== this.hasPlaybackControl
      ? ((this.playbackRate = e),
        !0 === this.isPlaying &&
          (this.source.playbackRate.value = this.playbackRate))
      : console.warn("THREE.Audio: this Audio has no playback control.");
  }),
  (THREE.Audio.prototype.getPlaybackRate = function () {
    return this.playbackRate;
  }),
  (THREE.Audio.prototype.onEnded = function () {
    this.isPlaying = !1;
  }),
  (THREE.Audio.prototype.setLoop = function (e) {
    !1 !== this.hasPlaybackControl
      ? (this.source.loop = e)
      : console.warn("THREE.Audio: this Audio has no playback control.");
  }),
  (THREE.Audio.prototype.getLoop = function () {
    return !1 === this.hasPlaybackControl
      ? (console.warn("THREE.Audio: this Audio has no playback control."), !1)
      : this.source.loop;
  }),
  (THREE.Audio.prototype.setVolume = function (e) {
    this.gain.gain.value = e;
  }),
  (THREE.Audio.prototype.getVolume = function () {
    return this.gain.gain.value;
  }),
  (THREE.AudioAnalyser = function (e, t) {
    (this.analyser = e.context.createAnalyser()),
      (this.analyser.fftSize = void 0 !== t ? t : 2048),
      (this.data = new Uint8Array(this.analyser.frequencyBinCount)),
      e.getOutput().connect(this.analyser);
  }),
  (THREE.AudioAnalyser.prototype = {
    constructor: THREE.AudioAnalyser,
    getData: function () {
      return this.analyser.getByteFrequencyData(this.data), this.data;
    },
  }),
  (THREE.AudioBuffer = function (e) {
    (this.context = e), (this.ready = !1), (this.readyCallbacks = []);
  }),
  (THREE.AudioBuffer.prototype.load = function (e) {
    var t = this,
      i = new XMLHttpRequest();
    return (
      i.open("GET", e, !0),
      (i.responseType = "arraybuffer"),
      (i.onload = function () {
        t.context.decodeAudioData(this.response, function (e) {
          (t.buffer = e), (t.ready = !0);
          for (var i = 0; i < t.readyCallbacks.length; i++)
            t.readyCallbacks[i](t.buffer);
          t.readyCallbacks = [];
        });
      }),
      i.send(),
      this
    );
  }),
  (THREE.AudioBuffer.prototype.onReady = function (e) {
    this.ready ? e(this.buffer) : this.readyCallbacks.push(e);
  }),
  (THREE.PositionalAudio = function (e) {
    THREE.Audio.call(this, e),
      (this.panner = this.context.createPanner()),
      this.panner.connect(this.gain);
  }),
  (THREE.PositionalAudio.prototype = Object.create(THREE.Audio.prototype)),
  (THREE.PositionalAudio.prototype.constructor = THREE.PositionalAudio),
  (THREE.PositionalAudio.prototype.getOutput = function () {
    return this.panner;
  }),
  (THREE.PositionalAudio.prototype.setRefDistance = function (e) {
    this.panner.refDistance = e;
  }),
  (THREE.PositionalAudio.prototype.getRefDistance = function () {
    return this.panner.refDistance;
  }),
  (THREE.PositionalAudio.prototype.setRolloffFactor = function (e) {
    this.panner.rolloffFactor = e;
  }),
  (THREE.PositionalAudio.prototype.getRolloffFactor = function () {
    return this.panner.rolloffFactor;
  }),
  (THREE.PositionalAudio.prototype.setDistanceModel = function (e) {
    this.panner.distanceModel = e;
  }),
  (THREE.PositionalAudio.prototype.getDistanceModel = function () {
    return this.panner.distanceModel;
  }),
  (THREE.PositionalAudio.prototype.setMaxDistance = function (e) {
    this.panner.maxDistance = e;
  }),
  (THREE.PositionalAudio.prototype.getMaxDistance = function () {
    return this.panner.maxDistance;
  }),
  (THREE.PositionalAudio.prototype.updateMatrixWorld = (function () {
    var e = new THREE.Vector3();
    return function (t) {
      THREE.Object3D.prototype.updateMatrixWorld.call(this, t),
        e.setFromMatrixPosition(this.matrixWorld),
        this.panner.setPosition(e.x, e.y, e.z);
    };
  })()),
  (THREE.AudioListener = function () {
    THREE.Object3D.call(this),
      (this.type = "AudioListener"),
      (this.context = new (window.AudioContext || window.webkitAudioContext)()),
      (this.gain = this.context.createGain()),
      this.gain.connect(this.context.destination),
      (this.filter = null);
  }),
  (THREE.AudioListener.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.AudioListener.prototype.constructor = THREE.AudioListener),
  (THREE.AudioListener.prototype.getInput = function () {
    return this.gain;
  }),
  (THREE.AudioListener.prototype.removeFilter = function () {
    null !== this.filter &&
      (this.gain.disconnect(this.filter),
      this.filter.disconnect(this.context.destination),
      this.gain.connect(this.context.destination),
      (this.filter = null));
  }),
  (THREE.AudioListener.prototype.setFilter = function (e) {
    null !== this.filter
      ? (this.gain.disconnect(this.filter),
        this.filter.disconnect(this.context.destination))
      : this.gain.disconnect(this.context.destination),
      (this.filter = e),
      this.gain.connect(this.filter),
      this.filter.connect(this.context.destination);
  }),
  (THREE.AudioListener.prototype.getFilter = function () {
    return this.filter;
  }),
  (THREE.AudioListener.prototype.setMasterVolume = function (e) {
    this.gain.gain.value = e;
  }),
  (THREE.AudioListener.prototype.getMasterVolume = function () {
    return this.gain.gain.value;
  }),
  (THREE.AudioListener.prototype.updateMatrixWorld = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Quaternion(),
      i = new THREE.Vector3(),
      r = new THREE.Vector3();
    return function (n) {
      THREE.Object3D.prototype.updateMatrixWorld.call(this, n);
      var o = this.context.listener,
        a = this.up;
      this.matrixWorld.decompose(e, t, i),
        r.set(0, 0, -1).applyQuaternion(t),
        o.setPosition(e.x, e.y, e.z),
        o.setOrientation(r.x, r.y, r.z, a.x, a.y, a.z);
    };
  })()),
  (THREE.Camera = function () {
    THREE.Object3D.call(this),
      (this.type = "Camera"),
      (this.matrixWorldInverse = new THREE.Matrix4()),
      (this.projectionMatrix = new THREE.Matrix4());
  }),
  (THREE.Camera.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Camera.prototype.constructor = THREE.Camera),
  (THREE.Camera.prototype.getWorldDirection = (function () {
    var e = new THREE.Quaternion();
    return function (t) {
      var i = t || new THREE.Vector3();
      return this.getWorldQuaternion(e), i.set(0, 0, -1).applyQuaternion(e);
    };
  })()),
  (THREE.Camera.prototype.lookAt = (function () {
    var e = new THREE.Matrix4();
    return function (t) {
      e.lookAt(this.position, t, this.up),
        this.quaternion.setFromRotationMatrix(e);
    };
  })()),
  (THREE.Camera.prototype.clone = function () {
    return new this.constructor().copy(this);
  }),
  (THREE.Camera.prototype.copy = function (e) {
    return (
      THREE.Object3D.prototype.copy.call(this, e),
      this.matrixWorldInverse.copy(e.matrixWorldInverse),
      this.projectionMatrix.copy(e.projectionMatrix),
      this
    );
  }),
  (THREE.CubeCamera = function (e, t, i) {
    THREE.Object3D.call(this), (this.type = "CubeCamera");
    var r = 90,
      n = 1,
      o = new THREE.PerspectiveCamera(r, n, e, t);
    o.up.set(0, -1, 0), o.lookAt(new THREE.Vector3(1, 0, 0)), this.add(o);
    var a = new THREE.PerspectiveCamera(r, n, e, t);
    a.up.set(0, -1, 0), a.lookAt(new THREE.Vector3(-1, 0, 0)), this.add(a);
    var s = new THREE.PerspectiveCamera(r, n, e, t);
    s.up.set(0, 0, 1), s.lookAt(new THREE.Vector3(0, 1, 0)), this.add(s);
    var l = new THREE.PerspectiveCamera(r, n, e, t);
    l.up.set(0, 0, -1), l.lookAt(new THREE.Vector3(0, -1, 0)), this.add(l);
    var h = new THREE.PerspectiveCamera(r, n, e, t);
    h.up.set(0, -1, 0), h.lookAt(new THREE.Vector3(0, 0, 1)), this.add(h);
    var c = new THREE.PerspectiveCamera(r, n, e, t);
    c.up.set(0, -1, 0), c.lookAt(new THREE.Vector3(0, 0, -1)), this.add(c);
    var u = {
      format: THREE.RGBFormat,
      magFilter: THREE.LinearFilter,
      minFilter: THREE.LinearFilter,
    };
    (this.renderTarget = new THREE.WebGLRenderTargetCube(i, i, u)),
      (this.updateCubeMap = function (e, t) {
        null === this.parent && this.updateMatrixWorld();
        var i = this.renderTarget,
          r = i.texture.generateMipmaps;
        (i.texture.generateMipmaps = !1),
          (i.activeCubeFace = 0),
          e.render(t, o, i),
          (i.activeCubeFace = 1),
          e.render(t, a, i),
          (i.activeCubeFace = 2),
          e.render(t, s, i),
          (i.activeCubeFace = 3),
          e.render(t, l, i),
          (i.activeCubeFace = 4),
          e.render(t, h, i),
          (i.texture.generateMipmaps = r),
          (i.activeCubeFace = 5),
          e.render(t, c, i),
          e.setRenderTarget(null);
      });
  }),
  (THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.CubeCamera.prototype.constructor = THREE.CubeCamera),
  (THREE.OrthographicCamera = function (e, t, i, r, n, o) {
    THREE.Camera.call(this),
      (this.type = "OrthographicCamera"),
      (this.zoom = 1),
      (this.left = e),
      (this.right = t),
      (this.top = i),
      (this.bottom = r),
      (this.near = void 0 !== n ? n : 0.1),
      (this.far = void 0 !== o ? o : 2e3),
      this.updateProjectionMatrix();
  }),
  (THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype)),
  (THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera),
  (THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
    var e = (this.right - this.left) / (2 * this.zoom),
      t = (this.top - this.bottom) / (2 * this.zoom),
      i = (this.right + this.left) / 2,
      r = (this.top + this.bottom) / 2;
    this.projectionMatrix.makeOrthographic(
      i - e,
      i + e,
      r + t,
      r - t,
      this.near,
      this.far
    );
  }),
  (THREE.OrthographicCamera.prototype.copy = function (e) {
    return (
      THREE.Camera.prototype.copy.call(this, e),
      (this.left = e.left),
      (this.right = e.right),
      (this.top = e.top),
      (this.bottom = e.bottom),
      (this.near = e.near),
      (this.far = e.far),
      (this.zoom = e.zoom),
      this
    );
  }),
  (THREE.OrthographicCamera.prototype.toJSON = function (e) {
    var t = THREE.Object3D.prototype.toJSON.call(this, e);
    return (
      (t.object.zoom = this.zoom),
      (t.object.left = this.left),
      (t.object.right = this.right),
      (t.object.top = this.top),
      (t.object.bottom = this.bottom),
      (t.object.near = this.near),
      (t.object.far = this.far),
      t
    );
  }),
  (THREE.PerspectiveCamera = function (e, t, i, r) {
    THREE.Camera.call(this),
      (this.type = "PerspectiveCamera"),
      (this.focalLength = 10),
      (this.zoom = 1),
      (this.fov = void 0 !== e ? e : 50),
      (this.aspect = void 0 !== t ? t : 1),
      (this.near = void 0 !== i ? i : 0.1),
      (this.far = void 0 !== r ? r : 2e3),
      this.updateProjectionMatrix();
  }),
  (THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype)),
  (THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera),
  (THREE.PerspectiveCamera.prototype.setLens = function (e, t) {
    void 0 === t && (t = 24),
      (this.fov = 2 * THREE.Math.radToDeg(Math.atan(t / (2 * e)))),
      this.updateProjectionMatrix();
  }),
  (THREE.PerspectiveCamera.prototype.setViewOffset = function (
    e,
    t,
    i,
    r,
    n,
    o
  ) {
    (this.fullWidth = e),
      (this.fullHeight = t),
      (this.x = i),
      (this.y = r),
      (this.width = n),
      (this.height = o),
      this.updateProjectionMatrix();
  }),
  (THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
    var e = THREE.Math.radToDeg(
      2 * Math.atan(Math.tan(0.5 * THREE.Math.degToRad(this.fov)) / this.zoom)
    );
    if (this.fullWidth) {
      var t = this.fullWidth / this.fullHeight,
        i = Math.tan(THREE.Math.degToRad(0.5 * e)) * this.near,
        r = -i,
        n = t * r,
        o = t * i,
        a = Math.abs(o - n),
        s = Math.abs(i - r);
      this.projectionMatrix.makeFrustum(
        n + (this.x * a) / this.fullWidth,
        n + ((this.x + this.width) * a) / this.fullWidth,
        i - ((this.y + this.height) * s) / this.fullHeight,
        i - (this.y * s) / this.fullHeight,
        this.near,
        this.far
      );
    } else
      this.projectionMatrix.makePerspective(
        e,
        this.aspect,
        this.near,
        this.far
      );
  }),
  (THREE.PerspectiveCamera.prototype.copy = function (e) {
    return (
      THREE.Camera.prototype.copy.call(this, e),
      (this.focalLength = e.focalLength),
      (this.zoom = e.zoom),
      (this.fov = e.fov),
      (this.aspect = e.aspect),
      (this.near = e.near),
      (this.far = e.far),
      this
    );
  }),
  (THREE.PerspectiveCamera.prototype.toJSON = function (e) {
    var t = THREE.Object3D.prototype.toJSON.call(this, e);
    return (
      (t.object.focalLength = this.focalLength),
      (t.object.zoom = this.zoom),
      (t.object.fov = this.fov),
      (t.object.aspect = this.aspect),
      (t.object.near = this.near),
      (t.object.far = this.far),
      t
    );
  }),
  (THREE.StereoCamera = function () {
    (this.type = "StereoCamera"),
      (this.aspect = 1),
      (this.cameraL = new THREE.PerspectiveCamera()),
      this.cameraL.layers.enable(1),
      (this.cameraL.matrixAutoUpdate = !1),
      (this.cameraR = new THREE.PerspectiveCamera()),
      this.cameraR.layers.enable(2),
      (this.cameraR.matrixAutoUpdate = !1);
  }),
  (THREE.StereoCamera.prototype = {
    constructor: THREE.StereoCamera,
    update: (function () {
      var e,
        t,
        i,
        r,
        n,
        o = new THREE.Matrix4(),
        a = new THREE.Matrix4();
      return function (s) {
        if (
          e !== s.focalLength ||
          t !== s.fov ||
          i !== s.aspect * this.aspect ||
          r !== s.near ||
          n !== s.far
        ) {
          (e = s.focalLength),
            (t = s.fov),
            (i = s.aspect * this.aspect),
            (r = s.near),
            (n = s.far);
          var l,
            h,
            c = s.projectionMatrix.clone(),
            u = 0.032,
            p = (u * r) / e,
            d = r * Math.tan(THREE.Math.degToRad(0.5 * t));
          (a.elements[12] = -u),
            (o.elements[12] = u),
            (l = -d * i + p),
            (h = d * i + p),
            (c.elements[0] = (2 * r) / (h - l)),
            (c.elements[8] = (h + l) / (h - l)),
            this.cameraL.projectionMatrix.copy(c),
            (l = -d * i - p),
            (h = d * i - p),
            (c.elements[0] = (2 * r) / (h - l)),
            (c.elements[8] = (h + l) / (h - l)),
            this.cameraR.projectionMatrix.copy(c);
        }
        this.cameraL.matrixWorld.copy(s.matrixWorld).multiply(a),
          this.cameraR.matrixWorld.copy(s.matrixWorld).multiply(o);
      };
    })(),
  }),
  (THREE.Light = function (e, t) {
    THREE.Object3D.call(this),
      (this.type = "Light"),
      (this.color = new THREE.Color(e)),
      (this.intensity = void 0 !== t ? t : 1),
      (this.receiveShadow = void 0);
  }),
  (THREE.Light.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Light.prototype.constructor = THREE.Light),
  (THREE.Light.prototype.copy = function (e) {
    return (
      THREE.Object3D.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.intensity = e.intensity),
      this
    );
  }),
  (THREE.Light.prototype.toJSON = function (e) {
    var t = THREE.Object3D.prototype.toJSON.call(this, e);
    return (
      (t.object.color = this.color.getHex()),
      (t.object.intensity = this.intensity),
      void 0 !== this.groundColor &&
        (t.object.groundColor = this.groundColor.getHex()),
      void 0 !== this.distance && (t.object.distance = this.distance),
      void 0 !== this.angle && (t.object.angle = this.angle),
      void 0 !== this.decay && (t.object.decay = this.decay),
      void 0 !== this.exponent && (t.object.exponent = this.exponent),
      t
    );
  }),
  (THREE.LightShadow = function (e) {
    (this.camera = e),
      (this.bias = 0),
      (this.radius = 1),
      (this.mapSize = new THREE.Vector2(512, 512)),
      (this.map = null),
      (this.matrix = new THREE.Matrix4());
  }),
  (THREE.LightShadow.prototype = {
    constructor: THREE.LightShadow,
    copy: function (e) {
      return (
        (this.camera = e.camera.clone()),
        (this.bias = e.bias),
        (this.radius = e.radius),
        this.mapSize.copy(e.mapSize),
        this
      );
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
  }),
  (THREE.AmbientLight = function (e, t) {
    THREE.Light.call(this, e, t),
      (this.type = "AmbientLight"),
      (this.castShadow = void 0);
  }),
  (THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype)),
  (THREE.AmbientLight.prototype.constructor = THREE.AmbientLight),
  (THREE.DirectionalLight = function (e, t) {
    THREE.Light.call(this, e, t),
      (this.type = "DirectionalLight"),
      this.position.set(0, 1, 0),
      this.updateMatrix(),
      (this.target = new THREE.Object3D()),
      (this.shadow = new THREE.LightShadow(
        new THREE.OrthographicCamera(-5, 5, 5, -5, 0.5, 500)
      ));
  }),
  (THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype)),
  (THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight),
  (THREE.DirectionalLight.prototype.copy = function (e) {
    return (
      THREE.Light.prototype.copy.call(this, e),
      (this.target = e.target.clone()),
      (this.shadow = e.shadow.clone()),
      this
    );
  }),
  (THREE.HemisphereLight = function (e, t, i) {
    THREE.Light.call(this, e, i),
      (this.type = "HemisphereLight"),
      (this.castShadow = void 0),
      this.position.set(0, 1, 0),
      this.updateMatrix(),
      (this.groundColor = new THREE.Color(t));
  }),
  (THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype)),
  (THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight),
  (THREE.HemisphereLight.prototype.copy = function (e) {
    return (
      THREE.Light.prototype.copy.call(this, e),
      this.groundColor.copy(e.groundColor),
      this
    );
  }),
  (THREE.PointLight = function (e, t, i, r) {
    THREE.Light.call(this, e, t),
      (this.type = "PointLight"),
      (this.distance = void 0 !== i ? i : 0),
      (this.decay = void 0 !== r ? r : 1),
      (this.shadow = new THREE.LightShadow(
        new THREE.PerspectiveCamera(90, 1, 0.5, 500)
      ));
  }),
  (THREE.PointLight.prototype = Object.create(THREE.Light.prototype)),
  (THREE.PointLight.prototype.constructor = THREE.PointLight),
  (THREE.PointLight.prototype.copy = function (e) {
    return (
      THREE.Light.prototype.copy.call(this, e),
      (this.distance = e.distance),
      (this.decay = e.decay),
      (this.shadow = e.shadow.clone()),
      this
    );
  }),
  (THREE.SpotLight = function (e, t, i, r, n, o) {
    THREE.Light.call(this, e, t),
      (this.type = "SpotLight"),
      this.position.set(0, 1, 0),
      this.updateMatrix(),
      (this.target = new THREE.Object3D()),
      (this.distance = void 0 !== i ? i : 0),
      (this.angle = void 0 !== r ? r : Math.PI / 3),
      (this.exponent = void 0 !== n ? n : 10),
      (this.decay = void 0 !== o ? o : 1),
      (this.shadow = new THREE.LightShadow(
        new THREE.PerspectiveCamera(50, 1, 0.5, 500)
      ));
  }),
  (THREE.SpotLight.prototype = Object.create(THREE.Light.prototype)),
  (THREE.SpotLight.prototype.constructor = THREE.SpotLight),
  (THREE.SpotLight.prototype.copy = function (e) {
    return (
      THREE.Light.prototype.copy.call(this, e),
      (this.distance = e.distance),
      (this.angle = e.angle),
      (this.exponent = e.exponent),
      (this.decay = e.decay),
      (this.target = e.target.clone()),
      (this.shadow = e.shadow.clone()),
      this
    );
  }),
  (THREE.Cache = {
    enabled: !1,
    files: {},
    add: function (e, t) {
      !1 !== this.enabled && (this.files[e] = t);
    },
    get: function (e) {
      if (!1 !== this.enabled) return this.files[e];
    },
    remove: function (e) {
      delete this.files[e];
    },
    clear: function () {
      this.files = {};
    },
  }),
  (THREE.Loader = function () {
    (this.onLoadStart = function () {}),
      (this.onLoadProgress = function () {}),
      (this.onLoadComplete = function () {});
  }),
  (THREE.Loader.prototype = {
    constructor: THREE.Loader,
    crossOrigin: void 0,
    extractUrlBase: function (e) {
      var t = e.split("/");
      return 1 === t.length ? "./" : (t.pop(), t.join("/") + "/");
    },
    initMaterials: function (e, t, i) {
      for (var r = [], n = 0; n < e.length; ++n)
        r[n] = this.createMaterial(e[n], t, i);
      return r;
    },
    createMaterial: (function () {
      var e, t, i;
      return function (r, n, o) {
        function a(e, i, r, a, l) {
          var h,
            c = n + e,
            u = THREE.Loader.Handlers.get(c);
          null !== u ? (h = u.load(c)) : (t.setCrossOrigin(o), (h = t.load(c))),
            void 0 !== i &&
              (h.repeat.fromArray(i),
              1 !== i[0] && (h.wrapS = THREE.RepeatWrapping),
              1 !== i[1] && (h.wrapT = THREE.RepeatWrapping)),
            void 0 !== r && h.offset.fromArray(r),
            void 0 !== a &&
              ("repeat" === a[0] && (h.wrapS = THREE.RepeatWrapping),
              "mirror" === a[0] && (h.wrapS = THREE.MirroredRepeatWrapping),
              "repeat" === a[1] && (h.wrapT = THREE.RepeatWrapping),
              "mirror" === a[1] && (h.wrapT = THREE.MirroredRepeatWrapping)),
            void 0 !== l && (h.anisotropy = l);
          var p = THREE.Math.generateUUID();
          return (s[p] = h), p;
        }
        void 0 === e && (e = new THREE.Color()),
          void 0 === t && (t = new THREE.TextureLoader()),
          void 0 === i && (i = new THREE.MaterialLoader());
        var s = {},
          l = {
            uuid: THREE.Math.generateUUID(),
            type: "MeshLambertMaterial",
          };
        for (var h in r) {
          var c = r[h];
          switch (h) {
            case "DbgColor":
            case "DbgIndex":
            case "opticalDensity":
            case "illumination":
            case "mapDiffuseRepeat":
            case "mapDiffuseOffset":
            case "mapDiffuseWrap":
            case "mapDiffuseAnisotropy":
            case "mapLightRepeat":
            case "mapLightOffset":
            case "mapLightWrap":
            case "mapLightAnisotropy":
            case "mapAORepeat":
            case "mapAOOffset":
            case "mapAOWrap":
            case "mapAOAnisotropy":
            case "mapBumpRepeat":
            case "mapBumpOffset":
            case "mapBumpWrap":
            case "mapBumpAnisotropy":
            case "mapNormalRepeat":
            case "mapNormalOffset":
            case "mapNormalWrap":
            case "mapNormalAnisotropy":
            case "mapSpecularRepeat":
            case "mapSpecularOffset":
            case "mapSpecularWrap":
            case "mapSpecularAnisotropy":
            case "mapAlphaRepeat":
            case "mapAlphaOffset":
            case "mapAlphaWrap":
            case "mapAlphaAnisotropy":
              break;
            case "DbgName":
              l.name = c;
              break;
            case "blending":
              l.blending = THREE[c];
              break;
            case "colorAmbient":
              console.warn(
                "THREE.Loader.createMaterial: colorAmbient is no longer supported"
              );
              break;
            case "colorDiffuse":
              l.color = e.fromArray(c).getHex();
              break;
            case "colorSpecular":
              l.specular = e.fromArray(c).getHex();
              break;
            case "colorEmissive":
              l.emissive = e.fromArray(c).getHex();
              break;
            case "specularCoef":
              l.shininess = c;
              break;
            case "shading":
              "basic" === c.toLowerCase() && (l.type = "MeshBasicMaterial"),
                "phong" === c.toLowerCase() && (l.type = "MeshPhongMaterial");
              break;
            case "mapDiffuse":
              l.map = a(
                c,
                r.mapDiffuseRepeat,
                r.mapDiffuseOffset,
                r.mapDiffuseWrap,
                r.mapDiffuseAnisotropy
              );
              break;
            case "mapLight":
              l.lightMap = a(
                c,
                r.mapLightRepeat,
                r.mapLightOffset,
                r.mapLightWrap,
                r.mapLightAnisotropy
              );
              break;
            case "mapAO":
              l.aoMap = a(
                c,
                r.mapAORepeat,
                r.mapAOOffset,
                r.mapAOWrap,
                r.mapAOAnisotropy
              );
              break;
            case "mapBump":
              l.bumpMap = a(
                c,
                r.mapBumpRepeat,
                r.mapBumpOffset,
                r.mapBumpWrap,
                r.mapBumpAnisotropy
              );
              break;
            case "mapBumpScale":
              l.bumpScale = c;
              break;
            case "mapNormal":
              l.normalMap = a(
                c,
                r.mapNormalRepeat,
                r.mapNormalOffset,
                r.mapNormalWrap,
                r.mapNormalAnisotropy
              );
              break;
            case "mapNormalFactor":
              l.normalScale = [c, c];
              break;
            case "mapSpecular":
              l.specularMap = a(
                c,
                r.mapSpecularRepeat,
                r.mapSpecularOffset,
                r.mapSpecularWrap,
                r.mapSpecularAnisotropy
              );
              break;
            case "mapAlpha":
              l.alphaMap = a(
                c,
                r.mapAlphaRepeat,
                r.mapAlphaOffset,
                r.mapAlphaWrap,
                r.mapAlphaAnisotropy
              );
              break;
            case "flipSided":
              l.side = THREE.BackSide;
              break;
            case "doubleSided":
              l.side = THREE.DoubleSide;
              break;
            case "transparency":
              console.warn(
                "THREE.Loader.createMaterial: transparency has been renamed to opacity"
              ),
                (l.opacity = c);
              break;
            case "depthTest":
            case "depthWrite":
            case "colorWrite":
            case "opacity":
            case "reflectivity":
            case "transparent":
            case "visible":
            case "wireframe":
              l[h] = c;
              break;
            case "vertexColors":
              !0 === c && (l.vertexColors = THREE.VertexColors),
                "face" === c && (l.vertexColors = THREE.FaceColors);
              break;
            default:
              console.error("THREE.Loader.createMaterial: Unsupported", h, c);
          }
        }
        return (
          "MeshBasicMaterial" === l.type && delete l.emissive,
          "MeshPhongMaterial" !== l.type && delete l.specular,
          l.opacity < 1 && (l.transparent = !0),
          i.setTextures(s),
          i.parse(l)
        );
      };
    })(),
  }),
  (THREE.Loader.Handlers = {
    handlers: [],
    add: function (e, t) {
      this.handlers.push(e, t);
    },
    get: function (e) {
      for (var t = this.handlers, i = 0, r = t.length; i < r; i += 2) {
        var n = t[i],
          o = t[i + 1];
        if (n.test(e)) return o;
      }
      return null;
    },
  }),
  (THREE.XHRLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.XHRLoader.prototype = {
    constructor: THREE.XHRLoader,
    load: function (e, t, i, r) {
      void 0 !== this.path && (e = this.path + e);
      var n = this,
        o = THREE.Cache.get(e);
      if (void 0 !== o)
        return (
          t &&
            setTimeout(function () {
              t(o);
            }, 0),
          o
        );
      var a = new XMLHttpRequest();
      return (
        a.overrideMimeType("text/plain"),
        a.open("GET", e, !0),
        a.addEventListener(
          "load",
          function (i) {
            var o = i.target.response;
            THREE.Cache.add(e, o),
              200 === this.status
                ? (t && t(o), n.manager.itemEnd(e))
                : 0 === this.status
                ? (console.warn("THREE.XHRLoader: HTTP Status 0 received."),
                  t && t(o),
                  n.manager.itemEnd(e))
                : (r && r(i), n.manager.itemError(e));
          },
          !1
        ),
        void 0 !== i &&
          a.addEventListener(
            "progress",
            function (e) {
              i(e);
            },
            !1
          ),
        a.addEventListener(
          "error",
          function (t) {
            r && r(t), n.manager.itemError(e);
          },
          !1
        ),
        void 0 !== this.responseType && (a.responseType = this.responseType),
        void 0 !== this.withCredentials &&
          (a.withCredentials = this.withCredentials),
        a.send(null),
        n.manager.itemStart(e),
        a
      );
    },
    setPath: function (e) {
      this.path = e;
    },
    setResponseType: function (e) {
      this.responseType = e;
    },
    setWithCredentials: function (e) {
      this.withCredentials = e;
    },
  }),
  (THREE.FontLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.FontLoader.prototype = {
    constructor: THREE.FontLoader,
    load: function (e, t, i, r) {
      new THREE.XHRLoader(this.manager).load(
        e,
        function (e) {
          t(new THREE.Font(JSON.parse(e.substring(65, e.length - 2))));
        },
        i,
        r
      );
    },
  }),
  (THREE.ImageLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.ImageLoader.prototype = {
    constructor: THREE.ImageLoader,
    load: function (e, t, i, r) {
      void 0 !== this.path && (e = this.path + e);
      var n = this,
        o = THREE.Cache.get(e);
      if (void 0 !== o)
        return (
          n.manager.itemStart(e),
          t
            ? setTimeout(function () {
                t(o), n.manager.itemEnd(e);
              }, 0)
            : n.manager.itemEnd(e),
          o
        );
      var a = document.createElement("img");
      return (
        a.addEventListener(
          "load",
          function () {
            THREE.Cache.add(e, this), t && t(this), n.manager.itemEnd(e);
          },
          !1
        ),
        void 0 !== i &&
          a.addEventListener(
            "progress",
            function (e) {
              i(e);
            },
            !1
          ),
        a.addEventListener(
          "error",
          function (t) {
            r && r(t), n.manager.itemError(e);
          },
          !1
        ),
        void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin),
        n.manager.itemStart(e),
        (a.src = e),
        a
      );
    },
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    setPath: function (e) {
      this.path = e;
    },
  }),
  (THREE.JSONLoader = function (e) {
    "boolean" == typeof e &&
      (console.warn(
        "THREE.JSONLoader: showStatus parameter has been removed from constructor."
      ),
      (e = void 0)),
      (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
      (this.withCredentials = !1);
  }),
  (THREE.JSONLoader.prototype = {
    constructor: THREE.JSONLoader,
    get statusDomElement() {
      return (
        void 0 === this._statusDomElement &&
          (this._statusDomElement = document.createElement("div")),
        console.warn("THREE.JSONLoader: .statusDomElement has been removed."),
        this._statusDomElement
      );
    },
    load: function (e, t, i, r) {
      var n = this,
        o =
          this.texturePath && "string" == typeof this.texturePath
            ? this.texturePath
            : THREE.Loader.prototype.extractUrlBase(e),
        a = new THREE.XHRLoader(this.manager);
      a.setWithCredentials(this.withCredentials),
        a.load(
          e,
          function (i) {
            var r = JSON.parse(i),
              a = r.metadata;
            if (void 0 !== a) {
              var s = a.type;
              if (void 0 !== s) {
                if ("object" === s.toLowerCase())
                  return void console.error(
                    "THREE.JSONLoader: " +
                      e +
                      " should be loaded with THREE.ObjectLoader instead."
                  );
                if ("scene" === s.toLowerCase())
                  return void console.error(
                    "THREE.JSONLoader: " +
                      e +
                      " should be loaded with THREE.SceneLoader instead."
                  );
              }
            }
            var l = n.parse(r, o);
            t(l.geometry, l.materials);
          },
          i,
          r
        );
    },
    setTexturePath: function (e) {
      this.texturePath = e;
    },
    parse: function (e, t) {
      function i(t) {
        function i(e, t) {
          return e & (1 << t);
        }
        var r,
          n,
          o,
          s,
          l,
          h,
          c,
          u,
          p,
          d,
          f,
          m,
          E,
          g,
          v,
          y,
          T,
          R,
          x,
          H,
          b,
          w,
          q,
          M,
          _,
          S,
          C,
          L = e.faces,
          A = e.vertices,
          k = e.normals,
          D = e.colors,
          P = 0;
        if (void 0 !== e.uvs) {
          for (r = 0; r < e.uvs.length; r++) e.uvs[r].length && P++;
          for (r = 0; r < P; r++) a.faceVertexUvs[r] = [];
        }
        for (s = 0, l = A.length; s < l; )
          ((R = new THREE.Vector3()).x = A[s++] * t),
            (R.y = A[s++] * t),
            (R.z = A[s++] * t),
            a.vertices.push(R);
        for (s = 0, l = L.length; s < l; )
          if (
            ((f = i((d = L[s++]), 0)),
            (m = i(d, 1)),
            (E = i(d, 3)),
            (g = i(d, 4)),
            (v = i(d, 5)),
            (y = i(d, 6)),
            (T = i(d, 7)),
            f)
          ) {
            if (
              (((H = new THREE.Face3()).a = L[s]),
              (H.b = L[s + 1]),
              (H.c = L[s + 3]),
              ((b = new THREE.Face3()).a = L[s + 1]),
              (b.b = L[s + 2]),
              (b.c = L[s + 3]),
              (s += 4),
              m && ((p = L[s++]), (H.materialIndex = p), (b.materialIndex = p)),
              (o = a.faces.length),
              E)
            )
              for (r = 0; r < P; r++)
                for (
                  M = e.uvs[r],
                    a.faceVertexUvs[r][o] = [],
                    a.faceVertexUvs[r][o + 1] = [],
                    n = 0;
                  n < 4;
                  n++
                )
                  (S = M[2 * (u = L[s++])]),
                    (C = M[2 * u + 1]),
                    (_ = new THREE.Vector2(S, C)),
                    2 !== n && a.faceVertexUvs[r][o].push(_),
                    0 !== n && a.faceVertexUvs[r][o + 1].push(_);
            if (
              (g &&
                ((c = 3 * L[s++]),
                H.normal.set(k[c++], k[c++], k[c]),
                b.normal.copy(H.normal)),
              v)
            )
              for (r = 0; r < 4; r++)
                (c = 3 * L[s++]),
                  (q = new THREE.Vector3(k[c++], k[c++], k[c])),
                  2 !== r && H.vertexNormals.push(q),
                  0 !== r && b.vertexNormals.push(q);
            if (
              (y &&
                ((w = D[(h = L[s++])]), H.color.setHex(w), b.color.setHex(w)),
              T)
            )
              for (r = 0; r < 4; r++)
                (w = D[(h = L[s++])]),
                  2 !== r && H.vertexColors.push(new THREE.Color(w)),
                  0 !== r && b.vertexColors.push(new THREE.Color(w));
            a.faces.push(H), a.faces.push(b);
          } else {
            if (
              (((x = new THREE.Face3()).a = L[s++]),
              (x.b = L[s++]),
              (x.c = L[s++]),
              m && ((p = L[s++]), (x.materialIndex = p)),
              (o = a.faces.length),
              E)
            )
              for (r = 0; r < P; r++)
                for (
                  M = e.uvs[r], a.faceVertexUvs[r][o] = [], n = 0;
                  n < 3;
                  n++
                )
                  (S = M[2 * (u = L[s++])]),
                    (C = M[2 * u + 1]),
                    (_ = new THREE.Vector2(S, C)),
                    a.faceVertexUvs[r][o].push(_);
            if (
              (g && ((c = 3 * L[s++]), x.normal.set(k[c++], k[c++], k[c])), v)
            )
              for (r = 0; r < 3; r++)
                (c = 3 * L[s++]),
                  (q = new THREE.Vector3(k[c++], k[c++], k[c])),
                  x.vertexNormals.push(q);
            if ((y && ((h = L[s++]), x.color.setHex(D[h])), T))
              for (r = 0; r < 3; r++)
                (h = L[s++]), x.vertexColors.push(new THREE.Color(D[h]));
            a.faces.push(x);
          }
      }
      function r() {
        var t = void 0 !== e.influencesPerVertex ? e.influencesPerVertex : 2;
        if (e.skinWeights)
          for (var i = 0, r = e.skinWeights.length; i < r; i += t) {
            var n = e.skinWeights[i],
              o = t > 1 ? e.skinWeights[i + 1] : 0,
              s = t > 2 ? e.skinWeights[i + 2] : 0,
              l = t > 3 ? e.skinWeights[i + 3] : 0;
            a.skinWeights.push(new THREE.Vector4(n, o, s, l));
          }
        if (e.skinIndices)
          for (i = 0, r = e.skinIndices.length; i < r; i += t) {
            var h = e.skinIndices[i],
              c = t > 1 ? e.skinIndices[i + 1] : 0,
              u = t > 2 ? e.skinIndices[i + 2] : 0,
              p = t > 3 ? e.skinIndices[i + 3] : 0;
            a.skinIndices.push(new THREE.Vector4(h, c, u, p));
          }
        (a.bones = e.bones),
          a.bones &&
            a.bones.length > 0 &&
            (a.skinWeights.length !== a.skinIndices.length ||
              a.skinIndices.length !== a.vertices.length) &&
            console.warn(
              "When skinning, number of vertices (" +
                a.vertices.length +
                "), skinIndices (" +
                a.skinIndices.length +
                "), and skinWeights (" +
                a.skinWeights.length +
                ") should match."
            );
      }
      function n(t) {
        if (void 0 !== e.morphTargets)
          for (var i = 0, r = e.morphTargets.length; i < r; i++) {
            (a.morphTargets[i] = {}),
              (a.morphTargets[i].name = e.morphTargets[i].name),
              (a.morphTargets[i].vertices = []);
            for (
              var n = a.morphTargets[i].vertices,
                o = e.morphTargets[i].vertices,
                s = 0,
                l = o.length;
              s < l;
              s += 3
            ) {
              var h = new THREE.Vector3();
              (h.x = o[s] * t),
                (h.y = o[s + 1] * t),
                (h.z = o[s + 2] * t),
                n.push(h);
            }
          }
        if (void 0 !== e.morphColors && e.morphColors.length > 0) {
          console.warn(
            'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'
          );
          var c = a.faces,
            u = e.morphColors[0].colors;
          for (i = 0, r = c.length; i < r; i++) c[i].color.fromArray(u, 3 * i);
        }
      }
      function o() {
        var t = [],
          i = [];
        void 0 !== e.animation && i.push(e.animation),
          void 0 !== e.animations &&
            (e.animations.length
              ? (i = i.concat(e.animations))
              : i.push(e.animations));
        for (var r = 0; r < i.length; r++) {
          var n = THREE.AnimationClip.parseAnimation(i[r], a.bones);
          n && t.push(n);
        }
        if (a.morphTargets) {
          var o = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(
            a.morphTargets,
            10
          );
          t = t.concat(o);
        }
        t.length > 0 && (a.animations = t);
      }
      var a = new THREE.Geometry(),
        s = void 0 !== e.scale ? 1 / e.scale : 1;
      if (
        (i(s),
        r(),
        n(s),
        o(),
        a.computeFaceNormals(),
        a.computeBoundingSphere(),
        void 0 === e.materials || 0 === e.materials.length)
      )
        return {
          geometry: a,
        };
      var l = THREE.Loader.prototype.initMaterials(
        e.materials,
        t,
        this.crossOrigin
      );
      return {
        geometry: a,
        materials: l,
      };
    },
  }),
  (THREE.LoadingManager = function (e, t, i) {
    var r = this,
      n = !1,
      o = 0,
      a = 0;
    (this.onStart = void 0),
      (this.onLoad = e),
      (this.onProgress = t),
      (this.onError = i),
      (this.itemStart = function (e) {
        a++, !1 === n && void 0 !== r.onStart && r.onStart(e, o, a), (n = !0);
      }),
      (this.itemEnd = function (e) {
        o++,
          void 0 !== r.onProgress && r.onProgress(e, o, a),
          o === a && ((n = !1), void 0 !== r.onLoad && r.onLoad());
      }),
      (this.itemError = function (e) {
        void 0 !== r.onError && r.onError(e);
      });
  }),
  (THREE.DefaultLoadingManager = new THREE.LoadingManager()),
  (THREE.BufferGeometryLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.BufferGeometryLoader.prototype = {
    constructor: THREE.BufferGeometryLoader,
    load: function (e, t, i, r) {
      var n = this;
      new THREE.XHRLoader(n.manager).load(
        e,
        function (e) {
          t(n.parse(JSON.parse(e)));
        },
        i,
        r
      );
    },
    parse: function (e) {
      var t = new THREE.BufferGeometry(),
        i = e.data.index,
        r = {
          Int8Array: Int8Array,
          Uint8Array: Uint8Array,
          Uint8ClampedArray: Uint8ClampedArray,
          Int16Array: Int16Array,
          Uint16Array: Uint16Array,
          Int32Array: Int32Array,
          Uint32Array: Uint32Array,
          Float32Array: Float32Array,
          Float64Array: Float64Array,
        };
      if (void 0 !== i) {
        var n = new r[i.type](i.array);
        t.setIndex(new THREE.BufferAttribute(n, 1));
      }
      var o = e.data.attributes;
      for (var a in o) {
        var s = o[a];
        n = new r[s.type](s.array);
        t.addAttribute(a, new THREE.BufferAttribute(n, s.itemSize));
      }
      var l = e.data.groups || e.data.drawcalls || e.data.offsets;
      if (void 0 !== l)
        for (var h = 0, c = l.length; h !== c; ++h) {
          var u = l[h];
          t.addGroup(u.start, u.count, u.materialIndex);
        }
      var p = e.data.boundingSphere;
      if (void 0 !== p) {
        var d = new THREE.Vector3();
        void 0 !== p.center && d.fromArray(p.center),
          (t.boundingSphere = new THREE.Sphere(d, p.radius));
      }
      return t;
    },
  }),
  (THREE.MaterialLoader = function (e) {
    (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
      (this.textures = {});
  }),
  (THREE.MaterialLoader.prototype = {
    constructor: THREE.MaterialLoader,
    load: function (e, t, i, r) {
      var n = this;
      new THREE.XHRLoader(n.manager).load(
        e,
        function (e) {
          t(n.parse(JSON.parse(e)));
        },
        i,
        r
      );
    },
    setTextures: function (e) {
      this.textures = e;
    },
    getTexture: function (e) {
      var t = this.textures;
      return (
        void 0 === t[e] &&
          console.warn("THREE.MaterialLoader: Undefined texture", e),
        t[e]
      );
    },
    parse: function (e) {
      var t = new THREE[e.type]();
      if (
        (void 0 !== e.uuid && (t.uuid = e.uuid),
        void 0 !== e.name && (t.name = e.name),
        void 0 !== e.color && t.color.setHex(e.color),
        void 0 !== e.roughness && (t.roughness = e.roughness),
        void 0 !== e.metalness && (t.metalness = e.metalness),
        void 0 !== e.emissive && t.emissive.setHex(e.emissive),
        void 0 !== e.specular && t.specular.setHex(e.specular),
        void 0 !== e.shininess && (t.shininess = e.shininess),
        void 0 !== e.uniforms && (t.uniforms = e.uniforms),
        void 0 !== e.vertexShader && (t.vertexShader = e.vertexShader),
        void 0 !== e.fragmentShader && (t.fragmentShader = e.fragmentShader),
        void 0 !== e.vertexColors && (t.vertexColors = e.vertexColors),
        void 0 !== e.shading && (t.shading = e.shading),
        void 0 !== e.blending && (t.blending = e.blending),
        void 0 !== e.side && (t.side = e.side),
        void 0 !== e.opacity && (t.opacity = e.opacity),
        void 0 !== e.transparent && (t.transparent = e.transparent),
        void 0 !== e.alphaTest && (t.alphaTest = e.alphaTest),
        void 0 !== e.depthTest && (t.depthTest = e.depthTest),
        void 0 !== e.depthWrite && (t.depthWrite = e.depthWrite),
        void 0 !== e.colorWrite && (t.colorWrite = e.colorWrite),
        void 0 !== e.wireframe && (t.wireframe = e.wireframe),
        void 0 !== e.wireframeLinewidth &&
          (t.wireframeLinewidth = e.wireframeLinewidth),
        void 0 !== e.size && (t.size = e.size),
        void 0 !== e.sizeAttenuation && (t.sizeAttenuation = e.sizeAttenuation),
        void 0 !== e.map && (t.map = this.getTexture(e.map)),
        void 0 !== e.alphaMap &&
          ((t.alphaMap = this.getTexture(e.alphaMap)), (t.transparent = !0)),
        void 0 !== e.bumpMap && (t.bumpMap = this.getTexture(e.bumpMap)),
        void 0 !== e.bumpScale && (t.bumpScale = e.bumpScale),
        void 0 !== e.normalMap && (t.normalMap = this.getTexture(e.normalMap)),
        void 0 !== e.normalScale)
      ) {
        var i = e.normalScale;
        !1 === Array.isArray(i) && (i = [i, i]),
          (t.normalScale = new THREE.Vector2().fromArray(i));
      }
      if (
        (void 0 !== e.displacementMap &&
          (t.displacementMap = this.getTexture(e.displacementMap)),
        void 0 !== e.displacementScale &&
          (t.displacementScale = e.displacementScale),
        void 0 !== e.displacementBias &&
          (t.displacementBias = e.displacementBias),
        void 0 !== e.roughnessMap &&
          (t.roughnessMap = this.getTexture(e.roughnessMap)),
        void 0 !== e.metalnessMap &&
          (t.metalnessMap = this.getTexture(e.metalnessMap)),
        void 0 !== e.emissiveMap &&
          (t.emissiveMap = this.getTexture(e.emissiveMap)),
        void 0 !== e.emissiveIntensity &&
          (t.emissiveIntensity = e.emissiveIntensity),
        void 0 !== e.specularMap &&
          (t.specularMap = this.getTexture(e.specularMap)),
        void 0 !== e.envMap &&
          ((t.envMap = this.getTexture(e.envMap)),
          (t.combine = THREE.MultiplyOperation)),
        e.reflectivity && (t.reflectivity = e.reflectivity),
        void 0 !== e.lightMap && (t.lightMap = this.getTexture(e.lightMap)),
        void 0 !== e.lightMapIntensity &&
          (t.lightMapIntensity = e.lightMapIntensity),
        void 0 !== e.aoMap && (t.aoMap = this.getTexture(e.aoMap)),
        void 0 !== e.aoMapIntensity && (t.aoMapIntensity = e.aoMapIntensity),
        void 0 !== e.materials)
      )
        for (var r = 0, n = e.materials.length; r < n; r++)
          t.materials.push(this.parse(e.materials[r]));
      return t;
    },
  }),
  (THREE.ObjectLoader = function (e) {
    (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
      (this.texturePath = "");
  }),
  (THREE.ObjectLoader.prototype = {
    constructor: THREE.ObjectLoader,
    load: function (e, t, i, r) {
      "" === this.texturePath &&
        (this.texturePath = e.substring(0, e.lastIndexOf("/") + 1));
      var n = this;
      new THREE.XHRLoader(n.manager).load(
        e,
        function (e) {
          n.parse(JSON.parse(e), t);
        },
        i,
        r
      );
    },
    setTexturePath: function (e) {
      this.texturePath = e;
    },
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    parse: function (e, t) {
      var i = this.parseGeometries(e.geometries),
        r = this.parseImages(e.images, function () {
          void 0 !== t && t(a);
        }),
        n = this.parseTextures(e.textures, r),
        o = this.parseMaterials(e.materials, n),
        a = this.parseObject(e.object, i, o);
      return (
        e.animations && (a.animations = this.parseAnimations(e.animations)),
        (void 0 !== e.images && 0 !== e.images.length) ||
          (void 0 !== t && t(a)),
        a
      );
    },
    parseGeometries: function (e) {
      var t = {};
      if (void 0 !== e)
        for (
          var i = new THREE.JSONLoader(),
            r = new THREE.BufferGeometryLoader(),
            n = 0,
            o = e.length;
          n < o;
          n++
        ) {
          var a,
            s = e[n];
          switch (s.type) {
            case "PlaneGeometry":
            case "PlaneBufferGeometry":
              a = new THREE[s.type](
                s.width,
                s.height,
                s.widthSegments,
                s.heightSegments
              );
              break;
            case "BoxGeometry":
            case "CubeGeometry":
              a = new THREE.BoxGeometry(
                s.width,
                s.height,
                s.depth,
                s.widthSegments,
                s.heightSegments,
                s.depthSegments
              );
              break;
            case "CircleBufferGeometry":
              a = new THREE.CircleBufferGeometry(
                s.radius,
                s.segments,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "CircleGeometry":
              a = new THREE.CircleGeometry(
                s.radius,
                s.segments,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "CylinderGeometry":
              a = new THREE.CylinderGeometry(
                s.radiusTop,
                s.radiusBottom,
                s.height,
                s.radialSegments,
                s.heightSegments,
                s.openEnded,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "SphereGeometry":
              a = new THREE.SphereGeometry(
                s.radius,
                s.widthSegments,
                s.heightSegments,
                s.phiStart,
                s.phiLength,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "SphereBufferGeometry":
              a = new THREE.SphereBufferGeometry(
                s.radius,
                s.widthSegments,
                s.heightSegments,
                s.phiStart,
                s.phiLength,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "DodecahedronGeometry":
              a = new THREE.DodecahedronGeometry(s.radius, s.detail);
              break;
            case "IcosahedronGeometry":
              a = new THREE.IcosahedronGeometry(s.radius, s.detail);
              break;
            case "OctahedronGeometry":
              a = new THREE.OctahedronGeometry(s.radius, s.detail);
              break;
            case "TetrahedronGeometry":
              a = new THREE.TetrahedronGeometry(s.radius, s.detail);
              break;
            case "RingGeometry":
              a = new THREE.RingGeometry(
                s.innerRadius,
                s.outerRadius,
                s.thetaSegments,
                s.phiSegments,
                s.thetaStart,
                s.thetaLength
              );
              break;
            case "TorusGeometry":
              a = new THREE.TorusGeometry(
                s.radius,
                s.tube,
                s.radialSegments,
                s.tubularSegments,
                s.arc
              );
              break;
            case "TorusKnotGeometry":
              a = new THREE.TorusKnotGeometry(
                s.radius,
                s.tube,
                s.radialSegments,
                s.tubularSegments,
                s.p,
                s.q,
                s.heightScale
              );
              break;
            case "LatheGeometry":
              a = new THREE.LatheGeometry(
                s.points,
                s.segments,
                s.phiStart,
                s.phiLength
              );
              break;
            case "BufferGeometry":
              a = r.parse(s);
              break;
            case "Geometry":
              a = i.parse(s.data, this.texturePath).geometry;
              break;
            default:
              console.warn(
                'THREE.ObjectLoader: Unsupported geometry type "' + s.type + '"'
              );
              continue;
          }
          (a.uuid = s.uuid),
            void 0 !== s.name && (a.name = s.name),
            (t[s.uuid] = a);
        }
      return t;
    },
    parseMaterials: function (e, t) {
      var i = {};
      if (void 0 !== e) {
        var r = new THREE.MaterialLoader();
        r.setTextures(t);
        for (var n = 0, o = e.length; n < o; n++) {
          var a = r.parse(e[n]);
          i[a.uuid] = a;
        }
      }
      return i;
    },
    parseAnimations: function (e) {
      for (var t = [], i = 0; i < e.length; i++) {
        var r = THREE.AnimationClip.parse(e[i]);
        t.push(r);
      }
      return t;
    },
    parseImages: function (e, t) {
      function i(e) {
        return (
          r.manager.itemStart(e),
          a.load(e, function () {
            r.manager.itemEnd(e);
          })
        );
      }
      var r = this,
        n = {};
      if (void 0 !== e && e.length > 0) {
        var o = new THREE.LoadingManager(t),
          a = new THREE.ImageLoader(o);
        a.setCrossOrigin(this.crossOrigin);
        for (var s = 0, l = e.length; s < l; s++) {
          var h = e[s],
            c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url)
              ? h.url
              : r.texturePath + h.url;
          n[h.uuid] = i(c);
        }
      }
      return n;
    },
    parseTextures: function (e, t) {
      function i(e) {
        return "number" == typeof e
          ? e
          : (console.warn(
              "THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",
              e
            ),
            THREE[e]);
      }
      var r = {};
      if (void 0 !== e)
        for (var n = 0, o = e.length; n < o; n++) {
          var a = e[n];
          void 0 === a.image &&
            console.warn(
              'THREE.ObjectLoader: No "image" specified for',
              a.uuid
            ),
            void 0 === t[a.image] &&
              console.warn("THREE.ObjectLoader: Undefined image", a.image);
          var s = new THREE.Texture(t[a.image]);
          (s.needsUpdate = !0),
            (s.uuid = a.uuid),
            void 0 !== a.name && (s.name = a.name),
            void 0 !== a.mapping && (s.mapping = i(a.mapping)),
            void 0 !== a.offset &&
              (s.offset = new THREE.Vector2(a.offset[0], a.offset[1])),
            void 0 !== a.repeat &&
              (s.repeat = new THREE.Vector2(a.repeat[0], a.repeat[1])),
            void 0 !== a.minFilter && (s.minFilter = i(a.minFilter)),
            void 0 !== a.magFilter && (s.magFilter = i(a.magFilter)),
            void 0 !== a.anisotropy && (s.anisotropy = a.anisotropy),
            Array.isArray(a.wrap) &&
              ((s.wrapS = i(a.wrap[0])), (s.wrapT = i(a.wrap[1]))),
            (r[a.uuid] = s);
        }
      return r;
    },
    parseObject: (function () {
      var e = new THREE.Matrix4();
      return function (t, i, r) {
        function n(e) {
          return (
            void 0 === i[e] &&
              console.warn("THREE.ObjectLoader: Undefined geometry", e),
            i[e]
          );
        }
        function o(e) {
          if (void 0 !== e)
            return (
              void 0 === r[e] &&
                console.warn("THREE.ObjectLoader: Undefined material", e),
              r[e]
            );
        }
        var a;
        switch (t.type) {
          case "Scene":
            a = new THREE.Scene();
            break;
          case "PerspectiveCamera":
            a = new THREE.PerspectiveCamera(t.fov, t.aspect, t.near, t.far);
            break;
          case "OrthographicCamera":
            a = new THREE.OrthographicCamera(
              t.left,
              t.right,
              t.top,
              t.bottom,
              t.near,
              t.far
            );
            break;
          case "AmbientLight":
            a = new THREE.AmbientLight(t.color, t.intensity);
            break;
          case "DirectionalLight":
            a = new THREE.DirectionalLight(t.color, t.intensity);
            break;
          case "PointLight":
            a = new THREE.PointLight(t.color, t.intensity, t.distance, t.decay);
            break;
          case "SpotLight":
            a = new THREE.SpotLight(
              t.color,
              t.intensity,
              t.distance,
              t.angle,
              t.exponent,
              t.decay
            );
            break;
          case "HemisphereLight":
            a = new THREE.HemisphereLight(t.color, t.groundColor, t.intensity);
            break;
          case "Mesh":
            var s = n(t.geometry),
              l = o(t.material);
            a =
              s.bones && s.bones.length > 0
                ? new THREE.SkinnedMesh(s, l)
                : new THREE.Mesh(s, l);
            break;
          case "LOD":
            a = new THREE.LOD();
            break;
          case "Line":
            a = new THREE.Line(n(t.geometry), o(t.material), t.mode);
            break;
          case "PointCloud":
          case "Points":
            a = new THREE.Points(n(t.geometry), o(t.material));
            break;
          case "Sprite":
            a = new THREE.Sprite(o(t.material));
            break;
          case "Group":
            a = new THREE.Group();
            break;
          default:
            a = new THREE.Object3D();
        }
        if (
          ((a.uuid = t.uuid),
          void 0 !== t.name && (a.name = t.name),
          void 0 !== t.matrix
            ? (e.fromArray(t.matrix),
              e.decompose(a.position, a.quaternion, a.scale))
            : (void 0 !== t.position && a.position.fromArray(t.position),
              void 0 !== t.rotation && a.rotation.fromArray(t.rotation),
              void 0 !== t.scale && a.scale.fromArray(t.scale)),
          void 0 !== t.castShadow && (a.castShadow = t.castShadow),
          void 0 !== t.receiveShadow && (a.receiveShadow = t.receiveShadow),
          void 0 !== t.visible && (a.visible = t.visible),
          void 0 !== t.userData && (a.userData = t.userData),
          void 0 !== t.children)
        )
          for (var h in t.children)
            a.add(this.parseObject(t.children[h], i, r));
        if ("LOD" === t.type)
          for (var c = t.levels, u = 0; u < c.length; u++) {
            var p = c[u];
            void 0 !== (h = a.getObjectByProperty("uuid", p.object)) &&
              a.addLevel(h, p.distance);
          }
        return a;
      };
    })(),
  }),
  (THREE.TextureLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.TextureLoader.prototype = {
    constructor: THREE.TextureLoader,
    load: function (e, t, i, r) {
      var n = new THREE.Texture(),
        o = new THREE.ImageLoader(this.manager);
      return (
        o.setCrossOrigin(this.crossOrigin),
        o.setPath(this.path),
        o.load(
          e,
          function (e) {
            (n.image = e), (n.needsUpdate = !0), void 0 !== t && t(n);
          },
          i,
          r
        ),
        n
      );
    },
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    setPath: function (e) {
      this.path = e;
    },
  }),
  (THREE.CubeTextureLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.CubeTextureLoader.prototype = {
    constructor: THREE.CubeTextureLoader,
    load: function (e, t, i, r) {
      function n(i) {
        a.load(
          e[i],
          function (e) {
            (o.images[i] = e), 6 === ++s && ((o.needsUpdate = !0), t && t(o));
          },
          void 0,
          r
        );
      }
      var o = new THREE.CubeTexture([]),
        a = new THREE.ImageLoader(this.manager);
      a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
      for (var s = 0, l = 0; l < e.length; ++l) n(l);
      return o;
    },
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    setPath: function (e) {
      this.path = e;
    },
  }),
  (THREE.DataTextureLoader = THREE.BinaryTextureLoader =
    function (e) {
      (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
        (this._parser = null);
    }),
  (THREE.BinaryTextureLoader.prototype = {
    constructor: THREE.BinaryTextureLoader,
    load: function (e, t, i, r) {
      var n = this,
        o = new THREE.DataTexture(),
        a = new THREE.XHRLoader(this.manager);
      return (
        a.setResponseType("arraybuffer"),
        a.load(
          e,
          function (e) {
            var i = n._parser(e);
            i &&
              (void 0 !== i.image
                ? (o.image = i.image)
                : void 0 !== i.data &&
                  ((o.image.width = i.width),
                  (o.image.height = i.height),
                  (o.image.data = i.data)),
              (o.wrapS =
                void 0 !== i.wrapS ? i.wrapS : THREE.ClampToEdgeWrapping),
              (o.wrapT =
                void 0 !== i.wrapT ? i.wrapT : THREE.ClampToEdgeWrapping),
              (o.magFilter =
                void 0 !== i.magFilter ? i.magFilter : THREE.LinearFilter),
              (o.minFilter =
                void 0 !== i.minFilter
                  ? i.minFilter
                  : THREE.LinearMipMapLinearFilter),
              (o.anisotropy = void 0 !== i.anisotropy ? i.anisotropy : 1),
              void 0 !== i.format && (o.format = i.format),
              void 0 !== i.type && (o.type = i.type),
              void 0 !== i.mipmaps && (o.mipmaps = i.mipmaps),
              1 === i.mipmapCount && (o.minFilter = THREE.LinearFilter),
              (o.needsUpdate = !0),
              t && t(o, i));
          },
          i,
          r
        ),
        o
      );
    },
  }),
  (THREE.CompressedTextureLoader = function (e) {
    (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
      (this._parser = null);
  }),
  (THREE.CompressedTextureLoader.prototype = {
    constructor: THREE.CompressedTextureLoader,
    load: function (e, t, i, r) {
      function n(n) {
        l.load(
          e[n],
          function (e) {
            var i = o._parser(e, !0);
            (a[n] = {
              width: i.width,
              height: i.height,
              format: i.format,
              mipmaps: i.mipmaps,
            }),
              6 === (h += 1) &&
                (1 === i.mipmapCount && (s.minFilter = THREE.LinearFilter),
                (s.format = i.format),
                (s.needsUpdate = !0),
                t && t(s));
          },
          i,
          r
        );
      }
      var o = this,
        a = [],
        s = new THREE.CompressedTexture();
      s.image = a;
      var l = new THREE.XHRLoader(this.manager);
      if (
        (l.setPath(this.path),
        l.setResponseType("arraybuffer"),
        Array.isArray(e))
      )
        for (var h = 0, c = 0, u = e.length; c < u; ++c) n(c);
      else
        l.load(
          e,
          function (e) {
            var i = o._parser(e, !0);
            if (i.isCubemap)
              for (
                var r = i.mipmaps.length / i.mipmapCount, n = 0;
                n < r;
                n++
              ) {
                a[n] = {
                  mipmaps: [],
                };
                for (var l = 0; l < i.mipmapCount; l++)
                  a[n].mipmaps.push(i.mipmaps[n * i.mipmapCount + l]),
                    (a[n].format = i.format),
                    (a[n].width = i.width),
                    (a[n].height = i.height);
              }
            else
              (s.image.width = i.width),
                (s.image.height = i.height),
                (s.mipmaps = i.mipmaps);
            1 === i.mipmapCount && (s.minFilter = THREE.LinearFilter),
              (s.format = i.format),
              (s.needsUpdate = !0),
              t && t(s);
          },
          i,
          r
        );
      return s;
    },
    setPath: function (e) {
      this.path = e;
    },
  }),
  (THREE.Material = function () {
    Object.defineProperty(this, "id", {
      value: THREE.MaterialIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.type = "Material"),
      (this.side = THREE.FrontSide),
      (this.opacity = 1),
      (this.transparent = !1),
      (this.blending = THREE.NormalBlending),
      (this.blendSrc = THREE.SrcAlphaFactor),
      (this.blendDst = THREE.OneMinusSrcAlphaFactor),
      (this.blendEquation = THREE.AddEquation),
      (this.blendSrcAlpha = null),
      (this.blendDstAlpha = null),
      (this.blendEquationAlpha = null),
      (this.depthFunc = THREE.LessEqualDepth),
      (this.depthTest = !0),
      (this.depthWrite = !0),
      (this.colorWrite = !0),
      (this.precision = null),
      (this.polygonOffset = !1),
      (this.polygonOffsetFactor = 0),
      (this.polygonOffsetUnits = 0),
      (this.alphaTest = 0),
      (this.overdraw = 0),
      (this.visible = !0),
      (this._needsUpdate = !0);
  }),
  (THREE.Material.prototype = {
    constructor: THREE.Material,
    get needsUpdate() {
      return this._needsUpdate;
    },
    set needsUpdate(e) {
      !0 === e && this.update(), (this._needsUpdate = e);
    },
    setValues: function (e) {
      if (void 0 !== e)
        for (var t in e) {
          var i = e[t];
          if (void 0 !== i) {
            var r = this[t];
            void 0 !== r
              ? r instanceof THREE.Color
                ? r.set(i)
                : r instanceof THREE.Vector3 && i instanceof THREE.Vector3
                ? r.copy(i)
                : (this[t] = "overdraw" === t ? Number(i) : i)
              : console.warn(
                  "THREE." +
                    this.type +
                    ": '" +
                    t +
                    "' is not a property of this material."
                );
          } else
            console.warn("THREE.Material: '" + t + "' parameter is undefined.");
        }
    },
    toJSON: function (e) {
      function t(e) {
        var t = [];
        for (var i in e) {
          var r = e[i];
          delete r.metadata, t.push(r);
        }
        return t;
      }
      var i = void 0 === e;
      i &&
        (e = {
          textures: {},
          images: {},
        });
      var r = {
        metadata: {
          version: 4.4,
          type: "Material",
          generator: "Material.toJSON",
        },
      };
      if (
        ((r.uuid = this.uuid),
        (r.type = this.type),
        "" !== this.name && (r.name = this.name),
        this.color instanceof THREE.Color && (r.color = this.color.getHex()),
        0.5 !== this.roughness && (r.roughness = this.roughness),
        0.5 !== this.metalness && (r.metalness = this.metalness),
        this.emissive instanceof THREE.Color &&
          (r.emissive = this.emissive.getHex()),
        this.specular instanceof THREE.Color &&
          (r.specular = this.specular.getHex()),
        void 0 !== this.shininess && (r.shininess = this.shininess),
        this.map instanceof THREE.Texture && (r.map = this.map.toJSON(e).uuid),
        this.alphaMap instanceof THREE.Texture &&
          (r.alphaMap = this.alphaMap.toJSON(e).uuid),
        this.lightMap instanceof THREE.Texture &&
          (r.lightMap = this.lightMap.toJSON(e).uuid),
        this.bumpMap instanceof THREE.Texture &&
          ((r.bumpMap = this.bumpMap.toJSON(e).uuid),
          (r.bumpScale = this.bumpScale)),
        this.normalMap instanceof THREE.Texture &&
          ((r.normalMap = this.normalMap.toJSON(e).uuid),
          (r.normalScale = this.normalScale.toArray())),
        this.displacementMap instanceof THREE.Texture &&
          ((r.displacementMap = this.displacementMap.toJSON(e).uuid),
          (r.displacementScale = this.displacementScale),
          (r.displacementBias = this.displacementBias)),
        this.roughnessMap instanceof THREE.Texture &&
          (r.roughnessMap = this.roughnessMap.toJSON(e).uuid),
        this.metalnessMap instanceof THREE.Texture &&
          (r.metalnessMap = this.metalnessMap.toJSON(e).uuid),
        this.emissiveMap instanceof THREE.Texture &&
          (r.emissiveMap = this.emissiveMap.toJSON(e).uuid),
        this.specularMap instanceof THREE.Texture &&
          (r.specularMap = this.specularMap.toJSON(e).uuid),
        this.envMap instanceof THREE.Texture &&
          ((r.envMap = this.envMap.toJSON(e).uuid),
          (r.reflectivity = this.reflectivity)),
        void 0 !== this.size && (r.size = this.size),
        void 0 !== this.sizeAttenuation &&
          (r.sizeAttenuation = this.sizeAttenuation),
        void 0 !== this.vertexColors &&
          this.vertexColors !== THREE.NoColors &&
          (r.vertexColors = this.vertexColors),
        void 0 !== this.shading &&
          this.shading !== THREE.SmoothShading &&
          (r.shading = this.shading),
        void 0 !== this.blending &&
          this.blending !== THREE.NormalBlending &&
          (r.blending = this.blending),
        void 0 !== this.side &&
          this.side !== THREE.FrontSide &&
          (r.side = this.side),
        this.opacity < 1 && (r.opacity = this.opacity),
        !0 === this.transparent && (r.transparent = this.transparent),
        this.alphaTest > 0 && (r.alphaTest = this.alphaTest),
        !0 === this.wireframe && (r.wireframe = this.wireframe),
        this.wireframeLinewidth > 1 &&
          (r.wireframeLinewidth = this.wireframeLinewidth),
        i)
      ) {
        var n = t(e.textures),
          o = t(e.images);
        n.length > 0 && (r.textures = n), o.length > 0 && (r.images = o);
      }
      return r;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return (
        (this.name = e.name),
        (this.side = e.side),
        (this.opacity = e.opacity),
        (this.transparent = e.transparent),
        (this.blending = e.blending),
        (this.blendSrc = e.blendSrc),
        (this.blendDst = e.blendDst),
        (this.blendEquation = e.blendEquation),
        (this.blendSrcAlpha = e.blendSrcAlpha),
        (this.blendDstAlpha = e.blendDstAlpha),
        (this.blendEquationAlpha = e.blendEquationAlpha),
        (this.depthFunc = e.depthFunc),
        (this.depthTest = e.depthTest),
        (this.depthWrite = e.depthWrite),
        (this.colorWrite = e.colorWrite),
        (this.precision = e.precision),
        (this.polygonOffset = e.polygonOffset),
        (this.polygonOffsetFactor = e.polygonOffsetFactor),
        (this.polygonOffsetUnits = e.polygonOffsetUnits),
        (this.alphaTest = e.alphaTest),
        (this.overdraw = e.overdraw),
        (this.visible = e.visible),
        this
      );
    },
    update: function () {
      this.dispatchEvent({
        type: "update",
      });
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.Material.prototype),
  (THREE.MaterialIdCount = 0),
  (THREE.LineBasicMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "LineBasicMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.linewidth = 1),
      (this.linecap = "round"),
      (this.linejoin = "round"),
      (this.vertexColors = THREE.NoColors),
      (this.fog = !0),
      this.setValues(e);
  }),
  (THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial),
  (THREE.LineBasicMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.linewidth = e.linewidth),
      (this.linecap = e.linecap),
      (this.linejoin = e.linejoin),
      (this.vertexColors = e.vertexColors),
      (this.fog = e.fog),
      this
    );
  }),
  (THREE.LineDashedMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "LineDashedMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.linewidth = 1),
      (this.scale = 1),
      (this.dashSize = 3),
      (this.gapSize = 1),
      (this.vertexColors = THREE.NoColors),
      (this.fog = !0),
      this.setValues(e);
  }),
  (THREE.LineDashedMaterial.prototype = Object.create(
    THREE.Material.prototype
  )),
  (THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial),
  (THREE.LineDashedMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.linewidth = e.linewidth),
      (this.scale = e.scale),
      (this.dashSize = e.dashSize),
      (this.gapSize = e.gapSize),
      (this.vertexColors = e.vertexColors),
      (this.fog = e.fog),
      this
    );
  }),
  (THREE.MeshBasicMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "MeshBasicMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.map = null),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.combine = THREE.MultiplyOperation),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.fog = !0),
      (this.shading = THREE.SmoothShading),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.vertexColors = THREE.NoColors),
      (this.skinning = !1),
      (this.morphTargets = !1),
      this.setValues(e);
  }),
  (THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial),
  (THREE.MeshBasicMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.fog = e.fog),
      (this.shading = e.shading),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.vertexColors = e.vertexColors),
      (this.skinning = e.skinning),
      (this.morphTargets = e.morphTargets),
      this
    );
  }),
  (THREE.MeshLambertMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "MeshLambertMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new THREE.Color(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.combine = THREE.MultiplyOperation),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.fog = !0),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.vertexColors = THREE.NoColors),
      (this.skinning = !1),
      (this.morphTargets = !1),
      (this.morphNormals = !1),
      this.setValues(e);
  }),
  (THREE.MeshLambertMaterial.prototype = Object.create(
    THREE.Material.prototype
  )),
  (THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial),
  (THREE.MeshLambertMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.fog = e.fog),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.vertexColors = e.vertexColors),
      (this.skinning = e.skinning),
      (this.morphTargets = e.morphTargets),
      (this.morphNormals = e.morphNormals),
      this
    );
  }),
  (THREE.MeshPhongMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "MeshPhongMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.specular = new THREE.Color(1118481)),
      (this.shininess = 30),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new THREE.Color(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalScale = new THREE.Vector2(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.combine = THREE.MultiplyOperation),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.fog = !0),
      (this.shading = THREE.SmoothShading),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.vertexColors = THREE.NoColors),
      (this.skinning = !1),
      (this.morphTargets = !1),
      (this.morphNormals = !1),
      this.setValues(e);
  }),
  (THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial),
  (THREE.MeshPhongMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      this.specular.copy(e.specular),
      (this.shininess = e.shininess),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.fog = e.fog),
      (this.shading = e.shading),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.vertexColors = e.vertexColors),
      (this.skinning = e.skinning),
      (this.morphTargets = e.morphTargets),
      (this.morphNormals = e.morphNormals),
      this
    );
  }),
  (THREE.MeshStandardMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "MeshStandardMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.roughness = 0.5),
      (this.metalness = 0.5),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new THREE.Color(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalScale = new THREE.Vector2(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.roughnessMap = null),
      (this.metalnessMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.envMapIntensity = 1),
      (this.refractionRatio = 0.98),
      (this.fog = !0),
      (this.shading = THREE.SmoothShading),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.vertexColors = THREE.NoColors),
      (this.skinning = !1),
      (this.morphTargets = !1),
      (this.morphNormals = !1),
      this.setValues(e);
  }),
  (THREE.MeshStandardMaterial.prototype = Object.create(
    THREE.Material.prototype
  )),
  (THREE.MeshStandardMaterial.prototype.constructor =
    THREE.MeshStandardMaterial),
  (THREE.MeshStandardMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.roughness = e.roughness),
      (this.metalness = e.metalness),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.roughnessMap = e.roughnessMap),
      (this.metalnessMap = e.metalnessMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      (this.envMapIntensity = e.envMapIntensity),
      (this.refractionRatio = e.refractionRatio),
      (this.fog = e.fog),
      (this.shading = e.shading),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.vertexColors = e.vertexColors),
      (this.skinning = e.skinning),
      (this.morphTargets = e.morphTargets),
      (this.morphNormals = e.morphNormals),
      this
    );
  }),
  (THREE.MeshDepthMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "MeshDepthMaterial"),
      (this.morphTargets = !1),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      this.setValues(e);
  }),
  (THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial),
  (THREE.MeshDepthMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      this
    );
  }),
  (THREE.MeshNormalMaterial = function (e) {
    THREE.Material.call(this, e),
      (this.type = "MeshNormalMaterial"),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.morphTargets = !1),
      this.setValues(e);
  }),
  (THREE.MeshNormalMaterial.prototype = Object.create(
    THREE.Material.prototype
  )),
  (THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial),
  (THREE.MeshNormalMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      this
    );
  }),
  (THREE.MultiMaterial = function (e) {
    (this.uuid = THREE.Math.generateUUID()),
      (this.type = "MultiMaterial"),
      (this.materials = e instanceof Array ? e : []),
      (this.visible = !0);
  }),
  (THREE.MultiMaterial.prototype = {
    constructor: THREE.MultiMaterial,
    toJSON: function (e) {
      for (
        var t = {
            metadata: {
              version: 4.2,
              type: "material",
              generator: "MaterialExporter",
            },
            uuid: this.uuid,
            type: this.type,
            materials: [],
          },
          i = this.materials,
          r = 0,
          n = i.length;
        r < n;
        r++
      ) {
        var o = i[r].toJSON(e);
        delete o.metadata, t.materials.push(o);
      }
      return (t.visible = this.visible), t;
    },
    clone: function () {
      for (
        var e = new this.constructor(), t = 0;
        t < this.materials.length;
        t++
      )
        e.materials.push(this.materials[t].clone());
      return (e.visible = this.visible), e;
    },
  }),
  (THREE.PointsMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "PointsMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.map = null),
      (this.size = 1),
      (this.sizeAttenuation = !0),
      (this.vertexColors = THREE.NoColors),
      (this.fog = !0),
      this.setValues(e);
  }),
  (THREE.PointsMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial),
  (THREE.PointsMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.size = e.size),
      (this.sizeAttenuation = e.sizeAttenuation),
      (this.vertexColors = e.vertexColors),
      (this.fog = e.fog),
      this
    );
  }),
  (THREE.ShaderMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "ShaderMaterial"),
      (this.defines = {}),
      (this.uniforms = {}),
      (this.vertexShader =
        "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"),
      (this.fragmentShader =
        "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}"),
      (this.shading = THREE.SmoothShading),
      (this.linewidth = 1),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.fog = !1),
      (this.lights = !1),
      (this.vertexColors = THREE.NoColors),
      (this.skinning = !1),
      (this.morphTargets = !1),
      (this.morphNormals = !1),
      (this.extensions = {
        derivatives: !1,
        fragDepth: !1,
        drawBuffers: !1,
        shaderTextureLOD: !1,
      }),
      (this.defaultAttributeValues = {
        color: [1, 1, 1],
        uv: [0, 0],
        uv2: [0, 0],
      }),
      (this.index0AttributeName = void 0),
      void 0 !== e &&
        (void 0 !== e.attributes &&
          console.error(
            "THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."
          ),
        this.setValues(e));
  }),
  (THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial),
  (THREE.ShaderMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      (this.fragmentShader = e.fragmentShader),
      (this.vertexShader = e.vertexShader),
      (this.uniforms = THREE.UniformsUtils.clone(e.uniforms)),
      (this.defines = e.defines),
      (this.shading = e.shading),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.fog = e.fog),
      (this.lights = e.lights),
      (this.vertexColors = e.vertexColors),
      (this.skinning = e.skinning),
      (this.morphTargets = e.morphTargets),
      (this.morphNormals = e.morphNormals),
      (this.extensions = e.extensions),
      this
    );
  }),
  (THREE.ShaderMaterial.prototype.toJSON = function (e) {
    var t = THREE.Material.prototype.toJSON.call(this, e);
    return (
      (t.uniforms = this.uniforms),
      (t.vertexShader = this.vertexShader),
      (t.fragmentShader = this.fragmentShader),
      t
    );
  }),
  (THREE.RawShaderMaterial = function (e) {
    THREE.ShaderMaterial.call(this, e), (this.type = "RawShaderMaterial");
  }),
  (THREE.RawShaderMaterial.prototype = Object.create(
    THREE.ShaderMaterial.prototype
  )),
  (THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial),
  (THREE.SpriteMaterial = function (e) {
    THREE.Material.call(this),
      (this.type = "SpriteMaterial"),
      (this.color = new THREE.Color(16777215)),
      (this.map = null),
      (this.rotation = 0),
      (this.fog = !1),
      this.setValues(e);
  }),
  (THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype)),
  (THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial),
  (THREE.SpriteMaterial.prototype.copy = function (e) {
    return (
      THREE.Material.prototype.copy.call(this, e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.rotation = e.rotation),
      (this.fog = e.fog),
      this
    );
  }),
  (THREE.Texture = function (e, t, i, r, n, o, a, s, l) {
    Object.defineProperty(this, "id", {
      value: THREE.TextureIdCount++,
    }),
      (this.uuid = THREE.Math.generateUUID()),
      (this.name = ""),
      (this.sourceFile = ""),
      (this.image = void 0 !== e ? e : THREE.Texture.DEFAULT_IMAGE),
      (this.mipmaps = []),
      (this.mapping = void 0 !== t ? t : THREE.Texture.DEFAULT_MAPPING),
      (this.wrapS = void 0 !== i ? i : THREE.ClampToEdgeWrapping),
      (this.wrapT = void 0 !== r ? r : THREE.ClampToEdgeWrapping),
      (this.magFilter = void 0 !== n ? n : THREE.LinearFilter),
      (this.minFilter = void 0 !== o ? o : THREE.LinearMipMapLinearFilter),
      (this.anisotropy = void 0 !== l ? l : 1),
      (this.format = void 0 !== a ? a : THREE.RGBAFormat),
      (this.type = void 0 !== s ? s : THREE.UnsignedByteType),
      (this.offset = new THREE.Vector2(0, 0)),
      (this.repeat = new THREE.Vector2(1, 1)),
      (this.generateMipmaps = !0),
      (this.premultiplyAlpha = !1),
      (this.flipY = !0),
      (this.unpackAlignment = 4),
      (this.version = 0),
      (this.onUpdate = null);
  }),
  (THREE.Texture.DEFAULT_IMAGE = void 0),
  (THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping),
  (THREE.Texture.prototype = {
    constructor: THREE.Texture,
    set needsUpdate(e) {
      !0 === e && this.version++;
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return (
        (this.image = e.image),
        (this.mipmaps = e.mipmaps.slice(0)),
        (this.mapping = e.mapping),
        (this.wrapS = e.wrapS),
        (this.wrapT = e.wrapT),
        (this.magFilter = e.magFilter),
        (this.minFilter = e.minFilter),
        (this.anisotropy = e.anisotropy),
        (this.format = e.format),
        (this.type = e.type),
        this.offset.copy(e.offset),
        this.repeat.copy(e.repeat),
        (this.generateMipmaps = e.generateMipmaps),
        (this.premultiplyAlpha = e.premultiplyAlpha),
        (this.flipY = e.flipY),
        (this.unpackAlignment = e.unpackAlignment),
        this
      );
    },
    toJSON: function (e) {
      function t(e) {
        var t;
        return (
          void 0 !== e.toDataURL
            ? (t = e)
            : (((t = document.createElement("canvas")).width = e.width),
              (t.height = e.height),
              t.getContext("2d").drawImage(e, 0, 0, e.width, e.height)),
          t.width > 2048 || t.height > 2048
            ? t.toDataURL("image/jpeg", 0.6)
            : t.toDataURL("image/png")
        );
      }
      if (void 0 !== e.textures[this.uuid]) return e.textures[this.uuid];
      var i = {
        metadata: {
          version: 4.4,
          type: "Texture",
          generator: "Texture.toJSON",
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        wrap: [this.wrapS, this.wrapT],
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
      };
      if (void 0 !== this.image) {
        var r = this.image;
        void 0 === r.uuid && (r.uuid = THREE.Math.generateUUID()),
          void 0 === e.images[r.uuid] &&
            (e.images[r.uuid] = {
              uuid: r.uuid,
              url: t(r),
            }),
          (i.image = r.uuid);
      }
      return (e.textures[this.uuid] = i), i;
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
    transformUv: function (e) {
      if (this.mapping === THREE.UVMapping) {
        if ((e.multiply(this.repeat), e.add(this.offset), e.x < 0 || e.x > 1))
          switch (this.wrapS) {
            case THREE.RepeatWrapping:
              e.x = e.x - Math.floor(e.x);
              break;
            case THREE.ClampToEdgeWrapping:
              e.x = e.x < 0 ? 0 : 1;
              break;
            case THREE.MirroredRepeatWrapping:
              1 === Math.abs(Math.floor(e.x) % 2)
                ? (e.x = Math.ceil(e.x) - e.x)
                : (e.x = e.x - Math.floor(e.x));
          }
        if (e.y < 0 || e.y > 1)
          switch (this.wrapT) {
            case THREE.RepeatWrapping:
              e.y = e.y - Math.floor(e.y);
              break;
            case THREE.ClampToEdgeWrapping:
              e.y = e.y < 0 ? 0 : 1;
              break;
            case THREE.MirroredRepeatWrapping:
              1 === Math.abs(Math.floor(e.y) % 2)
                ? (e.y = Math.ceil(e.y) - e.y)
                : (e.y = e.y - Math.floor(e.y));
          }
        this.flipY && (e.y = 1 - e.y);
      }
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype),
  (THREE.TextureIdCount = 0),
  (THREE.CanvasTexture = function (e, t, i, r, n, o, a, s, l) {
    THREE.Texture.call(this, e, t, i, r, n, o, a, s, l),
      (this.needsUpdate = !0);
  }),
  (THREE.CanvasTexture.prototype = Object.create(THREE.Texture.prototype)),
  (THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture),
  (THREE.CubeTexture = function (e, t, i, r, n, o, a, s, l) {
    (t = void 0 !== t ? t : THREE.CubeReflectionMapping),
      THREE.Texture.call(this, e, t, i, r, n, o, a, s, l),
      (this.images = e),
      (this.flipY = !1);
  }),
  (THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype)),
  (THREE.CubeTexture.prototype.constructor = THREE.CubeTexture),
  (THREE.CubeTexture.prototype.copy = function (e) {
    return (
      THREE.Texture.prototype.copy.call(this, e), (this.images = e.images), this
    );
  }),
  (THREE.CompressedTexture = function (e, t, i, r, n, o, a, s, l, h, c) {
    THREE.Texture.call(this, null, o, a, s, l, h, r, n, c),
      (this.image = {
        width: t,
        height: i,
      }),
      (this.mipmaps = e),
      (this.flipY = !1),
      (this.generateMipmaps = !1);
  }),
  (THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype)),
  (THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture),
  (THREE.DataTexture = function (e, t, i, r, n, o, a, s, l, h, c) {
    THREE.Texture.call(this, null, o, a, s, l, h, r, n, c),
      (this.image = {
        data: e,
        width: t,
        height: i,
      }),
      (this.magFilter = void 0 !== l ? l : THREE.NearestFilter),
      (this.minFilter = void 0 !== h ? h : THREE.NearestFilter),
      (this.flipY = !1),
      (this.generateMipmaps = !1);
  }),
  (THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype)),
  (THREE.DataTexture.prototype.constructor = THREE.DataTexture),
  (THREE.VideoTexture = function (e, t, i, r, n, o, a, s, l) {
    function h() {
      requestAnimationFrame(h),
        e.readyState === e.HAVE_ENOUGH_DATA && (c.needsUpdate = !0);
    }
    THREE.Texture.call(this, e, t, i, r, n, o, a, s, l),
      (this.generateMipmaps = !1);
    var c = this;
    h();
  }),
  (THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype)),
  (THREE.VideoTexture.prototype.constructor = THREE.VideoTexture),
  (THREE.Group = function () {
    THREE.Object3D.call(this), (this.type = "Group");
  }),
  (THREE.Group.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Group.prototype.constructor = THREE.Group),
  (THREE.Points = function (e, t) {
    THREE.Object3D.call(this),
      (this.type = "Points"),
      (this.geometry = void 0 !== e ? e : new THREE.Geometry()),
      (this.material =
        void 0 !== t
          ? t
          : new THREE.PointsMaterial({
              color: 16777215 * Math.random(),
            }));
  }),
  (THREE.Points.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Points.prototype.constructor = THREE.Points),
  (THREE.Points.prototype.raycast = (function () {
    var e = new THREE.Matrix4(),
      t = new THREE.Ray(),
      i = new THREE.Sphere();
    return function (r, n) {
      function o(e, i) {
        var o = t.distanceSqToPoint(e);
        if (o < u) {
          var s = t.closestPointToPoint(e);
          s.applyMatrix4(l);
          var h = r.ray.origin.distanceTo(s);
          if (h < r.near || h > r.far) return;
          n.push({
            distance: h,
            distanceToRay: Math.sqrt(o),
            point: s.clone(),
            index: i,
            face: null,
            object: a,
          });
        }
      }
      var a = this,
        s = this.geometry,
        l = this.matrixWorld,
        h = r.params.Points.threshold;
      if (
        (null === s.boundingSphere && s.computeBoundingSphere(),
        i.copy(s.boundingSphere),
        i.applyMatrix4(l),
        !1 !== r.ray.intersectsSphere(i))
      ) {
        e.getInverse(l), t.copy(r.ray).applyMatrix4(e);
        var c = h / ((this.scale.x + this.scale.y + this.scale.z) / 3),
          u = c * c,
          p = new THREE.Vector3();
        if (s instanceof THREE.BufferGeometry) {
          var d = s.index,
            f = s.attributes.position.array;
          if (null !== d)
            for (var m = d.array, E = 0, g = m.length; E < g; E++) {
              var v = m[E];
              p.fromArray(f, 3 * v), o(p, v);
            }
          else {
            E = 0;
            for (var y = f.length / 3; E < y; E++)
              p.fromArray(f, 3 * E), o(p, E);
          }
        } else {
          var T = s.vertices;
          for (E = 0, y = T.length; E < y; E++) o(T[E], E);
        }
      }
    };
  })()),
  (THREE.Points.prototype.clone = function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }),
  (THREE.Line = function (e, t, i) {
    if (1 === i)
      return (
        console.warn(
          "THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."
        ),
        new THREE.LineSegments(e, t)
      );
    THREE.Object3D.call(this),
      (this.type = "Line"),
      (this.geometry = void 0 !== e ? e : new THREE.Geometry()),
      (this.material =
        void 0 !== t
          ? t
          : new THREE.LineBasicMaterial({
              color: 16777215 * Math.random(),
            }));
  }),
  (THREE.Line.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Line.prototype.constructor = THREE.Line),
  (THREE.Line.prototype.raycast = (function () {
    var e = new THREE.Matrix4(),
      t = new THREE.Ray(),
      i = new THREE.Sphere();
    return function (r, n) {
      var o = r.linePrecision,
        a = o * o,
        s = this.geometry,
        l = this.matrixWorld;
      if (
        (null === s.boundingSphere && s.computeBoundingSphere(),
        i.copy(s.boundingSphere),
        i.applyMatrix4(l),
        !1 !== r.ray.intersectsSphere(i))
      ) {
        e.getInverse(l), t.copy(r.ray).applyMatrix4(e);
        var h = new THREE.Vector3(),
          c = new THREE.Vector3(),
          u = new THREE.Vector3(),
          p = new THREE.Vector3(),
          d = this instanceof THREE.LineSegments ? 2 : 1;
        if (s instanceof THREE.BufferGeometry) {
          var f = s.index,
            m = s.attributes.position.array;
          if (null !== f)
            for (var E = f.array, g = 0, v = E.length - 1; g < v; g += d) {
              var y = E[g],
                T = E[g + 1];
              if (
                (h.fromArray(m, 3 * y),
                c.fromArray(m, 3 * T),
                !(t.distanceSqToSegment(h, c, p, u) > a))
              )
                p.applyMatrix4(this.matrixWorld),
                  (H = r.ray.origin.distanceTo(p)) < r.near ||
                    H > r.far ||
                    n.push({
                      distance: H,
                      point: u.clone().applyMatrix4(this.matrixWorld),
                      index: g,
                      face: null,
                      faceIndex: null,
                      object: this,
                    });
            }
          else
            for (g = 0, v = m.length / 3 - 1; g < v; g += d) {
              if (
                (h.fromArray(m, 3 * g),
                c.fromArray(m, 3 * g + 3),
                !(t.distanceSqToSegment(h, c, p, u) > a))
              )
                p.applyMatrix4(this.matrixWorld),
                  (H = r.ray.origin.distanceTo(p)) < r.near ||
                    H > r.far ||
                    n.push({
                      distance: H,
                      point: u.clone().applyMatrix4(this.matrixWorld),
                      index: g,
                      face: null,
                      faceIndex: null,
                      object: this,
                    });
            }
        } else if (s instanceof THREE.Geometry) {
          var R = s.vertices,
            x = R.length;
          for (g = 0; g < x - 1; g += d) {
            var H;
            if (!(t.distanceSqToSegment(R[g], R[g + 1], p, u) > a))
              p.applyMatrix4(this.matrixWorld),
                (H = r.ray.origin.distanceTo(p)) < r.near ||
                  H > r.far ||
                  n.push({
                    distance: H,
                    point: u.clone().applyMatrix4(this.matrixWorld),
                    index: g,
                    face: null,
                    faceIndex: null,
                    object: this,
                  });
          }
        }
      }
    };
  })()),
  (THREE.Line.prototype.clone = function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }),
  (THREE.LineStrip = 0),
  (THREE.LinePieces = 1),
  (THREE.LineSegments = function (e, t) {
    THREE.Line.call(this, e, t), (this.type = "LineSegments");
  }),
  (THREE.LineSegments.prototype = Object.create(THREE.Line.prototype)),
  (THREE.LineSegments.prototype.constructor = THREE.LineSegments),
  (THREE.Mesh = function (e, t) {
    THREE.Object3D.call(this),
      (this.type = "Mesh"),
      (this.geometry = void 0 !== e ? e : new THREE.Geometry()),
      (this.material =
        void 0 !== t
          ? t
          : new THREE.MeshBasicMaterial({
              color: 16777215 * Math.random(),
            })),
      (this.drawMode = THREE.TrianglesDrawMode),
      this.updateMorphTargets();
  }),
  (THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Mesh.prototype.constructor = THREE.Mesh),
  (THREE.Mesh.prototype.setDrawMode = function (e) {
    this.drawMode = e;
  }),
  (THREE.Mesh.prototype.updateMorphTargets = function () {
    if (
      void 0 !== this.geometry.morphTargets &&
      this.geometry.morphTargets.length > 0
    ) {
      (this.morphTargetBase = -1),
        (this.morphTargetInfluences = []),
        (this.morphTargetDictionary = {});
      for (var e = 0, t = this.geometry.morphTargets.length; e < t; e++)
        this.morphTargetInfluences.push(0),
          (this.morphTargetDictionary[this.geometry.morphTargets[e].name] = e);
    }
  }),
  (THREE.Mesh.prototype.getMorphTargetIndexByName = function (e) {
    return void 0 !== this.morphTargetDictionary[e]
      ? this.morphTargetDictionary[e]
      : (console.warn(
          "THREE.Mesh.getMorphTargetIndexByName: morph target " +
            e +
            " does not exist. Returning 0."
        ),
        0);
  }),
  (THREE.Mesh.prototype.raycast = (function () {
    function e(e, t, i, r, n, o, a) {
      return (
        THREE.Triangle.barycoordFromPoint(e, t, i, r, m),
        n.multiplyScalar(m.x),
        o.multiplyScalar(m.y),
        a.multiplyScalar(m.z),
        n.add(o).add(a),
        n.clone()
      );
    }
    function t(e, t, i, r, n, o, a) {
      var s = e.material;
      if (
        null ===
        (s.side === THREE.BackSide
          ? i.intersectTriangle(o, n, r, !0, a)
          : i.intersectTriangle(r, n, o, s.side !== THREE.DoubleSide, a))
      )
        return null;
      g.copy(a), g.applyMatrix4(e.matrixWorld);
      var l = t.ray.origin.distanceTo(g);
      return l < t.near || l > t.far
        ? null
        : {
            distance: l,
            point: g.clone(),
            object: e,
          };
    }
    function i(i, r, n, o, h, c, u, m) {
      a.fromArray(o, 3 * c), s.fromArray(o, 3 * u), l.fromArray(o, 3 * m);
      var g = t(i, r, n, a, s, l, E);
      return (
        g &&
          (h &&
            (p.fromArray(h, 2 * c),
            d.fromArray(h, 2 * u),
            f.fromArray(h, 2 * m),
            (g.uv = e(E, a, s, l, p, d, f))),
          (g.face = new THREE.Face3(c, u, m, THREE.Triangle.normal(a, s, l))),
          (g.faceIndex = c)),
        g
      );
    }
    var r = new THREE.Matrix4(),
      n = new THREE.Ray(),
      o = new THREE.Sphere(),
      a = new THREE.Vector3(),
      s = new THREE.Vector3(),
      l = new THREE.Vector3(),
      h = new THREE.Vector3(),
      c = new THREE.Vector3(),
      u = new THREE.Vector3(),
      p = new THREE.Vector2(),
      d = new THREE.Vector2(),
      f = new THREE.Vector2(),
      m = new THREE.Vector3(),
      E = new THREE.Vector3(),
      g = new THREE.Vector3();
    return function (m, g) {
      var v,
        y,
        T = this.geometry,
        R = this.material,
        x = this.matrixWorld;
      if (
        void 0 !== R &&
        (null === T.boundingSphere && T.computeBoundingSphere(),
        o.copy(T.boundingSphere),
        o.applyMatrix4(x),
        !1 !== m.ray.intersectsSphere(o) &&
          (r.getInverse(x),
          n.copy(m.ray).applyMatrix4(r),
          null === T.boundingBox || !1 !== n.intersectsBox(T.boundingBox)))
      )
        if (T instanceof THREE.BufferGeometry) {
          var H,
            b,
            w,
            q = T.index,
            M = T.attributes,
            _ = M.position.array;
          if ((void 0 !== M.uv && (v = M.uv.array), null !== q))
            for (var S = q.array, C = 0, L = S.length; C < L; C += 3)
              (H = S[C]),
                (b = S[C + 1]),
                (w = S[C + 2]),
                (y = i(this, m, n, _, v, H, b, w)) &&
                  ((y.faceIndex = Math.floor(C / 3)), g.push(y));
          else
            for (C = 0, L = _.length; C < L; C += 9)
              (y = i(
                this,
                m,
                n,
                _,
                v,
                (H = C / 3),
                (b = H + 1),
                (w = H + 2)
              )) && ((y.index = H), g.push(y));
        } else if (T instanceof THREE.Geometry) {
          var A,
            k,
            D,
            P = R instanceof THREE.MultiMaterial,
            I = !0 === P ? R.materials : null,
            V = T.vertices,
            O = T.faces,
            F = T.faceVertexUvs[0];
          F.length > 0 && (v = F);
          for (var z = 0, U = O.length; z < U; z++) {
            var B = O[z],
              N = !0 === P ? I[B.materialIndex] : R;
            if (void 0 !== N) {
              if (
                ((A = V[B.a]),
                (k = V[B.b]),
                (D = V[B.c]),
                !0 === N.morphTargets)
              ) {
                var j = T.morphTargets,
                  G = this.morphTargetInfluences;
                a.set(0, 0, 0), s.set(0, 0, 0), l.set(0, 0, 0);
                for (var W = 0, X = j.length; W < X; W++) {
                  var Q = G[W];
                  if (0 !== Q) {
                    var $ = j[W].vertices;
                    a.addScaledVector(h.subVectors($[B.a], A), Q),
                      s.addScaledVector(c.subVectors($[B.b], k), Q),
                      l.addScaledVector(u.subVectors($[B.c], D), Q);
                  }
                }
                a.add(A), s.add(k), l.add(D), (A = a), (k = s), (D = l);
              }
              if ((y = t(this, m, n, A, k, D, E))) {
                if (v) {
                  var Y = v[z];
                  p.copy(Y[0]),
                    d.copy(Y[1]),
                    f.copy(Y[2]),
                    (y.uv = e(E, A, k, D, p, d, f));
                }
                (y.face = B), (y.faceIndex = z), g.push(y);
              }
            }
          }
        }
    };
  })()),
  (THREE.Mesh.prototype.clone = function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }),
  (THREE.Bone = function (e) {
    THREE.Object3D.call(this), (this.type = "Bone"), (this.skin = e);
  }),
  (THREE.Bone.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Bone.prototype.constructor = THREE.Bone),
  (THREE.Bone.prototype.copy = function (e) {
    return (
      THREE.Object3D.prototype.copy.call(this, e), (this.skin = e.skin), this
    );
  }),
  (THREE.Skeleton = function (e, t, i) {
    if (
      ((this.useVertexTexture = void 0 === i || i),
      (this.identityMatrix = new THREE.Matrix4()),
      (e = e || []),
      (this.bones = e.slice(0)),
      this.useVertexTexture)
    ) {
      var r = Math.sqrt(4 * this.bones.length);
      (r = THREE.Math.nextPowerOfTwo(Math.ceil(r))),
        (r = Math.max(r, 4)),
        (this.boneTextureWidth = r),
        (this.boneTextureHeight = r),
        (this.boneMatrices = new Float32Array(
          this.boneTextureWidth * this.boneTextureHeight * 4
        )),
        (this.boneTexture = new THREE.DataTexture(
          this.boneMatrices,
          this.boneTextureWidth,
          this.boneTextureHeight,
          THREE.RGBAFormat,
          THREE.FloatType
        ));
    } else this.boneMatrices = new Float32Array(16 * this.bones.length);
    if (void 0 === t) this.calculateInverses();
    else if (this.bones.length === t.length) this.boneInverses = t.slice(0);
    else {
      console.warn("THREE.Skeleton bonInverses is the wrong length."),
        (this.boneInverses = []);
      for (var n = 0, o = this.bones.length; n < o; n++)
        this.boneInverses.push(new THREE.Matrix4());
    }
  }),
  (THREE.Skeleton.prototype.calculateInverses = function () {
    this.boneInverses = [];
    for (var e = 0, t = this.bones.length; e < t; e++) {
      var i = new THREE.Matrix4();
      this.bones[e] && i.getInverse(this.bones[e].matrixWorld),
        this.boneInverses.push(i);
    }
  }),
  (THREE.Skeleton.prototype.pose = function () {
    for (var e, t = 0, i = this.bones.length; t < i; t++)
      (e = this.bones[t]) && e.matrixWorld.getInverse(this.boneInverses[t]);
    for (t = 0, i = this.bones.length; t < i; t++)
      (e = this.bones[t]) &&
        (e.parent
          ? (e.matrix.getInverse(e.parent.matrixWorld),
            e.matrix.multiply(e.matrixWorld))
          : e.matrix.copy(e.matrixWorld),
        e.matrix.decompose(e.position, e.quaternion, e.scale));
  }),
  (THREE.Skeleton.prototype.update = (function () {
    var e = new THREE.Matrix4();
    return function () {
      for (var t = 0, i = this.bones.length; t < i; t++) {
        var r = this.bones[t] ? this.bones[t].matrixWorld : this.identityMatrix;
        e.multiplyMatrices(r, this.boneInverses[t]),
          e.flattenToArrayOffset(this.boneMatrices, 16 * t);
      }
      this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
    };
  })()),
  (THREE.Skeleton.prototype.clone = function () {
    return new THREE.Skeleton(
      this.bones,
      this.boneInverses,
      this.useVertexTexture
    );
  }),
  (THREE.SkinnedMesh = function (e, t, i) {
    THREE.Mesh.call(this, e, t),
      (this.type = "SkinnedMesh"),
      (this.bindMode = "attached"),
      (this.bindMatrix = new THREE.Matrix4()),
      (this.bindMatrixInverse = new THREE.Matrix4());
    var r = [];
    if (this.geometry && void 0 !== this.geometry.bones) {
      for (var n, o, a = 0, s = this.geometry.bones.length; a < s; ++a)
        (o = this.geometry.bones[a]),
          (n = new THREE.Bone(this)),
          r.push(n),
          (n.name = o.name),
          n.position.fromArray(o.pos),
          n.quaternion.fromArray(o.rotq),
          void 0 !== o.scl && n.scale.fromArray(o.scl);
      for (a = 0, s = this.geometry.bones.length; a < s; ++a)
        -1 !== (o = this.geometry.bones[a]).parent && null !== o.parent
          ? r[o.parent].add(r[a])
          : this.add(r[a]);
    }
    this.normalizeSkinWeights(),
      this.updateMatrixWorld(!0),
      this.bind(new THREE.Skeleton(r, void 0, i), this.matrixWorld);
  }),
  (THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype)),
  (THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh),
  (THREE.SkinnedMesh.prototype.bind = function (e, t) {
    (this.skeleton = e),
      void 0 === t &&
        (this.updateMatrixWorld(!0),
        this.skeleton.calculateInverses(),
        (t = this.matrixWorld)),
      this.bindMatrix.copy(t),
      this.bindMatrixInverse.getInverse(t);
  }),
  (THREE.SkinnedMesh.prototype.pose = function () {
    this.skeleton.pose();
  }),
  (THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
    if (this.geometry instanceof THREE.Geometry)
      for (var e = 0; e < this.geometry.skinWeights.length; e++) {
        var t = this.geometry.skinWeights[e];
        (n = 1 / t.lengthManhattan()) !== 1 / 0
          ? t.multiplyScalar(n)
          : t.set(1, 0, 0, 0);
      }
    else if (this.geometry instanceof THREE.BufferGeometry) {
      var i = new THREE.Vector4(),
        r = this.geometry.attributes.skinWeight;
      for (e = 0; e < r.count; e++) {
        var n;
        (i.x = r.getX(e)),
          (i.y = r.getY(e)),
          (i.z = r.getZ(e)),
          (i.w = r.getW(e)),
          (n = 1 / i.lengthManhattan()) !== 1 / 0
            ? i.multiplyScalar(n)
            : i.set(1, 0, 0, 0),
          r.setXYZW(e, i.x, i.y, i.z, i.w);
      }
    }
  }),
  (THREE.SkinnedMesh.prototype.updateMatrixWorld = function () {
    THREE.Mesh.prototype.updateMatrixWorld.call(this, !0),
      "attached" === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.matrixWorld)
        : "detached" === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.bindMatrix)
        : console.warn(
            "THREE.SkinnedMesh unrecognized bindMode: " + this.bindMode
          );
  }),
  (THREE.SkinnedMesh.prototype.clone = function () {
    return new this.constructor(
      this.geometry,
      this.material,
      this.useVertexTexture
    ).copy(this);
  }),
  (THREE.LOD = function () {
    THREE.Object3D.call(this),
      (this.type = "LOD"),
      Object.defineProperties(this, {
        levels: {
          enumerable: !0,
          value: [],
        },
        objects: {
          get: function () {
            return (
              console.warn("THREE.LOD: .objects has been renamed to .levels."),
              this.levels
            );
          },
        },
      });
  }),
  (THREE.LOD.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.LOD.prototype.constructor = THREE.LOD),
  (THREE.LOD.prototype.addLevel = function (e, t) {
    void 0 === t && (t = 0), (t = Math.abs(t));
    for (var i = this.levels, r = 0; r < i.length && !(t < i[r].distance); r++);
    i.splice(r, 0, {
      distance: t,
      object: e,
    }),
      this.add(e);
  }),
  (THREE.LOD.prototype.getObjectForDistance = function (e) {
    for (
      var t = this.levels, i = 1, r = t.length;
      i < r && !(e < t[i].distance);
      i++
    );
    return t[i - 1].object;
  }),
  (THREE.LOD.prototype.raycast = (function () {
    var e = new THREE.Vector3();
    return function (t, i) {
      e.setFromMatrixPosition(this.matrixWorld);
      var r = t.ray.origin.distanceTo(e);
      this.getObjectForDistance(r).raycast(t, i);
    };
  })()),
  (THREE.LOD.prototype.update = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3();
    return function (i) {
      var r = this.levels;
      if (r.length > 1) {
        e.setFromMatrixPosition(i.matrixWorld),
          t.setFromMatrixPosition(this.matrixWorld);
        var n = e.distanceTo(t);
        r[0].object.visible = !0;
        for (var o = 1, a = r.length; o < a && n >= r[o].distance; o++)
          (r[o - 1].object.visible = !1), (r[o].object.visible = !0);
        for (; o < a; o++) r[o].object.visible = !1;
      }
    };
  })()),
  (THREE.LOD.prototype.copy = function (e) {
    THREE.Object3D.prototype.copy.call(this, e, !1);
    for (var t = e.levels, i = 0, r = t.length; i < r; i++) {
      var n = t[i];
      this.addLevel(n.object.clone(), n.distance);
    }
    return this;
  }),
  (THREE.LOD.prototype.toJSON = function (e) {
    var t = THREE.Object3D.prototype.toJSON.call(this, e);
    t.object.levels = [];
    for (var i = this.levels, r = 0, n = i.length; r < n; r++) {
      var o = i[r];
      t.object.levels.push({
        object: o.object.uuid,
        distance: o.distance,
      });
    }
    return t;
  }),
  (THREE.Sprite = (function () {
    var e = new Uint16Array([0, 1, 2, 0, 2, 3]),
      t = new Float32Array([
        -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0,
      ]),
      i = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
      r = new THREE.BufferGeometry();
    return (
      r.setIndex(new THREE.BufferAttribute(e, 1)),
      r.addAttribute("position", new THREE.BufferAttribute(t, 3)),
      r.addAttribute("uv", new THREE.BufferAttribute(i, 2)),
      function (e) {
        THREE.Object3D.call(this),
          (this.type = "Sprite"),
          (this.geometry = r),
          (this.material = void 0 !== e ? e : new THREE.SpriteMaterial());
      }
    );
  })()),
  (THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Sprite.prototype.constructor = THREE.Sprite),
  (THREE.Sprite.prototype.raycast = (function () {
    var e = new THREE.Vector3();
    return function (t, i) {
      e.setFromMatrixPosition(this.matrixWorld);
      var r = t.ray.distanceSqToPoint(e);
      r > this.scale.x * this.scale.y ||
        i.push({
          distance: Math.sqrt(r),
          point: this.position,
          face: null,
          object: this,
        });
    };
  })()),
  (THREE.Sprite.prototype.clone = function () {
    return new this.constructor(this.material).copy(this);
  }),
  (THREE.Particle = THREE.Sprite),
  (THREE.LensFlare = function (e, t, i, r, n) {
    THREE.Object3D.call(this),
      (this.lensFlares = []),
      (this.positionScreen = new THREE.Vector3()),
      (this.customUpdateCallback = void 0),
      void 0 !== e && this.add(e, t, i, r, n);
  }),
  (THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.LensFlare.prototype.constructor = THREE.LensFlare),
  (THREE.LensFlare.prototype.add = function (e, t, i, r, n, o) {
    void 0 === t && (t = -1),
      void 0 === i && (i = 0),
      void 0 === o && (o = 1),
      void 0 === n && (n = new THREE.Color(16777215)),
      void 0 === r && (r = THREE.NormalBlending),
      (i = Math.min(i, Math.max(0, i))),
      this.lensFlares.push({
        texture: e,
        size: t,
        distance: i,
        x: 0,
        y: 0,
        z: 0,
        scale: 1,
        rotation: 0,
        opacity: o,
        color: n,
        blending: r,
      });
  }),
  (THREE.LensFlare.prototype.updateLensFlares = function () {
    console.log("updateLensFlares");
    var e,
      t,
      i = this.lensFlares.length,
      r = 2 * -this.positionScreen.x,
      n = 2 * -this.positionScreen.y;
    for (e = 0; e < i; e++)
      ((t = this.lensFlares[e]).x = this.positionScreen.x + r * t.distance),
        (t.y = this.positionScreen.y + n * t.distance),
        (t.wantedRotation = t.x * Math.PI * 0.25),
        (t.rotation += 0.25 * (t.wantedRotation - t.rotation));
  }),
  (THREE.LensFlare.prototype.copy = function (e) {
    THREE.Object3D.prototype.copy.call(this, e),
      this.positionScreen.copy(e.positionScreen),
      (this.customUpdateCallback = e.customUpdateCallback);
    for (var t = 0, i = e.lensFlares.length; t < i; t++)
      this.lensFlares.push(e.lensFlares[t]);
    return this;
  }),
  (THREE.Scene = function () {
    THREE.Object3D.call(this),
      (this.type = "Scene"),
      (this.fog = null),
      (this.overrideMaterial = null),
      (this.autoUpdate = !0);
  }),
  (THREE.Scene.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.Scene.prototype.constructor = THREE.Scene),
  (THREE.Scene.prototype.copy = function (e) {
    return (
      THREE.Object3D.prototype.copy.call(this, e),
      null !== e.fog && (this.fog = e.fog.clone()),
      null !== e.overrideMaterial &&
        (this.overrideMaterial = e.overrideMaterial.clone()),
      (this.autoUpdate = e.autoUpdate),
      (this.matrixAutoUpdate = e.matrixAutoUpdate),
      this
    );
  }),
  (THREE.Fog = function (e, t, i) {
    (this.name = ""),
      (this.color = new THREE.Color(e)),
      (this.near = void 0 !== t ? t : 1),
      (this.far = void 0 !== i ? i : 1e3);
  }),
  (THREE.Fog.prototype.clone = function () {
    return new THREE.Fog(this.color.getHex(), this.near, this.far);
  }),
  (THREE.FogExp2 = function (e, t) {
    (this.name = ""),
      (this.color = new THREE.Color(e)),
      (this.density = void 0 !== t ? t : 25e-5);
  }),
  (THREE.FogExp2.prototype.clone = function () {
    return new THREE.FogExp2(this.color.getHex(), this.density);
  }),
  (THREE.ShaderChunk = {}),
  (THREE.ShaderChunk.alphamap_fragment =
    "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n"),
  (THREE.ShaderChunk.alphamap_pars_fragment =
    "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n"),
  (THREE.ShaderChunk.alphatest_fragment =
    "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n"),
  (THREE.ShaderChunk.ambient_pars =
    "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\treturn PI * ambientLightColor;\n}\n"),
  (THREE.ShaderChunk.aomap_fragment =
    "#ifdef USE_AOMAP\n\treflectedLight.indirectDiffuse *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n#endif\n"),
  (THREE.ShaderChunk.aomap_pars_fragment =
    "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif"),
  (THREE.ShaderChunk.begin_vertex = "\nvec3 transformed = vec3( position );\n"),
  (THREE.ShaderChunk.beginnormal_vertex =
    "\nvec3 objectNormal = vec3( normal );\n"),
  (THREE.ShaderChunk.bsdfs =
    "float calcLightAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = alpha * alpha;\n\tfloat gl = dotNL + pow( a2 + ( 1.0 - a2 ) * dotNL * dotNL, 0.5 );\n\tfloat gv = dotNV + pow( a2 + ( 1.0 - a2 ) * dotNV * dotNV, 0.5 );\n\treturn 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = alpha * alpha;\n\tfloat denom = dotNH * dotNH * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / ( denom * denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = roughness * roughness;\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_Smith( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / square( ggxRoughness + 0.0001 ) - 2.0 );\n}"),
  (THREE.ShaderChunk.bumpmap_pars_fragment =
    "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n"),
  (THREE.ShaderChunk.color_fragment =
    "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif"),
  (THREE.ShaderChunk.color_pars_fragment =
    "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n"),
  (THREE.ShaderChunk.color_pars_vertex =
    "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif"),
  (THREE.ShaderChunk.color_vertex =
    "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif"),
  (THREE.ShaderChunk.common =
    "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat square( const in float x ) { return x*x; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nvec3 inputToLinear( in vec3 a ) {\n\t#ifdef GAMMA_INPUT\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\t#else\n\t\treturn a;\n\t#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n\t#ifdef GAMMA_OUTPUT\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\t#else\n\t\treturn a;\n\t#endif\n}\n"),
  (THREE.ShaderChunk.defaultnormal_vertex =
    "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n"),
  (THREE.ShaderChunk.displacementmap_vertex =
    "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n"),
  (THREE.ShaderChunk.displacementmap_pars_vertex =
    "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n"),
  (THREE.ShaderChunk.emissivemap_fragment =
    "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\ttotalEmissiveLight *= emissiveColor.rgb;\n#endif\n"),
  (THREE.ShaderChunk.emissivemap_pars_fragment =
    "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n"),
  (THREE.ShaderChunk.envmap_fragment =
    "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.envmap_pars_fragment =
    "#if defined( USE_ENVMAP ) || defined( STANDARD )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.envmap_pars_vertex =
    "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvarying vec3 vReflect;\n\tuniform float refractionRatio;\n#endif\n"),
  (THREE.ShaderChunk.envmap_vertex =
    "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t#ifdef ENVMAP_MODE_REFLECTION\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t#else\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.fog_fragment =
    "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n#endif"),
  (THREE.ShaderChunk.fog_pars_fragment =
    "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif"),
  (THREE.ShaderChunk.lightmap_fragment =
    "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n"),
  (THREE.ShaderChunk.lightmap_pars_fragment =
    "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif"),
  (THREE.ShaderChunk.lights_lambert_vertex =
    "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tdirectLight = getPointDirectLight( pointLights[ i ], geometry );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tdirectLight = getSpotDirectLight( spotLights[ i ], geometry );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectLight = getDirectionalDirectLight( directionalLights[ i ], geometry );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n"),
  (THREE.ShaderChunk.lights_pars =
    "#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tIncidentLight getDirectionalDirectLight( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\n\t\tIncidentLight directLight;\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\treturn directLight;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tIncidentLight getPointDirectLight( const in PointLight pointLight, const in GeometricContext geometry ) {\n\t\tIncidentLight directLight;\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= calcLightAttenuation( length( lVector ), pointLight.distance, pointLight.decay );\n\t\treturn directLight;\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat angleCos;\n\t\tfloat exponent;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tIncidentLight getSpotDirectLight( const in SpotLight spotLight, const in GeometricContext geometry ) {\n\t\tIncidentLight directLight;\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat spotEffect = dot( directLight.direction, spotLight.direction );\n\t\tif ( spotEffect > spotLight.angleCos ) {\n\t\t\tfloat spotEffect = dot( spotLight.direction, directLight.direction );\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLight.exponent ) );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= ( spotEffect * calcLightAttenuation( length( lVector ), spotLight.distance, spotLight.decay ) );\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t}\n\t\treturn directLight;\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\treturn PI * mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t#else\n\t\t\tvec3 envMapColor = vec3( 0.0 );\n\t\t#endif\n\t\tenvMapColor.rgb = inputToLinear( envMapColor.rgb );\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( square( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t#endif\n\t\tenvMapColor.rgb = inputToLinear( envMapColor.rgb );\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n"),
  (THREE.ShaderChunk.lights_phong_fragment =
    "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n"),
  (THREE.ShaderChunk.lights_phong_pars_fragment =
    "#ifdef USE_ENVMAP\n\tvarying vec3 vWorldPosition;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * PI * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n"),
  (THREE.ShaderChunk.lights_phong_pars_vertex =
    "#ifdef USE_ENVMAP\n\tvarying vec3 vWorldPosition;\n#endif\n"),
  (THREE.ShaderChunk.lights_phong_vertex =
    "#ifdef USE_ENVMAP\n\tvWorldPosition = worldPosition.xyz;\n#endif\n"),
  (THREE.ShaderChunk.lights_standard_fragment =
    "StandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n"),
  (THREE.ShaderChunk.lights_standard_pars_fragment =
    "struct StandardMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * PI * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Standard\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n"),
  (THREE.ShaderChunk.lights_template =
    "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tdirectLight = getPointDirectLight( pointLight, geometry );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tdirectLight = getSpotDirectLight( spotLight, geometry );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tdirectLight = getDirectionalDirectLight( directionalLight, geometry );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tirradiance += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n"),
  (THREE.ShaderChunk.linear_to_gamma_fragment =
    "\n\toutgoingLight = linearToOutput( outgoingLight );\n"),
  (THREE.ShaderChunk.logdepthbuf_fragment =
    "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif"),
  (THREE.ShaderChunk.logdepthbuf_pars_fragment =
    "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.logdepthbuf_pars_vertex =
    "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif"),
  (THREE.ShaderChunk.logdepthbuf_vertex =
    "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.map_fragment =
    "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\tdiffuseColor *= texelColor;\n#endif\n"),
  (THREE.ShaderChunk.map_pars_fragment =
    "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif"),
  (THREE.ShaderChunk.map_particle_fragment =
    "#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n#endif\n"),
  (THREE.ShaderChunk.map_particle_pars_fragment =
    "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n"),
  (THREE.ShaderChunk.metalnessmap_fragment =
    "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n"),
  (THREE.ShaderChunk.metalnessmap_pars_fragment =
    "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif"),
  (THREE.ShaderChunk.morphnormal_vertex =
    "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n"),
  (THREE.ShaderChunk.morphtarget_pars_vertex =
    "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif"),
  (THREE.ShaderChunk.morphtarget_vertex =
    "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.normal_fragment =
    "#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n"),
  (THREE.ShaderChunk.normalmap_pars_fragment =
    "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n"),
  (THREE.ShaderChunk.project_vertex =
    "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n"),
  (THREE.ShaderChunk.roughnessmap_fragment =
    "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n"),
  (THREE.ShaderChunk.roughnessmap_pars_fragment =
    "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif"),
  (THREE.ShaderChunk.shadowmap_pars_fragment =
    "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\treturn dot( rgba_depth, bit_shift );\n\t}\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec3 offset = vec3( - 1, 0, 1 ) * shadowRadius * 2.0 * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zyz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.zyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yzz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxz, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yzx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 21.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n"),
  (THREE.ShaderChunk.shadowmap_pars_vertex =
    "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.shadowmap_vertex =
    "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.shadowmask_pars_fragment =
    "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n"),
  (THREE.ShaderChunk.skinbase_vertex =
    "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif"),
  (THREE.ShaderChunk.skinning_pars_vertex =
    "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n"),
  (THREE.ShaderChunk.skinning_vertex =
    "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n"),
  (THREE.ShaderChunk.skinnormal_vertex =
    "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n"),
  (THREE.ShaderChunk.specularmap_fragment =
    "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif"),
  (THREE.ShaderChunk.specularmap_pars_fragment =
    "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif"),
  (THREE.ShaderChunk.uv2_pars_fragment =
    "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif"),
  (THREE.ShaderChunk.uv2_pars_vertex =
    "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif"),
  (THREE.ShaderChunk.uv2_vertex =
    "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif"),
  (THREE.ShaderChunk.uv_pars_fragment =
    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif"),
  (THREE.ShaderChunk.uv_pars_vertex =
    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n"),
  (THREE.ShaderChunk.uv_vertex =
    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif"),
  (THREE.ShaderChunk.worldpos_vertex =
    "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n"),
  (THREE.UniformsUtils = {
    merge: function (e) {
      for (var t = {}, i = 0; i < e.length; i++) {
        var r = this.clone(e[i]);
        for (var n in r) t[n] = r[n];
      }
      return t;
    },
    clone: function (e) {
      var t = {};
      for (var i in e)
        for (var r in ((t[i] = {}), e[i])) {
          var n = e[i][r];
          n instanceof THREE.Color ||
          n instanceof THREE.Vector2 ||
          n instanceof THREE.Vector3 ||
          n instanceof THREE.Vector4 ||
          n instanceof THREE.Matrix3 ||
          n instanceof THREE.Matrix4 ||
          n instanceof THREE.Texture
            ? (t[i][r] = n.clone())
            : Array.isArray(n)
            ? (t[i][r] = n.slice())
            : (t[i][r] = n);
        }
      return t;
    },
  }),
  (THREE.UniformsLib = {
    common: {
      diffuse: {
        type: "c",
        value: new THREE.Color(15658734),
      },
      opacity: {
        type: "f",
        value: 1,
      },
      map: {
        type: "t",
        value: null,
      },
      offsetRepeat: {
        type: "v4",
        value: new THREE.Vector4(0, 0, 1, 1),
      },
      specularMap: {
        type: "t",
        value: null,
      },
      alphaMap: {
        type: "t",
        value: null,
      },
      envMap: {
        type: "t",
        value: null,
      },
      flipEnvMap: {
        type: "f",
        value: -1,
      },
      reflectivity: {
        type: "f",
        value: 1,
      },
      refractionRatio: {
        type: "f",
        value: 0.98,
      },
    },
    aomap: {
      aoMap: {
        type: "t",
        value: null,
      },
      aoMapIntensity: {
        type: "f",
        value: 1,
      },
    },
    lightmap: {
      lightMap: {
        type: "t",
        value: null,
      },
      lightMapIntensity: {
        type: "f",
        value: 1,
      },
    },
    emissivemap: {
      emissiveMap: {
        type: "t",
        value: null,
      },
    },
    bumpmap: {
      bumpMap: {
        type: "t",
        value: null,
      },
      bumpScale: {
        type: "f",
        value: 1,
      },
    },
    normalmap: {
      normalMap: {
        type: "t",
        value: null,
      },
      normalScale: {
        type: "v2",
        value: new THREE.Vector2(1, 1),
      },
    },
    displacementmap: {
      displacementMap: {
        type: "t",
        value: null,
      },
      displacementScale: {
        type: "f",
        value: 1,
      },
      displacementBias: {
        type: "f",
        value: 0,
      },
    },
    roughnessmap: {
      roughnessMap: {
        type: "t",
        value: null,
      },
    },
    metalnessmap: {
      metalnessMap: {
        type: "t",
        value: null,
      },
    },
    fog: {
      fogDensity: {
        type: "f",
        value: 25e-5,
      },
      fogNear: {
        type: "f",
        value: 1,
      },
      fogFar: {
        type: "f",
        value: 2e3,
      },
      fogColor: {
        type: "c",
        value: new THREE.Color(16777215),
      },
    },
    ambient: {
      ambientLightColor: {
        type: "fv",
        value: [],
      },
    },
    lights: {
      directionalLights: {
        type: "sa",
        value: [],
        properties: {
          direction: {
            type: "v3",
          },
          color: {
            type: "c",
          },
          shadow: {
            type: "i",
          },
          shadowBias: {
            type: "f",
          },
          shadowRadius: {
            type: "f",
          },
          shadowMapSize: {
            type: "v2",
          },
        },
      },
      directionalShadowMap: {
        type: "tv",
        value: [],
      },
      directionalShadowMatrix: {
        type: "m4v",
        value: [],
      },
      spotLights: {
        type: "sa",
        value: [],
        properties: {
          color: {
            type: "c",
          },
          position: {
            type: "v3",
          },
          direction: {
            type: "v3",
          },
          distance: {
            type: "f",
          },
          angleCos: {
            type: "f",
          },
          exponent: {
            type: "f",
          },
          decay: {
            type: "f",
          },
          shadow: {
            type: "i",
          },
          shadowBias: {
            type: "f",
          },
          shadowRadius: {
            type: "f",
          },
          shadowMapSize: {
            type: "v2",
          },
        },
      },
      spotShadowMap: {
        type: "tv",
        value: [],
      },
      spotShadowMatrix: {
        type: "m4v",
        value: [],
      },
      pointLights: {
        type: "sa",
        value: [],
        properties: {
          color: {
            type: "c",
          },
          position: {
            type: "v3",
          },
          decay: {
            type: "f",
          },
          distance: {
            type: "f",
          },
          shadow: {
            type: "i",
          },
          shadowBias: {
            type: "f",
          },
          shadowRadius: {
            type: "f",
          },
          shadowMapSize: {
            type: "v2",
          },
        },
      },
      pointShadowMap: {
        type: "tv",
        value: [],
      },
      pointShadowMatrix: {
        type: "m4v",
        value: [],
      },
      hemisphereLights: {
        type: "sa",
        value: [],
        properties: {
          direction: {
            type: "v3",
          },
          skyColor: {
            type: "c",
          },
          groundColor: {
            type: "c",
          },
        },
      },
    },
    points: {
      diffuse: {
        type: "c",
        value: new THREE.Color(15658734),
      },
      opacity: {
        type: "f",
        value: 1,
      },
      size: {
        type: "f",
        value: 1,
      },
      scale: {
        type: "f",
        value: 1,
      },
      map: {
        type: "t",
        value: null,
      },
      offsetRepeat: {
        type: "v4",
        value: new THREE.Vector4(0, 0, 1, 1),
      },
    },
  }),
  (THREE.ShaderLib = {
    basic: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.common,
        THREE.UniformsLib.aomap,
        THREE.UniformsLib.fog,
      ]),
      vertexShader: [
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.uv_pars_vertex,
        THREE.ShaderChunk.uv2_pars_vertex,
        THREE.ShaderChunk.envmap_pars_vertex,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        THREE.ShaderChunk.shadowmap_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.uv_vertex,
        THREE.ShaderChunk.uv2_vertex,
        THREE.ShaderChunk.color_vertex,
        THREE.ShaderChunk.skinbase_vertex,
        "\t#ifdef USE_ENVMAP",
        THREE.ShaderChunk.beginnormal_vertex,
        THREE.ShaderChunk.morphnormal_vertex,
        THREE.ShaderChunk.skinnormal_vertex,
        THREE.ShaderChunk.defaultnormal_vertex,
        "\t#endif",
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        THREE.ShaderChunk.worldpos_vertex,
        THREE.ShaderChunk.envmap_vertex,
        THREE.ShaderChunk.shadowmap_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform vec3 diffuse;",
        "uniform float opacity;",
        "#ifndef FLAT_SHADED",
        "\tvarying vec3 vNormal;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.uv_pars_fragment,
        THREE.ShaderChunk.uv2_pars_fragment,
        THREE.ShaderChunk.map_pars_fragment,
        THREE.ShaderChunk.alphamap_pars_fragment,
        THREE.ShaderChunk.aomap_pars_fragment,
        THREE.ShaderChunk.envmap_pars_fragment,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.shadowmap_pars_fragment,
        THREE.ShaderChunk.specularmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.map_fragment,
        THREE.ShaderChunk.color_fragment,
        THREE.ShaderChunk.alphamap_fragment,
        THREE.ShaderChunk.alphatest_fragment,
        THREE.ShaderChunk.specularmap_fragment,
        "\tReflectedLight reflectedLight;",
        "\treflectedLight.directDiffuse = vec3( 0.0 );",
        "\treflectedLight.directSpecular = vec3( 0.0 );",
        "\treflectedLight.indirectDiffuse = diffuseColor.rgb;",
        "\treflectedLight.indirectSpecular = vec3( 0.0 );",
        THREE.ShaderChunk.aomap_fragment,
        "\tvec3 outgoingLight = reflectedLight.indirectDiffuse;",
        THREE.ShaderChunk.envmap_fragment,
        THREE.ShaderChunk.linear_to_gamma_fragment,
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    lambert: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.common,
        THREE.UniformsLib.aomap,
        THREE.UniformsLib.lightmap,
        THREE.UniformsLib.emissivemap,
        THREE.UniformsLib.fog,
        THREE.UniformsLib.ambient,
        THREE.UniformsLib.lights,
        {
          emissive: {
            type: "c",
            value: new THREE.Color(0),
          },
        },
      ]),
      vertexShader: [
        "#define LAMBERT",
        "varying vec3 vLightFront;",
        "#ifdef DOUBLE_SIDED",
        "\tvarying vec3 vLightBack;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.uv_pars_vertex,
        THREE.ShaderChunk.uv2_pars_vertex,
        THREE.ShaderChunk.envmap_pars_vertex,
        THREE.ShaderChunk.bsdfs,
        THREE.ShaderChunk.lights_pars,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        THREE.ShaderChunk.shadowmap_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.uv_vertex,
        THREE.ShaderChunk.uv2_vertex,
        THREE.ShaderChunk.color_vertex,
        THREE.ShaderChunk.beginnormal_vertex,
        THREE.ShaderChunk.morphnormal_vertex,
        THREE.ShaderChunk.skinbase_vertex,
        THREE.ShaderChunk.skinnormal_vertex,
        THREE.ShaderChunk.defaultnormal_vertex,
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        THREE.ShaderChunk.worldpos_vertex,
        THREE.ShaderChunk.envmap_vertex,
        THREE.ShaderChunk.lights_lambert_vertex,
        THREE.ShaderChunk.shadowmap_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform vec3 diffuse;",
        "uniform vec3 emissive;",
        "uniform float opacity;",
        "varying vec3 vLightFront;",
        "#ifdef DOUBLE_SIDED",
        "\tvarying vec3 vLightBack;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.uv_pars_fragment,
        THREE.ShaderChunk.uv2_pars_fragment,
        THREE.ShaderChunk.map_pars_fragment,
        THREE.ShaderChunk.alphamap_pars_fragment,
        THREE.ShaderChunk.aomap_pars_fragment,
        THREE.ShaderChunk.lightmap_pars_fragment,
        THREE.ShaderChunk.emissivemap_pars_fragment,
        THREE.ShaderChunk.envmap_pars_fragment,
        THREE.ShaderChunk.bsdfs,
        THREE.ShaderChunk.ambient_pars,
        THREE.ShaderChunk.lights_pars,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.shadowmap_pars_fragment,
        THREE.ShaderChunk.shadowmask_pars_fragment,
        THREE.ShaderChunk.specularmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
        "\tvec3 totalEmissiveLight = emissive;",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.map_fragment,
        THREE.ShaderChunk.color_fragment,
        THREE.ShaderChunk.alphamap_fragment,
        THREE.ShaderChunk.alphatest_fragment,
        THREE.ShaderChunk.specularmap_fragment,
        THREE.ShaderChunk.emissivemap_fragment,
        "\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",
        THREE.ShaderChunk.lightmap_fragment,
        "\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",
        "\t#ifdef DOUBLE_SIDED",
        "\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",
        "\t#else",
        "\t\treflectedLight.directDiffuse = vLightFront;",
        "\t#endif",
        "\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",
        THREE.ShaderChunk.aomap_fragment,
        "\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveLight;",
        THREE.ShaderChunk.envmap_fragment,
        THREE.ShaderChunk.linear_to_gamma_fragment,
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    phong: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.common,
        THREE.UniformsLib.aomap,
        THREE.UniformsLib.lightmap,
        THREE.UniformsLib.emissivemap,
        THREE.UniformsLib.bumpmap,
        THREE.UniformsLib.normalmap,
        THREE.UniformsLib.displacementmap,
        THREE.UniformsLib.fog,
        THREE.UniformsLib.ambient,
        THREE.UniformsLib.lights,
        {
          emissive: {
            type: "c",
            value: new THREE.Color(0),
          },
          specular: {
            type: "c",
            value: new THREE.Color(1118481),
          },
          shininess: {
            type: "f",
            value: 30,
          },
        },
      ]),
      vertexShader: [
        "#define PHONG",
        "varying vec3 vViewPosition;",
        "#ifndef FLAT_SHADED",
        "\tvarying vec3 vNormal;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.uv_pars_vertex,
        THREE.ShaderChunk.uv2_pars_vertex,
        THREE.ShaderChunk.displacementmap_pars_vertex,
        THREE.ShaderChunk.envmap_pars_vertex,
        THREE.ShaderChunk.lights_phong_pars_vertex,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        THREE.ShaderChunk.shadowmap_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.uv_vertex,
        THREE.ShaderChunk.uv2_vertex,
        THREE.ShaderChunk.color_vertex,
        THREE.ShaderChunk.beginnormal_vertex,
        THREE.ShaderChunk.morphnormal_vertex,
        THREE.ShaderChunk.skinbase_vertex,
        THREE.ShaderChunk.skinnormal_vertex,
        THREE.ShaderChunk.defaultnormal_vertex,
        "#ifndef FLAT_SHADED",
        "\tvNormal = normalize( transformedNormal );",
        "#endif",
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.displacementmap_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        "\tvViewPosition = - mvPosition.xyz;",
        THREE.ShaderChunk.worldpos_vertex,
        THREE.ShaderChunk.envmap_vertex,
        THREE.ShaderChunk.lights_phong_vertex,
        THREE.ShaderChunk.shadowmap_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "#define PHONG",
        "uniform vec3 diffuse;",
        "uniform vec3 emissive;",
        "uniform vec3 specular;",
        "uniform float shininess;",
        "uniform float opacity;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.uv_pars_fragment,
        THREE.ShaderChunk.uv2_pars_fragment,
        THREE.ShaderChunk.map_pars_fragment,
        THREE.ShaderChunk.alphamap_pars_fragment,
        THREE.ShaderChunk.aomap_pars_fragment,
        THREE.ShaderChunk.lightmap_pars_fragment,
        THREE.ShaderChunk.emissivemap_pars_fragment,
        THREE.ShaderChunk.envmap_pars_fragment,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.bsdfs,
        THREE.ShaderChunk.ambient_pars,
        THREE.ShaderChunk.lights_pars,
        THREE.ShaderChunk.lights_phong_pars_fragment,
        THREE.ShaderChunk.shadowmap_pars_fragment,
        THREE.ShaderChunk.bumpmap_pars_fragment,
        THREE.ShaderChunk.normalmap_pars_fragment,
        THREE.ShaderChunk.specularmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
        "\tvec3 totalEmissiveLight = emissive;",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.map_fragment,
        THREE.ShaderChunk.color_fragment,
        THREE.ShaderChunk.alphamap_fragment,
        THREE.ShaderChunk.alphatest_fragment,
        THREE.ShaderChunk.specularmap_fragment,
        THREE.ShaderChunk.normal_fragment,
        THREE.ShaderChunk.emissivemap_fragment,
        THREE.ShaderChunk.lights_phong_fragment,
        THREE.ShaderChunk.lights_template,
        THREE.ShaderChunk.aomap_fragment,
        "vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",
        THREE.ShaderChunk.envmap_fragment,
        THREE.ShaderChunk.linear_to_gamma_fragment,
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    standard: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.common,
        THREE.UniformsLib.aomap,
        THREE.UniformsLib.lightmap,
        THREE.UniformsLib.emissivemap,
        THREE.UniformsLib.bumpmap,
        THREE.UniformsLib.normalmap,
        THREE.UniformsLib.displacementmap,
        THREE.UniformsLib.roughnessmap,
        THREE.UniformsLib.metalnessmap,
        THREE.UniformsLib.fog,
        THREE.UniformsLib.ambient,
        THREE.UniformsLib.lights,
        {
          emissive: {
            type: "c",
            value: new THREE.Color(0),
          },
          roughness: {
            type: "f",
            value: 0.5,
          },
          metalness: {
            type: "f",
            value: 0,
          },
          envMapIntensity: {
            type: "f",
            value: 1,
          },
        },
      ]),
      vertexShader: [
        "#define STANDARD",
        "varying vec3 vViewPosition;",
        "#ifndef FLAT_SHADED",
        "\tvarying vec3 vNormal;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.uv_pars_vertex,
        THREE.ShaderChunk.uv2_pars_vertex,
        THREE.ShaderChunk.displacementmap_pars_vertex,
        THREE.ShaderChunk.envmap_pars_vertex,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        THREE.ShaderChunk.shadowmap_pars_vertex,
        THREE.ShaderChunk.specularmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.uv_vertex,
        THREE.ShaderChunk.uv2_vertex,
        THREE.ShaderChunk.color_vertex,
        THREE.ShaderChunk.beginnormal_vertex,
        THREE.ShaderChunk.morphnormal_vertex,
        THREE.ShaderChunk.skinbase_vertex,
        THREE.ShaderChunk.skinnormal_vertex,
        THREE.ShaderChunk.defaultnormal_vertex,
        "#ifndef FLAT_SHADED",
        "\tvNormal = normalize( transformedNormal );",
        "#endif",
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.displacementmap_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        "\tvViewPosition = - mvPosition.xyz;",
        THREE.ShaderChunk.worldpos_vertex,
        THREE.ShaderChunk.envmap_vertex,
        THREE.ShaderChunk.shadowmap_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "#define STANDARD",
        "uniform vec3 diffuse;",
        "uniform vec3 emissive;",
        "uniform float roughness;",
        "uniform float metalness;",
        "uniform float opacity;",
        "uniform float envMapIntensity;",
        "varying vec3 vViewPosition;",
        "#ifndef FLAT_SHADED",
        "\tvarying vec3 vNormal;",
        "#endif",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.uv_pars_fragment,
        THREE.ShaderChunk.uv2_pars_fragment,
        THREE.ShaderChunk.map_pars_fragment,
        THREE.ShaderChunk.alphamap_pars_fragment,
        THREE.ShaderChunk.aomap_pars_fragment,
        THREE.ShaderChunk.lightmap_pars_fragment,
        THREE.ShaderChunk.emissivemap_pars_fragment,
        THREE.ShaderChunk.envmap_pars_fragment,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.bsdfs,
        THREE.ShaderChunk.ambient_pars,
        THREE.ShaderChunk.lights_pars,
        THREE.ShaderChunk.lights_standard_pars_fragment,
        THREE.ShaderChunk.shadowmap_pars_fragment,
        THREE.ShaderChunk.bumpmap_pars_fragment,
        THREE.ShaderChunk.normalmap_pars_fragment,
        THREE.ShaderChunk.roughnessmap_pars_fragment,
        THREE.ShaderChunk.metalnessmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
        "\tvec3 totalEmissiveLight = emissive;",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.map_fragment,
        THREE.ShaderChunk.color_fragment,
        THREE.ShaderChunk.alphamap_fragment,
        THREE.ShaderChunk.alphatest_fragment,
        THREE.ShaderChunk.specularmap_fragment,
        THREE.ShaderChunk.roughnessmap_fragment,
        THREE.ShaderChunk.metalnessmap_fragment,
        THREE.ShaderChunk.normal_fragment,
        THREE.ShaderChunk.emissivemap_fragment,
        THREE.ShaderChunk.lights_standard_fragment,
        THREE.ShaderChunk.lights_template,
        THREE.ShaderChunk.aomap_fragment,
        "vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",
        THREE.ShaderChunk.linear_to_gamma_fragment,
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    points: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.points,
        THREE.UniformsLib.fog,
      ]),
      vertexShader: [
        "uniform float size;",
        "uniform float scale;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.shadowmap_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.color_vertex,
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.project_vertex,
        "\t#ifdef USE_SIZEATTENUATION",
        "\t\tgl_PointSize = size * ( scale / - mvPosition.z );",
        "\t#else",
        "\t\tgl_PointSize = size;",
        "\t#endif",
        THREE.ShaderChunk.logdepthbuf_vertex,
        THREE.ShaderChunk.worldpos_vertex,
        THREE.ShaderChunk.shadowmap_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform vec3 diffuse;",
        "uniform float opacity;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.map_particle_pars_fragment,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.shadowmap_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tvec3 outgoingLight = vec3( 0.0 );",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.map_particle_fragment,
        THREE.ShaderChunk.color_fragment,
        THREE.ShaderChunk.alphatest_fragment,
        "\toutgoingLight = diffuseColor.rgb;",
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    dashed: {
      uniforms: THREE.UniformsUtils.merge([
        THREE.UniformsLib.common,
        THREE.UniformsLib.fog,
        {
          scale: {
            type: "f",
            value: 1,
          },
          dashSize: {
            type: "f",
            value: 1,
          },
          totalSize: {
            type: "f",
            value: 2,
          },
        },
      ]),
      vertexShader: [
        "uniform float scale;",
        "attribute float lineDistance;",
        "varying float vLineDistance;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.color_vertex,
        "\tvLineDistance = scale * lineDistance;",
        "\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
        "\tgl_Position = projectionMatrix * mvPosition;",
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform vec3 diffuse;",
        "uniform float opacity;",
        "uniform float dashSize;",
        "uniform float totalSize;",
        "varying float vLineDistance;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.color_pars_fragment,
        THREE.ShaderChunk.fog_pars_fragment,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tif ( mod( vLineDistance, totalSize ) > dashSize ) {",
        "\t\tdiscard;",
        "\t}",
        "\tvec3 outgoingLight = vec3( 0.0 );",
        "\tvec4 diffuseColor = vec4( diffuse, opacity );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        THREE.ShaderChunk.color_fragment,
        "\toutgoingLight = diffuseColor.rgb;",
        THREE.ShaderChunk.fog_fragment,
        "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        "}",
      ].join("\n"),
    },
    depth: {
      uniforms: {
        mNear: {
          type: "f",
          value: 1,
        },
        mFar: {
          type: "f",
          value: 2e3,
        },
        opacity: {
          type: "f",
          value: 1,
        },
      },
      vertexShader: [
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform float mNear;",
        "uniform float mFar;",
        "uniform float opacity;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        THREE.ShaderChunk.logdepthbuf_fragment,
        "\t#ifdef USE_LOGDEPTHBUF_EXT",
        "\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;",
        "\t#else",
        "\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;",
        "\t#endif",
        "\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );",
        "\tgl_FragColor = vec4( vec3( color ), opacity );",
        "}",
      ].join("\n"),
    },
    normal: {
      uniforms: {
        opacity: {
          type: "f",
          value: 1,
        },
      },
      vertexShader: [
        "varying vec3 vNormal;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        "\tvNormal = normalize( normalMatrix * normal );",
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform float opacity;",
        "varying vec3 vNormal;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        "}",
      ].join("\n"),
    },
    cube: {
      uniforms: {
        tCube: {
          type: "t",
          value: null,
        },
        tFlip: {
          type: "f",
          value: -1,
        },
      },
      vertexShader: [
        "varying vec3 vWorldPosition;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        "\tvWorldPosition = transformDirection( position, modelMatrix );",
        "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform samplerCube tCube;",
        "uniform float tFlip;",
        "varying vec3 vWorldPosition;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        "}",
      ].join("\n"),
    },
    equirect: {
      uniforms: {
        tEquirect: {
          type: "t",
          value: null,
        },
        tFlip: {
          type: "f",
          value: -1,
        },
      },
      vertexShader: [
        "varying vec3 vWorldPosition;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        "\tvWorldPosition = transformDirection( position, modelMatrix );",
        "\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform sampler2D tEquirect;",
        "uniform float tFlip;",
        "varying vec3 vWorldPosition;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "void main() {",
        "vec3 direction = normalize( vWorldPosition );",
        "vec2 sampleUV;",
        "sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );",
        "sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
        "gl_FragColor = texture2D( tEquirect, sampleUV );",
        THREE.ShaderChunk.logdepthbuf_fragment,
        "}",
      ].join("\n"),
    },
    depthRGBA: {
      uniforms: {},
      vertexShader: [
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        THREE.ShaderChunk.logdepthbuf_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.skinbase_vertex,
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.logdepthbuf_vertex,
        "}",
      ].join("\n"),
      fragmentShader: [
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.logdepthbuf_pars_fragment,
        "vec4 pack_depth( const in float depth ) {",
        "\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
        "\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
        "\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );",
        "\tres -= res.xxyz * bit_mask;",
        "\treturn res;",
        "}",
        "void main() {",
        THREE.ShaderChunk.logdepthbuf_fragment,
        "\t#ifdef USE_LOGDEPTHBUF_EXT",
        "\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",
        "\t#else",
        "\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",
        "\t#endif",
        "}",
      ].join("\n"),
    },
    distanceRGBA: {
      uniforms: {
        lightPos: {
          type: "v3",
          value: new THREE.Vector3(0, 0, 0),
        },
      },
      vertexShader: [
        "varying vec4 vWorldPosition;",
        THREE.ShaderChunk.common,
        THREE.ShaderChunk.morphtarget_pars_vertex,
        THREE.ShaderChunk.skinning_pars_vertex,
        "void main() {",
        THREE.ShaderChunk.skinbase_vertex,
        THREE.ShaderChunk.begin_vertex,
        THREE.ShaderChunk.morphtarget_vertex,
        THREE.ShaderChunk.skinning_vertex,
        THREE.ShaderChunk.project_vertex,
        THREE.ShaderChunk.worldpos_vertex,
        "vWorldPosition = worldPosition;",
        "}",
      ].join("\n"),
      fragmentShader: [
        "uniform vec3 lightPos;",
        "varying vec4 vWorldPosition;",
        THREE.ShaderChunk.common,
        "vec4 pack1K ( float depth ) {",
        "\tdepth /= 1000.0;",
        "\tconst vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
        "\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
        "\tvec4 res = mod( depth * bitSh * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );",
        "\tres -= res.xxyz * bitMsk;",
        "\treturn res; ",
        "}",
        "float unpack1K ( vec4 color ) {",
        "\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
        "\treturn dot( color, bitSh ) * 1000.0;",
        "}",
        "void main () {",
        "\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );",
        "}",
      ].join("\n"),
    },
  }),
  (THREE.WebGLRenderer = function (e) {
    function t() {
      return null === ve ? Le : 1;
    }
    function i(e, t, i, r) {
      !0 === oe && ((e *= r), (t *= r), (i *= r)), je.clearColor(e, t, i, r);
    }
    function r() {
      je.init(),
        je.scissor(He.copy(Ae).multiplyScalar(Le)),
        je.viewport(we.copy(De).multiplyScalar(Le)),
        i(Me.r, Me.g, Me.b, _e);
    }
    function n() {
      (ge = null), (xe = null), (Re = ""), (Te = -1), je.reset();
    }
    function o(e) {
      e.preventDefault(), n(), r(), Ge.clear();
    }
    function a(e) {
      var t = e.target;
      t.removeEventListener("dispose", a), h(t), Fe.textures--;
    }
    function s(e) {
      var t = e.target;
      t.removeEventListener("dispose", s), c(t), Fe.textures--;
    }
    function l(e) {
      var t = e.target;
      t.removeEventListener("dispose", l), u(t);
    }
    function h(e) {
      var t = Ge.get(e);
      if (e.image && t.__image__webglTextureCube)
        me.deleteTexture(t.__image__webglTextureCube);
      else {
        if (void 0 === t.__webglInit) return;
        me.deleteTexture(t.__webglTexture);
      }
      Ge.delete(e);
    }
    function c(e) {
      var t = Ge.get(e),
        i = Ge.get(e.texture);
      if (e && void 0 !== i.__webglTexture) {
        if (
          (me.deleteTexture(i.__webglTexture),
          e instanceof THREE.WebGLRenderTargetCube)
        )
          for (var r = 0; r < 6; r++)
            me.deleteFramebuffer(t.__webglFramebuffer[r]),
              me.deleteRenderbuffer(t.__webglDepthbuffer[r]);
        else
          me.deleteFramebuffer(t.__webglFramebuffer),
            me.deleteRenderbuffer(t.__webglDepthbuffer);
        Ge.delete(e.texture), Ge.delete(e);
      }
    }
    function u(e) {
      p(e), Ge.delete(e);
    }
    function p(e) {
      var t = Ge.get(e).program;
      (e.program = void 0), void 0 !== t && Xe.releaseProgram(t);
    }
    function d(e, t, i, r) {
      var n;
      if (
        i instanceof THREE.InstancedBufferGeometry &&
        null === (n = Be.get("ANGLE_instanced_arrays"))
      )
        console.error(
          "THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."
        );
      else {
        void 0 === r && (r = 0), je.initAttributes();
        var o = i.attributes,
          a = t.getAttributes(),
          s = e.defaultAttributeValues;
        for (var l in a) {
          var h = a[l];
          if (h >= 0) {
            var c = o[l];
            if (void 0 !== c) {
              var u = c.itemSize,
                p = We.getAttributeBuffer(c);
              if (c instanceof THREE.InterleavedBufferAttribute) {
                var d = c.data,
                  f = d.stride,
                  m = c.offset;
                d instanceof THREE.InstancedInterleavedBuffer
                  ? (je.enableAttributeAndDivisor(h, d.meshPerAttribute, n),
                    void 0 === i.maxInstancedCount &&
                      (i.maxInstancedCount = d.meshPerAttribute * d.count))
                  : je.enableAttribute(h),
                  me.bindBuffer(me.ARRAY_BUFFER, p),
                  me.vertexAttribPointer(
                    h,
                    u,
                    me.FLOAT,
                    !1,
                    f * d.array.BYTES_PER_ELEMENT,
                    (r * f + m) * d.array.BYTES_PER_ELEMENT
                  );
              } else
                c instanceof THREE.InstancedBufferAttribute
                  ? (je.enableAttributeAndDivisor(h, c.meshPerAttribute, n),
                    void 0 === i.maxInstancedCount &&
                      (i.maxInstancedCount = c.meshPerAttribute * c.count))
                  : je.enableAttribute(h),
                  me.bindBuffer(me.ARRAY_BUFFER, p),
                  me.vertexAttribPointer(h, u, me.FLOAT, !1, 0, r * u * 4);
            } else if (void 0 !== s) {
              var E = s[l];
              if (void 0 !== E)
                switch (E.length) {
                  case 2:
                    me.vertexAttrib2fv(h, E);
                    break;
                  case 3:
                    me.vertexAttrib3fv(h, E);
                    break;
                  case 4:
                    me.vertexAttrib4fv(h, E);
                    break;
                  default:
                    me.vertexAttrib1fv(h, E);
                }
            }
          }
        }
        je.disableUnusedAttributes();
      }
    }
    function f(e, t) {
      return Math.abs(t[0]) - Math.abs(e[0]);
    }
    function m(e, t) {
      return e.object.renderOrder !== t.object.renderOrder
        ? e.object.renderOrder - t.object.renderOrder
        : e.material.id !== t.material.id
        ? e.material.id - t.material.id
        : e.z !== t.z
        ? e.z - t.z
        : e.id - t.id;
    }
    function E(e, t) {
      return e.object.renderOrder !== t.object.renderOrder
        ? e.object.renderOrder - t.object.renderOrder
        : e.z !== t.z
        ? t.z - e.z
        : e.id - t.id;
    }
    function g(e, t, i, r, n) {
      var o, a;
      i.transparent ? ((o = ce), (a = ++ue)) : ((o = le), (a = ++he));
      var s = o[a];
      void 0 !== s
        ? ((s.id = e.id),
          (s.object = e),
          (s.geometry = t),
          (s.material = i),
          (s.z = Ve.z),
          (s.group = n))
        : ((s = {
            id: e.id,
            object: e,
            geometry: t,
            material: i,
            z: Ve.z,
            group: n,
          }),
          o.push(s));
    }
    function v(e, t) {
      if (!1 !== e.visible) {
        if (e.layers.test(t.layers))
          if (e instanceof THREE.Light) se.push(e);
          else if (e instanceof THREE.Sprite)
            (!1 !== e.frustumCulled && !0 !== Pe.intersectsObject(e)) ||
              de.push(e);
          else if (e instanceof THREE.LensFlare) fe.push(e);
          else if (e instanceof THREE.ImmediateRenderObject)
            !0 === Ee.sortObjects &&
              (Ve.setFromMatrixPosition(e.matrixWorld), Ve.applyProjection(Ie)),
              g(e, null, e.material, Ve.z, null);
          else if (
            (e instanceof THREE.Mesh ||
              e instanceof THREE.Line ||
              e instanceof THREE.Points) &&
            (e instanceof THREE.SkinnedMesh && e.skeleton.update(),
            !1 === e.frustumCulled || !0 === Pe.intersectsObject(e))
          ) {
            var i = e.material;
            if (!0 === i.visible) {
              !0 === Ee.sortObjects &&
                (Ve.setFromMatrixPosition(e.matrixWorld),
                Ve.applyProjection(Ie));
              var r = We.update(e);
              if (i instanceof THREE.MultiMaterial)
                for (
                  var n = r.groups, o = i.materials, a = 0, s = n.length;
                  a < s;
                  a++
                ) {
                  var l = n[a],
                    h = o[l.materialIndex];
                  !0 === h.visible && g(e, r, h, Ve.z, l);
                }
              else g(e, r, i, Ve.z, null);
            }
          }
        var c = e.children;
        for (a = 0, s = c.length; a < s; a++) v(c[a], t);
      }
    }
    function y(e, t, i, r) {
      for (var n = 0, o = e.length; n < o; n++) {
        var a = e[n],
          s = a.object,
          l = a.geometry,
          h = void 0 === r ? a.material : r,
          c = a.group;
        if (
          (s.modelViewMatrix.multiplyMatrices(
            t.matrixWorldInverse,
            s.matrixWorld
          ),
          s.normalMatrix.getNormalMatrix(s.modelViewMatrix),
          s instanceof THREE.ImmediateRenderObject)
        ) {
          R(h);
          var u = H(t, i, h, s);
          (Re = ""),
            s.render(function (e) {
              Ee.renderBufferImmediate(e, u, h);
            });
        } else Ee.renderBufferDirect(t, i, l, h, s, c);
      }
    }
    function T(e, t, i) {
      var r = Ge.get(e),
        n = Xe.getParameters(e, Oe, t, i),
        o = Xe.getProgramCode(e, n),
        a = r.program,
        s = !0;
      if (void 0 === a) e.addEventListener("dispose", l);
      else if (a.code !== o) p(e);
      else {
        if (void 0 !== n.shaderID) return;
        s = !1;
      }
      if (s) {
        if (n.shaderID) {
          var h = THREE.ShaderLib[n.shaderID];
          r.__webglShader = {
            name: e.type,
            uniforms: THREE.UniformsUtils.clone(h.uniforms),
            vertexShader: h.vertexShader,
            fragmentShader: h.fragmentShader,
          };
        } else
          r.__webglShader = {
            name: e.type,
            uniforms: e.uniforms,
            vertexShader: e.vertexShader,
            fragmentShader: e.fragmentShader,
          };
        (e.__webglShader = r.__webglShader),
          (a = Xe.acquireProgram(e, n, o)),
          (r.program = a),
          (e.program = a);
      }
      var c = a.getAttributes();
      if (e.morphTargets) {
        e.numSupportedMorphTargets = 0;
        for (var u = 0; u < Ee.maxMorphTargets; u++)
          c["morphTarget" + u] >= 0 && e.numSupportedMorphTargets++;
      }
      if (e.morphNormals) {
        e.numSupportedMorphNormals = 0;
        for (u = 0; u < Ee.maxMorphNormals; u++)
          c["morphNormal" + u] >= 0 && e.numSupportedMorphNormals++;
      }
      r.uniformsList = [];
      var d = r.__webglShader.uniforms,
        f = r.program.getUniforms();
      for (var m in d) {
        var E = f[m];
        E && r.uniformsList.push([r.__webglShader.uniforms[m], E]);
      }
      (e instanceof THREE.MeshPhongMaterial ||
        e instanceof THREE.MeshLambertMaterial ||
        e instanceof THREE.MeshStandardMaterial ||
        e.lights) &&
        ((r.lightsHash = Oe.hash),
        (d.ambientLightColor.value = Oe.ambient),
        (d.directionalLights.value = Oe.directional),
        (d.spotLights.value = Oe.spot),
        (d.pointLights.value = Oe.point),
        (d.hemisphereLights.value = Oe.hemi),
        (d.directionalShadowMap.value = Oe.directionalShadowMap),
        (d.directionalShadowMatrix.value = Oe.directionalShadowMatrix),
        (d.spotShadowMap.value = Oe.spotShadowMap),
        (d.spotShadowMatrix.value = Oe.spotShadowMatrix),
        (d.pointShadowMap.value = Oe.pointShadowMap),
        (d.pointShadowMatrix.value = Oe.pointShadowMatrix)),
        (r.hasDynamicUniforms = !1);
      for (var g = 0, v = r.uniformsList.length; g < v; g++) {
        if (!0 === r.uniformsList[g][0].dynamic) {
          r.hasDynamicUniforms = !0;
          break;
        }
      }
    }
    function R(e) {
      x(e),
        !0 === e.transparent
          ? je.setBlending(
              e.blending,
              e.blendEquation,
              e.blendSrc,
              e.blendDst,
              e.blendEquationAlpha,
              e.blendSrcAlpha,
              e.blendDstAlpha
            )
          : je.setBlending(THREE.NoBlending),
        je.setDepthFunc(e.depthFunc),
        je.setDepthTest(e.depthTest),
        je.setDepthWrite(e.depthWrite),
        je.setColorWrite(e.colorWrite),
        je.setPolygonOffset(
          e.polygonOffset,
          e.polygonOffsetFactor,
          e.polygonOffsetUnits
        );
    }
    function x(e) {
      e.side !== THREE.DoubleSide
        ? je.enable(me.CULL_FACE)
        : je.disable(me.CULL_FACE),
        je.setFlipSided(e.side === THREE.BackSide);
    }
    function H(e, t, i, r) {
      qe = 0;
      var n = Ge.get(i);
      void 0 === n.program && (i.needsUpdate = !0),
        void 0 !== n.lightsHash &&
          n.lightsHash !== Oe.hash &&
          (i.needsUpdate = !0),
        i.needsUpdate && (T(i, t, r), (i.needsUpdate = !1));
      var o = !1,
        a = !1,
        s = !1,
        l = n.program,
        h = l.getUniforms(),
        c = n.__webglShader.uniforms;
      if (
        (l.id !== ge &&
          (me.useProgram(l.program), (ge = l.id), (o = !0), (a = !0), (s = !0)),
        i.id !== Te && ((Te = i.id), (a = !0)),
        (o || e !== xe) &&
          (me.uniformMatrix4fv(
            h.projectionMatrix,
            !1,
            e.projectionMatrix.elements
          ),
          Ne.logarithmicDepthBuffer &&
            me.uniform1f(h.logDepthBufFC, 2 / (Math.log(e.far + 1) / Math.LN2)),
          e !== xe && ((xe = e), (a = !0), (s = !0)),
          (i instanceof THREE.ShaderMaterial ||
            i instanceof THREE.MeshPhongMaterial ||
            i instanceof THREE.MeshStandardMaterial ||
            i.envMap) &&
            void 0 !== h.cameraPosition &&
            (Ve.setFromMatrixPosition(e.matrixWorld),
            me.uniform3f(h.cameraPosition, Ve.x, Ve.y, Ve.z)),
          (i instanceof THREE.MeshPhongMaterial ||
            i instanceof THREE.MeshLambertMaterial ||
            i instanceof THREE.MeshBasicMaterial ||
            i instanceof THREE.MeshStandardMaterial ||
            i instanceof THREE.ShaderMaterial ||
            i.skinning) &&
            void 0 !== h.viewMatrix &&
            me.uniformMatrix4fv(
              h.viewMatrix,
              !1,
              e.matrixWorldInverse.elements
            )),
        i.skinning)
      )
        if (
          (r.bindMatrix &&
            void 0 !== h.bindMatrix &&
            me.uniformMatrix4fv(h.bindMatrix, !1, r.bindMatrix.elements),
          r.bindMatrixInverse &&
            void 0 !== h.bindMatrixInverse &&
            me.uniformMatrix4fv(
              h.bindMatrixInverse,
              !1,
              r.bindMatrixInverse.elements
            ),
          Ne.floatVertexTextures && r.skeleton && r.skeleton.useVertexTexture)
        ) {
          if (void 0 !== h.boneTexture) {
            var u = P();
            me.uniform1i(h.boneTexture, u),
              Ee.setTexture(r.skeleton.boneTexture, u);
          }
          void 0 !== h.boneTextureWidth &&
            me.uniform1i(h.boneTextureWidth, r.skeleton.boneTextureWidth),
            void 0 !== h.boneTextureHeight &&
              me.uniform1i(h.boneTextureHeight, r.skeleton.boneTextureHeight);
        } else
          r.skeleton &&
            r.skeleton.boneMatrices &&
            void 0 !== h.boneGlobalMatrices &&
            me.uniformMatrix4fv(
              h.boneGlobalMatrices,
              !1,
              r.skeleton.boneMatrices
            );
      return (
        a &&
          ((i instanceof THREE.MeshPhongMaterial ||
            i instanceof THREE.MeshLambertMaterial ||
            i instanceof THREE.MeshStandardMaterial ||
            i.lights) &&
            k(c, s),
          t && i.fog && S(c, t),
          (i instanceof THREE.MeshBasicMaterial ||
            i instanceof THREE.MeshLambertMaterial ||
            i instanceof THREE.MeshPhongMaterial ||
            i instanceof THREE.MeshStandardMaterial) &&
            w(c, i),
          i instanceof THREE.LineBasicMaterial
            ? q(c, i)
            : i instanceof THREE.LineDashedMaterial
            ? (q(c, i), M(c, i))
            : i instanceof THREE.PointsMaterial
            ? _(c, i)
            : i instanceof THREE.MeshLambertMaterial
            ? C(c, i)
            : i instanceof THREE.MeshPhongMaterial
            ? L(c, i)
            : i instanceof THREE.MeshStandardMaterial
            ? A(c, i)
            : i instanceof THREE.MeshDepthMaterial
            ? ((c.mNear.value = e.near),
              (c.mFar.value = e.far),
              (c.opacity.value = i.opacity))
            : i instanceof THREE.MeshNormalMaterial &&
              (c.opacity.value = i.opacity),
          I(n.uniformsList)),
        D(h, r),
        void 0 !== h.modelMatrix &&
          me.uniformMatrix4fv(h.modelMatrix, !1, r.matrixWorld.elements),
        !0 === n.hasDynamicUniforms && b(n.uniformsList, r, e),
        l
      );
    }
    function b(e, t, i) {
      for (var r = [], n = 0, o = e.length; n < o; n++) {
        var a = e[n][0],
          s = a.onUpdateCallback;
        void 0 !== s && (s.bind(a)(t, i), r.push(e[n]));
      }
      I(r);
    }
    function w(e, t) {
      var i;
      if (
        ((e.opacity.value = t.opacity),
        (e.diffuse.value = t.color),
        t.emissive &&
          e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),
        (e.map.value = t.map),
        (e.specularMap.value = t.specularMap),
        (e.alphaMap.value = t.alphaMap),
        t.aoMap &&
          ((e.aoMap.value = t.aoMap),
          (e.aoMapIntensity.value = t.aoMapIntensity)),
        t.map
          ? (i = t.map)
          : t.specularMap
          ? (i = t.specularMap)
          : t.displacementMap
          ? (i = t.displacementMap)
          : t.normalMap
          ? (i = t.normalMap)
          : t.bumpMap
          ? (i = t.bumpMap)
          : t.roughnessMap
          ? (i = t.roughnessMap)
          : t.metalnessMap
          ? (i = t.metalnessMap)
          : t.alphaMap
          ? (i = t.alphaMap)
          : t.emissiveMap && (i = t.emissiveMap),
        void 0 !== i)
      ) {
        i instanceof THREE.WebGLRenderTarget && (i = i.texture);
        var r = i.offset,
          n = i.repeat;
        e.offsetRepeat.value.set(r.x, r.y, n.x, n.y);
      }
      (e.envMap.value = t.envMap),
        (e.flipEnvMap.value =
          t.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1),
        (e.reflectivity.value = t.reflectivity),
        (e.refractionRatio.value = t.refractionRatio);
    }
    function q(e, t) {
      (e.diffuse.value = t.color), (e.opacity.value = t.opacity);
    }
    function M(e, t) {
      (e.dashSize.value = t.dashSize),
        (e.totalSize.value = t.dashSize + t.gapSize),
        (e.scale.value = t.scale);
    }
    function _(e, t) {
      if (
        ((e.diffuse.value = t.color),
        (e.opacity.value = t.opacity),
        (e.size.value = t.size * Le),
        (e.scale.value = J.clientHeight / 2),
        (e.map.value = t.map),
        null !== t.map)
      ) {
        var i = t.map.offset,
          r = t.map.repeat;
        e.offsetRepeat.value.set(i.x, i.y, r.x, r.y);
      }
    }
    function S(e, t) {
      (e.fogColor.value = t.color),
        t instanceof THREE.Fog
          ? ((e.fogNear.value = t.near), (e.fogFar.value = t.far))
          : t instanceof THREE.FogExp2 && (e.fogDensity.value = t.density);
    }
    function C(e, t) {
      t.lightMap &&
        ((e.lightMap.value = t.lightMap),
        (e.lightMapIntensity.value = t.lightMapIntensity)),
        t.emissiveMap && (e.emissiveMap.value = t.emissiveMap);
    }
    function L(e, t) {
      (e.specular.value = t.specular),
        (e.shininess.value = Math.max(t.shininess, 1e-4)),
        t.lightMap &&
          ((e.lightMap.value = t.lightMap),
          (e.lightMapIntensity.value = t.lightMapIntensity)),
        t.emissiveMap && (e.emissiveMap.value = t.emissiveMap),
        t.bumpMap &&
          ((e.bumpMap.value = t.bumpMap), (e.bumpScale.value = t.bumpScale)),
        t.normalMap &&
          ((e.normalMap.value = t.normalMap),
          e.normalScale.value.copy(t.normalScale)),
        t.displacementMap &&
          ((e.displacementMap.value = t.displacementMap),
          (e.displacementScale.value = t.displacementScale),
          (e.displacementBias.value = t.displacementBias));
    }
    function A(e, t) {
      (e.roughness.value = t.roughness),
        (e.metalness.value = t.metalness),
        t.roughnessMap && (e.roughnessMap.value = t.roughnessMap),
        t.metalnessMap && (e.metalnessMap.value = t.metalnessMap),
        t.lightMap &&
          ((e.lightMap.value = t.lightMap),
          (e.lightMapIntensity.value = t.lightMapIntensity)),
        t.emissiveMap && (e.emissiveMap.value = t.emissiveMap),
        t.bumpMap &&
          ((e.bumpMap.value = t.bumpMap), (e.bumpScale.value = t.bumpScale)),
        t.normalMap &&
          ((e.normalMap.value = t.normalMap),
          e.normalScale.value.copy(t.normalScale)),
        t.displacementMap &&
          ((e.displacementMap.value = t.displacementMap),
          (e.displacementScale.value = t.displacementScale),
          (e.displacementBias.value = t.displacementBias)),
        t.envMap && (e.envMapIntensity.value = t.envMapIntensity);
    }
    function k(e, t) {
      (e.ambientLightColor.needsUpdate = t),
        (e.directionalLights.needsUpdate = t),
        (e.pointLights.needsUpdate = t),
        (e.spotLights.needsUpdate = t),
        (e.hemisphereLights.needsUpdate = t);
    }
    function D(e, t) {
      me.uniformMatrix4fv(e.modelViewMatrix, !1, t.modelViewMatrix.elements),
        e.normalMatrix &&
          me.uniformMatrix3fv(e.normalMatrix, !1, t.normalMatrix.elements);
    }
    function P() {
      var e = qe;
      return (
        e >= Ne.maxTextures &&
          console.warn(
            "WebGLRenderer: trying to use " +
              e +
              " texture units while this GPU supports only " +
              Ne.maxTextures
          ),
        (qe += 1),
        e
      );
    }
    function I(e) {
      for (var t, i, r = 0, n = e.length; r < n; r++) {
        var o = e[r][0];
        if (!1 !== o.needsUpdate) {
          var a = o.type,
            s = o.value,
            l = e[r][1];
          switch (a) {
            case "1i":
            case "i":
              me.uniform1i(l, s);
              break;
            case "1f":
            case "f":
              me.uniform1f(l, s);
              break;
            case "2f":
              me.uniform2f(l, s[0], s[1]);
              break;
            case "3f":
              me.uniform3f(l, s[0], s[1], s[2]);
              break;
            case "4f":
              me.uniform4f(l, s[0], s[1], s[2], s[3]);
              break;
            case "1iv":
            case "iv1":
              me.uniform1iv(l, s);
              break;
            case "3iv":
            case "iv":
              me.uniform3iv(l, s);
              break;
            case "1fv":
            case "fv1":
              me.uniform1fv(l, s);
              break;
            case "2fv":
              me.uniform2fv(l, s);
              break;
            case "3fv":
            case "fv":
              me.uniform3fv(l, s);
              break;
            case "4fv":
              me.uniform4fv(l, s);
              break;
            case "Matrix2fv":
              me.uniformMatrix2fv(l, !1, s);
              break;
            case "Matrix3fv":
              me.uniformMatrix3fv(l, !1, s);
              break;
            case "Matrix4fv":
              me.uniformMatrix4fv(l, !1, s);
              break;
            case "v2":
              me.uniform2f(l, s.x, s.y);
              break;
            case "v3":
              me.uniform3f(l, s.x, s.y, s.z);
              break;
            case "v4":
              me.uniform4f(l, s.x, s.y, s.z, s.w);
              break;
            case "c":
              me.uniform3f(l, s.r, s.g, s.b);
              break;
            case "sa":
              for (var h = 0; h < s.length; h++)
                for (var c in o.properties) {
                  var u = o.properties[c],
                    p = l[h][c],
                    d = s[h][c];
                  switch (u.type) {
                    case "i":
                      me.uniform1i(p, d);
                      break;
                    case "f":
                      me.uniform1f(p, d);
                      break;
                    case "v2":
                      me.uniform2f(p, d.x, d.y);
                      break;
                    case "v3":
                      me.uniform3f(p, d.x, d.y, d.z);
                      break;
                    case "v4":
                      me.uniform4f(p, d.x, d.y, d.z, d.w);
                      break;
                    case "c":
                      me.uniform3f(p, d.r, d.g, d.b);
                      break;
                    case "m4":
                      me.uniformMatrix4fv(p, !1, d.elements);
                  }
                }
              break;
            case "v2v":
              void 0 === o._array &&
                (o._array = new Float32Array(2 * s.length));
              h = 0;
              for (var f = 0, m = s.length; h < m; h++, f += 2)
                (o._array[f + 0] = s[h].x), (o._array[f + 1] = s[h].y);
              me.uniform2fv(l, o._array);
              break;
            case "v3v":
              void 0 === o._array &&
                (o._array = new Float32Array(3 * s.length));
              h = 0;
              var E = 0;
              for (m = s.length; h < m; h++, E += 3)
                (o._array[E + 0] = s[h].x),
                  (o._array[E + 1] = s[h].y),
                  (o._array[E + 2] = s[h].z);
              me.uniform3fv(l, o._array);
              break;
            case "v4v":
              void 0 === o._array &&
                (o._array = new Float32Array(4 * s.length));
              h = 0;
              var g = 0;
              for (m = s.length; h < m; h++, g += 4)
                (o._array[g + 0] = s[h].x),
                  (o._array[g + 1] = s[h].y),
                  (o._array[g + 2] = s[h].z),
                  (o._array[g + 3] = s[h].w);
              me.uniform4fv(l, o._array);
              break;
            case "m2":
              me.uniformMatrix2fv(l, !1, s.elements);
              break;
            case "m3":
              me.uniformMatrix3fv(l, !1, s.elements);
              break;
            case "m3v":
              void 0 === o._array &&
                (o._array = new Float32Array(9 * s.length));
              for (h = 0, m = s.length; h < m; h++)
                s[h].flattenToArrayOffset(o._array, 9 * h);
              me.uniformMatrix3fv(l, !1, o._array);
              break;
            case "m4":
              me.uniformMatrix4fv(l, !1, s.elements);
              break;
            case "m4v":
              void 0 === o._array &&
                (o._array = new Float32Array(16 * s.length));
              for (h = 0, m = s.length; h < m; h++)
                s[h].flattenToArrayOffset(o._array, 16 * h);
              me.uniformMatrix4fv(l, !1, o._array);
              break;
            case "t":
              if (((t = s), (i = P()), me.uniform1i(l, i), !t)) continue;
              t instanceof THREE.CubeTexture ||
              (Array.isArray(t.image) && 6 === t.image.length)
                ? j(t, i)
                : t instanceof THREE.WebGLRenderTargetCube
                ? G(t.texture, i)
                : t instanceof THREE.WebGLRenderTarget
                ? Ee.setTexture(t.texture, i)
                : Ee.setTexture(t, i);
              break;
            case "tv":
              void 0 === o._array && (o._array = []);
              for (h = 0, m = o.value.length; h < m; h++) o._array[h] = P();
              me.uniform1iv(l, o._array);
              for (h = 0, m = o.value.length; h < m; h++)
                (t = o.value[h]),
                  (i = o._array[h]),
                  t &&
                    (t instanceof THREE.CubeTexture ||
                    (t.image instanceof Array && 6 === t.image.length)
                      ? j(t, i)
                      : t instanceof THREE.WebGLRenderTarget
                      ? Ee.setTexture(t.texture, i)
                      : t instanceof THREE.WebGLRenderTargetCube
                      ? G(t.texture, i)
                      : Ee.setTexture(t, i));
              break;
            default:
              console.warn("THREE.WebGLRenderer: Unknown uniform type: " + a);
          }
        }
      }
    }
    function V(e, t) {
      var i,
        r,
        n,
        o,
        a,
        s,
        l = 0,
        h = 0,
        c = 0,
        u = t.matrixWorldInverse,
        p = 0,
        d = 0,
        f = 0,
        m = 0,
        E = 0;
      for (Oe.shadowsPointLight = 0, i = 0, r = e.length; i < r; i++)
        if (
          ((o = (n = e[i]).color),
          (a = n.intensity),
          (s = n.distance),
          n instanceof THREE.AmbientLight)
        )
          (l += o.r * a), (h += o.g * a), (c += o.b * a);
        else if (n instanceof THREE.DirectionalLight) {
          (g = Qe.get(n)).color.copy(n.color).multiplyScalar(n.intensity),
            g.direction.setFromMatrixPosition(n.matrixWorld),
            Ve.setFromMatrixPosition(n.target.matrixWorld),
            g.direction.sub(Ve),
            g.direction.transformDirection(u),
            (g.shadow = n.castShadow),
            n.castShadow &&
              ((g.shadowBias = n.shadow.bias),
              (g.shadowRadius = n.shadow.radius),
              (g.shadowMapSize = n.shadow.mapSize),
              (Oe.shadows[E++] = n)),
            (Oe.directionalShadowMap[p] = n.shadow.map),
            (Oe.directionalShadowMatrix[p] = n.shadow.matrix),
            (Oe.directional[p++] = g);
        } else if (n instanceof THREE.SpotLight) {
          (g = Qe.get(n)).position.setFromMatrixPosition(n.matrixWorld),
            g.position.applyMatrix4(u),
            g.color.copy(o).multiplyScalar(a),
            (g.distance = s),
            g.direction.setFromMatrixPosition(n.matrixWorld),
            Ve.setFromMatrixPosition(n.target.matrixWorld),
            g.direction.sub(Ve),
            g.direction.transformDirection(u),
            (g.angleCos = Math.cos(n.angle)),
            (g.exponent = n.exponent),
            (g.decay = 0 === n.distance ? 0 : n.decay),
            (g.shadow = n.castShadow),
            n.castShadow &&
              ((g.shadowBias = n.shadow.bias),
              (g.shadowRadius = n.shadow.radius),
              (g.shadowMapSize = n.shadow.mapSize),
              (Oe.shadows[E++] = n)),
            (Oe.spotShadowMap[f] = n.shadow.map),
            (Oe.spotShadowMatrix[f] = n.shadow.matrix),
            (Oe.spot[f++] = g);
        } else if (n instanceof THREE.PointLight) {
          (g = Qe.get(n)).position.setFromMatrixPosition(n.matrixWorld),
            g.position.applyMatrix4(u),
            g.color.copy(n.color).multiplyScalar(n.intensity),
            (g.distance = n.distance),
            (g.decay = 0 === n.distance ? 0 : n.decay),
            (g.shadow = n.castShadow),
            n.castShadow &&
              ((g.shadowBias = n.shadow.bias),
              (g.shadowRadius = n.shadow.radius),
              (g.shadowMapSize = n.shadow.mapSize),
              (Oe.shadows[E++] = n)),
            (Oe.pointShadowMap[d] = n.shadow.map),
            void 0 === Oe.pointShadowMatrix[d] &&
              (Oe.pointShadowMatrix[d] = new THREE.Matrix4()),
            Ve.setFromMatrixPosition(n.matrixWorld).negate(),
            Oe.pointShadowMatrix[d].identity().setPosition(Ve),
            (Oe.point[d++] = g);
        } else if (n instanceof THREE.HemisphereLight) {
          var g;
          (g = Qe.get(n)).direction.setFromMatrixPosition(n.matrixWorld),
            g.direction.transformDirection(u),
            g.direction.normalize(),
            g.skyColor.copy(n.color).multiplyScalar(a),
            g.groundColor.copy(n.groundColor).multiplyScalar(a),
            (Oe.hemi[m++] = g);
        }
      (Oe.ambient[0] = l),
        (Oe.ambient[1] = h),
        (Oe.ambient[2] = c),
        (Oe.directional.length = p),
        (Oe.spot.length = f),
        (Oe.point.length = d),
        (Oe.hemi.length = m),
        (Oe.shadows.length = E),
        (Oe.hash = p + "," + d + "," + f + "," + m + "," + E);
    }
    function O(e, t, i) {
      var r;
      if (
        (i
          ? (me.texParameteri(e, me.TEXTURE_WRAP_S, K(t.wrapS)),
            me.texParameteri(e, me.TEXTURE_WRAP_T, K(t.wrapT)),
            me.texParameteri(e, me.TEXTURE_MAG_FILTER, K(t.magFilter)),
            me.texParameteri(e, me.TEXTURE_MIN_FILTER, K(t.minFilter)))
          : (me.texParameteri(e, me.TEXTURE_WRAP_S, me.CLAMP_TO_EDGE),
            me.texParameteri(e, me.TEXTURE_WRAP_T, me.CLAMP_TO_EDGE),
            (t.wrapS === THREE.ClampToEdgeWrapping &&
              t.wrapT === THREE.ClampToEdgeWrapping) ||
              console.warn(
                "THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",
                t
              ),
            me.texParameteri(e, me.TEXTURE_MAG_FILTER, Z(t.magFilter)),
            me.texParameteri(e, me.TEXTURE_MIN_FILTER, Z(t.minFilter)),
            t.minFilter !== THREE.NearestFilter &&
              t.minFilter !== THREE.LinearFilter &&
              console.warn(
                "THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",
                t
              )),
        (r = Be.get("EXT_texture_filter_anisotropic")))
      ) {
        if (
          t.type === THREE.FloatType &&
          null === Be.get("OES_texture_float_linear")
        )
          return;
        if (
          t.type === THREE.HalfFloatType &&
          null === Be.get("OES_texture_half_float_linear")
        )
          return;
        (t.anisotropy > 1 || Ge.get(t).__currentAnisotropy) &&
          (me.texParameterf(
            e,
            r.TEXTURE_MAX_ANISOTROPY_EXT,
            Math.min(t.anisotropy, Ee.getMaxAnisotropy())
          ),
          (Ge.get(t).__currentAnisotropy = t.anisotropy));
      }
    }
    function F(e, t, i) {
      void 0 === e.__webglInit &&
        ((e.__webglInit = !0),
        t.addEventListener("dispose", a),
        (e.__webglTexture = me.createTexture()),
        Fe.textures++),
        je.activeTexture(me.TEXTURE0 + i),
        je.bindTexture(me.TEXTURE_2D, e.__webglTexture),
        me.pixelStorei(me.UNPACK_FLIP_Y_WEBGL, t.flipY),
        me.pixelStorei(me.UNPACK_PREMULTIPLY_ALPHA_WEBGL, t.premultiplyAlpha),
        me.pixelStorei(me.UNPACK_ALIGNMENT, t.unpackAlignment);
      var r = z(t.image, Ne.maxTextureSize);
      B(t) && !1 === U(r) && (r = N(r));
      var n = U(r),
        o = K(t.format),
        s = K(t.type);
      O(me.TEXTURE_2D, t, n);
      var l,
        h = t.mipmaps;
      if (t instanceof THREE.DataTexture)
        if (h.length > 0 && n) {
          for (var c = 0, u = h.length; c < u; c++)
            (l = h[c]),
              je.texImage2D(
                me.TEXTURE_2D,
                c,
                o,
                l.width,
                l.height,
                0,
                o,
                s,
                l.data
              );
          t.generateMipmaps = !1;
        } else
          je.texImage2D(
            me.TEXTURE_2D,
            0,
            o,
            r.width,
            r.height,
            0,
            o,
            s,
            r.data
          );
      else if (t instanceof THREE.CompressedTexture)
        for (c = 0, u = h.length; c < u; c++)
          (l = h[c]),
            t.format !== THREE.RGBAFormat && t.format !== THREE.RGBFormat
              ? je.getCompressedTextureFormats().indexOf(o) > -1
                ? je.compressedTexImage2D(
                    me.TEXTURE_2D,
                    c,
                    o,
                    l.width,
                    l.height,
                    0,
                    l.data
                  )
                : console.warn(
                    "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                  )
              : je.texImage2D(
                  me.TEXTURE_2D,
                  c,
                  o,
                  l.width,
                  l.height,
                  0,
                  o,
                  s,
                  l.data
                );
      else if (h.length > 0 && n) {
        for (c = 0, u = h.length; c < u; c++)
          (l = h[c]), je.texImage2D(me.TEXTURE_2D, c, o, o, s, l);
        t.generateMipmaps = !1;
      } else je.texImage2D(me.TEXTURE_2D, 0, o, o, s, r);
      t.generateMipmaps && n && me.generateMipmap(me.TEXTURE_2D),
        (e.__version = t.version),
        t.onUpdate && t.onUpdate(t);
    }
    function z(e, t) {
      if (e.width > t || e.height > t) {
        var i = t / Math.max(e.width, e.height),
          r = document.createElement("canvas");
        return (
          (r.width = Math.floor(e.width * i)),
          (r.height = Math.floor(e.height * i)),
          r
            .getContext("2d")
            .drawImage(e, 0, 0, e.width, e.height, 0, 0, r.width, r.height),
          console.warn(
            "THREE.WebGLRenderer: image is too big (" +
              e.width +
              "x" +
              e.height +
              "). Resized to " +
              r.width +
              "x" +
              r.height,
            e
          ),
          r
        );
      }
      return e;
    }
    function U(e) {
      return (
        THREE.Math.isPowerOfTwo(e.width) && THREE.Math.isPowerOfTwo(e.height)
      );
    }
    function B(e) {
      return (
        e.wrapS !== THREE.ClampToEdgeWrapping ||
        e.wrapT !== THREE.ClampToEdgeWrapping ||
        (e.minFilter !== THREE.NearestFilter &&
          e.minFilter !== THREE.LinearFilter)
      );
    }
    function N(e) {
      if (e instanceof HTMLImageElement || e instanceof HTMLCanvasElement) {
        var t = document.createElement("canvas");
        return (
          (t.width = THREE.Math.nearestPowerOfTwo(e.width)),
          (t.height = THREE.Math.nearestPowerOfTwo(e.height)),
          t.getContext("2d").drawImage(e, 0, 0, t.width, t.height),
          t
        );
      }
      return e;
    }
    function j(e, t) {
      var i = Ge.get(e);
      if (6 === e.image.length)
        if (e.version > 0 && i.__version !== e.version) {
          i.__image__webglTextureCube ||
            (e.addEventListener("dispose", a),
            (i.__image__webglTextureCube = me.createTexture()),
            Fe.textures++),
            je.activeTexture(me.TEXTURE0 + t),
            je.bindTexture(me.TEXTURE_CUBE_MAP, i.__image__webglTextureCube),
            me.pixelStorei(me.UNPACK_FLIP_Y_WEBGL, e.flipY);
          for (
            var r = e instanceof THREE.CompressedTexture,
              n = e.image[0] instanceof THREE.DataTexture,
              o = [],
              s = 0;
            s < 6;
            s++
          )
            !Ee.autoScaleCubemaps || r || n
              ? (o[s] = n ? e.image[s].image : e.image[s])
              : (o[s] = z(e.image[s], Ne.maxCubemapSize));
          var l = U(o[0]),
            h = K(e.format),
            c = K(e.type);
          O(me.TEXTURE_CUBE_MAP, e, l);
          for (s = 0; s < 6; s++)
            if (r)
              for (var u, p = o[s].mipmaps, d = 0, f = p.length; d < f; d++)
                (u = p[d]),
                  e.format !== THREE.RGBAFormat && e.format !== THREE.RGBFormat
                    ? je.getCompressedTextureFormats().indexOf(h) > -1
                      ? je.compressedTexImage2D(
                          me.TEXTURE_CUBE_MAP_POSITIVE_X + s,
                          d,
                          h,
                          u.width,
                          u.height,
                          0,
                          u.data
                        )
                      : console.warn(
                          "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()"
                        )
                    : je.texImage2D(
                        me.TEXTURE_CUBE_MAP_POSITIVE_X + s,
                        d,
                        h,
                        u.width,
                        u.height,
                        0,
                        h,
                        c,
                        u.data
                      );
            else
              n
                ? je.texImage2D(
                    me.TEXTURE_CUBE_MAP_POSITIVE_X + s,
                    0,
                    h,
                    o[s].width,
                    o[s].height,
                    0,
                    h,
                    c,
                    o[s].data
                  )
                : je.texImage2D(
                    me.TEXTURE_CUBE_MAP_POSITIVE_X + s,
                    0,
                    h,
                    h,
                    c,
                    o[s]
                  );
          e.generateMipmaps && l && me.generateMipmap(me.TEXTURE_CUBE_MAP),
            (i.__version = e.version),
            e.onUpdate && e.onUpdate(e);
        } else
          je.activeTexture(me.TEXTURE0 + t),
            je.bindTexture(me.TEXTURE_CUBE_MAP, i.__image__webglTextureCube);
    }
    function G(e, t) {
      je.activeTexture(me.TEXTURE0 + t),
        je.bindTexture(me.TEXTURE_CUBE_MAP, Ge.get(e).__webglTexture);
    }
    function W(e, t, i, r) {
      var n = K(t.texture.format),
        o = K(t.texture.type);
      je.texImage2D(r, 0, n, t.width, t.height, 0, n, o, null),
        me.bindFramebuffer(me.FRAMEBUFFER, e),
        me.framebufferTexture2D(
          me.FRAMEBUFFER,
          i,
          r,
          Ge.get(t.texture).__webglTexture,
          0
        ),
        me.bindFramebuffer(me.FRAMEBUFFER, null);
    }
    function X(e, t) {
      me.bindRenderbuffer(me.RENDERBUFFER, e),
        t.depthBuffer && !t.stencilBuffer
          ? (me.renderbufferStorage(
              me.RENDERBUFFER,
              me.DEPTH_COMPONENT16,
              t.width,
              t.height
            ),
            me.framebufferRenderbuffer(
              me.FRAMEBUFFER,
              me.DEPTH_ATTACHMENT,
              me.RENDERBUFFER,
              e
            ))
          : t.depthBuffer && t.stencilBuffer
          ? (me.renderbufferStorage(
              me.RENDERBUFFER,
              me.DEPTH_STENCIL,
              t.width,
              t.height
            ),
            me.framebufferRenderbuffer(
              me.FRAMEBUFFER,
              me.DEPTH_STENCIL_ATTACHMENT,
              me.RENDERBUFFER,
              e
            ))
          : me.renderbufferStorage(
              me.RENDERBUFFER,
              me.RGBA4,
              t.width,
              t.height
            ),
        me.bindRenderbuffer(me.RENDERBUFFER, null);
    }
    function Q(e) {
      var t = Ge.get(e);
      if (e instanceof THREE.WebGLRenderTargetCube) {
        t.__webglDepthbuffer = [];
        for (var i = 0; i < 6; i++)
          me.bindFramebuffer(me.FRAMEBUFFER, t.__webglFramebuffer[i]),
            (t.__webglDepthbuffer[i] = me.createRenderbuffer()),
            X(t.__webglDepthbuffer[i], e);
      } else
        me.bindFramebuffer(me.FRAMEBUFFER, t.__webglFramebuffer),
          (t.__webglDepthbuffer = me.createRenderbuffer()),
          X(t.__webglDepthbuffer, e);
      me.bindFramebuffer(me.FRAMEBUFFER, null);
    }
    function $(e) {
      var t = Ge.get(e),
        i = Ge.get(e.texture);
      e.addEventListener("dispose", s),
        (i.__webglTexture = me.createTexture()),
        Fe.textures++;
      var r = e instanceof THREE.WebGLRenderTargetCube,
        n =
          THREE.Math.isPowerOfTwo(e.width) && THREE.Math.isPowerOfTwo(e.height);
      if (r) {
        t.__webglFramebuffer = [];
        for (var o = 0; o < 6; o++)
          t.__webglFramebuffer[o] = me.createFramebuffer();
      } else t.__webglFramebuffer = me.createFramebuffer();
      if (r) {
        je.bindTexture(me.TEXTURE_CUBE_MAP, i.__webglTexture),
          O(me.TEXTURE_CUBE_MAP, e.texture, n);
        for (o = 0; o < 6; o++)
          W(
            t.__webglFramebuffer[o],
            e,
            me.COLOR_ATTACHMENT0,
            me.TEXTURE_CUBE_MAP_POSITIVE_X + o
          );
        e.texture.generateMipmaps &&
          n &&
          me.generateMipmap(me.TEXTURE_CUBE_MAP),
          je.bindTexture(me.TEXTURE_CUBE_MAP, null);
      } else
        je.bindTexture(me.TEXTURE_2D, i.__webglTexture),
          O(me.TEXTURE_2D, e.texture, n),
          W(t.__webglFramebuffer, e, me.COLOR_ATTACHMENT0, me.TEXTURE_2D),
          e.texture.generateMipmaps && n && me.generateMipmap(me.TEXTURE_2D),
          je.bindTexture(me.TEXTURE_2D, null);
      e.depthBuffer && Q(e);
    }
    function Y(e) {
      var t =
          e instanceof THREE.WebGLRenderTargetCube
            ? me.TEXTURE_CUBE_MAP
            : me.TEXTURE_2D,
        i = Ge.get(e.texture).__webglTexture;
      je.bindTexture(t, i), me.generateMipmap(t), je.bindTexture(t, null);
    }
    function Z(e) {
      return e === THREE.NearestFilter ||
        e === THREE.NearestMipMapNearestFilter ||
        e === THREE.NearestMipMapLinearFilter
        ? me.NEAREST
        : me.LINEAR;
    }
    function K(e) {
      var t;
      if (e === THREE.RepeatWrapping) return me.REPEAT;
      if (e === THREE.ClampToEdgeWrapping) return me.CLAMP_TO_EDGE;
      if (e === THREE.MirroredRepeatWrapping) return me.MIRRORED_REPEAT;
      if (e === THREE.NearestFilter) return me.NEAREST;
      if (e === THREE.NearestMipMapNearestFilter)
        return me.NEAREST_MIPMAP_NEAREST;
      if (e === THREE.NearestMipMapLinearFilter)
        return me.NEAREST_MIPMAP_LINEAR;
      if (e === THREE.LinearFilter) return me.LINEAR;
      if (e === THREE.LinearMipMapNearestFilter)
        return me.LINEAR_MIPMAP_NEAREST;
      if (e === THREE.LinearMipMapLinearFilter) return me.LINEAR_MIPMAP_LINEAR;
      if (e === THREE.UnsignedByteType) return me.UNSIGNED_BYTE;
      if (e === THREE.UnsignedShort4444Type) return me.UNSIGNED_SHORT_4_4_4_4;
      if (e === THREE.UnsignedShort5551Type) return me.UNSIGNED_SHORT_5_5_5_1;
      if (e === THREE.UnsignedShort565Type) return me.UNSIGNED_SHORT_5_6_5;
      if (e === THREE.ByteType) return me.BYTE;
      if (e === THREE.ShortType) return me.SHORT;
      if (e === THREE.UnsignedShortType) return me.UNSIGNED_SHORT;
      if (e === THREE.IntType) return me.INT;
      if (e === THREE.UnsignedIntType) return me.UNSIGNED_INT;
      if (e === THREE.FloatType) return me.FLOAT;
      if (
        null !== (t = Be.get("OES_texture_half_float")) &&
        e === THREE.HalfFloatType
      )
        return t.HALF_FLOAT_OES;
      if (e === THREE.AlphaFormat) return me.ALPHA;
      if (e === THREE.RGBFormat) return me.RGB;
      if (e === THREE.RGBAFormat) return me.RGBA;
      if (e === THREE.LuminanceFormat) return me.LUMINANCE;
      if (e === THREE.LuminanceAlphaFormat) return me.LUMINANCE_ALPHA;
      if (e === THREE.AddEquation) return me.FUNC_ADD;
      if (e === THREE.SubtractEquation) return me.FUNC_SUBTRACT;
      if (e === THREE.ReverseSubtractEquation) return me.FUNC_REVERSE_SUBTRACT;
      if (e === THREE.ZeroFactor) return me.ZERO;
      if (e === THREE.OneFactor) return me.ONE;
      if (e === THREE.SrcColorFactor) return me.SRC_COLOR;
      if (e === THREE.OneMinusSrcColorFactor) return me.ONE_MINUS_SRC_COLOR;
      if (e === THREE.SrcAlphaFactor) return me.SRC_ALPHA;
      if (e === THREE.OneMinusSrcAlphaFactor) return me.ONE_MINUS_SRC_ALPHA;
      if (e === THREE.DstAlphaFactor) return me.DST_ALPHA;
      if (e === THREE.OneMinusDstAlphaFactor) return me.ONE_MINUS_DST_ALPHA;
      if (e === THREE.DstColorFactor) return me.DST_COLOR;
      if (e === THREE.OneMinusDstColorFactor) return me.ONE_MINUS_DST_COLOR;
      if (e === THREE.SrcAlphaSaturateFactor) return me.SRC_ALPHA_SATURATE;
      if (null !== (t = Be.get("WEBGL_compressed_texture_s3tc"))) {
        if (e === THREE.RGB_S3TC_DXT1_Format)
          return t.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (e === THREE.RGBA_S3TC_DXT1_Format)
          return t.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (e === THREE.RGBA_S3TC_DXT3_Format)
          return t.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (e === THREE.RGBA_S3TC_DXT5_Format)
          return t.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      }
      if (null !== (t = Be.get("WEBGL_compressed_texture_pvrtc"))) {
        if (e === THREE.RGB_PVRTC_4BPPV1_Format)
          return t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (e === THREE.RGB_PVRTC_2BPPV1_Format)
          return t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (e === THREE.RGBA_PVRTC_4BPPV1_Format)
          return t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (e === THREE.RGBA_PVRTC_2BPPV1_Format)
          return t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      }
      if (
        null !== (t = Be.get("WEBGL_compressed_texture_etc1")) &&
        e === THREE.RGB_ETC1_Format
      )
        return t.COMPRESSED_RGB_ETC1_WEBGL;
      if (null !== (t = Be.get("EXT_blend_minmax"))) {
        if (e === THREE.MinEquation) return t.MIN_EXT;
        if (e === THREE.MaxEquation) return t.MAX_EXT;
      }
      return 0;
    }
    console.log("THREE.WebGLRenderer", THREE.REVISION);
    var J =
        void 0 !== (e = e || {}).canvas
          ? e.canvas
          : document.createElement("canvas"),
      ee = void 0 !== e.context ? e.context : null,
      te = void 0 !== e.alpha && e.alpha,
      ie = void 0 === e.depth || e.depth,
      re = void 0 === e.stencil || e.stencil,
      ne = void 0 !== e.antialias && e.antialias,
      oe = void 0 === e.premultipliedAlpha || e.premultipliedAlpha,
      ae = void 0 !== e.preserveDrawingBuffer && e.preserveDrawingBuffer,
      se = [],
      le = [],
      he = -1,
      ce = [],
      ue = -1,
      pe = new Float32Array(8),
      de = [],
      fe = [];
    (this.domElement = J),
      (this.context = null),
      (this.autoClear = !0),
      (this.autoClearColor = !0),
      (this.autoClearDepth = !0),
      (this.autoClearStencil = !0),
      (this.sortObjects = !0),
      (this.gammaFactor = 2),
      (this.gammaInput = !1),
      (this.gammaOutput = !1),
      (this.maxMorphTargets = 8),
      (this.maxMorphNormals = 4),
      (this.autoScaleCubemaps = !0);
    var me,
      Ee = this,
      ge = null,
      ve = null,
      ye = null,
      Te = -1,
      Re = "",
      xe = null,
      He = new THREE.Vector4(),
      be = null,
      we = new THREE.Vector4(),
      qe = 0,
      Me = new THREE.Color(0),
      _e = 0,
      Se = J.width,
      Ce = J.height,
      Le = 1,
      Ae = new THREE.Vector4(0, 0, Se, Ce),
      ke = !1,
      De = new THREE.Vector4(0, 0, Se, Ce),
      Pe = new THREE.Frustum(),
      Ie = new THREE.Matrix4(),
      Ve = new THREE.Vector3(),
      Oe = {
        hash: "",
        ambient: [0, 0, 0],
        directional: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        point: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        shadows: [],
        shadowsPointLight: 0,
      },
      Fe = {
        geometries: 0,
        textures: 0,
      },
      ze = {
        calls: 0,
        vertices: 0,
        faces: 0,
        points: 0,
      };
    this.info = {
      render: ze,
      memory: Fe,
      programs: null,
    };
    try {
      var Ue = {
        alpha: te,
        depth: ie,
        stencil: re,
        antialias: ne,
        premultipliedAlpha: oe,
        preserveDrawingBuffer: ae,
      };
      if (
        null ===
        (me =
          ee ||
          J.getContext("webgl", Ue) ||
          J.getContext("experimental-webgl", Ue))
      )
        throw null !== J.getContext("webgl")
          ? "Error creating WebGL context with your selected attributes."
          : "Error creating WebGL context.";
      J.addEventListener("webglcontextlost", o, !1);
    } catch (e) {
      console.error("THREE.WebGLRenderer: " + e);
    }
    var Be = new THREE.WebGLExtensions(me);
    Be.get("OES_texture_float"),
      Be.get("OES_texture_float_linear"),
      Be.get("OES_texture_half_float"),
      Be.get("OES_texture_half_float_linear"),
      Be.get("OES_standard_derivatives"),
      Be.get("ANGLE_instanced_arrays"),
      Be.get("OES_element_index_uint") &&
        (THREE.BufferGeometry.MaxIndex = 4294967296);
    var Ne = new THREE.WebGLCapabilities(me, Be, e),
      je = new THREE.WebGLState(me, Be, K),
      Ge = new THREE.WebGLProperties(),
      We = new THREE.WebGLObjects(me, Ge, this.info),
      Xe = new THREE.WebGLPrograms(this, Ne),
      Qe = new THREE.WebGLLights();
    this.info.programs = Xe.programs;
    var $e = new THREE.WebGLBufferRenderer(me, Be, ze),
      Ye = new THREE.WebGLIndexedBufferRenderer(me, Be, ze);
    r(),
      (this.context = me),
      (this.capabilities = Ne),
      (this.extensions = Be),
      (this.properties = Ge),
      (this.state = je);
    var Ze = new THREE.WebGLShadowMap(this, Oe, We);
    this.shadowMap = Ze;
    var Ke,
      Je = new THREE.SpritePlugin(this, de),
      et = new THREE.LensFlarePlugin(this, fe);
    (this.getContext = function () {
      return me;
    }),
      (this.getContextAttributes = function () {
        return me.getContextAttributes();
      }),
      (this.forceContextLoss = function () {
        Be.get("WEBGL_lose_context").loseContext();
      }),
      (this.getMaxAnisotropy = function () {
        if (void 0 !== Ke) return Ke;
        var e = Be.get("EXT_texture_filter_anisotropic");
        return (Ke =
          null !== e ? me.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0);
      }),
      (this.getPrecision = function () {
        return Ne.precision;
      }),
      (this.getPixelRatio = function () {
        return Le;
      }),
      (this.setPixelRatio = function (e) {
        void 0 !== e && ((Le = e), this.setSize(De.z, De.w, !1));
      }),
      (this.getSize = function () {
        return {
          width: Se,
          height: Ce,
        };
      }),
      (this.setSize = function (e, t, i) {
        (Se = e),
          (Ce = t),
          (J.width = e * Le),
          (J.height = t * Le),
          !1 !== i && ((J.style.width = e + "px"), (J.style.height = t + "px")),
          this.setViewport(0, 0, e, t);
      }),
      (this.setViewport = function (e, t, i, r) {
        je.viewport(De.set(e, t, i, r));
      }),
      (this.setScissor = function (e, t, i, r) {
        je.scissor(Ae.set(e, t, i, r));
      }),
      (this.setScissorTest = function (e) {
        je.setScissorTest((ke = e));
      }),
      (this.getClearColor = function () {
        return Me;
      }),
      (this.setClearColor = function (e, t) {
        Me.set(e), (_e = void 0 !== t ? t : 1), i(Me.r, Me.g, Me.b, _e);
      }),
      (this.getClearAlpha = function () {
        return _e;
      }),
      (this.setClearAlpha = function (e) {
        (_e = e), i(Me.r, Me.g, Me.b, _e);
      }),
      (this.clear = function (e, t, i) {
        var r = 0;
        (void 0 === e || e) && (r |= me.COLOR_BUFFER_BIT),
          (void 0 === t || t) && (r |= me.DEPTH_BUFFER_BIT),
          (void 0 === i || i) && (r |= me.STENCIL_BUFFER_BIT),
          me.clear(r);
      }),
      (this.clearColor = function () {
        this.clear(!0, !1, !1);
      }),
      (this.clearDepth = function () {
        this.clear(!1, !0, !1);
      }),
      (this.clearStencil = function () {
        this.clear(!1, !1, !0);
      }),
      (this.clearTarget = function (e, t, i, r) {
        this.setRenderTarget(e), this.clear(t, i, r);
      }),
      (this.resetGLState = n),
      (this.dispose = function () {
        J.removeEventListener("webglcontextlost", o, !1);
      }),
      (this.renderBufferImmediate = function (e, t, i) {
        je.initAttributes();
        var r = Ge.get(e);
        e.hasPositions && !r.position && (r.position = me.createBuffer()),
          e.hasNormals && !r.normal && (r.normal = me.createBuffer()),
          e.hasUvs && !r.uv && (r.uv = me.createBuffer()),
          e.hasColors && !r.color && (r.color = me.createBuffer());
        var n = t.getAttributes();
        if (
          (e.hasPositions &&
            (me.bindBuffer(me.ARRAY_BUFFER, r.position),
            me.bufferData(me.ARRAY_BUFFER, e.positionArray, me.DYNAMIC_DRAW),
            je.enableAttribute(n.position),
            me.vertexAttribPointer(n.position, 3, me.FLOAT, !1, 0, 0)),
          e.hasNormals)
        ) {
          if (
            (me.bindBuffer(me.ARRAY_BUFFER, r.normal),
            "MeshPhongMaterial" !== i.type &&
              "MeshStandardMaterial" !== i.type &&
              i.shading === THREE.FlatShading)
          )
            for (var o = 0, a = 3 * e.count; o < a; o += 9) {
              var s = e.normalArray,
                l = (s[o + 0] + s[o + 3] + s[o + 6]) / 3,
                h = (s[o + 1] + s[o + 4] + s[o + 7]) / 3,
                c = (s[o + 2] + s[o + 5] + s[o + 8]) / 3;
              (s[o + 0] = l),
                (s[o + 1] = h),
                (s[o + 2] = c),
                (s[o + 3] = l),
                (s[o + 4] = h),
                (s[o + 5] = c),
                (s[o + 6] = l),
                (s[o + 7] = h),
                (s[o + 8] = c);
            }
          me.bufferData(me.ARRAY_BUFFER, e.normalArray, me.DYNAMIC_DRAW),
            je.enableAttribute(n.normal),
            me.vertexAttribPointer(n.normal, 3, me.FLOAT, !1, 0, 0);
        }
        e.hasUvs &&
          i.map &&
          (me.bindBuffer(me.ARRAY_BUFFER, r.uv),
          me.bufferData(me.ARRAY_BUFFER, e.uvArray, me.DYNAMIC_DRAW),
          je.enableAttribute(n.uv),
          me.vertexAttribPointer(n.uv, 2, me.FLOAT, !1, 0, 0)),
          e.hasColors &&
            i.vertexColors !== THREE.NoColors &&
            (me.bindBuffer(me.ARRAY_BUFFER, r.color),
            me.bufferData(me.ARRAY_BUFFER, e.colorArray, me.DYNAMIC_DRAW),
            je.enableAttribute(n.color),
            me.vertexAttribPointer(n.color, 3, me.FLOAT, !1, 0, 0)),
          je.disableUnusedAttributes(),
          me.drawArrays(me.TRIANGLES, 0, e.count),
          (e.count = 0);
      }),
      (this.renderBufferDirect = function (e, i, r, n, o, a) {
        R(n);
        var s = H(e, i, n, o),
          l = !1,
          h = r.id + "_" + s.id + "_" + n.wireframe;
        h !== Re && ((Re = h), (l = !0));
        var c = o.morphTargetInfluences;
        if (void 0 !== c) {
          for (var u = [], p = 0, m = c.length; p < m; p++) {
            var E = c[p];
            u.push([E, p]);
          }
          u.sort(f), u.length > 8 && (u.length = 8);
          var g = r.morphAttributes;
          for (p = 0, m = u.length; p < m; p++) {
            E = u[p];
            if (((pe[p] = E[0]), 0 !== E[0])) {
              var v = E[1];
              !0 === n.morphTargets &&
                g.position &&
                r.addAttribute("morphTarget" + p, g.position[v]),
                !0 === n.morphNormals &&
                  g.normal &&
                  r.addAttribute("morphNormal" + p, g.normal[v]);
            } else
              !0 === n.morphTargets && r.removeAttribute("morphTarget" + p),
                !0 === n.morphNormals && r.removeAttribute("morphNormal" + p);
          }
          var y = s.getUniforms();
          null !== y.morphTargetInfluences &&
            me.uniform1fv(y.morphTargetInfluences, pe),
            (l = !0);
        }
        v = r.index;
        var T,
          x = r.attributes.position;
        !0 === n.wireframe && (v = We.getWireframeAttribute(r)),
          null !== v ? (T = Ye).setIndex(v) : (T = $e),
          l &&
            (d(n, s, r),
            null !== v &&
              me.bindBuffer(me.ELEMENT_ARRAY_BUFFER, We.getAttributeBuffer(v)));
        var b = 0,
          w = 1 / 0;
        null !== v ? (w = v.count) : void 0 !== x && (w = x.count);
        var q = r.drawRange.start,
          M = r.drawRange.count,
          _ = null !== a ? a.start : 0,
          S = null !== a ? a.count : 1 / 0,
          C = Math.max(b, q, _),
          L = Math.min(b + w, q + M, _ + S) - 1,
          A = Math.max(0, L - C + 1);
        if (o instanceof THREE.Mesh)
          if (!0 === n.wireframe)
            je.setLineWidth(n.wireframeLinewidth * t()), T.setMode(me.LINES);
          else
            switch (o.drawMode) {
              case THREE.TrianglesDrawMode:
                T.setMode(me.TRIANGLES);
                break;
              case THREE.TriangleStripDrawMode:
                T.setMode(me.TRIANGLE_STRIP);
                break;
              case THREE.TriangleFanDrawMode:
                T.setMode(me.TRIANGLE_FAN);
            }
        else if (o instanceof THREE.Line) {
          var k = n.linewidth;
          void 0 === k && (k = 1),
            je.setLineWidth(k * t()),
            o instanceof THREE.LineSegments
              ? T.setMode(me.LINES)
              : T.setMode(me.LINE_STRIP);
        } else o instanceof THREE.Points && T.setMode(me.POINTS);
        r instanceof THREE.InstancedBufferGeometry && r.maxInstancedCount > 0
          ? T.renderInstances(r, C, A)
          : T.render(C, A);
      }),
      (this.render = function (e, t, i, r) {
        if (t instanceof THREE.Camera != !1) {
          var n = e.fog;
          if (
            ((Re = ""),
            (Te = -1),
            (xe = null),
            !0 === e.autoUpdate && e.updateMatrixWorld(),
            null === t.parent && t.updateMatrixWorld(),
            t.matrixWorldInverse.getInverse(t.matrixWorld),
            Ie.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse),
            Pe.setFromMatrix(Ie),
            (se.length = 0),
            (he = -1),
            (ue = -1),
            (de.length = 0),
            (fe.length = 0),
            v(e, t),
            (le.length = he + 1),
            (ce.length = ue + 1),
            !0 === Ee.sortObjects && (le.sort(m), ce.sort(E)),
            V(se, t),
            Ze.render(e, t),
            (ze.calls = 0),
            (ze.vertices = 0),
            (ze.faces = 0),
            (ze.points = 0),
            void 0 === i && (i = null),
            this.setRenderTarget(i),
            (this.autoClear || r) &&
              this.clear(
                this.autoClearColor,
                this.autoClearDepth,
                this.autoClearStencil
              ),
            e.overrideMaterial)
          ) {
            var o = e.overrideMaterial;
            y(le, t, n, o), y(ce, t, n, o);
          } else je.setBlending(THREE.NoBlending), y(le, t, n), y(ce, t, n);
          if ((Je.render(e, t), et.render(e, t, we), i)) {
            var a = i.texture;
            a.generateMipmaps &&
              U(i) &&
              a.minFilter !== THREE.NearestFilter &&
              a.minFilter !== THREE.LinearFilter &&
              Y(i);
          }
          je.setDepthTest(!0), je.setDepthWrite(!0), je.setColorWrite(!0);
        } else
          console.error(
            "THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."
          );
      }),
      (this.setFaceCulling = function (e, t) {
        e === THREE.CullFaceNone
          ? je.disable(me.CULL_FACE)
          : (t === THREE.FrontFaceDirectionCW
              ? me.frontFace(me.CW)
              : me.frontFace(me.CCW),
            e === THREE.CullFaceBack
              ? me.cullFace(me.BACK)
              : e === THREE.CullFaceFront
              ? me.cullFace(me.FRONT)
              : me.cullFace(me.FRONT_AND_BACK),
            je.enable(me.CULL_FACE));
      }),
      (this.setTexture = function (e, t) {
        var i = Ge.get(e);
        if (e.version > 0 && i.__version !== e.version) {
          var r = e.image;
          return void 0 === r
            ? void console.warn(
                "THREE.WebGLRenderer: Texture marked for update but image is undefined",
                e
              )
            : !1 === r.complete
            ? void console.warn(
                "THREE.WebGLRenderer: Texture marked for update but image is incomplete",
                e
              )
            : void F(i, e, t);
        }
        je.activeTexture(me.TEXTURE0 + t),
          je.bindTexture(me.TEXTURE_2D, i.__webglTexture);
      }),
      (this.setRenderTarget = function (e) {
        (ve = e), e && void 0 === Ge.get(e).__webglFramebuffer && $(e);
        var t,
          i = e instanceof THREE.WebGLRenderTargetCube;
        if (e) {
          var r = Ge.get(e);
          (t = i
            ? r.__webglFramebuffer[e.activeCubeFace]
            : r.__webglFramebuffer),
            He.copy(e.scissor),
            (be = e.scissorTest),
            we.copy(e.viewport);
        } else
          (t = null),
            He.copy(Ae).multiplyScalar(Le),
            (be = ke),
            we.copy(De).multiplyScalar(Le);
        if (
          (ye !== t && (me.bindFramebuffer(me.FRAMEBUFFER, t), (ye = t)),
          je.scissor(He),
          je.setScissorTest(be),
          je.viewport(we),
          i)
        ) {
          var n = Ge.get(e.texture);
          me.framebufferTexture2D(
            me.FRAMEBUFFER,
            me.COLOR_ATTACHMENT0,
            me.TEXTURE_CUBE_MAP_POSITIVE_X + e.activeCubeFace,
            n.__webglTexture,
            0
          );
        }
      }),
      (this.readRenderTargetPixels = function (e, t, i, r, n, o) {
        if (e instanceof THREE.WebGLRenderTarget != !1) {
          var a = Ge.get(e).__webglFramebuffer;
          if (a) {
            var s = !1;
            a !== ye && (me.bindFramebuffer(me.FRAMEBUFFER, a), (s = !0));
            try {
              var l = e.texture;
              if (
                l.format !== THREE.RGBAFormat &&
                K(l.format) !==
                  me.getParameter(me.IMPLEMENTATION_COLOR_READ_FORMAT)
              )
                return void console.error(
                  "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."
                );
              if (
                !(
                  l.type === THREE.UnsignedByteType ||
                  K(l.type) ===
                    me.getParameter(me.IMPLEMENTATION_COLOR_READ_TYPE) ||
                  (l.type === THREE.FloatType &&
                    Be.get("WEBGL_color_buffer_float")) ||
                  (l.type === THREE.HalfFloatType &&
                    Be.get("EXT_color_buffer_half_float"))
                )
              )
                return void console.error(
                  "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."
                );
              me.checkFramebufferStatus(me.FRAMEBUFFER) ===
              me.FRAMEBUFFER_COMPLETE
                ? me.readPixels(t, i, r, n, K(l.format), K(l.type), o)
                : console.error(
                    "THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."
                  );
            } finally {
              s && me.bindFramebuffer(me.FRAMEBUFFER, ye);
            }
          }
        } else
          console.error(
            "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."
          );
      });
  }),
  (THREE.WebGLRenderTarget = function (e, t, i) {
    (this.uuid = THREE.Math.generateUUID()),
      (this.width = e),
      (this.height = t),
      (this.scissor = new THREE.Vector4(0, 0, e, t)),
      (this.scissorTest = !1),
      (this.viewport = new THREE.Vector4(0, 0, e, t)),
      void 0 === (i = i || {}).minFilter && (i.minFilter = THREE.LinearFilter),
      (this.texture = new THREE.Texture(
        void 0,
        void 0,
        i.wrapS,
        i.wrapT,
        i.magFilter,
        i.minFilter,
        i.format,
        i.type,
        i.anisotropy
      )),
      (this.depthBuffer = void 0 === i.depthBuffer || i.depthBuffer),
      (this.stencilBuffer = void 0 === i.stencilBuffer || i.stencilBuffer);
  }),
  (THREE.WebGLRenderTarget.prototype = {
    constructor: THREE.WebGLRenderTarget,
    setSize: function (e, t) {
      (this.width === e && this.height === t) ||
        ((this.width = e), (this.height = t), this.dispose()),
        this.viewport.set(0, 0, e, t),
        this.scissor.set(0, 0, e, t);
    },
    clone: function () {
      return new this.constructor().copy(this);
    },
    copy: function (e) {
      return (
        (this.width = e.width),
        (this.height = e.height),
        this.viewport.copy(e.viewport),
        (this.texture = e.texture.clone()),
        (this.depthBuffer = e.depthBuffer),
        (this.stencilBuffer = e.stencilBuffer),
        (this.shareDepthFrom = e.shareDepthFrom),
        this
      );
    },
    dispose: function () {
      this.dispatchEvent({
        type: "dispose",
      });
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype),
  (THREE.WebGLRenderTargetCube = function (e, t, i) {
    THREE.WebGLRenderTarget.call(this, e, t, i), (this.activeCubeFace = 0);
  }),
  (THREE.WebGLRenderTargetCube.prototype = Object.create(
    THREE.WebGLRenderTarget.prototype
  )),
  (THREE.WebGLRenderTargetCube.prototype.constructor =
    THREE.WebGLRenderTargetCube),
  (THREE.WebGLBufferRenderer = function (e, t, i) {
    function r(e) {
      a = e;
    }
    function n(t, r) {
      e.drawArrays(a, t, r),
        i.calls++,
        (i.vertices += r),
        a === e.TRIANGLES && (i.faces += r / 3);
    }
    function o(r) {
      var n = t.get("ANGLE_instanced_arrays");
      if (null !== n) {
        var o = r.attributes.position,
          s = 0;
        o instanceof THREE.InterleavedBufferAttribute
          ? ((s = o.data.count),
            n.drawArraysInstancedANGLE(a, 0, s, r.maxInstancedCount))
          : ((s = o.count),
            n.drawArraysInstancedANGLE(a, 0, s, r.maxInstancedCount)),
          i.calls++,
          (i.vertices += s * r.maxInstancedCount),
          a === e.TRIANGLES && (i.faces += (r.maxInstancedCount * s) / 3);
      } else
        console.error(
          "THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."
        );
    }
    var a;
    (this.setMode = r), (this.render = n), (this.renderInstances = o);
  }),
  (THREE.WebGLIndexedBufferRenderer = function (e, t, i) {
    function r(e) {
      s = e;
    }
    function n(i) {
      i.array instanceof Uint32Array && t.get("OES_element_index_uint")
        ? ((l = e.UNSIGNED_INT), (h = 4))
        : ((l = e.UNSIGNED_SHORT), (h = 2));
    }
    function o(t, r) {
      e.drawElements(s, r, l, t * h),
        i.calls++,
        (i.vertices += r),
        s === e.TRIANGLES && (i.faces += r / 3);
    }
    function a(r, n, o) {
      var a = t.get("ANGLE_instanced_arrays");
      null !== a
        ? (a.drawElementsInstancedANGLE(s, o, l, n * h, r.maxInstancedCount),
          i.calls++,
          (i.vertices += o * r.maxInstancedCount),
          s === e.TRIANGLES && (i.faces += (r.maxInstancedCount * o) / 3))
        : console.error(
            "THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."
          );
    }
    var s, l, h;
    (this.setMode = r),
      (this.setIndex = n),
      (this.render = o),
      (this.renderInstances = a);
  }),
  (THREE.WebGLExtensions = function (e) {
    var t = {};
    this.get = function (i) {
      if (void 0 !== t[i]) return t[i];
      var r;
      switch (i) {
        case "EXT_texture_filter_anisotropic":
          r =
            e.getExtension("EXT_texture_filter_anisotropic") ||
            e.getExtension("MOZ_EXT_texture_filter_anisotropic") ||
            e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          r =
            e.getExtension("WEBGL_compressed_texture_s3tc") ||
            e.getExtension("MOZ_WEBGL_compressed_texture_s3tc") ||
            e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          r =
            e.getExtension("WEBGL_compressed_texture_pvrtc") ||
            e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        case "WEBGL_compressed_texture_etc1":
          r = e.getExtension("WEBGL_compressed_texture_etc1");
          break;
        default:
          r = e.getExtension(i);
      }
      return (
        null === r &&
          console.warn(
            "THREE.WebGLRenderer: " + i + " extension not supported."
          ),
        (t[i] = r),
        r
      );
    };
  }),
  (THREE.WebGLCapabilities = function (e, t, i) {
    function r(t) {
      if ("highp" === t) {
        if (
          e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT).precision >
            0 &&
          e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT)
            .precision > 0
        )
          return "highp";
        t = "mediump";
      }
      return "mediump" === t &&
        e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.MEDIUM_FLOAT).precision >
          0 &&
        e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.MEDIUM_FLOAT)
          .precision > 0
        ? "mediump"
        : "lowp";
    }
    (this.getMaxPrecision = r),
      (this.precision = void 0 !== i.precision ? i.precision : "highp"),
      (this.logarithmicDepthBuffer =
        void 0 !== i.logarithmicDepthBuffer && i.logarithmicDepthBuffer),
      (this.maxTextures = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)),
      (this.maxVertexTextures = e.getParameter(
        e.MAX_VERTEX_TEXTURE_IMAGE_UNITS
      )),
      (this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE)),
      (this.maxCubemapSize = e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE)),
      (this.maxAttributes = e.getParameter(e.MAX_VERTEX_ATTRIBS)),
      (this.maxVertexUniforms = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS)),
      (this.maxVaryings = e.getParameter(e.MAX_VARYING_VECTORS)),
      (this.maxFragmentUniforms = e.getParameter(
        e.MAX_FRAGMENT_UNIFORM_VECTORS
      )),
      (this.vertexTextures = this.maxVertexTextures > 0),
      (this.floatFragmentTextures = !!t.get("OES_texture_float")),
      (this.floatVertexTextures =
        this.vertexTextures && this.floatFragmentTextures);
    var n = r(this.precision);
    n !== this.precision &&
      (console.warn(
        "THREE.WebGLRenderer:",
        this.precision,
        "not supported, using",
        n,
        "instead."
      ),
      (this.precision = n)),
      this.logarithmicDepthBuffer &&
        (this.logarithmicDepthBuffer = !!t.get("EXT_frag_depth"));
  }),
  (THREE.WebGLGeometries = function (e, t, i) {
    function r(e) {
      var t,
        r = e.geometry;
      return void 0 !== h[r.id]
        ? h[r.id]
        : (r.addEventListener("dispose", n),
          r instanceof THREE.BufferGeometry
            ? (t = r)
            : r instanceof THREE.Geometry &&
              (void 0 === r._bufferGeometry &&
                (r._bufferGeometry = new THREE.BufferGeometry().setFromObject(
                  e
                )),
              (t = r._bufferGeometry)),
          (h[r.id] = t),
          i.memory.geometries++,
          t);
    }
    function n(e) {
      var r = e.target,
        o = h[r.id];
      null !== o.index && a(o.index),
        s(o.attributes),
        r.removeEventListener("dispose", n),
        delete h[r.id];
      var l = t.get(r);
      l.wireframe && a(l.wireframe), t.delete(r);
      var c = t.get(o);
      c.wireframe && a(c.wireframe), t.delete(o), i.memory.geometries--;
    }
    function o(e) {
      return e instanceof THREE.InterleavedBufferAttribute
        ? t.get(e.data).__webglBuffer
        : t.get(e).__webglBuffer;
    }
    function a(t) {
      var i = o(t);
      void 0 !== i && (e.deleteBuffer(i), l(t));
    }
    function s(e) {
      for (var t in e) a(e[t]);
    }
    function l(e) {
      e instanceof THREE.InterleavedBufferAttribute
        ? t.delete(e.data)
        : t.delete(e);
    }
    var h = {};
    this.get = r;
  }),
  (THREE.WebGLLights = function () {
    var e = {};
    this.get = function (t) {
      if (void 0 !== e[t.id]) return e[t.id];
      var i;
      switch (t.type) {
        case "DirectionalLight":
          i = {
            direction: new THREE.Vector3(),
            color: new THREE.Color(),
            shadow: !1,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new THREE.Vector2(),
          };
          break;
        case "SpotLight":
          i = {
            position: new THREE.Vector3(),
            direction: new THREE.Vector3(),
            color: new THREE.Color(),
            distance: 0,
            angleCos: 0,
            exponent: 0,
            decay: 0,
            shadow: !1,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new THREE.Vector2(),
          };
          break;
        case "PointLight":
          i = {
            position: new THREE.Vector3(),
            color: new THREE.Color(),
            distance: 0,
            decay: 0,
            shadow: !1,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new THREE.Vector2(),
          };
          break;
        case "HemisphereLight":
          i = {
            direction: new THREE.Vector3(),
            skyColor: new THREE.Color(),
            groundColor: new THREE.Color(),
          };
      }
      return (e[t.id] = i), i;
    };
  }),
  (THREE.WebGLObjects = function (e, t, i) {
    function r(t) {
      var i = c.get(t);
      t.geometry instanceof THREE.Geometry && i.updateFromObject(t);
      var r = i.index,
        o = i.attributes;
      for (var a in (null !== r && n(r, e.ELEMENT_ARRAY_BUFFER), o))
        n(o[a], e.ARRAY_BUFFER);
      var s = i.morphAttributes;
      for (var a in s)
        for (var l = s[a], h = 0, u = l.length; h < u; h++)
          n(l[h], e.ARRAY_BUFFER);
      return i;
    }
    function n(e, i) {
      var r = e instanceof THREE.InterleavedBufferAttribute ? e.data : e,
        n = t.get(r);
      void 0 === n.__webglBuffer
        ? o(n, r, i)
        : n.version !== r.version && a(n, r, i);
    }
    function o(t, i, r) {
      (t.__webglBuffer = e.createBuffer()), e.bindBuffer(r, t.__webglBuffer);
      var n = i.dynamic ? e.DYNAMIC_DRAW : e.STATIC_DRAW;
      e.bufferData(r, i.array, n), (t.version = i.version);
    }
    function a(t, i, r) {
      e.bindBuffer(r, t.__webglBuffer),
        !1 === i.dynamic || -1 === i.updateRange.count
          ? e.bufferSubData(r, 0, i.array)
          : 0 === i.updateRange.count
          ? console.error(
              "THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."
            )
          : (e.bufferSubData(
              r,
              i.updateRange.offset * i.array.BYTES_PER_ELEMENT,
              i.array.subarray(
                i.updateRange.offset,
                i.updateRange.offset + i.updateRange.count
              )
            ),
            (i.updateRange.count = 0)),
        (t.version = i.version);
    }
    function s(e) {
      return e instanceof THREE.InterleavedBufferAttribute
        ? t.get(e.data).__webglBuffer
        : t.get(e).__webglBuffer;
    }
    function l(i) {
      var r = t.get(i);
      if (void 0 !== r.wireframe) return r.wireframe;
      var o = [],
        a = i.index,
        s = i.attributes,
        l = s.position;
      if (null !== a)
        for (var c = {}, u = 0, p = (E = a.array).length; u < p; u += 3) {
          var d = E[u + 0],
            f = E[u + 1],
            m = E[u + 2];
          h(c, d, f) && o.push(d, f),
            h(c, f, m) && o.push(f, m),
            h(c, m, d) && o.push(m, d);
        }
      else {
        var E;
        for (u = 0, p = (E = s.position.array).length / 3 - 1; u < p; u += 3) {
          (d = u + 0), (f = u + 1), (m = u + 2);
          o.push(d, f, f, m, m, d);
        }
      }
      var g = l.count > 65535 ? Uint32Array : Uint16Array,
        v = new THREE.BufferAttribute(new g(o), 1);
      return n(v, e.ELEMENT_ARRAY_BUFFER), (r.wireframe = v), v;
    }
    function h(e, t, i) {
      if (t > i) {
        var r = t;
        (t = i), (i = r);
      }
      var n = e[t];
      return void 0 === n
        ? ((e[t] = [i]), !0)
        : -1 === n.indexOf(i) && (n.push(i), !0);
    }
    var c = new THREE.WebGLGeometries(e, t, i);
    (this.getAttributeBuffer = s),
      (this.getWireframeAttribute = l),
      (this.update = r);
  }),
  (THREE.WebGLProgram = (function () {
    function e(e, t, i) {
      return [
        (e = e || {}).derivatives || t.bumpMap || t.normalMap || t.flatShading
          ? "#extension GL_OES_standard_derivatives : enable"
          : "",
        (e.fragDepth || t.logarithmicDepthBuffer) && i.get("EXT_frag_depth")
          ? "#extension GL_EXT_frag_depth : enable"
          : "",
        e.drawBuffers && i.get("WEBGL_draw_buffers")
          ? "#extension GL_EXT_draw_buffers : require"
          : "",
        (e.shaderTextureLOD || t.envMap) && i.get("EXT_shader_texture_lod")
          ? "#extension GL_EXT_shader_texture_lod : enable"
          : "",
      ]
        .filter(n)
        .join("\n");
    }
    function t(e) {
      var t = [];
      for (var i in e) {
        var r = e[i];
        !1 !== r && t.push("#define " + i + " " + r);
      }
      return t.join("\n");
    }
    function i(e, t) {
      for (
        var i = {}, r = e.getProgramParameter(t, e.ACTIVE_UNIFORMS), n = 0;
        n < r;
        n++
      ) {
        var o = e.getActiveUniform(t, n).name,
          a = e.getUniformLocation(t, o),
          s = l.exec(o);
        if (s) {
          var u = s[1],
            p = s[2],
            d = i[u];
          d || (d = i[u] = {}), (d[p] = a);
        } else if ((s = h.exec(o))) {
          var f = s[1],
            m = s[2],
            E = s[3],
            g = i[f];
          g || (g = i[f] = []);
          var v = g[m];
          v || (v = g[m] = {}), (v[E] = a);
        } else {
          if ((s = c.exec(o))) i[(f = s[1])] = a;
          else i[o] = a;
        }
      }
      return i;
    }
    function r(e, t) {
      for (
        var i = {}, r = e.getProgramParameter(t, e.ACTIVE_ATTRIBUTES), n = 0;
        n < r;
        n++
      ) {
        var o = e.getActiveAttrib(t, n).name;
        i[o] = e.getAttribLocation(t, o);
      }
      return i;
    }
    function n(e) {
      return "" !== e;
    }
    function o(e, t) {
      return e
        .replace(/NUM_DIR_LIGHTS/g, t.numDirLights)
        .replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights)
        .replace(/NUM_POINT_LIGHTS/g, t.numPointLights)
        .replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights);
    }
    function a(e) {
      function t(e, t, i, r) {
        for (var n = "", o = parseInt(t); o < parseInt(i); o++)
          n += r.replace(/\[ i \]/g, "[ " + o + " ]");
        return n;
      }
      var i =
        /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
      return e.replace(i, t);
    }
    var s = 0,
      l = /^([\w\d_]+)\.([\w\d_]+)$/,
      h = /^([\w\d_]+)\[(\d+)\]\.([\w\d_]+)$/,
      c = /^([\w\d_]+)\[0\]$/;
    return function (l, h, c, u) {
      var p = l.context,
        d = c.extensions,
        f = c.defines,
        m = c.__webglShader.vertexShader,
        E = c.__webglShader.fragmentShader,
        g = "SHADOWMAP_TYPE_BASIC";
      u.shadowMapType === THREE.PCFShadowMap
        ? (g = "SHADOWMAP_TYPE_PCF")
        : u.shadowMapType === THREE.PCFSoftShadowMap &&
          (g = "SHADOWMAP_TYPE_PCF_SOFT");
      var v = "ENVMAP_TYPE_CUBE",
        y = "ENVMAP_MODE_REFLECTION",
        T = "ENVMAP_BLENDING_MULTIPLY";
      if (u.envMap) {
        switch (c.envMap.mapping) {
          case THREE.CubeReflectionMapping:
          case THREE.CubeRefractionMapping:
            v = "ENVMAP_TYPE_CUBE";
            break;
          case THREE.EquirectangularReflectionMapping:
          case THREE.EquirectangularRefractionMapping:
            v = "ENVMAP_TYPE_EQUIREC";
            break;
          case THREE.SphericalReflectionMapping:
            v = "ENVMAP_TYPE_SPHERE";
        }
        switch (c.envMap.mapping) {
          case THREE.CubeRefractionMapping:
          case THREE.EquirectangularRefractionMapping:
            y = "ENVMAP_MODE_REFRACTION";
        }
        switch (c.combine) {
          case THREE.MultiplyOperation:
            T = "ENVMAP_BLENDING_MULTIPLY";
            break;
          case THREE.MixOperation:
            T = "ENVMAP_BLENDING_MIX";
            break;
          case THREE.AddOperation:
            T = "ENVMAP_BLENDING_ADD";
        }
      }
      var R,
        x,
        H = l.gammaFactor > 0 ? l.gammaFactor : 1,
        b = e(d, u, l.extensions),
        w = t(f),
        q = p.createProgram();
      c instanceof THREE.RawShaderMaterial
        ? ((R = ""), (x = ""))
        : ((R = [
            "precision " + u.precision + " float;",
            "precision " + u.precision + " int;",
            "#define SHADER_NAME " + c.__webglShader.name,
            w,
            u.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
            l.gammaInput ? "#define GAMMA_INPUT" : "",
            l.gammaOutput ? "#define GAMMA_OUTPUT" : "",
            "#define GAMMA_FACTOR " + H,
            "#define MAX_BONES " + u.maxBones,
            u.map ? "#define USE_MAP" : "",
            u.envMap ? "#define USE_ENVMAP" : "",
            u.envMap ? "#define " + y : "",
            u.lightMap ? "#define USE_LIGHTMAP" : "",
            u.aoMap ? "#define USE_AOMAP" : "",
            u.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            u.bumpMap ? "#define USE_BUMPMAP" : "",
            u.normalMap ? "#define USE_NORMALMAP" : "",
            u.displacementMap && u.supportsVertexTextures
              ? "#define USE_DISPLACEMENTMAP"
              : "",
            u.specularMap ? "#define USE_SPECULARMAP" : "",
            u.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            u.metalnessMap ? "#define USE_METALNESSMAP" : "",
            u.alphaMap ? "#define USE_ALPHAMAP" : "",
            u.vertexColors ? "#define USE_COLOR" : "",
            u.flatShading ? "#define FLAT_SHADED" : "",
            u.skinning ? "#define USE_SKINNING" : "",
            u.useVertexTexture ? "#define BONE_TEXTURE" : "",
            u.morphTargets ? "#define USE_MORPHTARGETS" : "",
            u.morphNormals && !1 === u.flatShading
              ? "#define USE_MORPHNORMALS"
              : "",
            u.doubleSided ? "#define DOUBLE_SIDED" : "",
            u.flipSided ? "#define FLIP_SIDED" : "",
            u.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            u.shadowMapEnabled ? "#define " + g : "",
            u.pointLightShadows > 0 ? "#define POINT_LIGHT_SHADOWS" : "",
            u.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            u.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            u.logarithmicDepthBuffer && l.extensions.get("EXT_frag_depth")
              ? "#define USE_LOGDEPTHBUF_EXT"
              : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_COLOR",
            "\tattribute vec3 color;",
            "#endif",
            "#ifdef USE_MORPHTARGETS",
            "\tattribute vec3 morphTarget0;",
            "\tattribute vec3 morphTarget1;",
            "\tattribute vec3 morphTarget2;",
            "\tattribute vec3 morphTarget3;",
            "\t#ifdef USE_MORPHNORMALS",
            "\t\tattribute vec3 morphNormal0;",
            "\t\tattribute vec3 morphNormal1;",
            "\t\tattribute vec3 morphNormal2;",
            "\t\tattribute vec3 morphNormal3;",
            "\t#else",
            "\t\tattribute vec3 morphTarget4;",
            "\t\tattribute vec3 morphTarget5;",
            "\t\tattribute vec3 morphTarget6;",
            "\t\tattribute vec3 morphTarget7;",
            "\t#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "\tattribute vec4 skinIndex;",
            "\tattribute vec4 skinWeight;",
            "#endif",
            "\n",
          ]
            .filter(n)
            .join("\n")),
          (x = [
            b,
            "precision " + u.precision + " float;",
            "precision " + u.precision + " int;",
            "#define SHADER_NAME " + c.__webglShader.name,
            w,
            u.alphaTest ? "#define ALPHATEST " + u.alphaTest : "",
            l.gammaInput ? "#define GAMMA_INPUT" : "",
            l.gammaOutput ? "#define GAMMA_OUTPUT" : "",
            "#define GAMMA_FACTOR " + H,
            u.useFog && u.fog ? "#define USE_FOG" : "",
            u.useFog && u.fogExp ? "#define FOG_EXP2" : "",
            u.map ? "#define USE_MAP" : "",
            u.envMap ? "#define USE_ENVMAP" : "",
            u.envMap ? "#define " + v : "",
            u.envMap ? "#define " + y : "",
            u.envMap ? "#define " + T : "",
            u.lightMap ? "#define USE_LIGHTMAP" : "",
            u.aoMap ? "#define USE_AOMAP" : "",
            u.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            u.bumpMap ? "#define USE_BUMPMAP" : "",
            u.normalMap ? "#define USE_NORMALMAP" : "",
            u.specularMap ? "#define USE_SPECULARMAP" : "",
            u.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            u.metalnessMap ? "#define USE_METALNESSMAP" : "",
            u.alphaMap ? "#define USE_ALPHAMAP" : "",
            u.vertexColors ? "#define USE_COLOR" : "",
            u.flatShading ? "#define FLAT_SHADED" : "",
            u.doubleSided ? "#define DOUBLE_SIDED" : "",
            u.flipSided ? "#define FLIP_SIDED" : "",
            u.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            u.shadowMapEnabled ? "#define " + g : "",
            u.pointLightShadows > 0 ? "#define POINT_LIGHT_SHADOWS" : "",
            u.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            u.logarithmicDepthBuffer && l.extensions.get("EXT_frag_depth")
              ? "#define USE_LOGDEPTHBUF_EXT"
              : "",
            u.envMap && l.extensions.get("EXT_shader_texture_lod")
              ? "#define TEXTURE_LOD_EXT"
              : "",
            "uniform mat4 viewMatrix;",
            "uniform vec3 cameraPosition;",
            "\n",
          ]
            .filter(n)
            .join("\n"))),
        (m = o(m, u)),
        (E = o(E, u)),
        c instanceof THREE.ShaderMaterial == !1 && ((m = a(m)), (E = a(E)));
      var M = R + m,
        _ = x + E,
        S = THREE.WebGLShader(p, p.VERTEX_SHADER, M),
        C = THREE.WebGLShader(p, p.FRAGMENT_SHADER, _);
      p.attachShader(q, S),
        p.attachShader(q, C),
        void 0 !== c.index0AttributeName
          ? p.bindAttribLocation(q, 0, c.index0AttributeName)
          : !0 === u.morphTargets && p.bindAttribLocation(q, 0, "position"),
        p.linkProgram(q);
      var L,
        A,
        k = p.getProgramInfoLog(q),
        D = p.getShaderInfoLog(S),
        P = p.getShaderInfoLog(C),
        I = !0,
        V = !0;
      return (
        !1 === p.getProgramParameter(q, p.LINK_STATUS)
          ? ((I = !1),
            console.error(
              "THREE.WebGLProgram: shader error: ",
              p.getError(),
              "gl.VALIDATE_STATUS",
              p.getProgramParameter(q, p.VALIDATE_STATUS),
              "gl.getProgramInfoLog",
              k,
              D,
              P
            ))
          : "" !== k
          ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", k)
          : ("" !== D && "" !== P) || (V = !1),
        V &&
          (this.diagnostics = {
            runnable: I,
            material: c,
            programLog: k,
            vertexShader: {
              log: D,
              prefix: R,
            },
            fragmentShader: {
              log: P,
              prefix: x,
            },
          }),
        p.deleteShader(S),
        p.deleteShader(C),
        (this.getUniforms = function () {
          return void 0 === L && (L = i(p, q)), L;
        }),
        (this.getAttributes = function () {
          return void 0 === A && (A = r(p, q)), A;
        }),
        (this.destroy = function () {
          p.deleteProgram(q), (this.program = void 0);
        }),
        Object.defineProperties(this, {
          uniforms: {
            get: function () {
              return (
                console.warn(
                  "THREE.WebGLProgram: .uniforms is now .getUniforms()."
                ),
                this.getUniforms()
              );
            },
          },
          attributes: {
            get: function () {
              return (
                console.warn(
                  "THREE.WebGLProgram: .attributes is now .getAttributes()."
                ),
                this.getAttributes()
              );
            },
          },
        }),
        (this.id = s++),
        (this.code = h),
        (this.usedTimes = 1),
        (this.program = q),
        (this.vertexShader = S),
        (this.fragmentShader = C),
        this
      );
    };
  })()),
  (THREE.WebGLPrograms = function (e, t) {
    function i(e) {
      if (
        t.floatVertexTextures &&
        e &&
        e.skeleton &&
        e.skeleton.useVertexTexture
      )
        return 1024;
      var i = t.maxVertexUniforms,
        r = Math.floor((i - 20) / 4);
      return (
        void 0 !== e &&
          e instanceof THREE.SkinnedMesh &&
          (r = Math.min(e.skeleton.bones.length, r)) <
            e.skeleton.bones.length &&
          console.warn(
            "WebGLRenderer: too many bones - " +
              e.skeleton.bones.length +
              ", this GPU supports just " +
              r +
              " (try OpenGL instead of ANGLE)"
          ),
        r
      );
    }
    var r = [],
      n = {
        MeshDepthMaterial: "depth",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshStandardMaterial: "standard",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
      },
      o = [
        "precision",
        "supportsVertexTextures",
        "map",
        "envMap",
        "envMapMode",
        "lightMap",
        "aoMap",
        "emissiveMap",
        "bumpMap",
        "normalMap",
        "displacementMap",
        "specularMap",
        "roughnessMap",
        "metalnessMap",
        "alphaMap",
        "combine",
        "vertexColors",
        "fog",
        "useFog",
        "fogExp",
        "flatShading",
        "sizeAttenuation",
        "logarithmicDepthBuffer",
        "skinning",
        "maxBones",
        "useVertexTexture",
        "morphTargets",
        "morphNormals",
        "maxMorphTargets",
        "maxMorphNormals",
        "numDirLights",
        "numPointLights",
        "numSpotLights",
        "numHemiLights",
        "shadowMapEnabled",
        "pointLightShadows",
        "shadowMapType",
        "alphaTest",
        "doubleSided",
        "flipSided",
      ];
    (this.getParameters = function (r, o, a, s) {
      var l = n[r.type],
        h = i(s),
        c = e.getPrecision();
      return (
        null !== r.precision &&
          (c = t.getMaxPrecision(r.precision)) !== r.precision &&
          console.warn(
            "THREE.WebGLProgram.getParameters:",
            r.precision,
            "not supported, using",
            c,
            "instead."
          ),
        {
          shaderID: l,
          precision: c,
          supportsVertexTextures: t.vertexTextures,
          map: !!r.map,
          envMap: !!r.envMap,
          envMapMode: r.envMap && r.envMap.mapping,
          lightMap: !!r.lightMap,
          aoMap: !!r.aoMap,
          emissiveMap: !!r.emissiveMap,
          bumpMap: !!r.bumpMap,
          normalMap: !!r.normalMap,
          displacementMap: !!r.displacementMap,
          roughnessMap: !!r.roughnessMap,
          metalnessMap: !!r.metalnessMap,
          specularMap: !!r.specularMap,
          alphaMap: !!r.alphaMap,
          combine: r.combine,
          vertexColors: r.vertexColors,
          fog: a,
          useFog: r.fog,
          fogExp: a instanceof THREE.FogExp2,
          flatShading: r.shading === THREE.FlatShading,
          sizeAttenuation: r.sizeAttenuation,
          logarithmicDepthBuffer: t.logarithmicDepthBuffer,
          skinning: r.skinning,
          maxBones: h,
          useVertexTexture:
            t.floatVertexTextures &&
            s &&
            s.skeleton &&
            s.skeleton.useVertexTexture,
          morphTargets: r.morphTargets,
          morphNormals: r.morphNormals,
          maxMorphTargets: e.maxMorphTargets,
          maxMorphNormals: e.maxMorphNormals,
          numDirLights: o.directional.length,
          numPointLights: o.point.length,
          numSpotLights: o.spot.length,
          numHemiLights: o.hemi.length,
          pointLightShadows: o.shadowsPointLight,
          shadowMapEnabled:
            e.shadowMap.enabled && s.receiveShadow && o.shadows.length > 0,
          shadowMapType: e.shadowMap.type,
          alphaTest: r.alphaTest,
          doubleSided: r.side === THREE.DoubleSide,
          flipSided: r.side === THREE.BackSide,
        }
      );
    }),
      (this.getProgramCode = function (e, t) {
        var i = [];
        if (
          (t.shaderID
            ? i.push(t.shaderID)
            : (i.push(e.fragmentShader), i.push(e.vertexShader)),
          void 0 !== e.defines)
        )
          for (var r in e.defines) i.push(r), i.push(e.defines[r]);
        for (var n = 0; n < o.length; n++) {
          var a = o[n];
          i.push(a), i.push(t[a]);
        }
        return i.join();
      }),
      (this.acquireProgram = function (t, i, n) {
        for (var o, a = 0, s = r.length; a < s; a++) {
          var l = r[a];
          if (l.code === n) {
            ++(o = l).usedTimes;
            break;
          }
        }
        return (
          void 0 === o && ((o = new THREE.WebGLProgram(e, n, t, i)), r.push(o)),
          o
        );
      }),
      (this.releaseProgram = function (e) {
        if (0 == --e.usedTimes) {
          var t = r.indexOf(e);
          (r[t] = r[r.length - 1]), r.pop(), e.destroy();
        }
      }),
      (this.programs = r);
  }),
  (THREE.WebGLProperties = function () {
    var e = {};
    (this.get = function (t) {
      var i = t.uuid,
        r = e[i];
      return void 0 === r && ((r = {}), (e[i] = r)), r;
    }),
      (this.delete = function (t) {
        delete e[t.uuid];
      }),
      (this.clear = function () {
        e = {};
      });
  }),
  (THREE.WebGLShader = (function () {
    function e(e) {
      for (var t = e.split("\n"), i = 0; i < t.length; i++)
        t[i] = i + 1 + ": " + t[i];
      return t.join("\n");
    }
    return function (t, i, r) {
      var n = t.createShader(i);
      return (
        t.shaderSource(n, r),
        t.compileShader(n),
        !1 === t.getShaderParameter(n, t.COMPILE_STATUS) &&
          console.error("THREE.WebGLShader: Shader couldn't compile."),
        "" !== t.getShaderInfoLog(n) &&
          console.warn(
            "THREE.WebGLShader: gl.getShaderInfoLog()",
            i === t.VERTEX_SHADER ? "vertex" : "fragment",
            t.getShaderInfoLog(n),
            e(r)
          ),
        n
      );
    };
  })()),
  (THREE.WebGLShadowMap = function (e, t, i) {
    function r(e, t, i, r) {
      var n = e.geometry,
        o = null,
        a = m,
        s = e.customDepthMaterial;
      if ((i && ((a = E), (s = e.customDistanceMaterial)), s)) o = s;
      else {
        var l =
            void 0 !== n.morphTargets &&
            n.morphTargets.length > 0 &&
            t.morphTargets,
          h = e instanceof THREE.SkinnedMesh && t.skinning,
          c = 0;
        l && (c |= p), h && (c |= d), (o = a[c]);
      }
      return (
        (o.visible = t.visible),
        (o.wireframe = t.wireframe),
        (o.wireframeLinewidth = t.wireframeLinewidth),
        i &&
          void 0 !== o.uniforms.lightPos &&
          o.uniforms.lightPos.value.copy(r),
        o
      );
    }
    function n(e, t, i) {
      if (!1 !== e.visible) {
        if (
          e.layers.test(t.layers) &&
          (e instanceof THREE.Mesh ||
            e instanceof THREE.Line ||
            e instanceof THREE.Points)
        )
          if (
            e.castShadow &&
            (!1 === e.frustumCulled || !0 === s.intersectsObject(e))
          )
            !0 === e.material.visible &&
              (e.modelViewMatrix.multiplyMatrices(
                i.matrixWorldInverse,
                e.matrixWorld
              ),
              u.push(e));
        for (var r = e.children, o = 0, a = r.length; o < a; o++) n(r[o], t, i);
      }
    }
    for (
      var o = e.context,
        a = e.state,
        s = new THREE.Frustum(),
        l = new THREE.Matrix4(),
        h = new THREE.Vector3(),
        c = new THREE.Vector3(),
        u = [],
        p = 1,
        d = 2,
        f = 1 + (p | d),
        m = new Array(f),
        E = new Array(f),
        g = [
          new THREE.Vector3(1, 0, 0),
          new THREE.Vector3(-1, 0, 0),
          new THREE.Vector3(0, 0, 1),
          new THREE.Vector3(0, 0, -1),
          new THREE.Vector3(0, 1, 0),
          new THREE.Vector3(0, -1, 0),
        ],
        v = [
          new THREE.Vector3(0, 1, 0),
          new THREE.Vector3(0, 1, 0),
          new THREE.Vector3(0, 1, 0),
          new THREE.Vector3(0, 1, 0),
          new THREE.Vector3(0, 0, 1),
          new THREE.Vector3(0, 0, -1),
        ],
        y = [
          new THREE.Vector4(),
          new THREE.Vector4(),
          new THREE.Vector4(),
          new THREE.Vector4(),
          new THREE.Vector4(),
          new THREE.Vector4(),
        ],
        T = THREE.ShaderLib.depthRGBA,
        R = THREE.UniformsUtils.clone(T.uniforms),
        x = THREE.ShaderLib.distanceRGBA,
        H = THREE.UniformsUtils.clone(x.uniforms),
        b = 0;
      b !== f;
      ++b
    ) {
      var w = 0 != (b & p),
        q = 0 != (b & d),
        M = new THREE.ShaderMaterial({
          uniforms: R,
          vertexShader: T.vertexShader,
          fragmentShader: T.fragmentShader,
          morphTargets: w,
          skinning: q,
        });
      (M._shadowPass = !0), (m[b] = M);
      var _ = new THREE.ShaderMaterial({
        uniforms: H,
        vertexShader: x.vertexShader,
        fragmentShader: x.fragmentShader,
        morphTargets: w,
        skinning: q,
      });
      (_._shadowPass = !0), (E[b] = _);
    }
    var S = this;
    (this.enabled = !1),
      (this.autoUpdate = !0),
      (this.needsUpdate = !1),
      (this.type = THREE.PCFShadowMap),
      (this.cullFace = THREE.CullFaceFront),
      (this.render = function (p, d) {
        var f, m;
        if (!1 !== S.enabled && (!1 !== S.autoUpdate || !1 !== S.needsUpdate)) {
          a.clearColor(1, 1, 1, 1),
            a.disable(o.BLEND),
            a.enable(o.CULL_FACE),
            o.frontFace(o.CCW),
            o.cullFace(S.cullFace === THREE.CullFaceFront ? o.FRONT : o.BACK),
            a.setDepthTest(!0),
            a.setScissorTest(!1);
          for (var E = t.shadows, T = 0, R = E.length; T < R; T++) {
            var x = E[T],
              H = x.shadow,
              b = H.camera,
              w = H.mapSize;
            if (x instanceof THREE.PointLight) {
              (f = 6), (m = !0);
              var q = w.x / 4,
                M = w.y / 2;
              y[0].set(2 * q, M, q, M),
                y[1].set(0, M, q, M),
                y[2].set(3 * q, M, q, M),
                y[3].set(q, M, q, M),
                y[4].set(3 * q, 0, q, M),
                y[5].set(q, 0, q, M);
            } else (f = 1), (m = !1);
            if (null === H.map) {
              var _ = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBAFormat,
              };
              (H.map = new THREE.WebGLRenderTarget(w.x, w.y, _)),
                x instanceof THREE.SpotLight && (b.aspect = w.x / w.y),
                b.updateProjectionMatrix();
            }
            var C = H.map,
              L = H.matrix;
            c.setFromMatrixPosition(x.matrixWorld),
              b.position.copy(c),
              e.setRenderTarget(C),
              e.clear();
            for (var A = 0; A < f; A++) {
              if (m) {
                h.copy(b.position), h.add(g[A]), b.up.copy(v[A]), b.lookAt(h);
                var k = y[A];
                a.viewport(k);
              } else h.setFromMatrixPosition(x.target.matrixWorld), b.lookAt(h);
              b.updateMatrixWorld(),
                b.matrixWorldInverse.getInverse(b.matrixWorld),
                L.set(
                  0.5,
                  0,
                  0,
                  0.5,
                  0,
                  0.5,
                  0,
                  0.5,
                  0,
                  0,
                  0.5,
                  0.5,
                  0,
                  0,
                  0,
                  1
                ),
                L.multiply(b.projectionMatrix),
                L.multiply(b.matrixWorldInverse),
                l.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse),
                s.setFromMatrix(l),
                (u.length = 0),
                n(p, d, b);
              for (var D = 0, P = u.length; D < P; D++) {
                var I = u[D],
                  V = i.update(I),
                  O = I.material;
                if (O instanceof THREE.MultiMaterial)
                  for (
                    var F = V.groups, z = O.materials, U = 0, B = F.length;
                    U < B;
                    U++
                  ) {
                    var N = F[U],
                      j = z[N.materialIndex];
                    if (!0 === j.visible) {
                      var G = r(I, j, m, c);
                      e.renderBufferDirect(b, null, V, G, I, N);
                    }
                  }
                else {
                  G = r(I, O, m, c);
                  e.renderBufferDirect(b, null, V, G, I, null);
                }
              }
            }
            e.resetGLState();
          }
          var W = e.getClearColor(),
            X = e.getClearAlpha();
          e.setClearColor(W, X),
            a.enable(o.BLEND),
            S.cullFace === THREE.CullFaceFront && o.cullFace(o.BACK),
            e.resetGLState(),
            (S.needsUpdate = !1);
        }
      });
  }),
  (THREE.WebGLState = function (e, t, i) {
    var r = this,
      n = new THREE.Vector4(),
      o = new Uint8Array(16),
      a = new Uint8Array(16),
      s = new Uint8Array(16),
      l = {},
      h = null,
      c = null,
      u = null,
      p = null,
      d = null,
      f = null,
      m = null,
      E = null,
      g = null,
      v = null,
      y = null,
      T = null,
      R = null,
      x = null,
      H = null,
      b = null,
      w = null,
      q = null,
      M = null,
      _ = null,
      S = null,
      C = null,
      L = null,
      A = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),
      k = void 0,
      D = {},
      P = new THREE.Vector4(),
      I = null,
      V = null,
      O = new THREE.Vector4(),
      F = new THREE.Vector4();
    (this.init = function () {
      this.clearColor(0, 0, 0, 1),
        this.clearDepth(1),
        this.clearStencil(0),
        this.enable(e.DEPTH_TEST),
        e.depthFunc(e.LEQUAL),
        e.frontFace(e.CCW),
        e.cullFace(e.BACK),
        this.enable(e.CULL_FACE),
        this.enable(e.BLEND),
        e.blendEquation(e.FUNC_ADD),
        e.blendFunc(e.SRC_ALPHA, e.ONE_MINUS_SRC_ALPHA);
    }),
      (this.initAttributes = function () {
        for (var e = 0, t = o.length; e < t; e++) o[e] = 0;
      }),
      (this.enableAttribute = function (i) {
        ((o[i] = 1),
        0 === a[i] && (e.enableVertexAttribArray(i), (a[i] = 1)),
        0 !== s[i]) &&
          (t.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(i, 0),
          (s[i] = 0));
      }),
      (this.enableAttributeAndDivisor = function (t, i, r) {
        (o[t] = 1),
          0 === a[t] && (e.enableVertexAttribArray(t), (a[t] = 1)),
          s[t] !== i && (r.vertexAttribDivisorANGLE(t, i), (s[t] = i));
      }),
      (this.disableUnusedAttributes = function () {
        for (var t = 0, i = a.length; t < i; t++)
          a[t] !== o[t] && (e.disableVertexAttribArray(t), (a[t] = 0));
      }),
      (this.enable = function (t) {
        !0 !== l[t] && (e.enable(t), (l[t] = !0));
      }),
      (this.disable = function (t) {
        !1 !== l[t] && (e.disable(t), (l[t] = !1));
      }),
      (this.getCompressedTextureFormats = function () {
        if (
          null === h &&
          ((h = []),
          t.get("WEBGL_compressed_texture_pvrtc") ||
            t.get("WEBGL_compressed_texture_s3tc") ||
            t.get("WEBGL_compressed_texture_etc1"))
        )
          for (
            var i = e.getParameter(e.COMPRESSED_TEXTURE_FORMATS), r = 0;
            r < i.length;
            r++
          )
            h.push(i[r]);
        return h;
      }),
      (this.setBlending = function (t, r, n, o, a, s, l) {
        t === THREE.NoBlending ? this.disable(e.BLEND) : this.enable(e.BLEND),
          t !== c &&
            (t === THREE.AdditiveBlending
              ? (e.blendEquation(e.FUNC_ADD), e.blendFunc(e.SRC_ALPHA, e.ONE))
              : t === THREE.SubtractiveBlending
              ? (e.blendEquation(e.FUNC_ADD),
                e.blendFunc(e.ZERO, e.ONE_MINUS_SRC_COLOR))
              : t === THREE.MultiplyBlending
              ? (e.blendEquation(e.FUNC_ADD), e.blendFunc(e.ZERO, e.SRC_COLOR))
              : (e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD),
                e.blendFuncSeparate(
                  e.SRC_ALPHA,
                  e.ONE_MINUS_SRC_ALPHA,
                  e.ONE,
                  e.ONE_MINUS_SRC_ALPHA
                )),
            (c = t)),
          t === THREE.CustomBlending
            ? ((a = a || r),
              (s = s || n),
              (l = l || o),
              (r === u && a === f) ||
                (e.blendEquationSeparate(i(r), i(a)), (u = r), (f = a)),
              (n === p && o === d && s === m && l === E) ||
                (e.blendFuncSeparate(i(n), i(o), i(s), i(l)),
                (p = n),
                (d = o),
                (m = s),
                (E = l)))
            : ((u = null),
              (p = null),
              (d = null),
              (f = null),
              (m = null),
              (E = null));
      }),
      (this.setDepthFunc = function (t) {
        if (g !== t) {
          if (t)
            switch (t) {
              case THREE.NeverDepth:
                e.depthFunc(e.NEVER);
                break;
              case THREE.AlwaysDepth:
                e.depthFunc(e.ALWAYS);
                break;
              case THREE.LessDepth:
                e.depthFunc(e.LESS);
                break;
              case THREE.LessEqualDepth:
                e.depthFunc(e.LEQUAL);
                break;
              case THREE.EqualDepth:
                e.depthFunc(e.EQUAL);
                break;
              case THREE.GreaterEqualDepth:
                e.depthFunc(e.GEQUAL);
                break;
              case THREE.GreaterDepth:
                e.depthFunc(e.GREATER);
                break;
              case THREE.NotEqualDepth:
                e.depthFunc(e.NOTEQUAL);
                break;
              default:
                e.depthFunc(e.LEQUAL);
            }
          else e.depthFunc(e.LEQUAL);
          g = t;
        }
      }),
      (this.setDepthTest = function (t) {
        t ? this.enable(e.DEPTH_TEST) : this.disable(e.DEPTH_TEST);
      }),
      (this.setDepthWrite = function (t) {
        v !== t && (e.depthMask(t), (v = t));
      }),
      (this.setColorWrite = function (t) {
        y !== t && (e.colorMask(t, t, t, t), (y = t));
      }),
      (this.setStencilFunc = function (t, i, r) {
        (R === t && x === i && H === r) ||
          (e.stencilFunc(t, i, r), (R = t), (x = i), (H = r));
      }),
      (this.setStencilOp = function (t, i, r) {
        (b === t && w === i && q === r) ||
          (e.stencilOp(t, i, r), (b = t), (w = i), (q = r));
      }),
      (this.setStencilTest = function (t) {
        t ? this.enable(e.STENCIL_TEST) : this.disable(e.STENCIL_TEST);
      }),
      (this.setStencilWrite = function (t) {
        T !== t && (e.stencilMask(t), (T = t));
      }),
      (this.setFlipSided = function (t) {
        M !== t && (t ? e.frontFace(e.CW) : e.frontFace(e.CCW), (M = t));
      }),
      (this.setLineWidth = function (t) {
        t !== _ && (e.lineWidth(t), (_ = t));
      }),
      (this.setPolygonOffset = function (t, i, r) {
        t
          ? this.enable(e.POLYGON_OFFSET_FILL)
          : this.disable(e.POLYGON_OFFSET_FILL),
          !t ||
            (S === i && C === r) ||
            (e.polygonOffset(i, r), (S = i), (C = r));
      }),
      (this.getScissorTest = function () {
        return L;
      }),
      (this.setScissorTest = function (t) {
        (L = t), t ? this.enable(e.SCISSOR_TEST) : this.disable(e.SCISSOR_TEST);
      }),
      (this.activeTexture = function (t) {
        void 0 === t && (t = e.TEXTURE0 + A - 1),
          k !== t && (e.activeTexture(t), (k = t));
      }),
      (this.bindTexture = function (t, i) {
        void 0 === k && r.activeTexture();
        var n = D[k];
        void 0 === n &&
          ((n = {
            type: void 0,
            texture: void 0,
          }),
          (D[k] = n)),
          (n.type === t && n.texture === i) ||
            (e.bindTexture(t, i), (n.type = t), (n.texture = i));
      }),
      (this.compressedTexImage2D = function () {
        try {
          e.compressedTexImage2D.apply(e, arguments);
        } catch (e) {
          console.error(e);
        }
      }),
      (this.texImage2D = function () {
        try {
          e.texImage2D.apply(e, arguments);
        } catch (e) {
          console.error(e);
        }
      }),
      (this.clearColor = function (t, i, r, o) {
        n.set(t, i, r, o),
          !1 === P.equals(n) && (e.clearColor(t, i, r, o), P.copy(n));
      }),
      (this.clearDepth = function (t) {
        I !== t && (e.clearDepth(t), (I = t));
      }),
      (this.clearStencil = function (t) {
        V !== t && (e.clearStencil(t), (V = t));
      }),
      (this.scissor = function (t) {
        !1 === O.equals(t) && (e.scissor(t.x, t.y, t.z, t.w), O.copy(t));
      }),
      (this.viewport = function (t) {
        !1 === F.equals(t) && (e.viewport(t.x, t.y, t.z, t.w), F.copy(t));
      }),
      (this.reset = function () {
        for (var t = 0; t < a.length; t++)
          1 === a[t] && (e.disableVertexAttribArray(t), (a[t] = 0));
        (l = {}),
          (h = null),
          (c = null),
          (y = null),
          (v = null),
          (T = null),
          (M = null);
      });
  }),
  (THREE.LensFlarePlugin = function (e, t) {
    function i() {
      var e,
        t = new Float32Array([
          -1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1,
        ]),
        i = new Uint16Array([0, 1, 2, 0, 2, 3]);
      (n = p.createBuffer()),
        (o = p.createBuffer()),
        p.bindBuffer(p.ARRAY_BUFFER, n),
        p.bufferData(p.ARRAY_BUFFER, t, p.STATIC_DRAW),
        p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, o),
        p.bufferData(p.ELEMENT_ARRAY_BUFFER, i, p.STATIC_DRAW),
        (c = p.createTexture()),
        (u = p.createTexture()),
        d.bindTexture(p.TEXTURE_2D, c),
        p.texImage2D(
          p.TEXTURE_2D,
          0,
          p.RGB,
          16,
          16,
          0,
          p.RGB,
          p.UNSIGNED_BYTE,
          null
        ),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST),
        d.bindTexture(p.TEXTURE_2D, u),
        p.texImage2D(
          p.TEXTURE_2D,
          0,
          p.RGBA,
          16,
          16,
          0,
          p.RGBA,
          p.UNSIGNED_BYTE,
          null
        ),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST),
        p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST),
        (e = (h = p.getParameter(p.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0)
          ? {
              vertexShader: [
                "uniform lowp int renderType;",
                "uniform vec3 screenPosition;",
                "uniform vec2 scale;",
                "uniform float rotation;",
                "uniform sampler2D occlusionMap;",
                "attribute vec2 position;",
                "attribute vec2 uv;",
                "varying vec2 vUV;",
                "varying float vVisibility;",
                "void main() {",
                "vUV = uv;",
                "vec2 pos = position;",
                "if ( renderType == 2 ) {",
                "vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",
                "vVisibility =        visibility.r / 9.0;",
                "vVisibility *= 1.0 - visibility.g / 9.0;",
                "vVisibility *=       visibility.b / 9.0;",
                "vVisibility *= 1.0 - visibility.a / 9.0;",
                "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
                "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
                "}",
                "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
                "}",
              ].join("\n"),
              fragmentShader: [
                "uniform lowp int renderType;",
                "uniform sampler2D map;",
                "uniform float opacity;",
                "uniform vec3 color;",
                "varying vec2 vUV;",
                "varying float vVisibility;",
                "void main() {",
                "if ( renderType == 0 ) {",
                "gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",
                "} else if ( renderType == 1 ) {",
                "gl_FragColor = texture2D( map, vUV );",
                "} else {",
                "vec4 texture = texture2D( map, vUV );",
                "texture.a *= opacity * vVisibility;",
                "gl_FragColor = texture;",
                "gl_FragColor.rgb *= color;",
                "}",
                "}",
              ].join("\n"),
            }
          : {
              vertexShader: [
                "uniform lowp int renderType;",
                "uniform vec3 screenPosition;",
                "uniform vec2 scale;",
                "uniform float rotation;",
                "attribute vec2 position;",
                "attribute vec2 uv;",
                "varying vec2 vUV;",
                "void main() {",
                "vUV = uv;",
                "vec2 pos = position;",
                "if ( renderType == 2 ) {",
                "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
                "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
                "}",
                "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
                "}",
              ].join("\n"),
              fragmentShader: [
                "precision mediump float;",
                "uniform lowp int renderType;",
                "uniform sampler2D map;",
                "uniform sampler2D occlusionMap;",
                "uniform float opacity;",
                "uniform vec3 color;",
                "varying vec2 vUV;",
                "void main() {",
                "if ( renderType == 0 ) {",
                "gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",
                "} else if ( renderType == 1 ) {",
                "gl_FragColor = texture2D( map, vUV );",
                "} else {",
                "float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
                "visibility = ( 1.0 - visibility / 4.0 );",
                "vec4 texture = texture2D( map, vUV );",
                "texture.a *= opacity * visibility;",
                "gl_FragColor = texture;",
                "gl_FragColor.rgb *= color;",
                "}",
                "}",
              ].join("\n"),
            }),
        (a = r(e)),
        (s = {
          vertex: p.getAttribLocation(a, "position"),
          uv: p.getAttribLocation(a, "uv"),
        }),
        (l = {
          renderType: p.getUniformLocation(a, "renderType"),
          map: p.getUniformLocation(a, "map"),
          occlusionMap: p.getUniformLocation(a, "occlusionMap"),
          opacity: p.getUniformLocation(a, "opacity"),
          color: p.getUniformLocation(a, "color"),
          scale: p.getUniformLocation(a, "scale"),
          rotation: p.getUniformLocation(a, "rotation"),
          screenPosition: p.getUniformLocation(a, "screenPosition"),
        });
    }
    function r(t) {
      var i = p.createProgram(),
        r = p.createShader(p.FRAGMENT_SHADER),
        n = p.createShader(p.VERTEX_SHADER),
        o = "precision " + e.getPrecision() + " float;\n";
      return (
        p.shaderSource(r, o + t.fragmentShader),
        p.shaderSource(n, o + t.vertexShader),
        p.compileShader(r),
        p.compileShader(n),
        p.attachShader(i, r),
        p.attachShader(i, n),
        p.linkProgram(i),
        i
      );
    }
    var n,
      o,
      a,
      s,
      l,
      h,
      c,
      u,
      p = e.context,
      d = e.state;
    this.render = function (r, f, m) {
      if (0 !== t.length) {
        var E = new THREE.Vector3(),
          g = m.w / m.z,
          v = 0.5 * m.z,
          y = 0.5 * m.w,
          T = 16 / m.w,
          R = new THREE.Vector2(T * g, T),
          x = new THREE.Vector3(1, 1, 0),
          H = new THREE.Vector2(1, 1);
        void 0 === a && i(),
          p.useProgram(a),
          d.initAttributes(),
          d.enableAttribute(s.vertex),
          d.enableAttribute(s.uv),
          d.disableUnusedAttributes(),
          p.uniform1i(l.occlusionMap, 0),
          p.uniform1i(l.map, 1),
          p.bindBuffer(p.ARRAY_BUFFER, n),
          p.vertexAttribPointer(s.vertex, 2, p.FLOAT, !1, 16, 0),
          p.vertexAttribPointer(s.uv, 2, p.FLOAT, !1, 16, 8),
          p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, o),
          d.disable(p.CULL_FACE),
          d.setDepthWrite(!1);
        for (var b = 0, w = t.length; b < w; b++) {
          (T = 16 / m.w), R.set(T * g, T);
          var q = t[b];
          if (
            (E.set(
              q.matrixWorld.elements[12],
              q.matrixWorld.elements[13],
              q.matrixWorld.elements[14]
            ),
            E.applyMatrix4(f.matrixWorldInverse),
            E.applyProjection(f.projectionMatrix),
            x.copy(E),
            (H.x = x.x * v + v),
            (H.y = x.y * y + y),
            h || (H.x > 0 && H.x < m.z && H.y > 0 && H.y < m.w))
          ) {
            d.activeTexture(p.TEXTURE0),
              d.bindTexture(p.TEXTURE_2D, null),
              d.activeTexture(p.TEXTURE1),
              d.bindTexture(p.TEXTURE_2D, c),
              p.copyTexImage2D(
                p.TEXTURE_2D,
                0,
                p.RGB,
                m.x + H.x - 8,
                m.y + H.y - 8,
                16,
                16,
                0
              ),
              p.uniform1i(l.renderType, 0),
              p.uniform2f(l.scale, R.x, R.y),
              p.uniform3f(l.screenPosition, x.x, x.y, x.z),
              d.disable(p.BLEND),
              d.enable(p.DEPTH_TEST),
              p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0),
              d.activeTexture(p.TEXTURE0),
              d.bindTexture(p.TEXTURE_2D, u),
              p.copyTexImage2D(
                p.TEXTURE_2D,
                0,
                p.RGBA,
                m.x + H.x - 8,
                m.y + H.y - 8,
                16,
                16,
                0
              ),
              p.uniform1i(l.renderType, 1),
              d.disable(p.DEPTH_TEST),
              d.activeTexture(p.TEXTURE1),
              d.bindTexture(p.TEXTURE_2D, c),
              p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0),
              q.positionScreen.copy(x),
              q.customUpdateCallback
                ? q.customUpdateCallback(q)
                : q.updateLensFlares(),
              p.uniform1i(l.renderType, 2),
              d.enable(p.BLEND);
            for (var M = 0, _ = q.lensFlares.length; M < _; M++) {
              var S = q.lensFlares[M];
              S.opacity > 0.001 &&
                S.scale > 0.001 &&
                ((x.x = S.x),
                (x.y = S.y),
                (x.z = S.z),
                (T = (S.size * S.scale) / m.w),
                (R.x = T * g),
                (R.y = T),
                p.uniform3f(l.screenPosition, x.x, x.y, x.z),
                p.uniform2f(l.scale, R.x, R.y),
                p.uniform1f(l.rotation, S.rotation),
                p.uniform1f(l.opacity, S.opacity),
                p.uniform3f(l.color, S.color.r, S.color.g, S.color.b),
                d.setBlending(
                  S.blending,
                  S.blendEquation,
                  S.blendSrc,
                  S.blendDst
                ),
                e.setTexture(S.texture, 1),
                p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0));
            }
          }
        }
        d.enable(p.CULL_FACE),
          d.enable(p.DEPTH_TEST),
          d.setDepthWrite(!0),
          e.resetGLState();
      }
    };
  }),
  (THREE.SpritePlugin = function (e, t) {
    function i() {
      var e = new Float32Array([
          -0.5, -0.5, 0, 0, 0.5, -0.5, 1, 0, 0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1,
        ]),
        t = new Uint16Array([0, 1, 2, 0, 2, 3]);
      (o = u.createBuffer()),
        (a = u.createBuffer()),
        u.bindBuffer(u.ARRAY_BUFFER, o),
        u.bufferData(u.ARRAY_BUFFER, e, u.STATIC_DRAW),
        u.bindBuffer(u.ELEMENT_ARRAY_BUFFER, a),
        u.bufferData(u.ELEMENT_ARRAY_BUFFER, t, u.STATIC_DRAW),
        (s = r()),
        (l = {
          position: u.getAttribLocation(s, "position"),
          uv: u.getAttribLocation(s, "uv"),
        }),
        (h = {
          uvOffset: u.getUniformLocation(s, "uvOffset"),
          uvScale: u.getUniformLocation(s, "uvScale"),
          rotation: u.getUniformLocation(s, "rotation"),
          scale: u.getUniformLocation(s, "scale"),
          color: u.getUniformLocation(s, "color"),
          map: u.getUniformLocation(s, "map"),
          opacity: u.getUniformLocation(s, "opacity"),
          modelViewMatrix: u.getUniformLocation(s, "modelViewMatrix"),
          projectionMatrix: u.getUniformLocation(s, "projectionMatrix"),
          fogType: u.getUniformLocation(s, "fogType"),
          fogDensity: u.getUniformLocation(s, "fogDensity"),
          fogNear: u.getUniformLocation(s, "fogNear"),
          fogFar: u.getUniformLocation(s, "fogFar"),
          fogColor: u.getUniformLocation(s, "fogColor"),
          alphaTest: u.getUniformLocation(s, "alphaTest"),
        });
      var i = document.createElement("canvas");
      (i.width = 8), (i.height = 8);
      var n = i.getContext("2d");
      (n.fillStyle = "white"),
        n.fillRect(0, 0, 8, 8),
        ((c = new THREE.Texture(i)).needsUpdate = !0);
    }
    function r() {
      var t = u.createProgram(),
        i = u.createShader(u.VERTEX_SHADER),
        r = u.createShader(u.FRAGMENT_SHADER);
      return (
        u.shaderSource(
          i,
          [
            "precision " + e.getPrecision() + " float;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform float rotation;",
            "uniform vec2 scale;",
            "uniform vec2 uvOffset;",
            "uniform vec2 uvScale;",
            "attribute vec2 position;",
            "attribute vec2 uv;",
            "varying vec2 vUV;",
            "void main() {",
            "vUV = uvOffset + uv * uvScale;",
            "vec2 alignedPosition = position * scale;",
            "vec2 rotatedPosition;",
            "rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;",
            "rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;",
            "vec4 finalPosition;",
            "finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );",
            "finalPosition.xy += rotatedPosition;",
            "finalPosition = projectionMatrix * finalPosition;",
            "gl_Position = finalPosition;",
            "}",
          ].join("\n")
        ),
        u.shaderSource(
          r,
          [
            "precision " + e.getPrecision() + " float;",
            "uniform vec3 color;",
            "uniform sampler2D map;",
            "uniform float opacity;",
            "uniform int fogType;",
            "uniform vec3 fogColor;",
            "uniform float fogDensity;",
            "uniform float fogNear;",
            "uniform float fogFar;",
            "uniform float alphaTest;",
            "varying vec2 vUV;",
            "void main() {",
            "vec4 texture = texture2D( map, vUV );",
            "if ( texture.a < alphaTest ) discard;",
            "gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );",
            "if ( fogType > 0 ) {",
            "float depth = gl_FragCoord.z / gl_FragCoord.w;",
            "float fogFactor = 0.0;",
            "if ( fogType == 1 ) {",
            "fogFactor = smoothstep( fogNear, fogFar, depth );",
            "} else {",
            "const float LOG2 = 1.442695;",
            "fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
            "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",
            "}",
            "gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",
            "}",
            "}",
          ].join("\n")
        ),
        u.compileShader(i),
        u.compileShader(r),
        u.attachShader(t, i),
        u.attachShader(t, r),
        u.linkProgram(t),
        t
      );
    }
    function n(e, t) {
      return e.renderOrder !== t.renderOrder
        ? e.renderOrder - t.renderOrder
        : e.z !== t.z
        ? t.z - e.z
        : t.id - e.id;
    }
    var o,
      a,
      s,
      l,
      h,
      c,
      u = e.context,
      p = e.state,
      d = new THREE.Vector3(),
      f = new THREE.Quaternion(),
      m = new THREE.Vector3();
    this.render = function (r, E) {
      if (0 !== t.length) {
        void 0 === s && i(),
          u.useProgram(s),
          p.initAttributes(),
          p.enableAttribute(l.position),
          p.enableAttribute(l.uv),
          p.disableUnusedAttributes(),
          p.disable(u.CULL_FACE),
          p.enable(u.BLEND),
          u.bindBuffer(u.ARRAY_BUFFER, o),
          u.vertexAttribPointer(l.position, 2, u.FLOAT, !1, 16, 0),
          u.vertexAttribPointer(l.uv, 2, u.FLOAT, !1, 16, 8),
          u.bindBuffer(u.ELEMENT_ARRAY_BUFFER, a),
          u.uniformMatrix4fv(
            h.projectionMatrix,
            !1,
            E.projectionMatrix.elements
          ),
          p.activeTexture(u.TEXTURE0),
          u.uniform1i(h.map, 0);
        var g = 0,
          v = 0,
          y = r.fog;
        y
          ? (u.uniform3f(h.fogColor, y.color.r, y.color.g, y.color.b),
            y instanceof THREE.Fog
              ? (u.uniform1f(h.fogNear, y.near),
                u.uniform1f(h.fogFar, y.far),
                u.uniform1i(h.fogType, 1),
                (g = 1),
                (v = 1))
              : y instanceof THREE.FogExp2 &&
                (u.uniform1f(h.fogDensity, y.density),
                u.uniform1i(h.fogType, 2),
                (g = 2),
                (v = 2)))
          : (u.uniform1i(h.fogType, 0), (g = 0), (v = 0));
        for (var T = 0, R = t.length; T < R; T++) {
          (H = t[T]).modelViewMatrix.multiplyMatrices(
            E.matrixWorldInverse,
            H.matrixWorld
          ),
            (H.z = -H.modelViewMatrix.elements[14]);
        }
        t.sort(n);
        var x = [];
        for (T = 0, R = t.length; T < R; T++) {
          var H,
            b = (H = t[T]).material;
          u.uniform1f(h.alphaTest, b.alphaTest),
            u.uniformMatrix4fv(
              h.modelViewMatrix,
              !1,
              H.modelViewMatrix.elements
            ),
            H.matrixWorld.decompose(d, f, m),
            (x[0] = m.x),
            (x[1] = m.y);
          var w = 0;
          r.fog && b.fog && (w = v),
            g !== w && (u.uniform1i(h.fogType, w), (g = w)),
            null !== b.map
              ? (u.uniform2f(h.uvOffset, b.map.offset.x, b.map.offset.y),
                u.uniform2f(h.uvScale, b.map.repeat.x, b.map.repeat.y))
              : (u.uniform2f(h.uvOffset, 0, 0), u.uniform2f(h.uvScale, 1, 1)),
            u.uniform1f(h.opacity, b.opacity),
            u.uniform3f(h.color, b.color.r, b.color.g, b.color.b),
            u.uniform1f(h.rotation, b.rotation),
            u.uniform2fv(h.scale, x),
            p.setBlending(b.blending, b.blendEquation, b.blendSrc, b.blendDst),
            p.setDepthTest(b.depthTest),
            p.setDepthWrite(b.depthWrite),
            b.map && b.map.image && b.map.image.width
              ? e.setTexture(b.map, 0)
              : e.setTexture(c, 0),
            u.drawElements(u.TRIANGLES, 6, u.UNSIGNED_SHORT, 0);
        }
        p.enable(u.CULL_FACE), e.resetGLState();
      }
    };
  }),
  Object.defineProperties(THREE.Box2.prototype, {
    empty: {
      value: function () {
        return (
          console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),
          this.isEmpty()
        );
      },
    },
    isIntersectionBox: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."
          ),
          this.intersectsBox(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Box3.prototype, {
    empty: {
      value: function () {
        return (
          console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),
          this.isEmpty()
        );
      },
    },
    isIntersectionBox: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."
          ),
          this.intersectsBox(e)
        );
      },
    },
    isIntersectionSphere: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."
          ),
          this.intersectsSphere(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Matrix3.prototype, {
    multiplyVector3: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."
          ),
          e.applyMatrix3(this)
        );
      },
    },
    multiplyVector3Array: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."
          ),
          this.applyToVector3Array(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Matrix4.prototype, {
    extractPosition: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."
          ),
          this.copyPosition(e)
        );
      },
    },
    setRotationFromQuaternion: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."
          ),
          this.makeRotationFromQuaternion(e)
        );
      },
    },
    multiplyVector3: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."
          ),
          e.applyProjection(this)
        );
      },
    },
    multiplyVector4: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."
          ),
          e.applyMatrix4(this)
        );
      },
    },
    multiplyVector3Array: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."
          ),
          this.applyToVector3Array(e)
        );
      },
    },
    rotateAxis: {
      value: function (e) {
        console.warn(
          "THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."
        ),
          e.transformDirection(this);
      },
    },
    crossVector: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."
          ),
          e.applyMatrix4(this)
        );
      },
    },
    translate: {
      value: function () {
        console.error("THREE.Matrix4: .translate() has been removed.");
      },
    },
    rotateX: {
      value: function () {
        console.error("THREE.Matrix4: .rotateX() has been removed.");
      },
    },
    rotateY: {
      value: function () {
        console.error("THREE.Matrix4: .rotateY() has been removed.");
      },
    },
    rotateZ: {
      value: function () {
        console.error("THREE.Matrix4: .rotateZ() has been removed.");
      },
    },
    rotateByAxis: {
      value: function () {
        console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
      },
    },
  }),
  Object.defineProperties(THREE.Plane.prototype, {
    isIntersectionLine: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."
          ),
          this.intersectsLine(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Quaternion.prototype, {
    multiplyVector3: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."
          ),
          e.applyQuaternion(this)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Ray.prototype, {
    isIntersectionBox: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."
          ),
          this.intersectsBox(e)
        );
      },
    },
    isIntersectionPlane: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."
          ),
          this.intersectsPlane(e)
        );
      },
    },
    isIntersectionSphere: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."
          ),
          this.intersectsSphere(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Vector3.prototype, {
    setEulerFromRotationMatrix: {
      value: function () {
        console.error(
          "THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead."
        );
      },
    },
    setEulerFromQuaternion: {
      value: function () {
        console.error(
          "THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead."
        );
      },
    },
    getPositionFromMatrix: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."
          ),
          this.setFromMatrixPosition(e)
        );
      },
    },
    getScaleFromMatrix: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."
          ),
          this.setFromMatrixScale(e)
        );
      },
    },
    getColumnFromMatrix: {
      value: function (e, t) {
        return (
          console.warn(
            "THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."
          ),
          this.setFromMatrixColumn(e, t)
        );
      },
    },
  }),
  (THREE.Face4 = function (e, t, i, r, n, o, a) {
    return (
      console.warn(
        "THREE.Face4 has been removed. A THREE.Face3 will be created instead."
      ),
      new THREE.Face3(e, t, i, n, o, a)
    );
  }),
  Object.defineProperties(THREE.Object3D.prototype, {
    eulerOrder: {
      get: function () {
        return (
          console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
          this.rotation.order
        );
      },
      set: function (e) {
        console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
          (this.rotation.order = e);
      },
    },
    getChildByName: {
      value: function (e) {
        return (
          console.warn(
            "THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."
          ),
          this.getObjectByName(e)
        );
      },
    },
    renderDepth: {
      set: function () {
        console.warn(
          "THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead."
        );
      },
    },
    translate: {
      value: function (e, t) {
        return (
          console.warn(
            "THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."
          ),
          this.translateOnAxis(t, e)
        );
      },
    },
    useQuaternion: {
      get: function () {
        console.warn(
          "THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default."
        );
      },
      set: function () {
        console.warn(
          "THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default."
        );
      },
    },
  }),
  Object.defineProperties(THREE, {
    PointCloud: {
      value: function (e, t) {
        return (
          console.warn("THREE.PointCloud has been renamed to THREE.Points."),
          new THREE.Points(e, t)
        );
      },
    },
    ParticleSystem: {
      value: function (e, t) {
        return (
          console.warn(
            "THREE.ParticleSystem has been renamed to THREE.Points."
          ),
          new THREE.Points(e, t)
        );
      },
    },
  }),
  Object.defineProperties(THREE.Light.prototype, {
    onlyShadow: {
      set: function () {
        console.warn("THREE.Light: .onlyShadow has been removed.");
      },
    },
    shadowCameraFov: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraFov is now .shadow.camera.fov."
        ),
          (this.shadow.camera.fov = e);
      },
    },
    shadowCameraLeft: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraLeft is now .shadow.camera.left."
        ),
          (this.shadow.camera.left = e);
      },
    },
    shadowCameraRight: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraRight is now .shadow.camera.right."
        ),
          (this.shadow.camera.right = e);
      },
    },
    shadowCameraTop: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraTop is now .shadow.camera.top."
        ),
          (this.shadow.camera.top = e);
      },
    },
    shadowCameraBottom: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."
        ),
          (this.shadow.camera.bottom = e);
      },
    },
    shadowCameraNear: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraNear is now .shadow.camera.near."
        ),
          (this.shadow.camera.near = e);
      },
    },
    shadowCameraFar: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowCameraFar is now .shadow.camera.far."
        ),
          (this.shadow.camera.far = e);
      },
    },
    shadowCameraVisible: {
      set: function () {
        console.warn(
          "THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead."
        );
      },
    },
    shadowBias: {
      set: function (e) {
        console.warn("THREE.Light: .shadowBias is now .shadow.bias."),
          (this.shadow.bias = e);
      },
    },
    shadowDarkness: {
      set: function () {
        console.warn("THREE.Light: .shadowDarkness has been removed.");
      },
    },
    shadowMapWidth: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."
        ),
          (this.shadow.mapSize.width = e);
      },
    },
    shadowMapHeight: {
      set: function (e) {
        console.warn(
          "THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."
        ),
          (this.shadow.mapSize.height = e);
      },
    },
  }),
  Object.defineProperties(THREE.BufferAttribute.prototype, {
    length: {
      get: function () {
        return (
          console.warn(
            "THREE.BufferAttribute: .length has been deprecated. Please use .count."
          ),
          this.array.length
        );
      },
    },
  }),
  Object.defineProperties(THREE.BufferGeometry.prototype, {
    drawcalls: {
      get: function () {
        return (
          console.error(
            "THREE.BufferGeometry: .drawcalls has been renamed to .groups."
          ),
          this.groups
        );
      },
    },
    offsets: {
      get: function () {
        return (
          console.warn(
            "THREE.BufferGeometry: .offsets has been renamed to .groups."
          ),
          this.groups
        );
      },
    },
    addIndex: {
      value: function (e) {
        console.warn(
          "THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."
        ),
          this.setIndex(e);
      },
    },
    addDrawCall: {
      value: function (e, t, i) {
        void 0 !== i &&
          console.warn(
            "THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."
          ),
          console.warn(
            "THREE.BufferGeometry: .addDrawCall() is now .addGroup()."
          ),
          this.addGroup(e, t);
      },
    },
    clearDrawCalls: {
      value: function () {
        console.warn(
          "THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."
        ),
          this.clearGroups();
      },
    },
    computeTangents: {
      value: function () {
        console.warn(
          "THREE.BufferGeometry: .computeTangents() has been removed."
        );
      },
    },
    computeOffsets: {
      value: function () {
        console.warn(
          "THREE.BufferGeometry: .computeOffsets() has been removed."
        );
      },
    },
  }),
  Object.defineProperties(THREE.Material.prototype, {
    wrapAround: {
      get: function () {
        console.warn("THREE." + this.type + ": .wrapAround has been removed.");
      },
      set: function () {
        console.warn("THREE." + this.type + ": .wrapAround has been removed.");
      },
    },
    wrapRGB: {
      get: function () {
        return (
          console.warn("THREE." + this.type + ": .wrapRGB has been removed."),
          new THREE.Color()
        );
      },
    },
  }),
  Object.defineProperties(THREE, {
    PointCloudMaterial: {
      value: function (e) {
        return (
          console.warn(
            "THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."
          ),
          new THREE.PointsMaterial(e)
        );
      },
    },
    ParticleBasicMaterial: {
      value: function (e) {
        return (
          console.warn(
            "THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."
          ),
          new THREE.PointsMaterial(e)
        );
      },
    },
    ParticleSystemMaterial: {
      value: function (e) {
        return (
          console.warn(
            "THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."
          ),
          new THREE.PointsMaterial(e)
        );
      },
    },
  }),
  Object.defineProperties(THREE.MeshPhongMaterial.prototype, {
    metal: {
      get: function () {
        return (
          console.warn(
            "THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."
          ),
          !1
        );
      },
      set: function () {
        console.warn(
          "THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead"
        );
      },
    },
  }),
  Object.defineProperties(THREE.ShaderMaterial.prototype, {
    derivatives: {
      get: function () {
        return (
          console.warn(
            "THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."
          ),
          this.extensions.derivatives
        );
      },
      set: function (e) {
        console.warn(
          "THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."
        ),
          (this.extensions.derivatives = e);
      },
    },
  }),
  Object.defineProperties(THREE.WebGLRenderer.prototype, {
    supportsFloatTextures: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."
          ),
          this.extensions.get("OES_texture_float")
        );
      },
    },
    supportsHalfFloatTextures: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."
          ),
          this.extensions.get("OES_texture_half_float")
        );
      },
    },
    supportsStandardDerivatives: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."
          ),
          this.extensions.get("OES_standard_derivatives")
        );
      },
    },
    supportsCompressedTextureS3TC: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."
          ),
          this.extensions.get("WEBGL_compressed_texture_s3tc")
        );
      },
    },
    supportsCompressedTexturePVRTC: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."
          ),
          this.extensions.get("WEBGL_compressed_texture_pvrtc")
        );
      },
    },
    supportsBlendMinMax: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."
          ),
          this.extensions.get("EXT_blend_minmax")
        );
      },
    },
    supportsVertexTextures: {
      value: function () {
        return this.capabilities.vertexTextures;
      },
    },
    supportsInstancedArrays: {
      value: function () {
        return (
          console.warn(
            "THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."
          ),
          this.extensions.get("ANGLE_instanced_arrays")
        );
      },
    },
    enableScissorTest: {
      value: function (e) {
        console.warn(
          "THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."
        ),
          this.setScissorTest(e);
      },
    },
    initMaterial: {
      value: function () {
        console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
      },
    },
    addPrePlugin: {
      value: function () {
        console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
      },
    },
    addPostPlugin: {
      value: function () {
        console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
      },
    },
    updateShadowMap: {
      value: function () {
        console.warn(
          "THREE.WebGLRenderer: .updateShadowMap() has been removed."
        );
      },
    },
    shadowMapEnabled: {
      get: function () {
        return this.shadowMap.enabled;
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."
        ),
          (this.shadowMap.enabled = e);
      },
    },
    shadowMapType: {
      get: function () {
        return this.shadowMap.type;
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."
        ),
          (this.shadowMap.type = e);
      },
    },
    shadowMapCullFace: {
      get: function () {
        return this.shadowMap.cullFace;
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."
        ),
          (this.shadowMap.cullFace = e);
      },
    },
  }),
  Object.defineProperties(THREE.WebGLRenderTarget.prototype, {
    wrapS: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."
          ),
          this.texture.wrapS
        );
      },
      set: function (e) {
        console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
          (this.texture.wrapS = e);
      },
    },
    wrapT: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."
          ),
          this.texture.wrapT
        );
      },
      set: function (e) {
        console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
          (this.texture.wrapT = e);
      },
    },
    magFilter: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."
          ),
          this.texture.magFilter
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."
        ),
          (this.texture.magFilter = e);
      },
    },
    minFilter: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."
          ),
          this.texture.minFilter
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."
        ),
          (this.texture.minFilter = e);
      },
    },
    anisotropy: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."
          ),
          this.texture.anisotropy
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."
        ),
          (this.texture.anisotropy = e);
      },
    },
    offset: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .offset is now .texture.offset."
          ),
          this.texture.offset
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .offset is now .texture.offset."
        ),
          (this.texture.offset = e);
      },
    },
    repeat: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .repeat is now .texture.repeat."
          ),
          this.texture.repeat
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .repeat is now .texture.repeat."
        ),
          (this.texture.repeat = e);
      },
    },
    format: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .format is now .texture.format."
          ),
          this.texture.format
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .format is now .texture.format."
        ),
          (this.texture.format = e);
      },
    },
    type: {
      get: function () {
        return (
          console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
          this.texture.type
        );
      },
      set: function (e) {
        console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
          (this.texture.type = e);
      },
    },
    generateMipmaps: {
      get: function () {
        return (
          console.warn(
            "THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."
          ),
          this.texture.generateMipmaps
        );
      },
      set: function (e) {
        console.warn(
          "THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."
        ),
          (this.texture.generateMipmaps = e);
      },
    },
  }),
  (THREE.GeometryUtils = {
    merge: function (e, t, i) {
      var r;
      console.warn(
        "THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."
      ),
        t instanceof THREE.Mesh &&
          (t.matrixAutoUpdate && t.updateMatrix(),
          (r = t.matrix),
          (t = t.geometry)),
        e.merge(t, r, i);
    },
    center: function (e) {
      return (
        console.warn(
          "THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."
        ),
        e.center()
      );
    },
  }),
  (THREE.ImageUtils = {
    crossOrigin: void 0,
    loadTexture: function (e, t, i, r) {
      console.warn(
        "THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead."
      );
      var n = new THREE.TextureLoader();
      n.setCrossOrigin(this.crossOrigin);
      var o = n.load(e, i, void 0, r);
      return t && (o.mapping = t), o;
    },
    loadTextureCube: function (e, t, i, r) {
      console.warn(
        "THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead."
      );
      var n = new THREE.CubeTextureLoader();
      n.setCrossOrigin(this.crossOrigin);
      var o = n.load(e, i, void 0, r);
      return t && (o.mapping = t), o;
    },
    loadCompressedTexture: function () {
      console.error(
        "THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead."
      );
    },
    loadCompressedTextureCube: function () {
      console.error(
        "THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead."
      );
    },
  }),
  (THREE.Projector = function () {
    console.error(
      "THREE.Projector has been moved to /examples/js/renderers/Projector.js."
    ),
      (this.projectVector = function (e, t) {
        console.warn(
          "THREE.Projector: .projectVector() is now vector.project()."
        ),
          e.project(t);
      }),
      (this.unprojectVector = function (e, t) {
        console.warn(
          "THREE.Projector: .unprojectVector() is now vector.unproject()."
        ),
          e.unproject(t);
      }),
      (this.pickingRay = function () {
        console.error(
          "THREE.Projector: .pickingRay() is now raycaster.setFromCamera()."
        );
      });
  }),
  (THREE.CanvasRenderer = function () {
    console.error(
      "THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"
    ),
      (this.domElement = document.createElement("canvas")),
      (this.clear = function () {}),
      (this.render = function () {}),
      (this.setClearColor = function () {}),
      (this.setSize = function () {});
  }),
  (THREE.MeshFaceMaterial = THREE.MultiMaterial),
  (THREE.CurveUtils = {
    tangentQuadraticBezier: function (e, t, i, r) {
      return 2 * (1 - e) * (i - t) + 2 * e * (r - i);
    },
    tangentCubicBezier: function (e, t, i, r, n) {
      return (
        -3 * t * (1 - e) * (1 - e) +
        3 * i * (1 - e) * (1 - e) -
        6 * e * i * (1 - e) +
        6 * e * r * (1 - e) -
        3 * e * e * r +
        3 * e * e * n
      );
    },
    tangentSpline: function (e) {
      return (
        6 * e * e -
        6 * e +
        (3 * e * e - 4 * e + 1) +
        (-6 * e * e + 6 * e) +
        (3 * e * e - 2 * e)
      );
    },
    interpolate: function (e, t, i, r, n) {
      var o = 0.5 * (i - e),
        a = 0.5 * (r - t),
        s = n * n;
      return (
        (2 * t - 2 * i + o + a) * (n * s) +
        (-3 * t + 3 * i - 2 * o - a) * s +
        o * n +
        t
      );
    },
  }),
  (THREE.SceneUtils = {
    createMultiMaterialObject: function (e, t) {
      for (var i = new THREE.Group(), r = 0, n = t.length; r < n; r++)
        i.add(new THREE.Mesh(e, t[r]));
      return i;
    },
    detach: function (e, t, i) {
      e.applyMatrix(t.matrixWorld), t.remove(e), i.add(e);
    },
    attach: function (e, t, i) {
      var r = new THREE.Matrix4();
      r.getInverse(i.matrixWorld), e.applyMatrix(r), t.remove(e), i.add(e);
    },
  }),
  (THREE.ShapeUtils = {
    area: function (e) {
      for (var t = e.length, i = 0, r = t - 1, n = 0; n < t; r = n++)
        i += e[r].x * e[n].y - e[n].x * e[r].y;
      return 0.5 * i;
    },
    triangulate: (function () {
      function e(e, t, i, r, n, o) {
        var a, s, l, h, c, u, p, d, f, m, E, g, v, y, T, R, x;
        if (
          ((s = e[o[t]].x),
          (l = e[o[t]].y),
          (h = e[o[i]].x),
          (c = e[o[i]].y),
          (u = e[o[r]].x),
          (p = e[o[r]].y),
          Number.EPSILON > (h - s) * (p - l) - (c - l) * (u - s))
        )
          return !1;
        for (
          m = u - h,
            E = p - c,
            g = s - u,
            v = l - p,
            y = h - s,
            T = c - l,
            a = 0;
          a < n;
          a++
        )
          if (
            ((d = e[o[a]].x),
            (f = e[o[a]].y),
            !(
              (d === s && f === l) ||
              (d === h && f === c) ||
              (d === u && f === p)
            ) &&
              ((R = y * (f - l) - T * (d - s)),
              (x = g * (f - p) - v * (d - u)),
              m * (f - c) - E * (d - h) >= -Number.EPSILON &&
                x >= -Number.EPSILON &&
                R >= -Number.EPSILON))
          )
            return !1;
        return !0;
      }
      return function (t, i) {
        var r = t.length;
        if (r < 3) return null;
        var n,
          o,
          a,
          s = [],
          l = [],
          h = [];
        if (THREE.ShapeUtils.area(t) > 0) for (o = 0; o < r; o++) l[o] = o;
        else for (o = 0; o < r; o++) l[o] = r - 1 - o;
        var c = r,
          u = 2 * c;
        for (o = c - 1; c > 2; ) {
          if (u-- <= 0)
            return (
              console.warn(
                "THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"
              ),
              i ? h : s
            );
          if (
            (c <= (n = o) && (n = 0),
            c <= (o = n + 1) && (o = 0),
            c <= (a = o + 1) && (a = 0),
            e(t, n, o, a, c, l))
          ) {
            var p, d, f, m, E;
            for (
              p = l[n],
                d = l[o],
                f = l[a],
                s.push([t[p], t[d], t[f]]),
                h.push([l[n], l[o], l[a]]),
                m = o,
                E = o + 1;
              E < c;
              m++, E++
            )
              l[m] = l[E];
            u = 2 * --c;
          }
        }
        return i ? h : s;
      };
    })(),
    triangulateShape: function (e, t) {
      function i(e, t, i) {
        return e.x !== t.x
          ? e.x < t.x
            ? e.x <= i.x && i.x <= t.x
            : t.x <= i.x && i.x <= e.x
          : e.y < t.y
          ? e.y <= i.y && i.y <= t.y
          : t.y <= i.y && i.y <= e.y;
      }
      function r(e, t, r, n, o) {
        var a = t.x - e.x,
          s = t.y - e.y,
          l = n.x - r.x,
          h = n.y - r.y,
          c = e.x - r.x,
          u = e.y - r.y,
          p = s * l - a * h,
          d = s * c - a * u;
        if (Math.abs(p) > Number.EPSILON) {
          var f;
          if (p > 0) {
            if (d < 0 || d > p) return [];
            if ((f = h * c - l * u) < 0 || f > p) return [];
          } else {
            if (d > 0 || d < p) return [];
            if ((f = h * c - l * u) > 0 || f < p) return [];
          }
          if (0 === f) return !o || (0 !== d && d !== p) ? [e] : [];
          if (f === p) return !o || (0 !== d && d !== p) ? [t] : [];
          if (0 === d) return [r];
          if (d === p) return [n];
          var m = f / p;
          return [
            {
              x: e.x + m * a,
              y: e.y + m * s,
            },
          ];
        }
        if (0 !== d || h * c != l * u) return [];
        var E,
          g,
          v,
          y,
          T,
          R,
          x,
          H,
          b = 0 === a && 0 === s,
          w = 0 === l && 0 === h;
        return b && w
          ? e.x !== r.x || e.y !== r.y
            ? []
            : [e]
          : b
          ? i(r, n, e)
            ? [e]
            : []
          : w
          ? i(e, t, r)
            ? [r]
            : []
          : (0 !== a
              ? (e.x < t.x
                  ? ((E = e), (v = e.x), (g = t), (y = t.x))
                  : ((E = t), (v = t.x), (g = e), (y = e.x)),
                r.x < n.x
                  ? ((T = r), (x = r.x), (R = n), (H = n.x))
                  : ((T = n), (x = n.x), (R = r), (H = r.x)))
              : (e.y < t.y
                  ? ((E = e), (v = e.y), (g = t), (y = t.y))
                  : ((E = t), (v = t.y), (g = e), (y = e.y)),
                r.y < n.y
                  ? ((T = r), (x = r.y), (R = n), (H = n.y))
                  : ((T = n), (x = n.y), (R = r), (H = r.y))),
            v <= x
              ? y < x
                ? []
                : y === x
                ? o
                  ? []
                  : [T]
                : y <= H
                ? [T, g]
                : [T, R]
              : v > H
              ? []
              : v === H
              ? o
                ? []
                : [E]
              : y <= H
              ? [E, g]
              : [E, R]);
      }
      function n(e, t, i, r) {
        var n = t.x - e.x,
          o = t.y - e.y,
          a = i.x - e.x,
          s = i.y - e.y,
          l = r.x - e.x,
          h = r.y - e.y,
          c = n * s - o * a,
          u = n * h - o * l;
        if (Math.abs(c) > Number.EPSILON) {
          var p = l * s - h * a;
          return c > 0 ? u >= 0 && p >= 0 : u >= 0 || p >= 0;
        }
        return u > 0;
      }
      function o(e, t) {
        function i(e, t) {
          var i = v.length - 1,
            r = e - 1;
          r < 0 && (r = i);
          var o = e + 1;
          o > i && (o = 0);
          var a = n(v[e], v[r], v[o], s[t]);
          if (!a) return !1;
          var l = s.length - 1,
            h = t - 1;
          h < 0 && (h = l);
          var c = t + 1;
          return c > l && (c = 0), !!(a = n(s[t], s[h], s[c], v[e]));
        }
        function o(e, t) {
          var i, n;
          for (i = 0; i < v.length; i++)
            if (
              ((n = i + 1), (n %= v.length), r(e, t, v[i], v[n], !0).length > 0)
            )
              return !0;
          return !1;
        }
        function a(e, i) {
          var n, o, a, s;
          for (n = 0; n < y.length; n++)
            for (o = t[y[n]], a = 0; a < o.length; a++)
              if (
                ((s = a + 1),
                (s %= o.length),
                r(e, i, o[a], o[s], !0).length > 0)
              )
                return !0;
          return !1;
        }
        for (
          var s,
            l,
            h,
            c,
            u,
            p,
            d,
            f,
            m,
            E,
            g,
            v = e.concat(),
            y = [],
            T = [],
            R = 0,
            x = t.length;
          R < x;
          R++
        )
          y.push(R);
        for (var H = 0, b = 2 * y.length; y.length > 0; ) {
          if (--b < 0) {
            console.log(
              "Infinite Loop! Holes left:" +
                y.length +
                ", Probably Hole outside Shape!"
            );
            break;
          }
          for (h = H; h < v.length; h++) {
            (c = v[h]), (l = -1);
            for (R = 0; R < y.length; R++)
              if (((p = y[R]), void 0 === T[(d = c.x + ":" + c.y + ":" + p)])) {
                s = t[p];
                for (var w = 0; w < s.length; w++)
                  if (((u = s[w]), i(h, w) && !o(c, u) && !a(c, u))) {
                    (l = w),
                      y.splice(R, 1),
                      (f = v.slice(0, h + 1)),
                      (m = v.slice(h)),
                      (E = s.slice(l)),
                      (g = s.slice(0, l + 1)),
                      (v = f.concat(E).concat(g).concat(m)),
                      (H = h);
                    break;
                  }
                if (l >= 0) break;
                T[d] = !0;
              }
            if (l >= 0) break;
          }
        }
        return v;
      }
      for (
        var a, s, l, h, c, u, p = {}, d = e.concat(), f = 0, m = t.length;
        f < m;
        f++
      )
        Array.prototype.push.apply(d, t[f]);
      for (a = 0, s = d.length; a < s; a++)
        void 0 !== p[(c = d[a].x + ":" + d[a].y)] &&
          console.warn("THREE.Shape: Duplicate point", c),
          (p[c] = a);
      var E = o(e, t),
        g = THREE.ShapeUtils.triangulate(E, !1);
      for (a = 0, s = g.length; a < s; a++)
        for (h = g[a], l = 0; l < 3; l++)
          void 0 !== (u = p[(c = h[l].x + ":" + h[l].y)]) && (h[l] = u);
      return g.concat();
    },
    isClockWise: function (e) {
      return THREE.ShapeUtils.area(e) < 0;
    },
    b2: (function () {
      function e(e, t) {
        var i = 1 - e;
        return i * i * t;
      }
      function t(e, t) {
        return 2 * (1 - e) * e * t;
      }
      function i(e, t) {
        return e * e * t;
      }
      return function (r, n, o, a) {
        return e(r, n) + t(r, o) + i(r, a);
      };
    })(),
    b3: (function () {
      function e(e, t) {
        var i = 1 - e;
        return i * i * i * t;
      }
      function t(e, t) {
        var i = 1 - e;
        return 3 * i * i * e * t;
      }
      function i(e, t) {
        return 3 * (1 - e) * e * e * t;
      }
      function r(e, t) {
        return e * e * e * t;
      }
      return function (n, o, a, s, l) {
        return e(n, o) + t(n, a) + i(n, s) + r(n, l);
      };
    })(),
  }),
  (THREE.Curve = function () {}),
  (THREE.Curve.prototype = {
    constructor: THREE.Curve,
    getPoint: function () {
      return (
        console.warn("THREE.Curve: Warning, getPoint() not implemented!"), null
      );
    },
    getPointAt: function (e) {
      var t = this.getUtoTmapping(e);
      return this.getPoint(t);
    },
    getPoints: function (e) {
      e || (e = 5);
      var t,
        i = [];
      for (t = 0; t <= e; t++) i.push(this.getPoint(t / e));
      return i;
    },
    getSpacedPoints: function (e) {
      e || (e = 5);
      var t,
        i = [];
      for (t = 0; t <= e; t++) i.push(this.getPointAt(t / e));
      return i;
    },
    getLength: function () {
      var e = this.getLengths();
      return e[e.length - 1];
    },
    getLengths: function (e) {
      if (
        (e || (e = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200),
        this.cacheArcLengths &&
          this.cacheArcLengths.length === e + 1 &&
          !this.needsUpdate)
      )
        return this.cacheArcLengths;
      this.needsUpdate = !1;
      var t,
        i,
        r = [],
        n = this.getPoint(0),
        o = 0;
      for (r.push(0), i = 1; i <= e; i++)
        (o += (t = this.getPoint(i / e)).distanceTo(n)), r.push(o), (n = t);
      return (this.cacheArcLengths = r), r;
    },
    updateArcLengths: function () {
      (this.needsUpdate = !0), this.getLengths();
    },
    getUtoTmapping: function (e, t) {
      var i,
        r = this.getLengths(),
        n = 0,
        o = r.length;
      i = t || e * r[o - 1];
      for (var a, s = 0, l = o - 1; s <= l; )
        if ((a = r[(n = Math.floor(s + (l - s) / 2))] - i) < 0) s = n + 1;
        else {
          if (!(a > 0)) {
            l = n;
            break;
          }
          l = n - 1;
        }
      if (r[(n = l)] === i) return n / (o - 1);
      var h = r[n];
      return (n + (i - h) / (r[n + 1] - h)) / (o - 1);
    },
    getTangent: function (e) {
      var t = 1e-4,
        i = e - t,
        r = e + t;
      i < 0 && (i = 0), r > 1 && (r = 1);
      var n = this.getPoint(i);
      return this.getPoint(r).clone().sub(n).normalize();
    },
    getTangentAt: function (e) {
      var t = this.getUtoTmapping(e);
      return this.getTangent(t);
    },
  }),
  (THREE.Curve.create = function (e, t) {
    return (
      (e.prototype = Object.create(THREE.Curve.prototype)),
      (e.prototype.constructor = e),
      (e.prototype.getPoint = t),
      e
    );
  }),
  (THREE.CurvePath = function () {
    (this.curves = []), (this.autoClose = !1);
  }),
  (THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.CurvePath.prototype.constructor = THREE.CurvePath),
  (THREE.CurvePath.prototype.add = function (e) {
    this.curves.push(e);
  }),
  (THREE.CurvePath.prototype.closePath = function () {
    var e = this.curves[0].getPoint(0),
      t = this.curves[this.curves.length - 1].getPoint(1);
    e.equals(t) || this.curves.push(new THREE.LineCurve(t, e));
  }),
  (THREE.CurvePath.prototype.getPoint = function (e) {
    for (
      var t = e * this.getLength(), i = this.getCurveLengths(), r = 0;
      r < i.length;

    ) {
      if (i[r] >= t) {
        var n = i[r] - t,
          o = this.curves[r],
          a = 1 - n / o.getLength();
        return o.getPointAt(a);
      }
      r++;
    }
    return null;
  }),
  (THREE.CurvePath.prototype.getLength = function () {
    var e = this.getCurveLengths();
    return e[e.length - 1];
  }),
  (THREE.CurvePath.prototype.getCurveLengths = function () {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    for (var e = [], t = 0, i = 0, r = this.curves.length; i < r; i++)
      (t += this.curves[i].getLength()), e.push(t);
    return (this.cacheLengths = e), e;
  }),
  (THREE.CurvePath.prototype.createPointsGeometry = function (e) {
    var t = this.getPoints(e);
    return this.createGeometry(t);
  }),
  (THREE.CurvePath.prototype.createSpacedPointsGeometry = function (e) {
    var t = this.getSpacedPoints(e);
    return this.createGeometry(t);
  }),
  (THREE.CurvePath.prototype.createGeometry = function (e) {
    for (var t = new THREE.Geometry(), i = 0, r = e.length; i < r; i++) {
      var n = e[i];
      t.vertices.push(new THREE.Vector3(n.x, n.y, n.z || 0));
    }
    return t;
  }),
  (THREE.Font = function (e) {
    this.data = e;
  }),
  (THREE.Font.prototype = {
    constructor: THREE.Font,
    generateShapes: function (e, t, i) {
      function r(e) {
        for (
          var i = String(e).split(""),
            r = t / o.resolution,
            a = 0,
            s = [],
            l = 0;
          l < i.length;
          l++
        ) {
          var h = n(i[l], r, a);
          (a += h.offset), s.push(h.path);
        }
        return s;
      }
      function n(e, t, r) {
        var n = o.glyphs[e] || o.glyphs["?"];
        if (n) {
          var a,
            s,
            l,
            h,
            c,
            u,
            p,
            d,
            f,
            m,
            E,
            g = new THREE.Path(),
            v = [],
            y = THREE.ShapeUtils.b2,
            T = THREE.ShapeUtils.b3;
          if (n.o)
            for (
              var R = n._cachedOutline || (n._cachedOutline = n.o.split(" ")),
                x = 0,
                H = R.length;
              x < H;

            ) {
              switch (R[x++]) {
                case "m":
                  (a = R[x++] * t + r), (s = R[x++] * t), g.moveTo(a, s);
                  break;
                case "l":
                  (a = R[x++] * t + r), (s = R[x++] * t), g.lineTo(a, s);
                  break;
                case "q":
                  if (
                    ((l = R[x++] * t + r),
                    (h = R[x++] * t),
                    (p = R[x++] * t + r),
                    (d = R[x++] * t),
                    g.quadraticCurveTo(p, d, l, h),
                    (E = v[v.length - 1]))
                  ) {
                    (c = E.x), (u = E.y);
                    for (var b = 1; b <= i; b++) {
                      y((w = b / i), c, p, l), y(w, u, d, h);
                    }
                  }
                  break;
                case "b":
                  if (
                    ((l = R[x++] * t + r),
                    (h = R[x++] * t),
                    (p = R[x++] * t + r),
                    (d = R[x++] * t),
                    (f = R[x++] * t + r),
                    (m = R[x++] * t),
                    g.bezierCurveTo(p, d, f, m, l, h),
                    (E = v[v.length - 1]))
                  ) {
                    (c = E.x), (u = E.y);
                    for (b = 1; b <= i; b++) {
                      var w;
                      T((w = b / i), c, p, f, l), T(w, u, d, m, h);
                    }
                  }
              }
            }
          return {
            offset: n.ha * t,
            path: g,
          };
        }
      }
      void 0 === t && (t = 100), void 0 === i && (i = 4);
      for (var o = this.data, a = r(e), s = [], l = 0, h = a.length; l < h; l++)
        Array.prototype.push.apply(s, a[l].toShapes());
      return s;
    },
  }),
  (THREE.Path = function (e) {
    THREE.CurvePath.call(this), (this.actions = []), e && this.fromPoints(e);
  }),
  (THREE.Path.prototype = Object.create(THREE.CurvePath.prototype)),
  (THREE.Path.prototype.constructor = THREE.Path),
  (THREE.Path.prototype.fromPoints = function (e) {
    this.moveTo(e[0].x, e[0].y);
    for (var t = 1, i = e.length; t < i; t++) this.lineTo(e[t].x, e[t].y);
  }),
  (THREE.Path.prototype.moveTo = function (e, t) {
    this.actions.push({
      action: "moveTo",
      args: [e, t],
    });
  }),
  (THREE.Path.prototype.lineTo = function (e, t) {
    var i = this.actions[this.actions.length - 1].args,
      r = i[i.length - 2],
      n = i[i.length - 1],
      o = new THREE.LineCurve(new THREE.Vector2(r, n), new THREE.Vector2(e, t));
    this.curves.push(o),
      this.actions.push({
        action: "lineTo",
        args: [e, t],
      });
  }),
  (THREE.Path.prototype.quadraticCurveTo = function (e, t, i, r) {
    var n = this.actions[this.actions.length - 1].args,
      o = n[n.length - 2],
      a = n[n.length - 1],
      s = new THREE.QuadraticBezierCurve(
        new THREE.Vector2(o, a),
        new THREE.Vector2(e, t),
        new THREE.Vector2(i, r)
      );
    this.curves.push(s),
      this.actions.push({
        action: "quadraticCurveTo",
        args: [e, t, i, r],
      });
  }),
  (THREE.Path.prototype.bezierCurveTo = function (e, t, i, r, n, o) {
    var a = this.actions[this.actions.length - 1].args,
      s = a[a.length - 2],
      l = a[a.length - 1],
      h = new THREE.CubicBezierCurve(
        new THREE.Vector2(s, l),
        new THREE.Vector2(e, t),
        new THREE.Vector2(i, r),
        new THREE.Vector2(n, o)
      );
    this.curves.push(h),
      this.actions.push({
        action: "bezierCurveTo",
        args: [e, t, i, r, n, o],
      });
  }),
  (THREE.Path.prototype.splineThru = function (e) {
    var t = Array.prototype.slice.call(arguments),
      i = this.actions[this.actions.length - 1].args,
      r = i[i.length - 2],
      n = i[i.length - 1],
      o = [new THREE.Vector2(r, n)];
    Array.prototype.push.apply(o, e);
    var a = new THREE.SplineCurve(o);
    this.curves.push(a),
      this.actions.push({
        action: "splineThru",
        args: t,
      });
  }),
  (THREE.Path.prototype.arc = function (e, t, i, r, n, o) {
    var a = this.actions[this.actions.length - 1].args,
      s = a[a.length - 2],
      l = a[a.length - 1];
    this.absarc(e + s, t + l, i, r, n, o);
  }),
  (THREE.Path.prototype.absarc = function (e, t, i, r, n, o) {
    this.absellipse(e, t, i, i, r, n, o);
  }),
  (THREE.Path.prototype.ellipse = function (e, t, i, r, n, o, a, s) {
    var l = this.actions[this.actions.length - 1].args,
      h = l[l.length - 2],
      c = l[l.length - 1];
    this.absellipse(e + h, t + c, i, r, n, o, a, s);
  }),
  (THREE.Path.prototype.absellipse = function (e, t, i, r, n, o, a, s) {
    var l = [e, t, i, r, n, o, a, s || 0],
      h = new THREE.EllipseCurve(e, t, i, r, n, o, a, s);
    this.curves.push(h);
    var c = h.getPoint(1);
    l.push(c.x),
      l.push(c.y),
      this.actions.push({
        action: "ellipse",
        args: l,
      });
  }),
  (THREE.Path.prototype.getSpacedPoints = function (e) {
    e || (e = 40);
    for (var t = [], i = 0; i < e; i++) t.push(this.getPoint(i / e));
    return this.autoClose && t.push(t[0]), t;
  }),
  (THREE.Path.prototype.getPoints = function (e) {
    e = e || 12;
    for (
      var t,
        i,
        r,
        n,
        o,
        a,
        s,
        l,
        h,
        c,
        u,
        p = THREE.ShapeUtils.b2,
        d = THREE.ShapeUtils.b3,
        f = [],
        m = 0,
        E = this.actions.length;
      m < E;
      m++
    ) {
      var g = this.actions[m],
        v = g.action,
        y = g.args;
      switch (v) {
        case "moveTo":
        case "lineTo":
          f.push(new THREE.Vector2(y[0], y[1]));
          break;
        case "quadraticCurveTo":
          (t = y[2]),
            (i = y[3]),
            (o = y[0]),
            (a = y[1]),
            f.length > 0
              ? ((s = (h = f[f.length - 1]).x), (l = h.y))
              : ((s = (h = this.actions[m - 1].args)[h.length - 2]),
                (l = h[h.length - 1]));
          for (var T = 1; T <= e; T++) {
            (c = p((A = T / e), s, o, t)),
              (u = p(A, l, a, i)),
              f.push(new THREE.Vector2(c, u));
          }
          break;
        case "bezierCurveTo":
          (t = y[4]),
            (i = y[5]),
            (o = y[0]),
            (a = y[1]),
            (r = y[2]),
            (n = y[3]),
            f.length > 0
              ? ((s = (h = f[f.length - 1]).x), (l = h.y))
              : ((s = (h = this.actions[m - 1].args)[h.length - 2]),
                (l = h[h.length - 1]));
          for (T = 1; T <= e; T++) {
            (c = d((A = T / e), s, o, r, t)),
              (u = d(A, l, a, n, i)),
              f.push(new THREE.Vector2(c, u));
          }
          break;
        case "splineThru":
          h = this.actions[m - 1].args;
          var R = [new THREE.Vector2(h[h.length - 2], h[h.length - 1])],
            x = e * y[0].length;
          R = R.concat(y[0]);
          var H = new THREE.SplineCurve(R);
          for (T = 1; T <= x; T++) f.push(H.getPointAt(T / x));
          break;
        case "arc":
          var b = y[0],
            w = y[1],
            q = y[2],
            M = y[3],
            _ = y[4],
            S = !!y[5],
            C = _ - M,
            L = 2 * e;
          for (T = 1; T <= L; T++) {
            var A = T / L;
            S || (A = 1 - A),
              (k = M + A * C),
              (c = b + q * Math.cos(k)),
              (u = w + q * Math.sin(k)),
              f.push(new THREE.Vector2(c, u));
          }
          break;
        case "ellipse":
          (b = y[0]), (w = y[1]);
          var k,
            D,
            P,
            I = y[2],
            V = y[3],
            O = ((M = y[4]), (_ = y[5]), (S = !!y[6]), y[7]);
          (C = _ - M), (L = 2 * e);
          0 !== O && ((D = Math.cos(O)), (P = Math.sin(O)));
          for (T = 1; T <= L; T++) {
            A = T / L;
            if (
              (S || (A = 1 - A),
              (k = M + A * C),
              (c = b + I * Math.cos(k)),
              (u = w + V * Math.sin(k)),
              0 !== O)
            ) {
              var F = c;
              (c = (F - b) * D - (u - w) * P + b),
                (u = (F - b) * P + (u - w) * D + w);
            }
            f.push(new THREE.Vector2(c, u));
          }
      }
    }
    var z = f[f.length - 1];
    return (
      Math.abs(z.x - f[0].x) < Number.EPSILON &&
        Math.abs(z.y - f[0].y) < Number.EPSILON &&
        f.splice(f.length - 1, 1),
      this.autoClose && f.push(f[0]),
      f
    );
  }),
  (THREE.Path.prototype.toShapes = function (e, t) {
    function i(e) {
      for (var t = [], i = new THREE.Path(), r = 0, n = e.length; r < n; r++) {
        var o = e[r],
          a = o.args,
          s = o.action;
        "moveTo" === s &&
          0 !== i.actions.length &&
          (t.push(i), (i = new THREE.Path())),
          i[s].apply(i, a);
      }
      return 0 !== i.actions.length && t.push(i), t;
    }
    function r(e) {
      for (var t = [], i = 0, r = e.length; i < r; i++) {
        var n = e[i],
          o = new THREE.Shape();
        (o.actions = n.actions), (o.curves = n.curves), t.push(o);
      }
      return t;
    }
    function n(e, t) {
      for (var i = t.length, r = !1, n = i - 1, o = 0; o < i; n = o++) {
        var a = t[n],
          s = t[o],
          l = s.x - a.x,
          h = s.y - a.y;
        if (Math.abs(h) > Number.EPSILON) {
          if (
            (h < 0 && ((a = t[o]), (l = -l), (s = t[n]), (h = -h)),
            e.y < a.y || e.y > s.y)
          )
            continue;
          if (e.y === a.y) {
            if (e.x === a.x) return !0;
          } else {
            var c = h * (e.x - a.x) - l * (e.y - a.y);
            if (0 === c) return !0;
            if (c < 0) continue;
            r = !r;
          }
        } else {
          if (e.y !== a.y) continue;
          if ((s.x <= e.x && e.x <= a.x) || (a.x <= e.x && e.x <= s.x))
            return !0;
        }
      }
      return r;
    }
    var o = THREE.ShapeUtils.isClockWise,
      a = i(this.actions);
    if (0 === a.length) return [];
    if (!0 === t) return r(a);
    var s,
      l,
      h,
      c = [];
    if (1 === a.length)
      return (
        (l = a[0]),
        ((h = new THREE.Shape()).actions = l.actions),
        (h.curves = l.curves),
        c.push(h),
        c
      );
    var u = !o(a[0].getPoints());
    u = e ? !u : u;
    var p,
      d,
      f = [],
      m = [],
      E = [],
      g = 0;
    (m[g] = void 0), (E[g] = []);
    for (var v = 0, y = a.length; v < y; v++)
      (s = o((p = (l = a[v]).getPoints()))),
        (s = e ? !s : s)
          ? (!u && m[g] && g++,
            (m[g] = {
              s: new THREE.Shape(),
              p: p,
            }),
            (m[g].s.actions = l.actions),
            (m[g].s.curves = l.curves),
            u && g++,
            (E[g] = []))
          : E[g].push({
              h: l,
              p: p[0],
            });
    if (!m[0]) return r(a);
    if (m.length > 1) {
      for (var T = !1, R = [], x = 0, H = m.length; x < H; x++) f[x] = [];
      for (x = 0, H = m.length; x < H; x++)
        for (var b = E[x], w = 0; w < b.length; w++) {
          for (var q = b[w], M = !0, _ = 0; _ < m.length; _++)
            n(q.p, m[_].p) &&
              (x !== _ &&
                R.push({
                  froms: x,
                  tos: _,
                  hole: w,
                }),
              M ? ((M = !1), f[_].push(q)) : (T = !0));
          M && f[x].push(q);
        }
      R.length > 0 && (T || (E = f));
    }
    v = 0;
    for (var S = m.length; v < S; v++) {
      (h = m[v].s), c.push(h);
      for (var C = 0, L = (d = E[v]).length; C < L; C++) h.holes.push(d[C].h);
    }
    return c;
  }),
  (THREE.Shape = function () {
    THREE.Path.apply(this, arguments), (this.holes = []);
  }),
  (THREE.Shape.prototype = Object.create(THREE.Path.prototype)),
  (THREE.Shape.prototype.constructor = THREE.Shape),
  (THREE.Shape.prototype.extrude = function (e) {
    return new THREE.ExtrudeGeometry(this, e);
  }),
  (THREE.Shape.prototype.makeGeometry = function (e) {
    return new THREE.ShapeGeometry(this, e);
  }),
  (THREE.Shape.prototype.getPointsHoles = function (e) {
    for (var t = [], i = 0, r = this.holes.length; i < r; i++)
      t[i] = this.holes[i].getPoints(e);
    return t;
  }),
  (THREE.Shape.prototype.extractAllPoints = function (e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e),
    };
  }),
  (THREE.Shape.prototype.extractPoints = function (e) {
    return this.extractAllPoints(e);
  }),
  (THREE.LineCurve = function (e, t) {
    (this.v1 = e), (this.v2 = t);
  }),
  (THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.LineCurve.prototype.constructor = THREE.LineCurve),
  (THREE.LineCurve.prototype.getPoint = function (e) {
    var t = this.v2.clone().sub(this.v1);
    return t.multiplyScalar(e).add(this.v1), t;
  }),
  (THREE.LineCurve.prototype.getPointAt = function (e) {
    return this.getPoint(e);
  }),
  (THREE.LineCurve.prototype.getTangent = function () {
    return this.v2.clone().sub(this.v1).normalize();
  }),
  (THREE.QuadraticBezierCurve = function (e, t, i) {
    (this.v0 = e), (this.v1 = t), (this.v2 = i);
  }),
  (THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.QuadraticBezierCurve.prototype.constructor =
    THREE.QuadraticBezierCurve),
  (THREE.QuadraticBezierCurve.prototype.getPoint = function (e) {
    var t = THREE.ShapeUtils.b2;
    return new THREE.Vector2(
      t(e, this.v0.x, this.v1.x, this.v2.x),
      t(e, this.v0.y, this.v1.y, this.v2.y)
    );
  }),
  (THREE.QuadraticBezierCurve.prototype.getTangent = function (e) {
    var t = THREE.CurveUtils.tangentQuadraticBezier;
    return new THREE.Vector2(
      t(e, this.v0.x, this.v1.x, this.v2.x),
      t(e, this.v0.y, this.v1.y, this.v2.y)
    ).normalize();
  }),
  (THREE.CubicBezierCurve = function (e, t, i, r) {
    (this.v0 = e), (this.v1 = t), (this.v2 = i), (this.v3 = r);
  }),
  (THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve),
  (THREE.CubicBezierCurve.prototype.getPoint = function (e) {
    var t = THREE.ShapeUtils.b3;
    return new THREE.Vector2(
      t(e, this.v0.x, this.v1.x, this.v2.x, this.v3.x),
      t(e, this.v0.y, this.v1.y, this.v2.y, this.v3.y)
    );
  }),
  (THREE.CubicBezierCurve.prototype.getTangent = function (e) {
    var t = THREE.CurveUtils.tangentCubicBezier;
    return new THREE.Vector2(
      t(e, this.v0.x, this.v1.x, this.v2.x, this.v3.x),
      t(e, this.v0.y, this.v1.y, this.v2.y, this.v3.y)
    ).normalize();
  }),
  (THREE.SplineCurve = function (e) {
    this.points = null == e ? [] : e;
  }),
  (THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.SplineCurve.prototype.constructor = THREE.SplineCurve),
  (THREE.SplineCurve.prototype.getPoint = function (e) {
    var t = this.points,
      i = (t.length - 1) * e,
      r = Math.floor(i),
      n = i - r,
      o = t[0 === r ? r : r - 1],
      a = t[r],
      s = t[r > t.length - 2 ? t.length - 1 : r + 1],
      l = t[r > t.length - 3 ? t.length - 1 : r + 2],
      h = THREE.CurveUtils.interpolate;
    return new THREE.Vector2(
      h(o.x, a.x, s.x, l.x, n),
      h(o.y, a.y, s.y, l.y, n)
    );
  }),
  (THREE.EllipseCurve = function (e, t, i, r, n, o, a, s) {
    (this.aX = e),
      (this.aY = t),
      (this.xRadius = i),
      (this.yRadius = r),
      (this.aStartAngle = n),
      (this.aEndAngle = o),
      (this.aClockwise = a),
      (this.aRotation = s || 0);
  }),
  (THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype)),
  (THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve),
  (THREE.EllipseCurve.prototype.getPoint = function (e) {
    var t,
      i = this.aEndAngle - this.aStartAngle;
    i < 0 && (i += 2 * Math.PI),
      i > 2 * Math.PI && (i -= 2 * Math.PI),
      (t =
        !0 === this.aClockwise
          ? this.aEndAngle + (1 - e) * (2 * Math.PI - i)
          : this.aStartAngle + e * i);
    var r = this.aX + this.xRadius * Math.cos(t),
      n = this.aY + this.yRadius * Math.sin(t);
    if (0 !== this.aRotation) {
      var o = Math.cos(this.aRotation),
        a = Math.sin(this.aRotation),
        s = r,
        l = n;
      (r = (s - this.aX) * o - (l - this.aY) * a + this.aX),
        (n = (s - this.aX) * a + (l - this.aY) * o + this.aY);
    }
    return new THREE.Vector2(r, n);
  }),
  (THREE.ArcCurve = function (e, t, i, r, n, o) {
    THREE.EllipseCurve.call(this, e, t, i, i, r, n, o);
  }),
  (THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype)),
  (THREE.ArcCurve.prototype.constructor = THREE.ArcCurve),
  (THREE.LineCurve3 = THREE.Curve.create(
    function (e, t) {
      (this.v1 = e), (this.v2 = t);
    },
    function (e) {
      var t = new THREE.Vector3();
      return (
        t.subVectors(this.v2, this.v1), t.multiplyScalar(e), t.add(this.v1), t
      );
    }
  )),
  (THREE.QuadraticBezierCurve3 = THREE.Curve.create(
    function (e, t, i) {
      (this.v0 = e), (this.v1 = t), (this.v2 = i);
    },
    function (e) {
      var t = THREE.ShapeUtils.b2;
      return new THREE.Vector3(
        t(e, this.v0.x, this.v1.x, this.v2.x),
        t(e, this.v0.y, this.v1.y, this.v2.y),
        t(e, this.v0.z, this.v1.z, this.v2.z)
      );
    }
  )),
  (THREE.CubicBezierCurve3 = THREE.Curve.create(
    function (e, t, i, r) {
      (this.v0 = e), (this.v1 = t), (this.v2 = i), (this.v3 = r);
    },
    function (e) {
      var t = THREE.ShapeUtils.b3;
      return new THREE.Vector3(
        t(e, this.v0.x, this.v1.x, this.v2.x, this.v3.x),
        t(e, this.v0.y, this.v1.y, this.v2.y, this.v3.y),
        t(e, this.v0.z, this.v1.z, this.v2.z, this.v3.z)
      );
    }
  )),
  (THREE.SplineCurve3 = THREE.Curve.create(
    function (e) {
      console.warn(
        "THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3"
      ),
        (this.points = null == e ? [] : e);
    },
    function (e) {
      var t = this.points,
        i = (t.length - 1) * e,
        r = Math.floor(i),
        n = i - r,
        o = t[0 == r ? r : r - 1],
        a = t[r],
        s = t[r > t.length - 2 ? t.length - 1 : r + 1],
        l = t[r > t.length - 3 ? t.length - 1 : r + 2],
        h = THREE.CurveUtils.interpolate;
      return new THREE.Vector3(
        h(o.x, a.x, s.x, l.x, n),
        h(o.y, a.y, s.y, l.y, n),
        h(o.z, a.z, s.z, l.z, n)
      );
    }
  )),
  (THREE.CatmullRomCurve3 = (function () {
    function e() {}
    var t = new THREE.Vector3(),
      i = new e(),
      r = new e(),
      n = new e();
    return (
      (e.prototype.init = function (e, t, i, r) {
        (this.c0 = e),
          (this.c1 = i),
          (this.c2 = -3 * e + 3 * t - 2 * i - r),
          (this.c3 = 2 * e - 2 * t + i + r);
      }),
      (e.prototype.initNonuniformCatmullRom = function (e, t, i, r, n, o, a) {
        var s = (t - e) / n - (i - e) / (n + o) + (i - t) / o,
          l = (i - t) / o - (r - t) / (o + a) + (r - i) / a;
        (s *= o), (l *= o), this.init(t, i, s, l);
      }),
      (e.prototype.initCatmullRom = function (e, t, i, r, n) {
        this.init(t, i, n * (i - e), n * (r - t));
      }),
      (e.prototype.calc = function (e) {
        var t = e * e,
          i = t * e;
        return this.c0 + this.c1 * e + this.c2 * t + this.c3 * i;
      }),
      THREE.Curve.create(
        function (e) {
          (this.points = e || []), (this.closed = !1);
        },
        function (e) {
          var o,
            a,
            s,
            l,
            h,
            c,
            u,
            p,
            d = this.points;
          if (
            ((l = d.length) < 2 &&
              console.log("duh, you need at least 2 points"),
            (s = (o = (l - (this.closed ? 0 : 1)) * e) - (a = Math.floor(o))),
            this.closed
              ? (a +=
                  a > 0
                    ? 0
                    : (Math.floor(Math.abs(a) / d.length) + 1) * d.length)
              : 0 === s && a === l - 1 && ((a = l - 2), (s = 1)),
            this.closed || a > 0
              ? (h = d[(a - 1) % l])
              : (t.subVectors(d[0], d[1]).add(d[0]), (h = t)),
            (c = d[a % l]),
            (u = d[(a + 1) % l]),
            this.closed || a + 2 < l
              ? (p = d[(a + 2) % l])
              : (t.subVectors(d[l - 1], d[l - 2]).add(d[l - 1]), (p = t)),
            void 0 === this.type ||
              "centripetal" === this.type ||
              "chordal" === this.type)
          ) {
            var f = "chordal" === this.type ? 0.5 : 0.25,
              m = Math.pow(h.distanceToSquared(c), f),
              E = Math.pow(c.distanceToSquared(u), f),
              g = Math.pow(u.distanceToSquared(p), f);
            E < 1e-4 && (E = 1),
              m < 1e-4 && (m = E),
              g < 1e-4 && (g = E),
              i.initNonuniformCatmullRom(h.x, c.x, u.x, p.x, m, E, g),
              r.initNonuniformCatmullRom(h.y, c.y, u.y, p.y, m, E, g),
              n.initNonuniformCatmullRom(h.z, c.z, u.z, p.z, m, E, g);
          } else if ("catmullrom" === this.type) {
            var v = void 0 !== this.tension ? this.tension : 0.5;
            i.initCatmullRom(h.x, c.x, u.x, p.x, v),
              r.initCatmullRom(h.y, c.y, u.y, p.y, v),
              n.initCatmullRom(h.z, c.z, u.z, p.z, v);
          }
          return new THREE.Vector3(i.calc(s), r.calc(s), n.calc(s));
        }
      )
    );
  })()),
  (THREE.ClosedSplineCurve3 = function (e) {
    console.warn(
      "THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3."
    ),
      THREE.CatmullRomCurve3.call(this, e),
      (this.type = "catmullrom"),
      (this.closed = !0);
  }),
  (THREE.ClosedSplineCurve3.prototype = Object.create(
    THREE.CatmullRomCurve3.prototype
  )),
  (THREE.BoxGeometry = function (e, t, i, r, n, o) {
    function a(e, t, i, r, n, o, a, l) {
      var h,
        c,
        u,
        p = s.widthSegments,
        d = s.heightSegments,
        f = n / 2,
        m = o / 2,
        E = s.vertices.length;
      ("x" === e && "y" === t) || ("y" === e && "x" === t)
        ? (h = "z")
        : ("x" === e && "z" === t) || ("z" === e && "x" === t)
        ? ((h = "y"), (d = s.depthSegments))
        : (("z" === e && "y" === t) || ("y" === e && "z" === t)) &&
          ((h = "x"), (p = s.depthSegments));
      var g = p + 1,
        v = d + 1,
        y = n / p,
        T = o / d,
        R = new THREE.Vector3();
      for (R[h] = a > 0 ? 1 : -1, u = 0; u < v; u++)
        for (c = 0; c < g; c++) {
          var x = new THREE.Vector3();
          (x[e] = (c * y - f) * i),
            (x[t] = (u * T - m) * r),
            (x[h] = a),
            s.vertices.push(x);
        }
      for (u = 0; u < d; u++)
        for (c = 0; c < p; c++) {
          var H = c + g * u,
            b = c + g * (u + 1),
            w = c + 1 + g * (u + 1),
            q = c + 1 + g * u,
            M = new THREE.Vector2(c / p, 1 - u / d),
            _ = new THREE.Vector2(c / p, 1 - (u + 1) / d),
            S = new THREE.Vector2((c + 1) / p, 1 - (u + 1) / d),
            C = new THREE.Vector2((c + 1) / p, 1 - u / d),
            L = new THREE.Face3(H + E, b + E, q + E);
          L.normal.copy(R),
            L.vertexNormals.push(R.clone(), R.clone(), R.clone()),
            (L.materialIndex = l),
            s.faces.push(L),
            s.faceVertexUvs[0].push([M, _, C]),
            (L = new THREE.Face3(b + E, w + E, q + E)).normal.copy(R),
            L.vertexNormals.push(R.clone(), R.clone(), R.clone()),
            (L.materialIndex = l),
            s.faces.push(L),
            s.faceVertexUvs[0].push([_.clone(), S, C.clone()]);
        }
    }
    THREE.Geometry.call(this),
      (this.type = "BoxGeometry"),
      (this.parameters = {
        width: e,
        height: t,
        depth: i,
        widthSegments: r,
        heightSegments: n,
        depthSegments: o,
      }),
      (this.widthSegments = r || 1),
      (this.heightSegments = n || 1),
      (this.depthSegments = o || 1);
    var s = this,
      l = e / 2,
      h = t / 2,
      c = i / 2;
    a("z", "y", -1, -1, i, t, l, 0),
      a("z", "y", 1, -1, i, t, -l, 1),
      a("x", "z", 1, 1, e, i, h, 2),
      a("x", "z", 1, -1, e, i, -h, 3),
      a("x", "y", 1, -1, e, t, c, 4),
      a("x", "y", -1, -1, e, t, -c, 5),
      this.mergeVertices();
  }),
  (THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry),
  (THREE.CubeGeometry = THREE.BoxGeometry),
  (THREE.CircleGeometry = function (e, t, i, r) {
    THREE.Geometry.call(this),
      (this.type = "CircleGeometry"),
      (this.parameters = {
        radius: e,
        segments: t,
        thetaStart: i,
        thetaLength: r,
      }),
      this.fromBufferGeometry(new THREE.CircleBufferGeometry(e, t, i, r));
  }),
  (THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry),
  (THREE.CircleBufferGeometry = function (e, t, i, r) {
    THREE.BufferGeometry.call(this),
      (this.type = "CircleBufferGeometry"),
      (this.parameters = {
        radius: e,
        segments: t,
        thetaStart: i,
        thetaLength: r,
      }),
      (e = e || 50),
      (t = void 0 !== t ? Math.max(3, t) : 8),
      (i = void 0 !== i ? i : 0),
      (r = void 0 !== r ? r : 2 * Math.PI);
    var n = t + 2,
      o = new Float32Array(3 * n),
      a = new Float32Array(3 * n),
      s = new Float32Array(2 * n);
    (a[2] = 1), (s[0] = 0.5), (s[1] = 0.5);
    for (var l = 0, h = 3, c = 2; l <= t; l++, h += 3, c += 2) {
      var u = i + (l / t) * r;
      (o[h] = e * Math.cos(u)),
        (o[h + 1] = e * Math.sin(u)),
        (a[h + 2] = 1),
        (s[c] = (o[h] / e + 1) / 2),
        (s[c + 1] = (o[h + 1] / e + 1) / 2);
    }
    var p = [];
    for (h = 1; h <= t; h++) p.push(h, h + 1, 0);
    this.setIndex(new THREE.BufferAttribute(new Uint16Array(p), 1)),
      this.addAttribute("position", new THREE.BufferAttribute(o, 3)),
      this.addAttribute("normal", new THREE.BufferAttribute(a, 3)),
      this.addAttribute("uv", new THREE.BufferAttribute(s, 2)),
      (this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), e));
  }),
  (THREE.CircleBufferGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.CircleBufferGeometry.prototype.constructor =
    THREE.CircleBufferGeometry),
  (THREE.CylinderGeometry = function (e, t, i, r, n, o, a, s) {
    THREE.Geometry.call(this),
      (this.type = "CylinderGeometry"),
      (this.parameters = {
        radiusTop: e,
        radiusBottom: t,
        height: i,
        radialSegments: r,
        heightSegments: n,
        openEnded: o,
        thetaStart: a,
        thetaLength: s,
      }),
      (e = void 0 !== e ? e : 20),
      (t = void 0 !== t ? t : 20),
      (i = void 0 !== i ? i : 100),
      (r = r || 8),
      (n = n || 1),
      (o = void 0 !== o && o),
      (a = void 0 !== a ? a : 0),
      (s = void 0 !== s ? s : 2 * Math.PI);
    var l,
      h,
      c = i / 2,
      u = [],
      p = [];
    for (h = 0; h <= n; h++) {
      var d = [],
        f = [],
        m = h / n,
        E = m * (t - e) + e;
      for (l = 0; l <= r; l++) {
        var g = l / r,
          v = new THREE.Vector3();
        (v.x = E * Math.sin(g * s + a)),
          (v.y = -m * i + c),
          (v.z = E * Math.cos(g * s + a)),
          this.vertices.push(v),
          d.push(this.vertices.length - 1),
          f.push(new THREE.Vector2(g, 1 - m));
      }
      u.push(d), p.push(f);
    }
    var y,
      T,
      R = (t - e) / i;
    for (l = 0; l < r; l++)
      for (
        0 !== e
          ? ((y = this.vertices[u[0][l]].clone()),
            (T = this.vertices[u[0][l + 1]].clone()))
          : ((y = this.vertices[u[1][l]].clone()),
            (T = this.vertices[u[1][l + 1]].clone())),
          y.setY(Math.sqrt(y.x * y.x + y.z * y.z) * R).normalize(),
          T.setY(Math.sqrt(T.x * T.x + T.z * T.z) * R).normalize(),
          h = 0;
        h < n;
        h++
      ) {
        var x = u[h][l],
          H = u[h + 1][l],
          b = u[h + 1][l + 1],
          w = u[h][l + 1],
          q = y.clone(),
          M = y.clone(),
          _ = T.clone(),
          S = T.clone(),
          C = p[h][l].clone(),
          L = p[h + 1][l].clone(),
          A = p[h + 1][l + 1].clone(),
          k = p[h][l + 1].clone();
        this.faces.push(new THREE.Face3(x, H, w, [q, M, S])),
          this.faceVertexUvs[0].push([C, L, k]),
          this.faces.push(new THREE.Face3(H, b, w, [M.clone(), _, S.clone()])),
          this.faceVertexUvs[0].push([L.clone(), A, k.clone()]);
      }
    if (!1 === o && e > 0)
      for (this.vertices.push(new THREE.Vector3(0, c, 0)), l = 0; l < r; l++) {
        (x = u[0][l]),
          (H = u[0][l + 1]),
          (b = this.vertices.length - 1),
          (q = new THREE.Vector3(0, 1, 0)),
          (M = new THREE.Vector3(0, 1, 0)),
          (_ = new THREE.Vector3(0, 1, 0)),
          (C = p[0][l].clone()),
          (L = p[0][l + 1].clone()),
          (A = new THREE.Vector2(L.x, 0));
        this.faces.push(new THREE.Face3(x, H, b, [q, M, _], void 0, 1)),
          this.faceVertexUvs[0].push([C, L, A]);
      }
    if (!1 === o && t > 0)
      for (this.vertices.push(new THREE.Vector3(0, -c, 0)), l = 0; l < r; l++) {
        (x = u[n][l + 1]),
          (H = u[n][l]),
          (b = this.vertices.length - 1),
          (q = new THREE.Vector3(0, -1, 0)),
          (M = new THREE.Vector3(0, -1, 0)),
          (_ = new THREE.Vector3(0, -1, 0)),
          (C = p[n][l + 1].clone()),
          (L = p[n][l].clone()),
          (A = new THREE.Vector2(L.x, 1));
        this.faces.push(new THREE.Face3(x, H, b, [q, M, _], void 0, 2)),
          this.faceVertexUvs[0].push([C, L, A]);
      }
    this.computeFaceNormals();
  }),
  (THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry),
  (THREE.EdgesGeometry = function (e, t) {
    function i(e, t) {
      return e - t;
    }
    THREE.BufferGeometry.call(this), (t = void 0 !== t ? t : 1);
    var r,
      n = Math.cos(THREE.Math.degToRad(t)),
      o = [0, 0],
      a = {},
      s = ["a", "b", "c"];
    e instanceof THREE.BufferGeometry
      ? (r = new THREE.Geometry()).fromBufferGeometry(e)
      : (r = e.clone()),
      r.mergeVertices(),
      r.computeFaceNormals();
    for (var l = r.vertices, h = r.faces, c = 0, u = h.length; c < u; c++)
      for (var p = h[c], d = 0; d < 3; d++) {
        (o[0] = p[s[d]]),
          (o[1] = p[s[(d + 1) % 3]]),
          o.sort(i),
          void 0 === a[(m = o.toString())]
            ? (a[m] = {
                vert1: o[0],
                vert2: o[1],
                face1: c,
                face2: void 0,
              })
            : (a[m].face2 = c);
      }
    var f = [];
    for (var m in a) {
      var E = a[m];
      if (void 0 === E.face2 || h[E.face1].normal.dot(h[E.face2].normal) <= n) {
        var g = l[E.vert1];
        f.push(g.x),
          f.push(g.y),
          f.push(g.z),
          (g = l[E.vert2]),
          f.push(g.x),
          f.push(g.y),
          f.push(g.z);
      }
    }
    this.addAttribute(
      "position",
      new THREE.BufferAttribute(new Float32Array(f), 3)
    );
  }),
  (THREE.EdgesGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry),
  (THREE.ExtrudeGeometry = function (e, t) {
    void 0 !== e
      ? (THREE.Geometry.call(this),
        (this.type = "ExtrudeGeometry"),
        (e = Array.isArray(e) ? e : [e]),
        this.addShapeList(e, t),
        this.computeFaceNormals())
      : (e = []);
  }),
  (THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry),
  (THREE.ExtrudeGeometry.prototype.addShapeList = function (e, t) {
    for (var i = e.length, r = 0; r < i; r++) {
      var n = e[r];
      this.addShape(n, t);
    }
  }),
  (THREE.ExtrudeGeometry.prototype.addShape = function (e, t) {
    function i(e, t, i) {
      return (
        t || console.error("THREE.ExtrudeGeometry: vec does not exist"),
        t.clone().multiplyScalar(i).add(e)
      );
    }
    function r(e, t, i) {
      var r,
        n,
        o = 1,
        a = e.x - t.x,
        s = e.y - t.y,
        l = i.x - e.x,
        h = i.y - e.y,
        c = a * a + s * s,
        u = a * h - s * l;
      if (Math.abs(u) > Number.EPSILON) {
        var p = Math.sqrt(c),
          d = Math.sqrt(l * l + h * h),
          f = t.x - s / p,
          m = t.y + a / p,
          E = ((i.x - h / d - f) * h - (i.y + l / d - m) * l) / (a * h - s * l),
          g = (r = f + a * E - e.x) * r + (n = m + s * E - e.y) * n;
        if (g <= 2) return new THREE.Vector2(r, n);
        o = Math.sqrt(g / 2);
      } else {
        var v = !1;
        a > Number.EPSILON
          ? l > Number.EPSILON && (v = !0)
          : a < -Number.EPSILON
          ? l < -Number.EPSILON && (v = !0)
          : Math.sign(s) === Math.sign(h) && (v = !0),
          v
            ? ((r = -s), (n = a), (o = Math.sqrt(c)))
            : ((r = a), (n = s), (o = Math.sqrt(c / 2)));
      }
      return new THREE.Vector2(r / o, n / o);
    }
    function n() {
      if (x) {
        var e = 0,
          t = B * e;
        for (G = 0; G < N; G++) l((U = D[G])[2] + t, U[1] + t, U[0] + t);
        for (t = B * (e = b + 2 * R), G = 0; G < N; G++)
          l((U = D[G])[0] + t, U[1] + t, U[2] + t);
      } else {
        for (G = 0; G < N; G++) l((U = D[G])[2], U[1], U[0]);
        for (G = 0; G < N; G++)
          l((U = D[G])[0] + B * b, U[1] + B * b, U[2] + B * b);
      }
    }
    function o() {
      var e = 0;
      for (a(P, e), e += P.length, E = 0, g = A.length; E < g; E++)
        a((m = A[E]), e), (e += m.length);
    }
    function a(e, t) {
      var i, r;
      for (G = e.length; --G >= 0; ) {
        (i = G), (r = G - 1) < 0 && (r = e.length - 1);
        var n = 0,
          o = b + 2 * R;
        for (n = 0; n < o; n++) {
          var a = B * n,
            s = B * (n + 1);
          h(t + i + a, t + r + a, t + r + s, t + i + s, e, n, o, i, r);
        }
      }
    }
    function s(e, t, i) {
      _.vertices.push(new THREE.Vector3(e, t, i));
    }
    function l(e, t, i) {
      (e += S),
        (t += S),
        (i += S),
        _.faces.push(new THREE.Face3(e, t, i, null, null, 0));
      var r = M.generateTopUV(_, e, t, i);
      _.faceVertexUvs[0].push(r);
    }
    function h(e, t, i, r) {
      (e += S),
        (t += S),
        (i += S),
        (r += S),
        _.faces.push(new THREE.Face3(e, t, r, null, null, 1)),
        _.faces.push(new THREE.Face3(t, i, r, null, null, 1));
      var n = M.generateSideWallUV(_, e, t, i, r);
      _.faceVertexUvs[0].push([n[0], n[1], n[3]]),
        _.faceVertexUvs[0].push([n[1], n[2], n[3]]);
    }
    var c,
      u,
      p,
      d,
      f,
      m,
      E,
      g,
      v = void 0 !== t.amount ? t.amount : 100,
      y = void 0 !== t.bevelThickness ? t.bevelThickness : 6,
      T = void 0 !== t.bevelSize ? t.bevelSize : y - 2,
      R = void 0 !== t.bevelSegments ? t.bevelSegments : 3,
      x = void 0 === t.bevelEnabled || t.bevelEnabled,
      H = void 0 !== t.curveSegments ? t.curveSegments : 12,
      b = void 0 !== t.steps ? t.steps : 1,
      w = t.extrudePath,
      q = !1,
      M =
        void 0 !== t.UVGenerator
          ? t.UVGenerator
          : THREE.ExtrudeGeometry.WorldUVGenerator;
    w &&
      ((c = w.getSpacedPoints(b)),
      (q = !0),
      (x = !1),
      (u =
        void 0 !== t.frames
          ? t.frames
          : new THREE.TubeGeometry.FrenetFrames(w, b, !1)),
      (p = new THREE.Vector3()),
      (d = new THREE.Vector3()),
      (f = new THREE.Vector3())),
      x || ((R = 0), (y = 0), (T = 0));
    var _ = this,
      S = this.vertices.length,
      C = e.extractPoints(H),
      L = C.shape,
      A = C.holes,
      k = !THREE.ShapeUtils.isClockWise(L);
    if (k) {
      for (L = L.reverse(), E = 0, g = A.length; E < g; E++)
        (m = A[E]), THREE.ShapeUtils.isClockWise(m) && (A[E] = m.reverse());
      k = !1;
    }
    var D = THREE.ShapeUtils.triangulateShape(L, A),
      P = L;
    for (E = 0, g = A.length; E < g; E++) (m = A[E]), (L = L.concat(m));
    for (
      var I,
        V,
        O,
        F,
        z,
        U,
        B = L.length,
        N = D.length,
        j = [],
        G = 0,
        W = P.length,
        X = W - 1,
        Q = G + 1;
      G < W;
      G++, X++, Q++
    )
      X === W && (X = 0), Q === W && (Q = 0), (j[G] = r(P[G], P[X], P[Q]));
    var $,
      Y,
      Z = [],
      K = j.concat();
    for (E = 0, g = A.length; E < g; E++) {
      for (
        m = A[E], $ = [], G = 0, X = (W = m.length) - 1, Q = G + 1;
        G < W;
        G++, X++, Q++
      )
        X === W && (X = 0), Q === W && (Q = 0), ($[G] = r(m[G], m[X], m[Q]));
      Z.push($), (K = K.concat($));
    }
    for (I = 0; I < R; I++) {
      for (
        F = y * (1 - (O = I / R)),
          V = T * Math.sin((O * Math.PI) / 2),
          G = 0,
          W = P.length;
        G < W;
        G++
      )
        s((z = i(P[G], j[G], V)).x, z.y, -F);
      for (E = 0, g = A.length; E < g; E++)
        for (m = A[E], $ = Z[E], G = 0, W = m.length; G < W; G++)
          s((z = i(m[G], $[G], V)).x, z.y, -F);
    }
    for (V = T, G = 0; G < B; G++)
      (z = x ? i(L[G], K[G], V) : L[G]),
        q
          ? (d.copy(u.normals[0]).multiplyScalar(z.x),
            p.copy(u.binormals[0]).multiplyScalar(z.y),
            f.copy(c[0]).add(d).add(p),
            s(f.x, f.y, f.z))
          : s(z.x, z.y, 0);
    for (Y = 1; Y <= b; Y++)
      for (G = 0; G < B; G++)
        (z = x ? i(L[G], K[G], V) : L[G]),
          q
            ? (d.copy(u.normals[Y]).multiplyScalar(z.x),
              p.copy(u.binormals[Y]).multiplyScalar(z.y),
              f.copy(c[Y]).add(d).add(p),
              s(f.x, f.y, f.z))
            : s(z.x, z.y, (v / b) * Y);
    for (I = R - 1; I >= 0; I--) {
      for (
        F = y * (1 - (O = I / R)),
          V = T * Math.sin((O * Math.PI) / 2),
          G = 0,
          W = P.length;
        G < W;
        G++
      )
        s((z = i(P[G], j[G], V)).x, z.y, v + F);
      for (E = 0, g = A.length; E < g; E++)
        for (m = A[E], $ = Z[E], G = 0, W = m.length; G < W; G++)
          (z = i(m[G], $[G], V)),
            q ? s(z.x, z.y + c[b - 1].y, c[b - 1].x + F) : s(z.x, z.y, v + F);
    }
    n(), o();
  }),
  (THREE.ExtrudeGeometry.WorldUVGenerator = {
    generateTopUV: function (e, t, i, r) {
      var n = e.vertices,
        o = n[t],
        a = n[i],
        s = n[r];
      return [
        new THREE.Vector2(o.x, o.y),
        new THREE.Vector2(a.x, a.y),
        new THREE.Vector2(s.x, s.y),
      ];
    },
    generateSideWallUV: function (e, t, i, r, n) {
      var o = e.vertices,
        a = o[t],
        s = o[i],
        l = o[r],
        h = o[n];
      return Math.abs(a.y - s.y) < 0.01
        ? [
            new THREE.Vector2(a.x, 1 - a.z),
            new THREE.Vector2(s.x, 1 - s.z),
            new THREE.Vector2(l.x, 1 - l.z),
            new THREE.Vector2(h.x, 1 - h.z),
          ]
        : [
            new THREE.Vector2(a.y, 1 - a.z),
            new THREE.Vector2(s.y, 1 - s.z),
            new THREE.Vector2(l.y, 1 - l.z),
            new THREE.Vector2(h.y, 1 - h.z),
          ];
    },
  }),
  (THREE.ShapeGeometry = function (e, t) {
    THREE.Geometry.call(this),
      (this.type = "ShapeGeometry"),
      !1 === Array.isArray(e) && (e = [e]),
      this.addShapeList(e, t),
      this.computeFaceNormals();
  }),
  (THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry),
  (THREE.ShapeGeometry.prototype.addShapeList = function (e, t) {
    for (var i = 0, r = e.length; i < r; i++) this.addShape(e[i], t);
    return this;
  }),
  (THREE.ShapeGeometry.prototype.addShape = function (e, t) {
    void 0 === t && (t = {});
    var i,
      r,
      n,
      o = void 0 !== t.curveSegments ? t.curveSegments : 12,
      a = t.material,
      s =
        void 0 === t.UVGenerator
          ? THREE.ExtrudeGeometry.WorldUVGenerator
          : t.UVGenerator,
      l = this.vertices.length,
      h = e.extractPoints(o),
      c = h.shape,
      u = h.holes,
      p = !THREE.ShapeUtils.isClockWise(c);
    if (p) {
      for (c = c.reverse(), i = 0, r = u.length; i < r; i++)
        (n = u[i]), THREE.ShapeUtils.isClockWise(n) && (u[i] = n.reverse());
      p = !1;
    }
    var d = THREE.ShapeUtils.triangulateShape(c, u);
    for (i = 0, r = u.length; i < r; i++) (n = u[i]), (c = c.concat(n));
    var f,
      m,
      E = c.length,
      g = d.length;
    for (i = 0; i < E; i++)
      (f = c[i]), this.vertices.push(new THREE.Vector3(f.x, f.y, 0));
    for (i = 0; i < g; i++) {
      var v = (m = d[i])[0] + l,
        y = m[1] + l,
        T = m[2] + l;
      this.faces.push(new THREE.Face3(v, y, T, null, null, a)),
        this.faceVertexUvs[0].push(s.generateTopUV(this, v, y, T));
    }
  }),
  (THREE.LatheGeometry = function (e, t, i, r) {
    THREE.Geometry.call(this),
      (this.type = "LatheGeometry"),
      (this.parameters = {
        points: e,
        segments: t,
        phiStart: i,
        phiLength: r,
      }),
      (t = t || 12),
      (i = i || 0),
      (r = r || 2 * Math.PI);
    for (var n = 1 / (e.length - 1), o = 1 / t, a = 0, s = t; a <= s; a++)
      for (
        var l = i + a * o * r,
          h = Math.sin(l),
          c = Math.cos(l),
          u = 0,
          p = e.length;
        u < p;
        u++
      ) {
        var d = e[u],
          f = new THREE.Vector3();
        (f.x = d.x * h), (f.y = d.y), (f.z = d.x * c), this.vertices.push(f);
      }
    var m = e.length;
    for (a = 0, s = t; a < s; a++)
      for (u = 0, p = e.length - 1; u < p; u++) {
        var E = u + m * a,
          g = E,
          v = E + m,
          y = E + 1 + m,
          T = E + 1,
          R = a * o,
          x = u * n,
          H = R + o,
          b = x + n;
        this.faces.push(new THREE.Face3(g, v, T)),
          this.faceVertexUvs[0].push([
            new THREE.Vector2(R, x),
            new THREE.Vector2(H, x),
            new THREE.Vector2(R, b),
          ]),
          this.faces.push(new THREE.Face3(v, y, T)),
          this.faceVertexUvs[0].push([
            new THREE.Vector2(H, x),
            new THREE.Vector2(H, b),
            new THREE.Vector2(R, b),
          ]);
      }
    this.mergeVertices(),
      this.computeFaceNormals(),
      this.computeVertexNormals();
  }),
  (THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry),
  (THREE.PlaneGeometry = function (e, t, i, r) {
    THREE.Geometry.call(this),
      (this.type = "PlaneGeometry"),
      (this.parameters = {
        width: e,
        height: t,
        widthSegments: i,
        heightSegments: r,
      }),
      this.fromBufferGeometry(new THREE.PlaneBufferGeometry(e, t, i, r));
  }),
  (THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry),
  (THREE.PlaneBufferGeometry = function (e, t, i, r) {
    THREE.BufferGeometry.call(this),
      (this.type = "PlaneBufferGeometry"),
      (this.parameters = {
        width: e,
        height: t,
        widthSegments: i,
        heightSegments: r,
      });
    for (
      var n = e / 2,
        o = t / 2,
        a = Math.floor(i) || 1,
        s = Math.floor(r) || 1,
        l = a + 1,
        h = s + 1,
        c = e / a,
        u = t / s,
        p = new Float32Array(l * h * 3),
        d = new Float32Array(l * h * 3),
        f = new Float32Array(l * h * 2),
        m = 0,
        E = 0,
        g = 0;
      g < h;
      g++
    )
      for (var v = g * u - o, y = 0; y < l; y++) {
        var T = y * c - n;
        (p[m] = T),
          (p[m + 1] = -v),
          (d[m + 2] = 1),
          (f[E] = y / a),
          (f[E + 1] = 1 - g / s),
          (m += 3),
          (E += 2);
      }
    m = 0;
    var R = new (p.length / 3 > 65535 ? Uint32Array : Uint16Array)(a * s * 6);
    for (g = 0; g < s; g++)
      for (y = 0; y < a; y++) {
        var x = y + l * g,
          H = y + l * (g + 1),
          b = y + 1 + l * (g + 1),
          w = y + 1 + l * g;
        (R[m] = x),
          (R[m + 1] = H),
          (R[m + 2] = w),
          (R[m + 3] = H),
          (R[m + 4] = b),
          (R[m + 5] = w),
          (m += 6);
      }
    this.setIndex(new THREE.BufferAttribute(R, 1)),
      this.addAttribute("position", new THREE.BufferAttribute(p, 3)),
      this.addAttribute("normal", new THREE.BufferAttribute(d, 3)),
      this.addAttribute("uv", new THREE.BufferAttribute(f, 2));
  }),
  (THREE.PlaneBufferGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry),
  (THREE.RingGeometry = function (e, t, i, r, n, o) {
    THREE.Geometry.call(this),
      (this.type = "RingGeometry"),
      (this.parameters = {
        innerRadius: e,
        outerRadius: t,
        thetaSegments: i,
        phiSegments: r,
        thetaStart: n,
        thetaLength: o,
      }),
      (e = e || 0),
      (t = t || 50),
      (n = void 0 !== n ? n : 0),
      (o = void 0 !== o ? o : 2 * Math.PI),
      (i = void 0 !== i ? Math.max(3, i) : 8);
    var a,
      s,
      l = [],
      h = e,
      c = (t - e) / (r = void 0 !== r ? Math.max(1, r) : 8);
    for (a = 0; a < r + 1; a++) {
      for (s = 0; s < i + 1; s++) {
        var u = new THREE.Vector3(),
          p = n + (s / i) * o;
        (u.x = h * Math.cos(p)),
          (u.y = h * Math.sin(p)),
          this.vertices.push(u),
          l.push(new THREE.Vector2((u.x / t + 1) / 2, (u.y / t + 1) / 2));
      }
      h += c;
    }
    var d = new THREE.Vector3(0, 0, 1);
    for (a = 0; a < r; a++) {
      var f = a * (i + 1);
      for (s = 0; s < i; s++) {
        var m = (p = s + f),
          E = p + i + 1,
          g = p + i + 2;
        this.faces.push(
          new THREE.Face3(m, E, g, [d.clone(), d.clone(), d.clone()])
        ),
          this.faceVertexUvs[0].push([
            l[m].clone(),
            l[E].clone(),
            l[g].clone(),
          ]),
          (m = p),
          (E = p + i + 2),
          (g = p + 1),
          this.faces.push(
            new THREE.Face3(m, E, g, [d.clone(), d.clone(), d.clone()])
          ),
          this.faceVertexUvs[0].push([
            l[m].clone(),
            l[E].clone(),
            l[g].clone(),
          ]);
      }
    }
    this.computeFaceNormals(),
      (this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), h));
  }),
  (THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.RingGeometry.prototype.constructor = THREE.RingGeometry),
  (THREE.SphereGeometry = function (e, t, i, r, n, o, a) {
    THREE.Geometry.call(this),
      (this.type = "SphereGeometry"),
      (this.parameters = {
        radius: e,
        widthSegments: t,
        heightSegments: i,
        phiStart: r,
        phiLength: n,
        thetaStart: o,
        thetaLength: a,
      }),
      this.fromBufferGeometry(
        new THREE.SphereBufferGeometry(e, t, i, r, n, o, a)
      );
  }),
  (THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry),
  (THREE.SphereBufferGeometry = function (e, t, i, r, n, o, a) {
    THREE.BufferGeometry.call(this),
      (this.type = "SphereBufferGeometry"),
      (this.parameters = {
        radius: e,
        widthSegments: t,
        heightSegments: i,
        phiStart: r,
        phiLength: n,
        thetaStart: o,
        thetaLength: a,
      }),
      (e = e || 50),
      (t = Math.max(3, Math.floor(t) || 8)),
      (i = Math.max(2, Math.floor(i) || 6)),
      (r = void 0 !== r ? r : 0),
      (n = void 0 !== n ? n : 2 * Math.PI);
    for (
      var s = (o = void 0 !== o ? o : 0) + (a = void 0 !== a ? a : Math.PI),
        l = (t + 1) * (i + 1),
        h = new THREE.BufferAttribute(new Float32Array(3 * l), 3),
        c = new THREE.BufferAttribute(new Float32Array(3 * l), 3),
        u = new THREE.BufferAttribute(new Float32Array(2 * l), 2),
        p = 0,
        d = [],
        f = new THREE.Vector3(),
        m = 0;
      m <= i;
      m++
    ) {
      for (var E = [], g = m / i, v = 0; v <= t; v++) {
        var y = v / t,
          T = -e * Math.cos(r + y * n) * Math.sin(o + g * a),
          R = e * Math.cos(o + g * a),
          x = e * Math.sin(r + y * n) * Math.sin(o + g * a);
        f.set(T, R, x).normalize(),
          h.setXYZ(p, T, R, x),
          c.setXYZ(p, f.x, f.y, f.z),
          u.setXY(p, y, 1 - g),
          E.push(p),
          p++;
      }
      d.push(E);
    }
    var H = [];
    for (m = 0; m < i; m++)
      for (v = 0; v < t; v++) {
        var b = d[m][v + 1],
          w = d[m][v],
          q = d[m + 1][v],
          M = d[m + 1][v + 1];
        (0 !== m || o > 0) && H.push(b, w, M),
          (m !== i - 1 || s < Math.PI) && H.push(w, q, M);
      }
    this.setIndex(
      new (h.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute)(
        H,
        1
      )
    ),
      this.addAttribute("position", h),
      this.addAttribute("normal", c),
      this.addAttribute("uv", u),
      (this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), e));
  }),
  (THREE.SphereBufferGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.SphereBufferGeometry.prototype.constructor =
    THREE.SphereBufferGeometry),
  (THREE.TextGeometry = function (e, t) {
    var i = (t = t || {}).font;
    if (i instanceof THREE.Font == !1)
      return (
        console.error(
          "THREE.TextGeometry: font parameter is not an instance of THREE.Font."
        ),
        new THREE.Geometry()
      );
    var r = i.generateShapes(e, t.size, t.curveSegments);
    (t.amount = void 0 !== t.height ? t.height : 50),
      void 0 === t.bevelThickness && (t.bevelThickness = 10),
      void 0 === t.bevelSize && (t.bevelSize = 8),
      void 0 === t.bevelEnabled && (t.bevelEnabled = !1),
      THREE.ExtrudeGeometry.call(this, r, t),
      (this.type = "TextGeometry");
  }),
  (THREE.TextGeometry.prototype = Object.create(
    THREE.ExtrudeGeometry.prototype
  )),
  (THREE.TextGeometry.prototype.constructor = THREE.TextGeometry),
  (THREE.TorusGeometry = function (e, t, i, r, n) {
    THREE.Geometry.call(this),
      (this.type = "TorusGeometry"),
      (this.parameters = {
        radius: e,
        tube: t,
        radialSegments: i,
        tubularSegments: r,
        arc: n,
      }),
      (e = e || 100),
      (t = t || 40),
      (i = i || 8),
      (r = r || 6),
      (n = n || 2 * Math.PI);
    for (var o = new THREE.Vector3(), a = [], s = [], l = 0; l <= i; l++)
      for (var h = 0; h <= r; h++) {
        var c = (h / r) * n,
          u = (l / i) * Math.PI * 2;
        (o.x = e * Math.cos(c)), (o.y = e * Math.sin(c));
        var p = new THREE.Vector3();
        (p.x = (e + t * Math.cos(u)) * Math.cos(c)),
          (p.y = (e + t * Math.cos(u)) * Math.sin(c)),
          (p.z = t * Math.sin(u)),
          this.vertices.push(p),
          a.push(new THREE.Vector2(h / r, l / i)),
          s.push(p.clone().sub(o).normalize());
      }
    for (l = 1; l <= i; l++)
      for (h = 1; h <= r; h++) {
        var d = (r + 1) * l + h - 1,
          f = (r + 1) * (l - 1) + h - 1,
          m = (r + 1) * (l - 1) + h,
          E = (r + 1) * l + h,
          g = new THREE.Face3(d, f, E, [
            s[d].clone(),
            s[f].clone(),
            s[E].clone(),
          ]);
        this.faces.push(g),
          this.faceVertexUvs[0].push([
            a[d].clone(),
            a[f].clone(),
            a[E].clone(),
          ]),
          (g = new THREE.Face3(f, m, E, [
            s[f].clone(),
            s[m].clone(),
            s[E].clone(),
          ])),
          this.faces.push(g),
          this.faceVertexUvs[0].push([
            a[f].clone(),
            a[m].clone(),
            a[E].clone(),
          ]);
      }
    this.computeFaceNormals();
  }),
  (THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry),
  (THREE.TorusKnotGeometry = function (e, t, i, r, n, o, a) {
    function s(e, t, i, r, n) {
      var o = Math.cos(e),
        a = Math.sin(e),
        s = (t / i) * e,
        l = Math.cos(s),
        h = r * (2 + l) * 0.5 * o,
        c = r * (2 + l) * a * 0.5,
        u = n * r * Math.sin(s) * 0.5;
      return new THREE.Vector3(h, c, u);
    }
    THREE.Geometry.call(this),
      (this.type = "TorusKnotGeometry"),
      (this.parameters = {
        radius: e,
        tube: t,
        radialSegments: i,
        tubularSegments: r,
        p: n,
        q: o,
        heightScale: a,
      }),
      (e = e || 100),
      (t = t || 40),
      (i = i || 64),
      (r = r || 8),
      (n = n || 2),
      (o = o || 3),
      (a = a || 1);
    for (
      var l = new Array(i),
        h = new THREE.Vector3(),
        c = new THREE.Vector3(),
        u = new THREE.Vector3(),
        p = 0;
      p < i;
      ++p
    ) {
      l[p] = new Array(r);
      var d = (p / i) * 2 * n * Math.PI,
        f = s(d, o, n, e, a),
        m = s(d + 0.01, o, n, e, a);
      h.subVectors(m, f),
        c.addVectors(m, f),
        u.crossVectors(h, c),
        c.crossVectors(u, h),
        u.normalize(),
        c.normalize();
      for (var E = 0; E < r; ++E) {
        var g = (E / r) * 2 * Math.PI,
          v = -t * Math.cos(g),
          y = t * Math.sin(g),
          T = new THREE.Vector3();
        (T.x = f.x + v * c.x + y * u.x),
          (T.y = f.y + v * c.y + y * u.y),
          (T.z = f.z + v * c.z + y * u.z),
          (l[p][E] = this.vertices.push(T) - 1);
      }
    }
    for (p = 0; p < i; ++p)
      for (E = 0; E < r; ++E) {
        var R = (p + 1) % i,
          x = (E + 1) % r,
          H = l[p][E],
          b = l[R][E],
          w = l[R][x],
          q = l[p][x],
          M = new THREE.Vector2(p / i, E / r),
          _ = new THREE.Vector2((p + 1) / i, E / r),
          S = new THREE.Vector2((p + 1) / i, (E + 1) / r),
          C = new THREE.Vector2(p / i, (E + 1) / r);
        this.faces.push(new THREE.Face3(H, b, q)),
          this.faceVertexUvs[0].push([M, _, C]),
          this.faces.push(new THREE.Face3(b, w, q)),
          this.faceVertexUvs[0].push([_.clone(), S, C.clone()]);
      }
    this.computeFaceNormals(), this.computeVertexNormals();
  }),
  (THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry),
  (THREE.TubeGeometry = function (e, t, i, r, n, o) {
    function a(e, t, i) {
      return _.vertices.push(new THREE.Vector3(e, t, i)) - 1;
    }
    THREE.Geometry.call(this),
      (this.type = "TubeGeometry"),
      (this.parameters = {
        path: e,
        segments: t,
        radius: i,
        radialSegments: r,
        closed: n,
        taper: o,
      }),
      (t = t || 64),
      (i = i || 1),
      (r = r || 8),
      (n = n || !1),
      (o = o || THREE.TubeGeometry.NoTaper);
    var s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E,
      g,
      v,
      y,
      T,
      R,
      x,
      H,
      b,
      w,
      q,
      M = [],
      _ = this,
      S = t + 1,
      C = new THREE.Vector3(),
      L = new THREE.TubeGeometry.FrenetFrames(e, t, n),
      A = L.tangents,
      k = L.normals,
      D = L.binormals;
    for (
      this.tangents = A, this.normals = k, this.binormals = D, m = 0;
      m < S;
      m++
    )
      for (
        M[m] = [],
          h = m / (S - 1),
          f = e.getPointAt(h),
          A[m],
          s = k[m],
          l = D[m],
          u = i * o(h),
          E = 0;
        E < r;
        E++
      )
        (c = (E / r) * 2 * Math.PI),
          (p = -u * Math.cos(c)),
          (d = u * Math.sin(c)),
          C.copy(f),
          (C.x += p * s.x + d * l.x),
          (C.y += p * s.y + d * l.y),
          (C.z += p * s.z + d * l.z),
          (M[m][E] = a(C.x, C.y, C.z));
    for (m = 0; m < t; m++)
      for (E = 0; E < r; E++)
        (g = n ? (m + 1) % t : m + 1),
          (v = (E + 1) % r),
          (y = M[m][E]),
          (T = M[g][E]),
          (R = M[g][v]),
          (x = M[m][v]),
          (H = new THREE.Vector2(m / t, E / r)),
          (b = new THREE.Vector2((m + 1) / t, E / r)),
          (w = new THREE.Vector2((m + 1) / t, (E + 1) / r)),
          (q = new THREE.Vector2(m / t, (E + 1) / r)),
          this.faces.push(new THREE.Face3(y, T, x)),
          this.faceVertexUvs[0].push([H, b, q]),
          this.faces.push(new THREE.Face3(T, R, x)),
          this.faceVertexUvs[0].push([b.clone(), w, q.clone()]);
    this.computeFaceNormals(), this.computeVertexNormals();
  }),
  (THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype)),
  (THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry),
  (THREE.TubeGeometry.NoTaper = function () {
    return 1;
  }),
  (THREE.TubeGeometry.SinusoidalTaper = function (e) {
    return Math.sin(Math.PI * e);
  }),
  (THREE.TubeGeometry.FrenetFrames = function (e, t, i) {
    function r() {
      (d[0] = new THREE.Vector3()),
        (f[0] = new THREE.Vector3()),
        (o = Number.MAX_VALUE),
        (a = Math.abs(p[0].x)),
        (s = Math.abs(p[0].y)),
        (l = Math.abs(p[0].z)),
        a <= o && ((o = a), u.set(1, 0, 0)),
        s <= o && ((o = s), u.set(0, 1, 0)),
        l <= o && u.set(0, 0, 1),
        m.crossVectors(p[0], u).normalize(),
        d[0].crossVectors(p[0], m),
        f[0].crossVectors(p[0], d[0]);
    }
    var n,
      o,
      a,
      s,
      l,
      h,
      c,
      u = new THREE.Vector3(),
      p = [],
      d = [],
      f = [],
      m = new THREE.Vector3(),
      E = new THREE.Matrix4(),
      g = t + 1;
    for (
      this.tangents = p, this.normals = d, this.binormals = f, h = 0;
      h < g;
      h++
    )
      (c = h / (g - 1)), (p[h] = e.getTangentAt(c)), p[h].normalize();
    for (r(), h = 1; h < g; h++)
      (d[h] = d[h - 1].clone()),
        (f[h] = f[h - 1].clone()),
        m.crossVectors(p[h - 1], p[h]),
        m.length() > Number.EPSILON &&
          (m.normalize(),
          (n = Math.acos(THREE.Math.clamp(p[h - 1].dot(p[h]), -1, 1))),
          d[h].applyMatrix4(E.makeRotationAxis(m, n))),
        f[h].crossVectors(p[h], d[h]);
    if (i)
      for (
        n = Math.acos(THREE.Math.clamp(d[0].dot(d[g - 1]), -1, 1)),
          n /= g - 1,
          p[0].dot(m.crossVectors(d[0], d[g - 1])) > 0 && (n = -n),
          h = 1;
        h < g;
        h++
      )
        d[h].applyMatrix4(E.makeRotationAxis(p[h], n * h)),
          f[h].crossVectors(p[h], d[h]);
  }),
  (THREE.PolyhedronGeometry = function (e, t, i, r) {
    function n(e) {
      var t = e.normalize().clone();
      t.index = c.vertices.push(t) - 1;
      var i = s(e) / 2 / Math.PI + 0.5,
        r = l(e) / Math.PI + 0.5;
      return (t.uv = new THREE.Vector2(i, 1 - r)), t;
    }
    function o(e, t, i, r) {
      var n = new THREE.Face3(
        e.index,
        t.index,
        i.index,
        [e.clone(), t.clone(), i.clone()],
        void 0,
        r
      );
      c.faces.push(n), y.copy(e).add(t).add(i).divideScalar(3);
      var o = s(y);
      c.faceVertexUvs[0].push([h(e.uv, e, o), h(t.uv, t, o), h(i.uv, i, o)]);
    }
    function a(e, t) {
      for (
        var i = Math.pow(2, t),
          r = n(c.vertices[e.a]),
          a = n(c.vertices[e.b]),
          s = n(c.vertices[e.c]),
          l = [],
          h = e.materialIndex,
          u = 0;
        u <= i;
        u++
      ) {
        l[u] = [];
        for (
          var p = n(r.clone().lerp(s, u / i)),
            d = n(a.clone().lerp(s, u / i)),
            f = i - u,
            m = 0;
          m <= f;
          m++
        )
          l[u][m] = 0 === m && u === i ? p : n(p.clone().lerp(d, m / f));
      }
      for (u = 0; u < i; u++)
        for (m = 0; m < 2 * (i - u) - 1; m++) {
          var E = Math.floor(m / 2);
          m % 2 == 0
            ? o(l[u][E + 1], l[u + 1][E], l[u][E], h)
            : o(l[u][E + 1], l[u + 1][E + 1], l[u + 1][E], h);
        }
    }
    function s(e) {
      return Math.atan2(e.z, -e.x);
    }
    function l(e) {
      return Math.atan2(-e.y, Math.sqrt(e.x * e.x + e.z * e.z));
    }
    function h(e, t, i) {
      return (
        i < 0 && 1 === e.x && (e = new THREE.Vector2(e.x - 1, e.y)),
        0 === t.x &&
          0 === t.z &&
          (e = new THREE.Vector2(i / 2 / Math.PI + 0.5, e.y)),
        e.clone()
      );
    }
    THREE.Geometry.call(this),
      (this.type = "PolyhedronGeometry"),
      (this.parameters = {
        vertices: e,
        indices: t,
        radius: i,
        detail: r,
      }),
      (i = i || 1),
      (r = r || 0);
    for (var c = this, u = 0, p = e.length; u < p; u += 3)
      n(new THREE.Vector3(e[u], e[u + 1], e[u + 2]));
    var d = this.vertices,
      f = [],
      m = ((u = 0), 0);
    for (p = t.length; u < p; u += 3, m++) {
      var E = d[t[u]],
        g = d[t[u + 1]],
        v = d[t[u + 2]];
      f[m] = new THREE.Face3(
        E.index,
        g.index,
        v.index,
        [E.clone(), g.clone(), v.clone()],
        void 0,
        m
      );
    }
    var y = new THREE.Vector3();
    for (u = 0, p = f.length; u < p; u++) a(f[u], r);
    for (u = 0, p = this.faceVertexUvs[0].length; u < p; u++) {
      var T = this.faceVertexUvs[0][u],
        R = T[0].x,
        x = T[1].x,
        H = T[2].x,
        b = Math.max(R, x, H),
        w = Math.min(R, x, H);
      b > 0.9 &&
        w < 0.1 &&
        (R < 0.2 && (T[0].x += 1),
        x < 0.2 && (T[1].x += 1),
        H < 0.2 && (T[2].x += 1));
    }
    for (u = 0, p = this.vertices.length; u < p; u++)
      this.vertices[u].multiplyScalar(i);
    this.mergeVertices(),
      this.computeFaceNormals(),
      (this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), i));
  }),
  (THREE.PolyhedronGeometry.prototype = Object.create(
    THREE.Geometry.prototype
  )),
  (THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry),
  (THREE.DodecahedronGeometry = function (e, t) {
    var i = (1 + Math.sqrt(5)) / 2,
      r = 1 / i,
      n = [
        -1,
        -1,
        -1,
        -1,
        -1,
        1,
        -1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        0,
        -r,
        -i,
        0,
        -r,
        i,
        0,
        r,
        -i,
        0,
        r,
        i,
        -r,
        -i,
        0,
        -r,
        i,
        0,
        r,
        -i,
        0,
        r,
        i,
        0,
        -i,
        0,
        -r,
        i,
        0,
        -r,
        -i,
        0,
        r,
        i,
        0,
        r,
      ],
      o = [
        3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8,
        17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18,
        0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13,
        18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5,
        11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14,
        5, 1, 5, 9,
      ];
    THREE.PolyhedronGeometry.call(this, n, o, e, t),
      (this.type = "DodecahedronGeometry"),
      (this.parameters = {
        radius: e,
        detail: t,
      });
  }),
  (THREE.DodecahedronGeometry.prototype = Object.create(
    THREE.PolyhedronGeometry.prototype
  )),
  (THREE.DodecahedronGeometry.prototype.constructor =
    THREE.DodecahedronGeometry),
  (THREE.IcosahedronGeometry = function (e, t) {
    var i = (1 + Math.sqrt(5)) / 2,
      r = [
        -1,
        i,
        0,
        1,
        i,
        0,
        -1,
        -i,
        0,
        1,
        -i,
        0,
        0,
        -1,
        i,
        0,
        1,
        i,
        0,
        -1,
        -i,
        0,
        1,
        -i,
        i,
        0,
        -1,
        i,
        0,
        1,
        -i,
        0,
        -1,
        -i,
        0,
        1,
      ],
      n = [
        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11,
        10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9,
        4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1,
      ];
    THREE.PolyhedronGeometry.call(this, r, n, e, t),
      (this.type = "IcosahedronGeometry"),
      (this.parameters = {
        radius: e,
        detail: t,
      });
  }),
  (THREE.IcosahedronGeometry.prototype = Object.create(
    THREE.PolyhedronGeometry.prototype
  ));
(THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry),
  (THREE.OctahedronGeometry = function (e, t) {
    var i = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1],
      r = [
        0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2,
      ];
    THREE.PolyhedronGeometry.call(this, i, r, e, t),
      (this.type = "OctahedronGeometry"),
      (this.parameters = {
        radius: e,
        detail: t,
      });
  }),
  (THREE.OctahedronGeometry.prototype = Object.create(
    THREE.PolyhedronGeometry.prototype
  )),
  (THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry),
  (THREE.TetrahedronGeometry = function (e, t) {
    var i = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1],
      r = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
    THREE.PolyhedronGeometry.call(this, i, r, e, t),
      (this.type = "TetrahedronGeometry"),
      (this.parameters = {
        radius: e,
        detail: t,
      });
  }),
  (THREE.TetrahedronGeometry.prototype = Object.create(
    THREE.PolyhedronGeometry.prototype
  )),
  (THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry),
  (THREE.ParametricGeometry = function (e, t, i) {
    THREE.Geometry.call(this),
      (this.type = "ParametricGeometry"),
      (this.parameters = {
        func: e,
        slices: t,
        stacks: i,
      });
    var r,
      n,
      o,
      a,
      s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m = this.vertices,
      E = this.faces,
      g = this.faceVertexUvs[0],
      v = t + 1;
    for (r = 0; r <= i; r++)
      for (a = r / i, n = 0; n <= t; n++) (o = e(n / t, a)), m.push(o);
    for (r = 0; r < i; r++)
      for (n = 0; n < t; n++)
        (s = r * v + n),
          (l = r * v + n + 1),
          (h = (r + 1) * v + n + 1),
          (c = (r + 1) * v + n),
          (u = new THREE.Vector2(n / t, r / i)),
          (p = new THREE.Vector2((n + 1) / t, r / i)),
          (d = new THREE.Vector2((n + 1) / t, (r + 1) / i)),
          (f = new THREE.Vector2(n / t, (r + 1) / i)),
          E.push(new THREE.Face3(s, l, c)),
          g.push([u, p, f]),
          E.push(new THREE.Face3(l, h, c)),
          g.push([p.clone(), d, f.clone()]);
    this.computeFaceNormals(), this.computeVertexNormals();
  }),
  (THREE.ParametricGeometry.prototype = Object.create(
    THREE.Geometry.prototype
  )),
  (THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry),
  (THREE.WireframeGeometry = function (e) {
    function t(e, t) {
      return e - t;
    }
    THREE.BufferGeometry.call(this);
    var i = [0, 0],
      r = {},
      n = ["a", "b", "c"];
    if (e instanceof THREE.Geometry) {
      for (
        var o = e.vertices,
          a = e.faces,
          s = 0,
          l = new Uint32Array(6 * a.length),
          h = 0,
          c = a.length;
        h < c;
        h++
      )
        for (var u = a[h], p = 0; p < 3; p++) {
          (i[0] = u[n[p]]),
            (i[1] = u[n[(p + 1) % 3]]),
            i.sort(t),
            void 0 === r[(x = i.toString())] &&
              ((l[2 * s] = i[0]), (l[2 * s + 1] = i[1]), (r[x] = !0), s++);
        }
      var d = new Float32Array(2 * s * 3);
      for (h = 0, c = s; h < c; h++)
        for (p = 0; p < 2; p++) {
          var f = o[l[2 * h + p]];
          (d[(H = 6 * h + 3 * p) + 0] = f.x),
            (d[H + 1] = f.y),
            (d[H + 2] = f.z);
        }
      this.addAttribute("position", new THREE.BufferAttribute(d, 3));
    } else if (e instanceof THREE.BufferGeometry)
      if (null !== e.index) {
        var m = e.index.array,
          E = ((o = e.attributes.position), e.groups);
        s = 0;
        0 === E.length && e.addGroup(0, m.length);
        l = new Uint32Array(2 * m.length);
        for (var g = 0, v = E.length; g < v; ++g)
          for (
            var y = E[g], T = y.start, R = ((h = T), T + y.count);
            h < R;
            h += 3
          )
            for (p = 0; p < 3; p++) {
              var x;
              (i[0] = m[h + p]),
                (i[1] = m[h + ((p + 1) % 3)]),
                i.sort(t),
                void 0 === r[(x = i.toString())] &&
                  ((l[2 * s] = i[0]), (l[2 * s + 1] = i[1]), (r[x] = !0), s++);
            }
        for (d = new Float32Array(2 * s * 3), h = 0, c = s; h < c; h++)
          for (p = 0; p < 2; p++) {
            var H = 6 * h + 3 * p,
              b = l[2 * h + p];
            (d[H + 0] = o.getX(b)),
              (d[H + 1] = o.getY(b)),
              (d[H + 2] = o.getZ(b));
          }
        this.addAttribute("position", new THREE.BufferAttribute(d, 3));
      } else {
        var w = (s = (o = e.attributes.position.array).length / 3) / 3;
        for (d = new Float32Array(2 * s * 3), h = 0, c = w; h < c; h++)
          for (p = 0; p < 3; p++) {
            var q = 9 * h + 3 * p;
            (d[(H = 18 * h + 6 * p) + 0] = o[q]),
              (d[H + 1] = o[q + 1]),
              (d[H + 2] = o[q + 2]);
            b = 9 * h + ((p + 1) % 3) * 3;
            (d[H + 3] = o[b]), (d[H + 4] = o[b + 1]), (d[H + 5] = o[b + 2]);
          }
        this.addAttribute("position", new THREE.BufferAttribute(d, 3));
      }
  }),
  (THREE.WireframeGeometry.prototype = Object.create(
    THREE.BufferGeometry.prototype
  )),
  (THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry),
  (THREE.AxisHelper = function (e) {
    e = e || 1;
    var t = new Float32Array([
        0,
        0,
        0,
        e,
        0,
        0,
        0,
        0,
        0,
        0,
        e,
        0,
        0,
        0,
        0,
        0,
        0,
        e,
      ]),
      i = new Float32Array([
        1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1,
      ]),
      r = new THREE.BufferGeometry();
    r.addAttribute("position", new THREE.BufferAttribute(t, 3)),
      r.addAttribute("color", new THREE.BufferAttribute(i, 3));
    var n = new THREE.LineBasicMaterial({
      vertexColors: THREE.VertexColors,
    });
    THREE.LineSegments.call(this, r, n);
  }),
  (THREE.AxisHelper.prototype = Object.create(THREE.LineSegments.prototype)),
  (THREE.AxisHelper.prototype.constructor = THREE.AxisHelper),
  (THREE.ArrowHelper = (function () {
    var e = new THREE.Geometry();
    e.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
    var t = new THREE.CylinderGeometry(0, 0.5, 1, 5, 1);
    return (
      t.translate(0, -0.5, 0),
      function (i, r, n, o, a, s) {
        THREE.Object3D.call(this),
          void 0 === o && (o = 16776960),
          void 0 === n && (n = 1),
          void 0 === a && (a = 0.2 * n),
          void 0 === s && (s = 0.2 * a),
          this.position.copy(r),
          (this.line = new THREE.Line(
            e,
            new THREE.LineBasicMaterial({
              color: o,
            })
          )),
          (this.line.matrixAutoUpdate = !1),
          this.add(this.line),
          (this.cone = new THREE.Mesh(
            t,
            new THREE.MeshBasicMaterial({
              color: o,
            })
          )),
          (this.cone.matrixAutoUpdate = !1),
          this.add(this.cone),
          this.setDirection(i),
          this.setLength(n, a, s);
      }
    );
  })()),
  (THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper),
  (THREE.ArrowHelper.prototype.setDirection = (function () {
    var e,
      t = new THREE.Vector3();
    return function (i) {
      i.y > 0.99999
        ? this.quaternion.set(0, 0, 0, 1)
        : i.y < -0.99999
        ? this.quaternion.set(1, 0, 0, 0)
        : (t.set(i.z, 0, -i.x).normalize(),
          (e = Math.acos(i.y)),
          this.quaternion.setFromAxisAngle(t, e));
    };
  })()),
  (THREE.ArrowHelper.prototype.setLength = function (e, t, i) {
    void 0 === t && (t = 0.2 * e),
      void 0 === i && (i = 0.2 * t),
      this.line.scale.set(1, Math.max(0, e - t), 1),
      this.line.updateMatrix(),
      this.cone.scale.set(i, t, i),
      (this.cone.position.y = e),
      this.cone.updateMatrix();
  }),
  (THREE.ArrowHelper.prototype.setColor = function (e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }),
  (THREE.BoxHelper = function (e) {
    var t = new Uint16Array([
        0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7,
      ]),
      i = new Float32Array(24),
      r = new THREE.BufferGeometry();
    r.setIndex(new THREE.BufferAttribute(t, 1)),
      r.addAttribute("position", new THREE.BufferAttribute(i, 3)),
      THREE.LineSegments.call(
        this,
        r,
        new THREE.LineBasicMaterial({
          color: 16776960,
        })
      ),
      void 0 !== e && this.update(e);
  }),
  (THREE.BoxHelper.prototype = Object.create(THREE.LineSegments.prototype)),
  (THREE.BoxHelper.prototype.constructor = THREE.BoxHelper),
  (THREE.BoxHelper.prototype.update = (function () {
    var e = new THREE.Box3();
    return function (t) {
      if ((e.setFromObject(t), !e.isEmpty())) {
        var i = e.min,
          r = e.max,
          n = this.geometry.attributes.position,
          o = n.array;
        (o[0] = r.x),
          (o[1] = r.y),
          (o[2] = r.z),
          (o[3] = i.x),
          (o[4] = r.y),
          (o[5] = r.z),
          (o[6] = i.x),
          (o[7] = i.y),
          (o[8] = r.z),
          (o[9] = r.x),
          (o[10] = i.y),
          (o[11] = r.z),
          (o[12] = r.x),
          (o[13] = r.y),
          (o[14] = i.z),
          (o[15] = i.x),
          (o[16] = r.y),
          (o[17] = i.z),
          (o[18] = i.x),
          (o[19] = i.y),
          (o[20] = i.z),
          (o[21] = r.x),
          (o[22] = i.y),
          (o[23] = i.z),
          (n.needsUpdate = !0),
          this.geometry.computeBoundingSphere();
      }
    };
  })()),
  (THREE.BoundingBoxHelper = function (e, t) {
    var i = void 0 !== t ? t : 8947848;
    (this.object = e),
      (this.box = new THREE.Box3()),
      THREE.Mesh.call(
        this,
        new THREE.BoxGeometry(1, 1, 1),
        new THREE.MeshBasicMaterial({
          color: i,
          wireframe: !0,
        })
      );
  }),
  (THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype)),
  (THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper),
  (THREE.BoundingBoxHelper.prototype.update = function () {
    this.box.setFromObject(this.object),
      this.box.size(this.scale),
      this.box.center(this.position);
  }),
  (THREE.CameraHelper = function (e) {
    function t(e, t, r) {
      i(e, r), i(t, r);
    }
    function i(e, t) {
      r.vertices.push(new THREE.Vector3()),
        r.colors.push(new THREE.Color(t)),
        void 0 === o[e] && (o[e] = []),
        o[e].push(r.vertices.length - 1);
    }
    var r = new THREE.Geometry(),
      n = new THREE.LineBasicMaterial({
        color: 16777215,
        vertexColors: THREE.FaceColors,
      }),
      o = {},
      a = 16755200,
      s = 16711680,
      l = 43775,
      h = 16777215,
      c = 3355443;
    t("n1", "n2", a),
      t("n2", "n4", a),
      t("n4", "n3", a),
      t("n3", "n1", a),
      t("f1", "f2", a),
      t("f2", "f4", a),
      t("f4", "f3", a),
      t("f3", "f1", a),
      t("n1", "f1", a),
      t("n2", "f2", a),
      t("n3", "f3", a),
      t("n4", "f4", a),
      t("p", "n1", s),
      t("p", "n2", s),
      t("p", "n3", s),
      t("p", "n4", s),
      t("u1", "u2", l),
      t("u2", "u3", l),
      t("u3", "u1", l),
      t("c", "t", h),
      t("p", "c", c),
      t("cn1", "cn2", c),
      t("cn3", "cn4", c),
      t("cf1", "cf2", c),
      t("cf3", "cf4", c),
      THREE.LineSegments.call(this, r, n),
      (this.camera = e),
      this.camera.updateProjectionMatrix(),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (this.pointMap = o),
      this.update();
  }),
  (THREE.CameraHelper.prototype = Object.create(THREE.LineSegments.prototype)),
  (THREE.CameraHelper.prototype.constructor = THREE.CameraHelper),
  (THREE.CameraHelper.prototype.update = (function () {
    function e(e, o, a, s) {
      r.set(o, a, s).unproject(n);
      var l = i[e];
      if (void 0 !== l)
        for (var h = 0, c = l.length; h < c; h++) t.vertices[l[h]].copy(r);
    }
    var t,
      i,
      r = new THREE.Vector3(),
      n = new THREE.Camera();
    return function () {
      (t = this.geometry), (i = this.pointMap);
      var r = 1,
        o = 1;
      n.projectionMatrix.copy(this.camera.projectionMatrix),
        e("c", 0, 0, -1),
        e("t", 0, 0, 1),
        e("n1", -r, -o, -1),
        e("n2", r, -o, -1),
        e("n3", -r, o, -1),
        e("n4", r, o, -1),
        e("f1", -r, -o, 1),
        e("f2", r, -o, 1),
        e("f3", -r, o, 1),
        e("f4", r, o, 1),
        e("u1", 0.7 * r, 1.1 * o, -1),
        e("u2", 0.7 * -r, 1.1 * o, -1),
        e("u3", 0, 2 * o, -1),
        e("cf1", -r, 0, 1),
        e("cf2", r, 0, 1),
        e("cf3", 0, -o, 1),
        e("cf4", 0, o, 1),
        e("cn1", -r, 0, -1),
        e("cn2", r, 0, -1),
        e("cn3", 0, -o, -1),
        e("cn4", 0, o, -1),
        (t.verticesNeedUpdate = !0);
    };
  })()),
  (THREE.DirectionalLightHelper = function (e, t) {
    THREE.Object3D.call(this),
      (this.light = e),
      this.light.updateMatrixWorld(),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (t = t || 1);
    var i = new THREE.Geometry();
    i.vertices.push(
      new THREE.Vector3(-t, t, 0),
      new THREE.Vector3(t, t, 0),
      new THREE.Vector3(t, -t, 0),
      new THREE.Vector3(-t, -t, 0),
      new THREE.Vector3(-t, t, 0)
    );
    var r = new THREE.LineBasicMaterial({
      fog: !1,
    });
    r.color.copy(this.light.color).multiplyScalar(this.light.intensity),
      (this.lightPlane = new THREE.Line(i, r)),
      this.add(this.lightPlane),
      (i = new THREE.Geometry()).vertices.push(
        new THREE.Vector3(),
        new THREE.Vector3()
      ),
      (r = new THREE.LineBasicMaterial({
        fog: !1,
      })).color
        .copy(this.light.color)
        .multiplyScalar(this.light.intensity),
      (this.targetLine = new THREE.Line(i, r)),
      this.add(this.targetLine),
      this.update();
  }),
  (THREE.DirectionalLightHelper.prototype = Object.create(
    THREE.Object3D.prototype
  )),
  (THREE.DirectionalLightHelper.prototype.constructor =
    THREE.DirectionalLightHelper),
  (THREE.DirectionalLightHelper.prototype.dispose = function () {
    this.lightPlane.geometry.dispose(),
      this.lightPlane.material.dispose(),
      this.targetLine.geometry.dispose(),
      this.targetLine.material.dispose();
  }),
  (THREE.DirectionalLightHelper.prototype.update = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3(),
      i = new THREE.Vector3();
    return function () {
      e.setFromMatrixPosition(this.light.matrixWorld),
        t.setFromMatrixPosition(this.light.target.matrixWorld),
        i.subVectors(t, e),
        this.lightPlane.lookAt(i),
        this.lightPlane.material.color
          .copy(this.light.color)
          .multiplyScalar(this.light.intensity),
        this.targetLine.geometry.vertices[1].copy(i),
        (this.targetLine.geometry.verticesNeedUpdate = !0),
        this.targetLine.material.color.copy(this.lightPlane.material.color);
    };
  })()),
  (THREE.EdgesHelper = function (e, t, i) {
    var r = void 0 !== t ? t : 16777215;
    THREE.LineSegments.call(
      this,
      new THREE.EdgesGeometry(e.geometry, i),
      new THREE.LineBasicMaterial({
        color: r,
      })
    ),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1);
  }),
  (THREE.EdgesHelper.prototype = Object.create(THREE.LineSegments.prototype)),
  (THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper),
  (THREE.FaceNormalsHelper = function (e, t, i, r) {
    (this.object = e), (this.size = void 0 !== t ? t : 1);
    var n = void 0 !== i ? i : 16776960,
      o = void 0 !== r ? r : 1,
      a = 0,
      s = this.object.geometry;
    s instanceof THREE.Geometry
      ? (a = s.faces.length)
      : console.warn(
          "THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead."
        );
    var l = new THREE.BufferGeometry(),
      h = new THREE.Float32Attribute(2 * a * 3, 3);
    l.addAttribute("position", h),
      THREE.LineSegments.call(
        this,
        l,
        new THREE.LineBasicMaterial({
          color: n,
          linewidth: o,
        })
      ),
      (this.matrixAutoUpdate = !1),
      this.update();
  }),
  (THREE.FaceNormalsHelper.prototype = Object.create(
    THREE.LineSegments.prototype
  )),
  (THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper),
  (THREE.FaceNormalsHelper.prototype.update = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3(),
      i = new THREE.Matrix3();
    return function () {
      this.object.updateMatrixWorld(!0),
        i.getNormalMatrix(this.object.matrixWorld);
      for (
        var r = this.object.matrixWorld,
          n = this.geometry.attributes.position,
          o = this.object.geometry,
          a = o.vertices,
          s = o.faces,
          l = 0,
          h = 0,
          c = s.length;
        h < c;
        h++
      ) {
        var u = s[h],
          p = u.normal;
        e.copy(a[u.a]).add(a[u.b]).add(a[u.c]).divideScalar(3).applyMatrix4(r),
          t
            .copy(p)
            .applyMatrix3(i)
            .normalize()
            .multiplyScalar(this.size)
            .add(e),
          n.setXYZ(l, e.x, e.y, e.z),
          (l += 1),
          n.setXYZ(l, t.x, t.y, t.z),
          (l += 1);
      }
      return (n.needsUpdate = !0), this;
    };
  })()),
  (THREE.GridHelper = function (e, t) {
    var i = new THREE.Geometry(),
      r = new THREE.LineBasicMaterial({
        vertexColors: THREE.VertexColors,
      });
    (this.color1 = new THREE.Color(4473924)),
      (this.color2 = new THREE.Color(8947848));
    for (var n = -e; n <= e; n += t) {
      i.vertices.push(
        new THREE.Vector3(-e, 0, n),
        new THREE.Vector3(e, 0, n),
        new THREE.Vector3(n, 0, -e),
        new THREE.Vector3(n, 0, e)
      );
      var o = 0 === n ? this.color1 : this.color2;
      i.colors.push(o, o, o, o);
    }
    THREE.LineSegments.call(this, i, r);
  }),
  (THREE.GridHelper.prototype = Object.create(THREE.LineSegments.prototype)),
  (THREE.GridHelper.prototype.constructor = THREE.GridHelper),
  (THREE.GridHelper.prototype.setColors = function (e, t) {
    this.color1.set(e),
      this.color2.set(t),
      (this.geometry.colorsNeedUpdate = !0);
  }),
  (THREE.HemisphereLightHelper = function (e, t) {
    THREE.Object3D.call(this),
      (this.light = e),
      this.light.updateMatrixWorld(),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (this.colors = [new THREE.Color(), new THREE.Color()]);
    var i = new THREE.SphereGeometry(t, 4, 2);
    i.rotateX(-Math.PI / 2);
    for (var r = 0, n = 8; r < n; r++)
      i.faces[r].color = this.colors[r < 4 ? 0 : 1];
    var o = new THREE.MeshBasicMaterial({
      vertexColors: THREE.FaceColors,
      wireframe: !0,
    });
    (this.lightSphere = new THREE.Mesh(i, o)),
      this.add(this.lightSphere),
      this.update();
  }),
  (THREE.HemisphereLightHelper.prototype = Object.create(
    THREE.Object3D.prototype
  )),
  (THREE.HemisphereLightHelper.prototype.constructor =
    THREE.HemisphereLightHelper),
  (THREE.HemisphereLightHelper.prototype.dispose = function () {
    this.lightSphere.geometry.dispose(), this.lightSphere.material.dispose();
  }),
  (THREE.HemisphereLightHelper.prototype.update = (function () {
    var e = new THREE.Vector3();
    return function () {
      this.colors[0]
        .copy(this.light.color)
        .multiplyScalar(this.light.intensity),
        this.colors[1]
          .copy(this.light.groundColor)
          .multiplyScalar(this.light.intensity),
        this.lightSphere.lookAt(
          e.setFromMatrixPosition(this.light.matrixWorld).negate()
        ),
        (this.lightSphere.geometry.colorsNeedUpdate = !0);
    };
  })()),
  (THREE.PointLightHelper = function (e, t) {
    (this.light = e), this.light.updateMatrixWorld();
    var i = new THREE.SphereGeometry(t, 4, 2),
      r = new THREE.MeshBasicMaterial({
        wireframe: !0,
        fog: !1,
      });
    r.color.copy(this.light.color).multiplyScalar(this.light.intensity),
      THREE.Mesh.call(this, i, r),
      (this.matrix = this.light.matrixWorld),
      (this.matrixAutoUpdate = !1);
  }),
  (THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype)),
  (THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper),
  (THREE.PointLightHelper.prototype.dispose = function () {
    this.geometry.dispose(), this.material.dispose();
  }),
  (THREE.PointLightHelper.prototype.update = function () {
    this.material.color
      .copy(this.light.color)
      .multiplyScalar(this.light.intensity);
  }),
  (THREE.SkeletonHelper = function (e) {
    this.bones = this.getBoneList(e);
    for (var t = new THREE.Geometry(), i = 0; i < this.bones.length; i++) {
      this.bones[i].parent instanceof THREE.Bone &&
        (t.vertices.push(new THREE.Vector3()),
        t.vertices.push(new THREE.Vector3()),
        t.colors.push(new THREE.Color(0, 0, 1)),
        t.colors.push(new THREE.Color(0, 1, 0)));
    }
    t.dynamic = !0;
    var r = new THREE.LineBasicMaterial({
      vertexColors: THREE.VertexColors,
      depthTest: !1,
      depthWrite: !1,
      transparent: !0,
    });
    THREE.LineSegments.call(this, t, r),
      (this.root = e),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      this.update();
  }),
  (THREE.SkeletonHelper.prototype = Object.create(
    THREE.LineSegments.prototype
  )),
  (THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper),
  (THREE.SkeletonHelper.prototype.getBoneList = function (e) {
    var t = [];
    e instanceof THREE.Bone && t.push(e);
    for (var i = 0; i < e.children.length; i++)
      t.push.apply(t, this.getBoneList(e.children[i]));
    return t;
  }),
  (THREE.SkeletonHelper.prototype.update = function () {
    for (
      var e = this.geometry,
        t = new THREE.Matrix4().getInverse(this.root.matrixWorld),
        i = new THREE.Matrix4(),
        r = 0,
        n = 0;
      n < this.bones.length;
      n++
    ) {
      var o = this.bones[n];
      o.parent instanceof THREE.Bone &&
        (i.multiplyMatrices(t, o.matrixWorld),
        e.vertices[r].setFromMatrixPosition(i),
        i.multiplyMatrices(t, o.parent.matrixWorld),
        e.vertices[r + 1].setFromMatrixPosition(i),
        (r += 2));
    }
    (e.verticesNeedUpdate = !0), e.computeBoundingSphere();
  }),
  (THREE.SpotLightHelper = function (e) {
    THREE.Object3D.call(this),
      (this.light = e),
      this.light.updateMatrixWorld(),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1);
    var t = new THREE.CylinderGeometry(0, 1, 1, 8, 1, !0);
    t.translate(0, -0.5, 0), t.rotateX(-Math.PI / 2);
    var i = new THREE.MeshBasicMaterial({
      wireframe: !0,
      fog: !1,
    });
    (this.cone = new THREE.Mesh(t, i)), this.add(this.cone), this.update();
  }),
  (THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype)),
  (THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper),
  (THREE.SpotLightHelper.prototype.dispose = function () {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }),
  (THREE.SpotLightHelper.prototype.update = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3();
    return function () {
      var i = this.light.distance ? this.light.distance : 1e4,
        r = i * Math.tan(this.light.angle);
      this.cone.scale.set(r, r, i),
        e.setFromMatrixPosition(this.light.matrixWorld),
        t.setFromMatrixPosition(this.light.target.matrixWorld),
        this.cone.lookAt(t.sub(e)),
        this.cone.material.color
          .copy(this.light.color)
          .multiplyScalar(this.light.intensity);
    };
  })()),
  (THREE.VertexNormalsHelper = function (e, t, i, r) {
    (this.object = e), (this.size = void 0 !== t ? t : 1);
    var n = void 0 !== i ? i : 16711680,
      o = void 0 !== r ? r : 1,
      a = 0,
      s = this.object.geometry;
    s instanceof THREE.Geometry
      ? (a = 3 * s.faces.length)
      : s instanceof THREE.BufferGeometry && (a = s.attributes.normal.count);
    var l = new THREE.BufferGeometry(),
      h = new THREE.Float32Attribute(2 * a * 3, 3);
    l.addAttribute("position", h),
      THREE.LineSegments.call(
        this,
        l,
        new THREE.LineBasicMaterial({
          color: n,
          linewidth: o,
        })
      ),
      (this.matrixAutoUpdate = !1),
      this.update();
  }),
  (THREE.VertexNormalsHelper.prototype = Object.create(
    THREE.LineSegments.prototype
  )),
  (THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper),
  (THREE.VertexNormalsHelper.prototype.update = (function () {
    var e = new THREE.Vector3(),
      t = new THREE.Vector3(),
      i = new THREE.Matrix3();
    return function () {
      var r = ["a", "b", "c"];
      this.object.updateMatrixWorld(!0),
        i.getNormalMatrix(this.object.matrixWorld);
      var n = this.object.matrixWorld,
        o = this.geometry.attributes.position,
        a = this.object.geometry;
      if (a instanceof THREE.Geometry)
        for (
          var s = a.vertices, l = a.faces, h = 0, c = 0, u = l.length;
          c < u;
          c++
        )
          for (var p = l[c], d = 0, f = p.vertexNormals.length; d < f; d++) {
            var m = s[p[r[d]]],
              E = p.vertexNormals[d];
            e.copy(m).applyMatrix4(n),
              t
                .copy(E)
                .applyMatrix3(i)
                .normalize()
                .multiplyScalar(this.size)
                .add(e),
              o.setXYZ(h, e.x, e.y, e.z),
              (h += 1),
              o.setXYZ(h, t.x, t.y, t.z),
              (h += 1);
          }
      else if (a instanceof THREE.BufferGeometry) {
        var g = a.attributes.position,
          v = a.attributes.normal;
        for (h = 0, d = 0, f = g.count; d < f; d++)
          e.set(g.getX(d), g.getY(d), g.getZ(d)).applyMatrix4(n),
            t.set(v.getX(d), v.getY(d), v.getZ(d)),
            t.applyMatrix3(i).normalize().multiplyScalar(this.size).add(e),
            o.setXYZ(h, e.x, e.y, e.z),
            (h += 1),
            o.setXYZ(h, t.x, t.y, t.z),
            (h += 1);
      }
      return (o.needsUpdate = !0), this;
    };
  })()),
  (THREE.WireframeHelper = function (e, t) {
    var i = void 0 !== t ? t : 16777215;
    THREE.LineSegments.call(
      this,
      new THREE.WireframeGeometry(e.geometry),
      new THREE.LineBasicMaterial({
        color: i,
      })
    ),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1);
  }),
  (THREE.WireframeHelper.prototype = Object.create(
    THREE.LineSegments.prototype
  )),
  (THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper),
  (THREE.ImmediateRenderObject = function (e) {
    THREE.Object3D.call(this),
      (this.material = e),
      (this.render = function () {});
  }),
  (THREE.ImmediateRenderObject.prototype = Object.create(
    THREE.Object3D.prototype
  )),
  (THREE.ImmediateRenderObject.prototype.constructor =
    THREE.ImmediateRenderObject),
  (THREE.MorphBlendMesh = function (e, t) {
    THREE.Mesh.call(this, e, t),
      (this.animationsMap = {}),
      (this.animationsList = []);
    var i = this.geometry.morphTargets.length,
      r = "__default",
      n = 0,
      o = i - 1,
      a = i / 1;
    this.createAnimation(r, n, o, a), this.setAnimationWeight(r, 1);
  }),
  (THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype)),
  (THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh),
  (THREE.MorphBlendMesh.prototype.createAnimation = function (e, t, i, r) {
    var n = {
      start: t,
      end: i,
      length: i - t + 1,
      fps: r,
      duration: (i - t) / r,
      lastFrame: 0,
      currentFrame: 0,
      active: !1,
      time: 0,
      direction: 1,
      weight: 1,
      directionBackwards: !1,
      mirroredLoop: !1,
    };
    (this.animationsMap[e] = n), this.animationsList.push(n);
  }),
  (THREE.MorphBlendMesh.prototype.autoCreateAnimations = function (e) {
    for (
      var t,
        i = /([a-z]+)_?(\d+)/i,
        r = {},
        n = this.geometry,
        o = 0,
        a = n.morphTargets.length;
      o < a;
      o++
    ) {
      var s = n.morphTargets[o].name.match(i);
      if (s && s.length > 1)
        r[(l = s[1])] ||
          (r[l] = {
            start: 1 / 0,
            end: -1 / 0,
          }),
          o < (h = r[l]).start && (h.start = o),
          o > h.end && (h.end = o),
          t || (t = l);
    }
    for (var l in r) {
      var h = r[l];
      this.createAnimation(l, h.start, h.end, e);
    }
    this.firstAnimation = t;
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (e) {
    var t = this.animationsMap[e];
    t && ((t.direction = 1), (t.directionBackwards = !1));
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (e) {
    var t = this.animationsMap[e];
    t && ((t.direction = -1), (t.directionBackwards = !0));
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationFPS = function (e, t) {
    var i = this.animationsMap[e];
    i && ((i.fps = t), (i.duration = (i.end - i.start) / i.fps));
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationDuration = function (e, t) {
    var i = this.animationsMap[e];
    i && ((i.duration = t), (i.fps = (i.end - i.start) / i.duration));
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationWeight = function (e, t) {
    var i = this.animationsMap[e];
    i && (i.weight = t);
  }),
  (THREE.MorphBlendMesh.prototype.setAnimationTime = function (e, t) {
    var i = this.animationsMap[e];
    i && (i.time = t);
  }),
  (THREE.MorphBlendMesh.prototype.getAnimationTime = function (e) {
    var t = 0,
      i = this.animationsMap[e];
    return i && (t = i.time), t;
  }),
  (THREE.MorphBlendMesh.prototype.getAnimationDuration = function (e) {
    var t = -1,
      i = this.animationsMap[e];
    return i && (t = i.duration), t;
  }),
  (THREE.MorphBlendMesh.prototype.playAnimation = function (e) {
    var t = this.animationsMap[e];
    t
      ? ((t.time = 0), (t.active = !0))
      : console.warn(
          "THREE.MorphBlendMesh: animation[" +
            e +
            "] undefined in .playAnimation()"
        );
  }),
  (THREE.MorphBlendMesh.prototype.stopAnimation = function (e) {
    var t = this.animationsMap[e];
    t && (t.active = !1);
  }),
  (THREE.MorphBlendMesh.prototype.update = function (e) {
    for (var t = 0, i = this.animationsList.length; t < i; t++) {
      var r = this.animationsList[t];
      if (r.active) {
        var n = r.duration / r.length;
        (r.time += r.direction * e),
          r.mirroredLoop
            ? (r.time > r.duration || r.time < 0) &&
              ((r.direction *= -1),
              r.time > r.duration &&
                ((r.time = r.duration), (r.directionBackwards = !0)),
              r.time < 0 && ((r.time = 0), (r.directionBackwards = !1)))
            : ((r.time = r.time % r.duration),
              r.time < 0 && (r.time += r.duration));
        var o =
            r.start + THREE.Math.clamp(Math.floor(r.time / n), 0, r.length - 1),
          a = r.weight;
        o !== r.currentFrame &&
          ((this.morphTargetInfluences[r.lastFrame] = 0),
          (this.morphTargetInfluences[r.currentFrame] = 1 * a),
          (this.morphTargetInfluences[o] = 0),
          (r.lastFrame = r.currentFrame),
          (r.currentFrame = o));
        var s = (r.time % n) / n;
        r.directionBackwards && (s = 1 - s),
          r.currentFrame !== r.lastFrame
            ? ((this.morphTargetInfluences[r.currentFrame] = s * a),
              (this.morphTargetInfluences[r.lastFrame] = (1 - s) * a))
            : (this.morphTargetInfluences[r.currentFrame] = a);
      }
    }
  });
var Detector = {
  canvas: !!window.CanvasRenderingContext2D,
  webgl: (function () {
    try {
      return (
        !!window.WebGLRenderingContext &&
        !!document.createElement("canvas").getContext("experimental-webgl")
      );
    } catch (e) {
      return !1;
    }
  })(),
  workers: !!window.Worker,
  fileapi: window.File && window.FileReader && window.FileList && window.Blob,
  getWebGLErrorMessage: function () {
    var e = document.createElement("div");
    return (
      (e.id = "webgl-error-message"),
      (e.style.fontFamily = "monospace"),
      (e.style.fontSize = "13px"),
      (e.style.fontWeight = "normal"),
      (e.style.textAlign = "center"),
      (e.style.background = "#fff"),
      (e.style.color = "#000"),
      (e.style.padding = "1.5em"),
      (e.style.width = "400px"),
      (e.style.margin = "5em auto 0"),
      this.webgl ||
        (e.innerHTML = window.WebGLRenderingContext
          ? [
              'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
              'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.',
            ].join("\n")
          : [
              'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
              'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.',
            ].join("\n")),
      e
    );
  },
  addGetWebGLMessage: function (e) {
    var t, i, r;
    (t = void 0 !== (e = e || {}).parent ? e.parent : document.body),
      (i = void 0 !== e.id ? e.id : "oldie"),
      ((r = Detector.getWebGLErrorMessage()).id = i),
      t.appendChild(r);
  },
};
(THREE.RenderableObject = function () {
  (this.id = 0), (this.object = null), (this.z = 0), (this.renderOrder = 0);
}),
  (THREE.RenderableFace = function () {
    (this.id = 0),
      (this.v1 = new THREE.RenderableVertex()),
      (this.v2 = new THREE.RenderableVertex()),
      (this.v3 = new THREE.RenderableVertex()),
      (this.normalModel = new THREE.Vector3()),
      (this.vertexNormalsModel = [
        new THREE.Vector3(),
        new THREE.Vector3(),
        new THREE.Vector3(),
      ]),
      (this.vertexNormalsLength = 0),
      (this.color = new THREE.Color()),
      (this.material = null),
      (this.uvs = [
        new THREE.Vector2(),
        new THREE.Vector2(),
        new THREE.Vector2(),
      ]),
      (this.z = 0),
      (this.renderOrder = 0);
  }),
  (THREE.RenderableVertex = function () {
    (this.position = new THREE.Vector3()),
      (this.positionWorld = new THREE.Vector3()),
      (this.positionScreen = new THREE.Vector4()),
      (this.visible = !0);
  }),
  (THREE.RenderableVertex.prototype.copy = function (e) {
    this.positionWorld.copy(e.positionWorld),
      this.positionScreen.copy(e.positionScreen);
  }),
  (THREE.RenderableLine = function () {
    (this.id = 0),
      (this.v1 = new THREE.RenderableVertex()),
      (this.v2 = new THREE.RenderableVertex()),
      (this.vertexColors = [new THREE.Color(), new THREE.Color()]),
      (this.material = null),
      (this.z = 0),
      (this.renderOrder = 0);
  }),
  (THREE.RenderableSprite = function () {
    (this.id = 0),
      (this.object = null),
      (this.x = 0),
      (this.y = 0),
      (this.z = 0),
      (this.rotation = 0),
      (this.scale = new THREE.Vector2()),
      (this.material = null),
      (this.renderOrder = 0);
  }),
  (THREE.Projector = function () {
    function e() {
      if (l === y) {
        var e = new THREE.RenderableObject();
        return v.push(e), y++, l++, e;
      }
      return v[l++];
    }
    function t() {
      if (c === R) {
        var e = new THREE.RenderableVertex();
        return T.push(e), R++, c++, e;
      }
      return T[c++];
    }
    function i() {
      if (p === H) {
        var e = new THREE.RenderableFace();
        return x.push(e), H++, p++, e;
      }
      return x[p++];
    }
    function r() {
      if (f === w) {
        var e = new THREE.RenderableLine();
        return b.push(e), w++, f++, e;
      }
      return b[f++];
    }
    function n() {
      if (E === M) {
        var e = new THREE.RenderableSprite();
        return q.push(e), M++, E++, e;
      }
      return q[E++];
    }
    function o(e, t) {
      return e.renderOrder !== t.renderOrder
        ? e.renderOrder - t.renderOrder
        : e.z !== t.z
        ? t.z - e.z
        : e.id !== t.id
        ? e.id - t.id
        : 0;
    }
    function a(e, t) {
      var i = 0,
        r = 1,
        n = e.z + e.w,
        o = t.z + t.w,
        a = -e.z + e.w,
        s = -t.z + t.w;
      return (
        (n >= 0 && o >= 0 && a >= 0 && s >= 0) ||
        (!((n < 0 && o < 0) || (a < 0 && s < 0)) &&
          (n < 0
            ? (i = Math.max(i, n / (n - o)))
            : o < 0 && (r = Math.min(r, n / (n - o))),
          a < 0
            ? (i = Math.max(i, a / (a - s)))
            : s < 0 && (r = Math.min(r, a / (a - s))),
          !(r < i) && (e.lerp(t, i), t.lerp(e, 1 - r), !0)))
      );
    }
    var s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E,
      g,
      v = [],
      y = 0,
      T = [],
      R = 0,
      x = [],
      H = 0,
      b = [],
      w = 0,
      q = [],
      M = 0,
      _ = {
        objects: [],
        lights: [],
        elements: [],
      },
      S = new THREE.Vector3(),
      C = new THREE.Vector4(),
      L = new THREE.Box3(
        new THREE.Vector3(-1, -1, -1),
        new THREE.Vector3(1, 1, 1)
      ),
      A = new THREE.Box3(),
      k = new Array(3),
      D = (new Array(4), new THREE.Matrix4()),
      P = new THREE.Matrix4(),
      I = new THREE.Matrix4(),
      V = new THREE.Matrix3(),
      O = new THREE.Frustum(),
      F = new THREE.Vector4(),
      z = new THREE.Vector4();
    (this.projectVector = function (e, t) {
      console.warn(
        "THREE.Projector: .projectVector() is now vector.project()."
      ),
        e.project(t);
    }),
      (this.unprojectVector = function (e, t) {
        console.warn(
          "THREE.Projector: .unprojectVector() is now vector.unproject()."
        ),
          e.unproject(t);
      }),
      (this.pickingRay = function () {
        console.error(
          "THREE.Projector: .pickingRay() is now raycaster.setFromCamera()."
        );
      });
    var U = function () {
        function e(e) {
          (y = (v = e).material),
            R.getNormalMatrix(v.matrixWorld),
            (m.length = 0),
            (E.length = 0);
        }
        function n(e) {
          var t = e.position,
            i = e.positionWorld,
            r = e.positionScreen;
          i.copy(t).applyMatrix4(g), r.copy(i).applyMatrix4(P);
          var n = 1 / r.w;
          (r.x *= n),
            (r.y *= n),
            (r.z *= n),
            (e.visible =
              r.x >= -1 &&
              r.x <= 1 &&
              r.y >= -1 &&
              r.y <= 1 &&
              r.z >= -1 &&
              r.z <= 1);
        }
        function o(e, i, r) {
          (h = t()).position.set(e, i, r), n(h);
        }
        function a(e, t, i) {
          m.push(e, t, i);
        }
        function s(e, t) {
          E.push(e, t);
        }
        function l(e, t, i) {
          return (
            !0 === e.visible ||
            !0 === t.visible ||
            !0 === i.visible ||
            ((k[0] = e.positionScreen),
            (k[1] = t.positionScreen),
            (k[2] = i.positionScreen),
            L.intersectsBox(A.setFromPoints(k)))
          );
        }
        function c(e, t, i) {
          return (
            (i.positionScreen.x - e.positionScreen.x) *
              (t.positionScreen.y - e.positionScreen.y) -
              (i.positionScreen.y - e.positionScreen.y) *
                (t.positionScreen.x - e.positionScreen.x) <
            0
          );
        }
        function p(e, t) {
          var i = T[e],
            n = T[t];
          ((d = r()).id = v.id),
            d.v1.copy(i),
            d.v2.copy(n),
            (d.z = (i.positionScreen.z + n.positionScreen.z) / 2),
            (d.renderOrder = v.renderOrder),
            (d.material = v.material),
            _.elements.push(d);
        }
        function f(e, t, r) {
          var n = T[e],
            o = T[t],
            a = T[r];
          if (
            !1 !== l(n, o, a) &&
            (y.side === THREE.DoubleSide || !0 === c(n, o, a))
          ) {
            ((u = i()).id = v.id),
              u.v1.copy(n),
              u.v2.copy(o),
              u.v3.copy(a),
              (u.z =
                (n.positionScreen.z + o.positionScreen.z + a.positionScreen.z) /
                3),
              (u.renderOrder = v.renderOrder),
              u.normalModel.fromArray(m, 3 * e),
              u.normalModel.applyMatrix3(R).normalize();
            for (var s = 0; s < 3; s++) {
              var h = u.vertexNormalsModel[s];
              h.fromArray(m, 3 * arguments[s]),
                h.applyMatrix3(R).normalize(),
                u.uvs[s].fromArray(E, 2 * arguments[s]);
            }
            (u.vertexNormalsLength = 3),
              (u.material = v.material),
              _.elements.push(u);
          }
        }
        var m = [],
          E = [],
          v = null,
          y = null,
          R = new THREE.Matrix3();
        return {
          setObject: e,
          projectVertex: n,
          checkTriangleVisibility: l,
          checkBackfaceCulling: c,
          pushVertex: o,
          pushNormal: a,
          pushUv: s,
          pushLine: p,
          pushTriangle: f,
        };
      },
      B = new U();
    this.projectScene = function (h, v, y, R) {
      (p = 0),
        (f = 0),
        (E = 0),
        (_.elements.length = 0),
        !0 === h.autoUpdate && h.updateMatrixWorld(),
        null === v.parent && v.updateMatrixWorld(),
        D.copy(v.matrixWorldInverse.getInverse(v.matrixWorld)),
        P.multiplyMatrices(v.projectionMatrix, D),
        O.setFromMatrix(P),
        (l = 0),
        (_.objects.length = 0),
        (_.lights.length = 0),
        h.traverseVisible(function (t) {
          if (t instanceof THREE.Light) _.lights.push(t);
          else if (
            t instanceof THREE.Mesh ||
            t instanceof THREE.Line ||
            t instanceof THREE.Sprite
          ) {
            if (!1 === t.material.visible) return;
            (!1 !== t.frustumCulled && !0 !== O.intersectsObject(t)) ||
              (((s = e()).id = t.id),
              (s.object = t),
              S.setFromMatrixPosition(t.matrixWorld),
              S.applyProjection(P),
              (s.z = S.z),
              (s.renderOrder = t.renderOrder),
              _.objects.push(s));
          }
        }),
        !0 === y && _.objects.sort(o);
      for (var x = 0, H = _.objects.length; x < H; x++) {
        var b = _.objects[x].object,
          w = b.geometry;
        if (
          (B.setObject(b),
          (g = b.matrixWorld),
          (c = 0),
          b instanceof THREE.Mesh)
        ) {
          if (w instanceof THREE.BufferGeometry) {
            var q = w.attributes,
              M = w.groups;
            if (void 0 === q.position) continue;
            for (var L = 0, A = (Te = q.position.array).length; L < A; L += 3)
              B.pushVertex(Te[L], Te[L + 1], Te[L + 2]);
            if (void 0 !== q.normal) {
              var k = q.normal.array;
              for (L = 0, A = k.length; L < A; L += 3)
                B.pushNormal(k[L], k[L + 1], k[L + 2]);
            }
            if (void 0 !== q.uv) {
              var U = q.uv.array;
              for (L = 0, A = U.length; L < A; L += 2) B.pushUv(U[L], U[L + 1]);
            }
            if (null !== w.index) {
              var N = w.index.array;
              if (M.length > 0)
                for (x = 0; x < M.length; x++) {
                  var j = M[x];
                  for (L = j.start, A = j.start + j.count; L < A; L += 3)
                    B.pushTriangle(N[L], N[L + 1], N[L + 2]);
                }
              else
                for (L = 0, A = N.length; L < A; L += 3)
                  B.pushTriangle(N[L], N[L + 1], N[L + 2]);
            } else
              for (L = 0, A = Te.length / 3; L < A; L += 3)
                B.pushTriangle(L, L + 1, L + 2);
          } else if (w instanceof THREE.Geometry) {
            var G = w.vertices,
              W = w.faces,
              X = w.faceVertexUvs[0];
            V.getNormalMatrix(g);
            for (
              var Q = b.material,
                $ = Q instanceof THREE.MultiMaterial,
                Y = !0 === $ ? b.material : null,
                Z = 0,
                K = G.length;
              Z < K;
              Z++
            ) {
              var J = G[Z];
              if ((S.copy(J), !0 === Q.morphTargets))
                for (
                  var ee = w.morphTargets,
                    te = b.morphTargetInfluences,
                    ie = 0,
                    re = ee.length;
                  ie < re;
                  ie++
                ) {
                  var ne = te[ie];
                  if (0 !== ne) {
                    var oe = ee[ie].vertices[Z];
                    (S.x += (oe.x - J.x) * ne),
                      (S.y += (oe.y - J.y) * ne),
                      (S.z += (oe.z - J.z) * ne);
                  }
                }
              B.pushVertex(S.x, S.y, S.z);
            }
            for (var ae = 0, se = W.length; ae < se; ae++) {
              var le = W[ae];
              if (
                void 0 !==
                (Q = !0 === $ ? Y.materials[le.materialIndex] : b.material)
              ) {
                var he = Q.side,
                  ce = T[le.a],
                  ue = T[le.b],
                  pe = T[le.c];
                if (!1 !== B.checkTriangleVisibility(ce, ue, pe)) {
                  var de = B.checkBackfaceCulling(ce, ue, pe);
                  if (he !== THREE.DoubleSide) {
                    if (he === THREE.FrontSide && !1 === de) continue;
                    if (he === THREE.BackSide && !0 === de) continue;
                  }
                  ((u = i()).id = b.id),
                    u.v1.copy(ce),
                    u.v2.copy(ue),
                    u.v3.copy(pe),
                    u.normalModel.copy(le.normal),
                    !1 !== de ||
                      (he !== THREE.BackSide && he !== THREE.DoubleSide) ||
                      u.normalModel.negate(),
                    u.normalModel.applyMatrix3(V).normalize();
                  for (
                    var fe = le.vertexNormals,
                      me = 0,
                      Ee = Math.min(fe.length, 3);
                    me < Ee;
                    me++
                  ) {
                    var ge = u.vertexNormalsModel[me];
                    ge.copy(fe[me]),
                      !1 !== de ||
                        (he !== THREE.BackSide && he !== THREE.DoubleSide) ||
                        ge.negate(),
                      ge.applyMatrix3(V).normalize();
                  }
                  u.vertexNormalsLength = fe.length;
                  var ve = X[ae];
                  if (void 0 !== ve)
                    for (var ye = 0; ye < 3; ye++) u.uvs[ye].copy(ve[ye]);
                  (u.color = le.color),
                    (u.material = Q),
                    (u.z =
                      (ce.positionScreen.z +
                        ue.positionScreen.z +
                        pe.positionScreen.z) /
                      3),
                    (u.renderOrder = b.renderOrder),
                    _.elements.push(u);
                }
              }
            }
          }
        } else if (b instanceof THREE.Line) {
          if (w instanceof THREE.BufferGeometry) {
            if (void 0 !== (q = w.attributes).position) {
              var Te;
              for (L = 0, A = (Te = q.position.array).length; L < A; L += 3)
                B.pushVertex(Te[L], Te[L + 1], Te[L + 2]);
              if (null !== w.index)
                for (L = 0, A = (N = w.index.array).length; L < A; L += 2)
                  B.pushLine(N[L], N[L + 1]);
              else {
                var Re = b instanceof THREE.LineSegments ? 2 : 1;
                for (L = 0, A = Te.length / 3 - 1; L < A; L += Re)
                  B.pushLine(L, L + 1);
              }
            }
          } else if (w instanceof THREE.Geometry) {
            if (
              (I.multiplyMatrices(P, g), 0 === (G = b.geometry.vertices).length)
            )
              continue;
            (ce = t()).positionScreen.copy(G[0]).applyMatrix4(I);
            for (
              Re = b instanceof THREE.LineSegments ? 2 : 1, Z = 1, K = G.length;
              Z < K;
              Z++
            )
              (ce = t()).positionScreen.copy(G[Z]).applyMatrix4(I),
                (Z + 1) % Re > 0 ||
                  ((ue = T[c - 2]),
                  F.copy(ce.positionScreen),
                  z.copy(ue.positionScreen),
                  !0 === a(F, z) &&
                    (F.multiplyScalar(1 / F.w),
                    z.multiplyScalar(1 / z.w),
                    ((d = r()).id = b.id),
                    d.v1.positionScreen.copy(F),
                    d.v2.positionScreen.copy(z),
                    (d.z = Math.max(F.z, z.z)),
                    (d.renderOrder = b.renderOrder),
                    (d.material = b.material),
                    b.material.vertexColors === THREE.VertexColors &&
                      (d.vertexColors[0].copy(b.geometry.colors[Z]),
                      d.vertexColors[1].copy(b.geometry.colors[Z - 1])),
                    _.elements.push(d)));
          }
        } else if (b instanceof THREE.Sprite) {
          C.set(g.elements[12], g.elements[13], g.elements[14], 1),
            C.applyMatrix4(P);
          var xe = 1 / C.w;
          (C.z *= xe),
            C.z >= -1 &&
              C.z <= 1 &&
              (((m = n()).id = b.id),
              (m.x = C.x * xe),
              (m.y = C.y * xe),
              (m.z = C.z),
              (m.renderOrder = b.renderOrder),
              (m.object = b),
              (m.rotation = b.rotation),
              console.log("m.scale.x"),
              (m.scale.x =
                b.scale.x *
                Math.abs(
                  m.x -
                    (C.x + v.projectionMatrix.elements[0]) /
                      (C.w + v.projectionMatrix.elements[12])
                )),
              (m.scale.y =
                b.scale.y *
                Math.abs(
                  m.y -
                    (C.y + v.projectionMatrix.elements[5]) /
                      (C.w + v.projectionMatrix.elements[13])
                )),
              (m.material = b.material),
              _.elements.push(m));
        }
      }
      return !0 === R && _.elements.sort(o), _;
    };
  }),
  (THREE.FontUtils = {
    faces: {},
    face: "helvetiker",
    weight: "normal",
    style: "normal",
    size: 150,
    divisions: 10,
    getFace: function () {
      return this.faces[this.face][this.weight][this.style];
    },
    loadFace: function (e) {
      var t = e.familyName.toLowerCase(),
        i = this;
      (i.faces[t] = i.faces[t] || {}),
        (i.faces[t][e.cssFontWeight] = i.faces[t][e.cssFontWeight] || {}),
        (i.faces[t][e.cssFontWeight][e.cssFontStyle] = e);
      i.faces[t][e.cssFontWeight][e.cssFontStyle] = e;
      return e;
    },
    drawText: function (e) {
      var t,
        i = this.getFace(),
        r = this.size / i.resolution,
        n = 0,
        o = String(e).split(""),
        a = o.length,
        s = [];
      for (t = 0; t < a; t++) {
        var l = new THREE.Path(),
          h = this.extractGlyphPoints(o[t], i, r, n, l);
        (n += h.offset), s.push(h.path);
      }
      return {
        paths: s,
        offset: n / 2,
      };
    },
    extractGlyphPoints: function (e, t, i, r, n) {
      var o,
        a,
        s,
        l,
        h,
        c,
        u,
        p,
        d,
        f,
        m,
        E,
        g,
        v,
        y,
        T,
        R,
        x,
        H = [],
        b = t.glyphs[e] || t.glyphs["?"];
      if (b) {
        if (b.o)
          for (
            h = (l = b._cachedOutline || (b._cachedOutline = b.o.split(" ")))
              .length,
              c = i,
              u = i,
              o = 0;
            o < h;

          )
            switch (l[o++]) {
              case "m":
                (p = l[o++] * c + r), (d = l[o++] * u), n.moveTo(p, d);
                break;
              case "l":
                (p = l[o++] * c + r), (d = l[o++] * u), n.lineTo(p, d);
                break;
              case "q":
                if (
                  ((f = l[o++] * c + r),
                  (m = l[o++] * u),
                  (v = l[o++] * c + r),
                  (y = l[o++] * u),
                  n.quadraticCurveTo(v, y, f, m),
                  (x = H[H.length - 1]))
                )
                  for (
                    E = x.x, g = x.y, a = 1, s = this.divisions;
                    a <= s;
                    a++
                  ) {
                    var w = a / s;
                    THREE.Shape.Utils.b2(w, E, v, f),
                      THREE.Shape.Utils.b2(w, g, y, m);
                  }
                break;
              case "b":
                if (
                  ((f = l[o++] * c + r),
                  (m = l[o++] * u),
                  (v = l[o++] * c + r),
                  (y = l[o++] * -u),
                  (T = l[o++] * c + r),
                  (R = l[o++] * -u),
                  n.bezierCurveTo(f, m, v, y, T, R),
                  (x = H[H.length - 1]))
                )
                  for (E = x.x, g = x.y, a = 1, s = this.divisions; a <= s; a++)
                    (w = a / s),
                      THREE.Shape.Utils.b3(w, E, v, T, f),
                      THREE.Shape.Utils.b3(w, g, y, R, m);
            }
        return {
          offset: b.ha * i,
          path: n,
        };
      }
    },
  }),
  (THREE.FontUtils.generateShapes = function (e, t) {
    var i = void 0 !== (t = t || {}).size ? t.size : 100,
      r = void 0 !== t.curveSegments ? t.curveSegments : 4,
      n = void 0 !== t.font ? t.font : "helvetiker",
      o = void 0 !== t.weight ? t.weight : "normal",
      a = void 0 !== t.style ? t.style : "normal";
    (THREE.FontUtils.size = i),
      (THREE.FontUtils.divisions = r),
      (THREE.FontUtils.face = n),
      (THREE.FontUtils.weight = o),
      (THREE.FontUtils.style = a);
    for (
      var s = THREE.FontUtils.drawText(e).paths, l = [], h = 0, c = s.length;
      h < c;
      h++
    )
      Array.prototype.push.apply(l, s[h].toShapes());
    return l;
  }),
  (function (e) {
    var t = 1e-10,
      i = function (e, t) {
        var i = e.length;
        if (i < 3) return null;
        var o,
          a,
          s,
          l = [],
          h = [],
          c = [];
        if (r(e) > 0) for (a = 0; a < i; a++) h[a] = a;
        else for (a = 0; a < i; a++) h[a] = i - 1 - a;
        var u = i,
          p = 2 * u;
        for (a = u - 1; u > 2; ) {
          if (p-- <= 0)
            return (
              console.log("Warning, unable to triangulate polygon!"), t ? c : l
            );
          if (
            (u <= (o = a) && (o = 0),
            u <= (a = o + 1) && (a = 0),
            u <= (s = a + 1) && (s = 0),
            n(e, o, a, s, u, h))
          ) {
            var d, f, m, E, g;
            for (
              d = h[o],
                f = h[a],
                m = h[s],
                l.push([e[d], e[f], e[m]]),
                c.push([h[o], h[a], h[s]]),
                E = a,
                g = a + 1;
              g < u;
              E++, g++
            )
              h[E] = h[g];
            p = 2 * --u;
          }
        }
        return t ? c : l;
      },
      r = function (e) {
        for (var t = e.length, i = 0, r = t - 1, n = 0; n < t; r = n++)
          i += e[r].x * e[n].y - e[n].x * e[r].y;
        return 0.5 * i;
      },
      n = function (e, i, r, n, o, a) {
        var s, l, h, c, u, p, d, f, m, E, g, v, y, T, R;
        if (
          ((l = e[a[i]].x),
          (h = e[a[i]].y),
          (c = e[a[r]].x),
          (u = e[a[r]].y),
          (p = e[a[n]].x),
          (d = e[a[n]].y),
          t > (c - l) * (d - h) - (u - h) * (p - l))
        )
          return !1;
        for (
          E = p - c,
            g = d - u,
            v = l - p,
            y = h - d,
            T = c - l,
            R = u - h,
            s = 0;
          s < o;
          s++
        )
          if (
            s !== i &&
            s !== r &&
            s !== n &&
            ((f = e[a[s]].x),
            E * ((m = e[a[s]].y) - u) - g * (f - c) >= -t &&
              v * (m - d) - y * (f - p) >= -t &&
              T * (m - h) - R * (f - l) >= -t)
          )
            return !1;
        return !0;
      };
    (e.Triangulate = i), (e.Triangulate.area = r);
  })(THREE.FontUtils),
  (self._typeface_js = {
    faces: THREE.FontUtils.faces,
    loadFace: THREE.FontUtils.loadFace,
  }),
  (THREE.typeface_js = self._typeface_js),
  (THREE.XHRLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.XHRLoader.prototype = {
    constructor: THREE.XHRLoader,
    load: function (e, t, i, r) {
      void 0 !== this.path && (e = this.path + e);
      var n = this,
        o = THREE.Cache.get(e);
      if (void 0 !== o)
        return (
          t &&
            setTimeout(function () {
              t(o);
            }, 0),
          o
        );
      var a = new XMLHttpRequest();
      return (
        a.overrideMimeType("text/plain"),
        a.open("GET", e, !0),
        a.addEventListener(
          "load",
          function (i) {
            var o = i.target.response;
            THREE.Cache.add(e, o),
              200 === this.status
                ? (t && t(o), n.manager.itemEnd(e))
                : 0 === this.status
                ? (console.warn("THREE.XHRLoader: HTTP Status 0 received."),
                  t && t(o),
                  n.manager.itemEnd(e))
                : (r && r(i), n.manager.itemError(e));
          },
          !1
        ),
        void 0 !== i &&
          a.addEventListener(
            "progress",
            function (e) {
              i(e);
            },
            !1
          ),
        a.addEventListener(
          "error",
          function (t) {
            r && r(t), n.manager.itemError(e);
          },
          !1
        ),
        void 0 !== this.responseType && (a.responseType = this.responseType),
        void 0 !== this.withCredentials &&
          (a.withCredentials = this.withCredentials),
        a.send(null),
        n.manager.itemStart(e),
        a
      );
    },
    setPath: function (e) {
      this.path = e;
    },
    setResponseType: function (e) {
      this.responseType = e;
    },
    setWithCredentials: function (e) {
      this.withCredentials = e;
    },
  }),
  (THREE.MTLLoader = function (e) {
    this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager;
  }),
  (THREE.MTLLoader.prototype = {
    constructor: THREE.MTLLoader,
    load: function (e, t, i, r) {
      var n = this,
        o = new THREE.XHRLoader(this.manager);
      o.setPath(this.path),
        o.load(
          e,
          function (e) {
            t(n.parse(e));
          },
          i,
          r
        );
    },
    setPath: function (e) {
      this.path = e;
    },
    setBaseUrl: function (e) {
      this.baseUrl = e;
    },
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    setMaterialOptions: function (e) {
      this.materialOptions = e;
    },
    parse: function (e) {
      for (
        var t = e.split("\n"), i = {}, r = /\s+/, n = {}, o = 0;
        o < t.length;
        o++
      ) {
        var a = t[o];
        if (0 !== (a = a.trim()).length && "#" !== a.charAt(0)) {
          var s = a.indexOf(" "),
            l = s >= 0 ? a.substring(0, s) : a;
          l = l.toLowerCase();
          var h = s >= 0 ? a.substring(s + 1) : "";
          if (((h = h.trim()), "newmtl" === l))
            (i = {
              name: h,
            }),
              (n[h] = i);
          else if (i)
            if ("ka" === l || "kd" === l || "ks" === l) {
              var c = h.split(r, 3);
              i[l] = [parseFloat(c[0]), parseFloat(c[1]), parseFloat(c[2])];
            } else i[l] = h;
        }
      }
      var u = new THREE.MTLLoader.MaterialCreator(
        this.baseUrl,
        this.materialOptions
      );
      return (
        u.setCrossOrigin(this.crossOrigin),
        u.setManager(this.manager),
        u.setMaterials(n),
        u
      );
    },
  }),
  (THREE.MTLLoader.MaterialCreator = function (e, t) {
    (this.baseUrl = e),
      (this.options = t),
      (this.materialsInfo = {}),
      (this.materials = {}),
      (this.materialsArray = []),
      (this.nameLookup = {}),
      (this.side =
        this.options && this.options.side
          ? this.options.side
          : THREE.FrontSide),
      (this.wrap =
        this.options && this.options.wrap
          ? this.options.wrap
          : THREE.RepeatWrapping);
  }),
  (THREE.MTLLoader.MaterialCreator.prototype = {
    constructor: THREE.MTLLoader.MaterialCreator,
    setCrossOrigin: function (e) {
      this.crossOrigin = e;
    },
    setManager: function (e) {
      this.manager = e;
    },
    setMaterials: function (e) {
      (this.materialsInfo = this.convert(e)),
        (this.materials = {}),
        (this.materialsArray = []),
        (this.nameLookup = {});
    },
    convert: function (e) {
      if (!this.options) return e;
      var t = {};
      for (var i in e) {
        var r = e[i],
          n = {};
        for (var o in ((t[i] = n), r)) {
          var a = !0,
            s = r[o],
            l = o.toLowerCase();
          switch (l) {
            case "kd":
            case "ka":
            case "ks":
              this.options &&
                this.options.normalizeRGB &&
                (s = [s[0] / 255, s[1] / 255, s[2] / 255]),
                this.options &&
                  this.options.ignoreZeroRGBs &&
                  0 === s[0] &&
                  0 === s[1] &&
                  0 === s[1] &&
                  (a = !1);
          }
          a && (n[l] = s);
        }
      }
      return t;
    },
    preload: function () {
      for (var e in this.materialsInfo) this.create(e);
    },
    getIndex: function (e) {
      return this.nameLookup[e];
    },
    getAsArray: function () {
      var e = 0;
      for (var t in this.materialsInfo)
        (this.materialsArray[e] = this.create(t)),
          (this.nameLookup[t] = e),
          e++;
      return this.materialsArray;
    },
    create: function (e) {
      return (
        void 0 === this.materials[e] && this.createMaterial_(e),
        this.materials[e]
      );
    },
    createMaterial_: function (e) {
      var t = this.materialsInfo[e],
        i = {
          name: e,
          side: this.side,
        };
      for (var r in t) {
        var n = t[r];
        if ("" !== n)
          switch (r.toLowerCase()) {
            case "kd":
              i.color = new THREE.Color().fromArray(n);
              break;
            case "ks":
              i.specular = new THREE.Color().fromArray(n);
              break;
            case "map_kd":
              (i.map = this.loadTexture(this.baseUrl + n)),
                (i.map.wrapS = this.wrap),
                (i.map.wrapT = this.wrap);
              break;
            case "ns":
              i.shininess = parseFloat(n);
              break;
            case "d":
              n < 1 && ((i.opacity = n), (i.transparent = !0));
              break;
            case "Tr":
              n > 0 && ((i.opacity = 1 - n), (i.transparent = !0));
              break;
            case "map_bump":
            case "bump":
              if (i.bumpMap) break;
              (i.bumpMap = this.loadTexture(this.baseUrl + n)),
                (i.bumpMap.wrapS = this.wrap),
                (i.bumpMap.wrapT = this.wrap);
          }
      }
      return (
        (this.materials[e] = new THREE.MeshPhongMaterial(i)), this.materials[e]
      );
    },
    loadTexture: function (e, t, i, r, n) {
      var o,
        a = THREE.Loader.Handlers.get(e),
        s =
          void 0 !== this.manager ? this.manager : THREE.DefaultLoadingManager;
      return (
        null === a && (a = new THREE.TextureLoader(s)),
        a.setCrossOrigin && a.setCrossOrigin(this.crossOrigin),
        (o = a.load(e, i, r, n)),
        void 0 !== t && (o.mapping = t),
        o
      );
    },
  }),
  THREE.EventDispatcher.prototype.apply(THREE.MTLLoader.prototype),
  (THREE.OBJLoader = function (e) {
    (this.manager = void 0 !== e ? e : THREE.DefaultLoadingManager),
      (this.materials = null);
  }),
  (THREE.OBJLoader.prototype = {
    constructor: THREE.OBJLoader,
    load: function (e, t, i, r) {
      var n = this,
        o = new THREE.XHRLoader(n.manager);
      o.setPath(this.path),
        o.load(
          e,
          function (e) {
            t(n.parse(e));
          },
          i,
          r
        );
    },
    setPath: function (e) {
      this.path = e;
    },
    setMaterials: function (e) {
      this.materials = e;
    },
    parse: function (e) {
      function t(e) {
        (h = {
          name: e,
          geometry: {
            vertices: [],
            normals: [],
            uvs: [],
          },
          material: {
            name: "",
            smooth: !0,
          },
        }),
          c.push(h);
      }
      function i(e) {
        var t = parseInt(e);
        return 3 * (t >= 0 ? t - 1 : t + p.length / 3);
      }
      function r(e) {
        var t = parseInt(e);
        return 3 * (t >= 0 ? t - 1 : t + d.length / 3);
      }
      function n(e) {
        var t = parseInt(e);
        return 2 * (t >= 0 ? t - 1 : t + f.length / 2);
      }
      function o(e, t, i) {
        h.geometry.vertices.push(
          p[e],
          p[e + 1],
          p[e + 2],
          p[t],
          p[t + 1],
          p[t + 2],
          p[i],
          p[i + 1],
          p[i + 2]
        );
      }
      function a(e, t, i) {
        h.geometry.normals.push(
          d[e],
          d[e + 1],
          d[e + 2],
          d[t],
          d[t + 1],
          d[t + 2],
          d[i],
          d[i + 1],
          d[i + 2]
        );
      }
      function s(e, t, i) {
        h.geometry.uvs.push(f[e], f[e + 1], f[t], f[t + 1], f[i], f[i + 1]);
      }
      function l(e, t, l, h, c, u, p, d, f, m, E, g) {
        var v,
          y = i(e),
          T = i(t),
          R = i(l);
        void 0 === h ? o(y, T, R) : (o(y, T, (v = i(h))), o(T, R, v)),
          void 0 !== c &&
            ((y = n(c)),
            (T = n(u)),
            (R = n(p)),
            void 0 === h ? s(y, T, R) : (s(y, T, (v = n(d))), s(T, R, v))),
          void 0 !== f &&
            ((y = r(f)),
            (T = r(m)),
            (R = r(E)),
            void 0 === h ? a(y, T, R) : (a(y, T, (v = r(g))), a(T, R, v)));
      }
      console.time("OBJLoader");
      var h,
        c = [],
        u = !1,
        p = [],
        d = [],
        f = [];
      t("");
      for (
        var m =
            /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
          E =
            /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
          g = /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
          v = /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
          y =
            /^f\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)))?/,
          T =
            /^f\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)\/(-?\d+)))?/,
          R =
            /^f\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))(?:\s+((-?\d+)\/\/(-?\d+)))?/,
          x = /^[og]\s+(.+)/,
          H = /^s\s+(\d+|on|off)/,
          b = e.split("\n"),
          w = 0;
        w < b.length;
        w++
      ) {
        var q,
          M = b[w];
        if (0 !== (M = M.trim()).length && "#" !== M.charAt(0))
          if (null !== (q = m.exec(M)))
            p.push(parseFloat(q[1]), parseFloat(q[2]), parseFloat(q[3]));
          else if (null !== (q = E.exec(M)))
            d.push(parseFloat(q[1]), parseFloat(q[2]), parseFloat(q[3]));
          else if (null !== (q = g.exec(M)))
            f.push(parseFloat(q[1]), parseFloat(q[2]));
          else if (null !== (q = v.exec(M))) l(q[1], q[2], q[3], q[4]);
          else if (null !== (q = y.exec(M)))
            l(q[2], q[5], q[8], q[11], q[3], q[6], q[9], q[12]);
          else if (null !== (q = T.exec(M)))
            l(
              q[2],
              q[6],
              q[10],
              q[14],
              q[3],
              q[7],
              q[11],
              q[15],
              q[4],
              q[8],
              q[12],
              q[16]
            );
          else if (null !== (q = R.exec(M)))
            l(
              q[2],
              q[5],
              q[8],
              q[11],
              void 0,
              void 0,
              void 0,
              void 0,
              q[3],
              q[6],
              q[9],
              q[12]
            );
          else if (null !== (q = x.exec(M))) {
            var _ = q[1].trim();
            !1 === u ? ((u = !0), (h.name = _)) : t(_);
          } else if (/^usemtl /.test(M))
            h.material.name = M.substring(7).trim();
          else if (/^mtllib /.test(M));
          else {
            if (null === (q = H.exec(M)))
              throw new Error("Unexpected line: " + M);
            h.material.smooth = "1" === q[1] || "on" === q[1];
          }
      }
      for (var S = new THREE.Group(), C = ((w = 0), c.length); w < C; w++) {
        var L,
          A = (h = c[w]).geometry,
          k = new THREE.BufferGeometry();
        k.addAttribute(
          "position",
          new THREE.BufferAttribute(new Float32Array(A.vertices), 3)
        ),
          A.normals.length > 0
            ? k.addAttribute(
                "normal",
                new THREE.BufferAttribute(new Float32Array(A.normals), 3)
              )
            : k.computeVertexNormals(),
          A.uvs.length > 0 &&
            k.addAttribute(
              "uv",
              new THREE.BufferAttribute(new Float32Array(A.uvs), 2)
            ),
          null !== this.materials &&
            (L = this.materials.create(h.material.name)),
          L || ((L = new THREE.MeshPhongMaterial()).name = h.material.name),
          (L.shading = h.material.smooth
            ? THREE.SmoothShading
            : THREE.FlatShading);
        var D = new THREE.Mesh(k, L);
        (D.name = h.name), S.add(D);
      }
      return console.timeEnd("OBJLoader"), S;
    },
  }),
  (THREE.UniformsLib.foggradient = {
    cameraPos: {
      type: "v3",
      value: new THREE.Vector3(0, 0, 0),
    },
    fogDensity: {
      type: "f",
      value: 25e-5,
    },
    fogNear: {
      type: "f",
      value: 1,
    },
    fogFar: {
      type: "f",
      value: 2e3,
    },
    fogColor: {
      type: "c",
      value: new THREE.Color(16777215),
    },
    skyDomeRadius: {
      type: "f",
      value: 1e3,
    },
    skyDomeExponent: {
      type: "f",
      value: 1,
    },
    skyDomeOffset: {
      type: "f",
      value: 0,
    },
    skyDomeBottomColor: {
      type: "c",
      value: new THREE.Color(65280),
    },
    skyDomeTopColor: {
      type: "c",
      value: new THREE.Color(16711680),
    },
  }),
  (THREE.ShaderChunk.foggradient_pars_vertex = [
    "#define M_PI 3.1415926535897932384626433832795",
    "uniform vec3  cameraPos;",
    "uniform float skyDomeRadius;",
    "uniform float skyDomeOffset;",
    "uniform float skyDomeExponent;",
    "varying float  vGradFac;",
    "float HALF_PI = M_PI * 0.5;",
  ].join("\n")),
  (THREE.ShaderChunk.foggradient_func_vertex = [
    "float map( float v, float a1, float b1, float a2, float b2 ) {",
    "return a2+(b2-a2)*((v-a1)/(b1-a1));",
    "}",
  ].join("\n")),
  (THREE.ShaderChunk.foggradient_vertex = [
    "vec3 wPos = ( modelMatrix * vec4( position, 1.0 ) ).xyz;",
    "vec3 nVec = normalize( wPos - cameraPos );",
    "float a = asin( abs( nVec.y ) / 1.0 );",
    "float fac = map( abs( a ), 0.0, HALF_PI, 0.0, 1.0 );",
    "if( fac < skyDomeOffset ) {",
    "fac = 0.0;",
    "} else {",
    "fac = map( fac, skyDomeOffset, 1.0, 0.0, 1.0 );",
    "}",
    "vGradFac = max( min( pow( fac, skyDomeExponent ), 1.0 ), 0.0 );",
  ].join("\n")),
  (THREE.ShaderChunk.foggradient_pars_fragment = [
    "#ifdef USE_FOG",
    "uniform vec3 skyDomeBottomColor;",
    "uniform vec3 skyDomeTopColor;",
    "varying float  vGradFac;",
    "#endif",
  ].join("\n")),
  (THREE.ShaderChunk.foggradient_fragment = [
    "#ifdef USE_FOG",
    "float depth = gl_FragCoord.z / gl_FragCoord.w;",
    "#ifdef FOG_EXP2",
    "float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
    "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",
    "#else",
    "float fogFactor = smoothstep( fogNear, fogFar, depth );",
    "#endif",
    "vec3 fogColorGrad = mix( skyDomeBottomColor, skyDomeTopColor, vGradFac );",
    "gl_FragColor = mix( gl_FragColor, vec4( fogColorGrad, gl_FragColor.w ), fogFactor );",
    "#endif",
  ].join("\n")),
  (THREE.ShaderLib.itembig = {
    uniforms: THREE.UniformsUtils.merge([
      THREE.UniformsLib.common,
      THREE.UniformsLib.aomap,
      THREE.UniformsLib.lightmap,
      THREE.UniformsLib.emissivemap,
      THREE.UniformsLib.fog,
      THREE.UniformsLib.ambient,
      THREE.UniformsLib.lights,
      THREE.UniformsLib.foggradient,
      {
        emissive: {
          type: "c",
          value: new THREE.Color(0),
        },
      },
      {
        thumbTexture: {
          type: "t",
          value: null,
        },
        nearOpacity: {
          type: "f",
          value: 0,
        },
        highlightColor: {
          type: "c",
          value: new THREE.Color(16711680),
        },
        highlightFactor: {
          type: "f",
          value: 0,
        },
      },
    ]),
    vertexShader: [
      "varying vec2 vUv;",
      "#define LAMBERT",
      "varying vec3 vLightFront;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.uv_pars_vertex,
      THREE.ShaderChunk.uv2_pars_vertex,
      THREE.ShaderChunk.envmap_pars_vertex,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.color_pars_vertex,
      THREE.ShaderChunk.morphtarget_pars_vertex,
      THREE.ShaderChunk.skinning_pars_vertex,
      THREE.ShaderChunk.shadowmap_pars_vertex,
      THREE.ShaderChunk.logdepthbuf_pars_vertex,
      THREE.ShaderChunk.foggradient_pars_vertex,
      THREE.ShaderChunk.foggradient_func_vertex,
      "void main() {",
      "vUv = vec2( uv.x, uv.y );",
      THREE.ShaderChunk.uv_vertex,
      THREE.ShaderChunk.uv2_vertex,
      THREE.ShaderChunk.color_vertex,
      THREE.ShaderChunk.beginnormal_vertex,
      THREE.ShaderChunk.morphnormal_vertex,
      THREE.ShaderChunk.skinbase_vertex,
      THREE.ShaderChunk.skinnormal_vertex,
      THREE.ShaderChunk.defaultnormal_vertex,
      THREE.ShaderChunk.begin_vertex,
      THREE.ShaderChunk.morphtarget_vertex,
      THREE.ShaderChunk.skinning_vertex,
      THREE.ShaderChunk.project_vertex,
      THREE.ShaderChunk.logdepthbuf_vertex,
      THREE.ShaderChunk.worldpos_vertex,
      THREE.ShaderChunk.envmap_vertex,
      THREE.ShaderChunk.lights_lambert_vertex,
      THREE.ShaderChunk.shadowmap_vertex,
      THREE.ShaderChunk.foggradient_vertex,
      "}",
    ].join("\n"),
    fragmentShader: [
      "uniform vec3 diffuse;",
      "uniform vec3 emissive;",
      "uniform float opacity;",
      "uniform sampler2D thumbTexture;",
      "uniform float nearOpacity;",
      "uniform vec3 highlightColor;",
      "uniform float highlightFactor;",
      "varying vec3 vLightFront;",
      "varying vec2 vUv;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.color_pars_fragment,
      THREE.ShaderChunk.uv_pars_fragment,
      THREE.ShaderChunk.uv2_pars_fragment,
      THREE.ShaderChunk.map_pars_fragment,
      THREE.ShaderChunk.alphamap_pars_fragment,
      THREE.ShaderChunk.aomap_pars_fragment,
      THREE.ShaderChunk.lightmap_pars_fragment,
      THREE.ShaderChunk.emissivemap_pars_fragment,
      THREE.ShaderChunk.envmap_pars_fragment,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.ambient_pars,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.fog_pars_fragment,
      THREE.ShaderChunk.shadowmap_pars_fragment,
      THREE.ShaderChunk.shadowmask_pars_fragment,
      THREE.ShaderChunk.specularmap_pars_fragment,
      THREE.ShaderChunk.logdepthbuf_pars_fragment,
      THREE.ShaderChunk.foggradient_pars_fragment,
      "float map( float v, float a1, float b1, float a2, float b2 ) {",
      "return a2+(b2-a2)*((v-a1)/(b1-a1));",
      "}",
      "void main() {",
      "float hFac = highlightFactor * 0.14;",
      "vec3 c = (texture2D(thumbTexture, vUv)).rgb + (highlightColor * hFac);",
      "gl_FragColor = vec4( c, opacity * nearOpacity );",
      "\tvec4 diffuseColor = vec4( diffuse, opacity );",
      "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
      "\tvec3 totalEmissiveLight = emissive;",
      THREE.ShaderChunk.logdepthbuf_fragment,
      THREE.ShaderChunk.map_fragment,
      THREE.ShaderChunk.color_fragment,
      THREE.ShaderChunk.alphamap_fragment,
      THREE.ShaderChunk.alphatest_fragment,
      THREE.ShaderChunk.specularmap_fragment,
      THREE.ShaderChunk.emissivemap_fragment,
      "\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",
      THREE.ShaderChunk.lightmap_fragment,
      "\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",
      "\t#ifdef DOUBLE_SIDED",
      "\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",
      "\t#else",
      "\t\treflectedLight.directDiffuse = vLightFront;",
      "\t#endif",
      "\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",
      THREE.ShaderChunk.aomap_fragment,
      "\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveLight;",
      THREE.ShaderChunk.envmap_fragment,
      THREE.ShaderChunk.linear_to_gamma_fragment,
      THREE.ShaderChunk.foggradient_fragment,
      "}",
    ].join("\n"),
  }),
  (THREE.ShaderLib.gradfogobject = {
    uniforms: THREE.UniformsUtils.merge([
      THREE.UniformsLib.common,
      THREE.UniformsLib.aomap,
      THREE.UniformsLib.lightmap,
      THREE.UniformsLib.emissivemap,
      THREE.UniformsLib.fog,
      THREE.UniformsLib.ambient,
      THREE.UniformsLib.lights,
      THREE.UniformsLib.foggradient,
      {
        emissive: {
          type: "c",
          value: new THREE.Color(0),
        },
      },
      {
        color: {
          type: "c",
          value: new THREE.Color(16777215),
        },
        nearOpacity: {
          type: "f",
          value: 0,
        },
      },
    ]),
    vertexShader: [
      "#define LAMBERT",
      "varying vec3 vLightFront;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.uv_pars_vertex,
      THREE.ShaderChunk.uv2_pars_vertex,
      THREE.ShaderChunk.envmap_pars_vertex,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.color_pars_vertex,
      THREE.ShaderChunk.morphtarget_pars_vertex,
      THREE.ShaderChunk.skinning_pars_vertex,
      THREE.ShaderChunk.shadowmap_pars_vertex,
      THREE.ShaderChunk.logdepthbuf_pars_vertex,
      THREE.ShaderChunk.foggradient_pars_vertex,
      THREE.ShaderChunk.foggradient_func_vertex,
      "void main() {",
      THREE.ShaderChunk.uv_vertex,
      THREE.ShaderChunk.uv2_vertex,
      THREE.ShaderChunk.color_vertex,
      THREE.ShaderChunk.beginnormal_vertex,
      THREE.ShaderChunk.morphnormal_vertex,
      THREE.ShaderChunk.skinbase_vertex,
      THREE.ShaderChunk.skinnormal_vertex,
      THREE.ShaderChunk.defaultnormal_vertex,
      THREE.ShaderChunk.begin_vertex,
      THREE.ShaderChunk.morphtarget_vertex,
      THREE.ShaderChunk.skinning_vertex,
      THREE.ShaderChunk.project_vertex,
      THREE.ShaderChunk.logdepthbuf_vertex,
      THREE.ShaderChunk.worldpos_vertex,
      THREE.ShaderChunk.envmap_vertex,
      THREE.ShaderChunk.lights_lambert_vertex,
      THREE.ShaderChunk.shadowmap_vertex,
      THREE.ShaderChunk.foggradient_vertex,
      "}",
    ].join("\n"),
    fragmentShader: [
      "uniform vec3 color;",
      "uniform float nearOpacity;",
      "uniform vec3 diffuse;",
      "uniform vec3 emissive;",
      "uniform float opacity;",
      "varying vec3 vLightFront;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.color_pars_fragment,
      THREE.ShaderChunk.uv_pars_fragment,
      THREE.ShaderChunk.uv2_pars_fragment,
      THREE.ShaderChunk.map_pars_fragment,
      THREE.ShaderChunk.alphamap_pars_fragment,
      THREE.ShaderChunk.aomap_pars_fragment,
      THREE.ShaderChunk.lightmap_pars_fragment,
      THREE.ShaderChunk.emissivemap_pars_fragment,
      THREE.ShaderChunk.envmap_pars_fragment,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.ambient_pars,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.fog_pars_fragment,
      THREE.ShaderChunk.shadowmap_pars_fragment,
      THREE.ShaderChunk.shadowmask_pars_fragment,
      THREE.ShaderChunk.specularmap_pars_fragment,
      THREE.ShaderChunk.logdepthbuf_pars_fragment,
      THREE.ShaderChunk.foggradient_pars_fragment,
      "void main() {",
      "gl_FragColor = vec4( color, opacity * nearOpacity );",
      "\tvec4 diffuseColor = vec4( diffuse, opacity );",
      "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
      "\tvec3 totalEmissiveLight = emissive;",
      THREE.ShaderChunk.logdepthbuf_fragment,
      THREE.ShaderChunk.map_fragment,
      THREE.ShaderChunk.color_fragment,
      THREE.ShaderChunk.alphamap_fragment,
      THREE.ShaderChunk.alphatest_fragment,
      THREE.ShaderChunk.specularmap_fragment,
      THREE.ShaderChunk.emissivemap_fragment,
      "\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",
      THREE.ShaderChunk.lightmap_fragment,
      "\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",
      "\t#ifdef DOUBLE_SIDED",
      "\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",
      "\t#else",
      "\t\treflectedLight.directDiffuse = vLightFront;",
      "\t#endif",
      "\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",
      THREE.ShaderChunk.aomap_fragment,
      "\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveLight;",
      THREE.ShaderChunk.envmap_fragment,
      THREE.ShaderChunk.linear_to_gamma_fragment,
      THREE.ShaderChunk.foggradient_fragment,
      "}",
    ].join("\n"),
  }),
  (THREE.ShaderChunk.itemthumb_pars_vertex = [
    "attribute vec3  highlightColor;",
    "attribute float highlightFactor;",
    "attribute float visible;",
    "varying vec2  vUv;",
    "varying float vVisible;",
  ].join("\n")),
  (THREE.ShaderChunk.itemthumb_func_vertex = [].join("\n")),
  (THREE.ShaderChunk.itemthumb_vertex = [
    "vUv = vec2( uv.x, uv.y );",
    "vVisible = visible;",
  ].join("\n")),
  (THREE.ShaderChunk.itemthumb_pars_fragment = [
    "#define M_PI 3.1415926535897932384626433832795",
    "uniform vec3 skyDomeBottomColor;",
    "uniform vec3 skyDomeTopColor;",
    "uniform sampler2D thumbTexture;",
    "varying vec3 vViewPosition;",
    "varying vec2 vUv;",
    "varying float  vGradFac;",
    "varying float vVisible;",
  ].join("\n")),
  (THREE.ShaderChunk.itemthumb_func_fragment = [
    "float map( float v, float a1, float b1, float a2, float b2 ) {",
    "return a2+(b2-a2)*((v-a1)/(b1-a1));",
    "}",
  ].join("\n")),
  (THREE.ShaderChunk.itemthumb_fragment = [
    "if(vVisible == 0.0) {",
    "gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);",
    "return;",
    "}",
    "gl_FragColor = vec4( (texture2D(thumbTexture, vUv)).rgb, 1.0 );",
  ].join("\n")),
  (THREE.ShaderLib.itemthumb = {
    uniforms: THREE.UniformsUtils.merge([
      THREE.UniformsLib.common,
      THREE.UniformsLib.foggradient,
      THREE.UniformsLib.aomap,
      THREE.UniformsLib.lightmap,
      THREE.UniformsLib.emissivemap,
      THREE.UniformsLib.fog,
      THREE.UniformsLib.ambient,
      THREE.UniformsLib.lights,
      {
        emissive: {
          type: "c",
          value: new THREE.Color(0),
        },
      },
      {
        thumbTexture: {
          type: "t",
          value: null,
        },
      },
    ]),
    attributes: {
      highlightColor: {
        type: "c",
        value: null,
      },
      highlightFactor: {
        type: "f",
        value: null,
      },
      visible: {
        type: "f",
        value: null,
      },
    },
    vertexShader: [
      "#define LAMBERT",
      "varying vec3 vLightFront;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.uv_pars_vertex,
      THREE.ShaderChunk.uv2_pars_vertex,
      THREE.ShaderChunk.envmap_pars_vertex,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.color_pars_vertex,
      THREE.ShaderChunk.morphtarget_pars_vertex,
      THREE.ShaderChunk.skinning_pars_vertex,
      THREE.ShaderChunk.shadowmap_pars_vertex,
      THREE.ShaderChunk.logdepthbuf_pars_vertex,
      THREE.ShaderChunk.foggradient_pars_vertex,
      THREE.ShaderChunk.itemthumb_pars_vertex,
      THREE.ShaderChunk.foggradient_func_vertex,
      THREE.ShaderChunk.itemthumb_func_vertex,
      "void main() {",
      THREE.ShaderChunk.itemthumb_vertex,
      THREE.ShaderChunk.uv_vertex,
      THREE.ShaderChunk.uv2_vertex,
      THREE.ShaderChunk.color_vertex,
      THREE.ShaderChunk.beginnormal_vertex,
      THREE.ShaderChunk.morphnormal_vertex,
      THREE.ShaderChunk.skinbase_vertex,
      THREE.ShaderChunk.skinnormal_vertex,
      THREE.ShaderChunk.defaultnormal_vertex,
      THREE.ShaderChunk.begin_vertex,
      THREE.ShaderChunk.morphtarget_vertex,
      THREE.ShaderChunk.skinning_vertex,
      THREE.ShaderChunk.project_vertex,
      THREE.ShaderChunk.logdepthbuf_vertex,
      THREE.ShaderChunk.worldpos_vertex,
      THREE.ShaderChunk.envmap_vertex,
      THREE.ShaderChunk.lights_lambert_vertex,
      THREE.ShaderChunk.shadowmap_vertex,
      THREE.ShaderChunk.foggradient_vertex,
      "}",
    ].join("\n"),
    fragmentShader: [
      "uniform vec3 diffuse;",
      "uniform vec3 emissive;",
      "uniform float opacity;",
      "varying vec3 vLightFront;",
      "#ifdef DOUBLE_SIDED",
      "varying vec3 vLightBack;",
      "#endif",
      THREE.ShaderChunk.common,
      THREE.ShaderChunk.color_pars_fragment,
      THREE.ShaderChunk.uv_pars_fragment,
      THREE.ShaderChunk.uv2_pars_fragment,
      THREE.ShaderChunk.map_pars_fragment,
      THREE.ShaderChunk.alphamap_pars_fragment,
      THREE.ShaderChunk.aomap_pars_fragment,
      THREE.ShaderChunk.lightmap_pars_fragment,
      THREE.ShaderChunk.emissivemap_pars_fragment,
      THREE.ShaderChunk.envmap_pars_fragment,
      THREE.ShaderChunk.bsdfs,
      THREE.ShaderChunk.ambient_pars,
      THREE.ShaderChunk.lights_pars,
      THREE.ShaderChunk.fog_pars_fragment,
      THREE.ShaderChunk.shadowmap_pars_fragment,
      THREE.ShaderChunk.shadowmask_pars_fragment,
      THREE.ShaderChunk.specularmap_pars_fragment,
      THREE.ShaderChunk.logdepthbuf_pars_fragment,
      THREE.ShaderChunk.itemthumb_pars_fragment,
      THREE.ShaderChunk.itemthumb_func_fragment,
      "void main() {",
      THREE.ShaderChunk.itemthumb_fragment,
      "\tvec4 diffuseColor = vec4( diffuse, opacity );",
      "\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
      "\tvec3 totalEmissiveLight = emissive;",
      THREE.ShaderChunk.logdepthbuf_fragment,
      THREE.ShaderChunk.map_fragment,
      THREE.ShaderChunk.color_fragment,
      THREE.ShaderChunk.alphamap_fragment,
      THREE.ShaderChunk.alphatest_fragment,
      THREE.ShaderChunk.specularmap_fragment,
      THREE.ShaderChunk.emissivemap_fragment,
      "\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",
      THREE.ShaderChunk.lightmap_fragment,
      "\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",
      "\t#ifdef DOUBLE_SIDED",
      "\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",
      "\t#else",
      "\t\treflectedLight.directDiffuse = vLightFront;",
      "\t#endif",
      "\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",
      THREE.ShaderChunk.aomap_fragment,
      "\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveLight;",
      THREE.ShaderChunk.envmap_fragment,
      THREE.ShaderChunk.linear_to_gamma_fragment,
      THREE.ShaderChunk.foggradient_fragment,
      "}",
    ].join("\n"),
  }),
  (THREE.ShaderLib.skydomegradient = {
    uniforms: THREE.UniformsUtils.clone({
      cameraPos: {
        type: "v3",
        value: new THREE.Vector3(0, 0, 0),
      },
      topColor: {
        type: "c",
        value: new THREE.Color(16711680),
      },
      bottomColor: {
        type: "c",
        value: new THREE.Color(16776960),
      },
      offset: {
        type: "f",
        value: 0,
      },
      exponent: {
        type: "f",
        value: 1,
      },
    }),
    vertexShader: [
      "#define M_PI 3.1415926535897932384626433832795",
      "uniform vec3 cameraPos;",
      "uniform float offset;",
      "uniform float exponent;",
      "varying float vFac; ",
      "float HALF_PI = M_PI * 0.5;",
      "float map( float v, float a1, float b1, float a2, float b2 ) {",
      "return a2+(b2-a2)*((v-a1)/(b1-a1));",
      "}",
      "void main() {",
      "vec3 worldPosition = ( modelMatrix * vec4( position, 1.0 ) ).xyz;",
      "vec3 nVec = normalize( worldPosition - cameraPos );",
      "float a = asin( abs( nVec.y ) / 1.0 );",
      "float fac = map( abs( a ), 0.0, HALF_PI, 0.0, 1.0 );",
      "if( fac < offset ) {",
      "fac = 0.0;",
      "} else {",
      "fac = map( fac, offset, 1.0, 0.0, 1.0 );",
      "}",
      "vFac = max( min( pow( fac, exponent ), 1.0 ), 0.0 );",
      "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
      "}",
    ].join("\n"),
    fragmentShader: [
      "uniform vec3 topColor;",
      "uniform vec3 bottomColor;",
      "varying float vFac;",
      "void main() {",
      "gl_FragColor = vec4( mix( bottomColor, topColor, vFac ), 1.0 );",
      "}",
    ].join("\n"),
  }),
  (THREE.ShaderLib.fadeline = {
    uniforms: {
      vCount: {
        type: "f",
        value: 0,
      },
      midColor: {
        type: "c",
        value: new THREE.Color(65280),
      },
      endColor: {
        type: "c",
        value: new THREE.Color(16711680),
      },
      midOpacity: {
        type: "f",
        value: 1,
      },
      endOpacity: {
        type: "f",
        value: 1,
      },
      opacity: {
        type: "f",
        value: 1,
      },
      linear: {
        type: "f",
        value: 1,
      },
    },
    attributes: {
      vIndex: {
        type: "f",
        value: [],
      },
    },
    vertexShader: [
      "uniform float vCount;",
      "uniform vec3 midColor;",
      "uniform vec3 endColor;",
      "uniform float midOpacity;",
      "uniform float endOpacity;",
      "uniform float opacity;",
      "uniform float time;",
      "uniform float linear;",
      "attribute float vIndex;",
      "varying vec3 vColor;",
      "varying float vOpacity;",
      "float easeInQuadratic( float t, float b, float c, float d ) {",
      "t /= d;",
      "return c*t*t + b;",
      "}",
      "void main() {",
      "float fac = vIndex / (vCount - 1.0);",
      "if(linear == 1.0) {",
      "fac = easeInQuadratic( fac, 0.0, 1.0, 1.0 );",
      "vColor = mix( endColor, midColor, fac );",
      "vOpacity = mix( endOpacity, midOpacity, fac ) * opacity;",
      "} else {",
      "if(fac < 0.5) {",
      "fac = fac * 2.0;",
      "vColor = mix( endColor, midColor, fac );",
      "vOpacity = mix( endOpacity, midOpacity, fac ) * opacity;",
      "} else {",
      "fac = (fac - 0.5) * 2.0;",
      "vColor = mix( midColor, endColor, fac );",
      "vOpacity = mix( midOpacity, endOpacity, fac ) * opacity;",
      "}",
      "}",
      "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
      "}",
    ].join("\n"),
    fragmentShader: [
      "varying vec3 vColor;",
      "varying float vOpacity;",
      "void main() {",
      "gl_FragColor = vec4( vColor, vOpacity );",
      "}",
    ].join("\n"),
  }),
  (THREE.ShaderLib.glow = {
    uniforms: {
      c: {
        type: "f",
        value: 1,
      },
      p: {
        type: "f",
        value: 1.4,
      },
      glowColor: {
        type: "c",
        value: new THREE.Vector3(65535),
      },
      opacity: {
        type: "f",
        value: 0,
      },
      maxOpacity: {
        type: "f",
        value: 1,
      },
      viewVector: {
        type: "v3",
        value: new THREE.Vector3(0, -1, 0),
      },
    },
    vertexShader: [
      "uniform vec3 viewVector;",
      "uniform float c;",
      "uniform float p;",
      "varying float intensity;",
      "void main()",
      "{",
      "vec3 vNormal = normalize( normalMatrix * normal );",
      "vec3 vNormel = normalize( normalMatrix * viewVector );",
      "intensity = pow( c - dot(vNormal, vNormel), p );",
      "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
      "}",
    ].join("\n"),
    fragmentShader: [
      "uniform vec3 glowColor;",
      "uniform float opacity;",
      "uniform float maxOpacity;",
      "varying float intensity;",
      "void main()",
      "{",
      "vec3 glow = glowColor * intensity;",
      "float opac = clamp( opacity * maxOpacity, 0.0, 1.0 );",
      "gl_FragColor = vec4( glow, opac );",
      "}",
    ].join("\n"),
  }),
  (THREE.WarpAuraShader = {
    uniforms: THREE.UniformsUtils.merge([
      {
        mRefractionRatio: {
          type: "f",
          value: 1.005,
        },
        mFresnelBias: {
          type: "f",
          value: 0.1,
        },
        mFresnelPower: {
          type: "f",
          value: 2,
        },
        mFresnelScale: {
          type: "f",
          value: 1,
        },
        tCube: {
          type: "t",
          value: null,
        },
        tCubeStatic: {
          type: "t",
          value: null,
        },
        objectCenter: {
          type: "v3",
          value: new THREE.Vector3(0, 0, 0),
        },
        minRadFactor: {
          type: "f",
          value: 0,
        },
        maxAngle: {
          type: "f",
          value: 5,
        },
        outerRadius: {
          type: "f",
          value: 100,
        },
        warpRadius: {
          type: "f",
          value: 90,
        },
        innerRadius: {
          type: "f",
          value: 0,
        },
        sizeScalar: {
          type: "f",
          value: 1,
        },
      },
    ]),
    vertexShader: [
      "uniform float mRefractionRatio;",
      "uniform float mFresnelBias;",
      "uniform float mFresnelScale;",
      "uniform float mFresnelPower;",
      "uniform vec3 objectCenter;",
      "uniform float outerRadius;",
      "uniform float warpRadius;",
      "uniform float innerRadius;",
      "uniform float sizeScalar;",
      "varying vec3 vDir;",
      "varying vec3 vDirToCenter;",
      "varying float vScaledInnerRadius;",
      "varying float vScaledWarpRadius;",
      "varying float vScaledOuterRadius;",
      "void main() {",
      "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
      "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
      "vDir = worldPosition.xyz - cameraPosition;",
      "vDirToCenter = objectCenter - cameraPosition;",
      "vScaledInnerRadius = innerRadius * sizeScalar;",
      "vScaledWarpRadius = warpRadius * sizeScalar;",
      "vScaledOuterRadius = outerRadius * sizeScalar;",
      "gl_Position = projectionMatrix * mvPosition;",
      "}",
    ].join("\n"),
    fragmentShader: [
      "#define M_PI 3.1415926535897932384626433832795",
      "uniform samplerCube tCube;",
      "uniform samplerCube tCubeStatic;",
      "uniform vec3 objectCenter;",
      "uniform float minRadFactor;",
      "uniform float maxAngle;",
      "varying vec3 vDir;",
      "varying vec3 vDirToCenter;",
      "varying float vScaledInnerRadius;",
      "varying float vScaledWarpRadius;",
      "varying float vScaledOuterRadius;",
      "float map(float v, float a1, float b1, float a2, float b2) {",
      "return a2 + (b2 - a2) * ((v - a1) / (b1 - a1));",
      "}",
      "mat4 rotationMatrix(vec3 axis, float angle)",
      "{",
      "axis = normalize(axis);",
      "float s = sin(angle);",
      "float c = cos(angle);",
      "float oc = 1.0 - c;",
      "return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,",
      "oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,",
      "oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,",
      "0.0,                                0.0,                                0.0,                                1.0);",
      "}",
      "void main() {",
      "float d = clamp(length(vDir - vDirToCenter), 0.0, vScaledOuterRadius);",
      "if(d < vScaledInnerRadius) {",
      "float fac = 1.0 - map(d, vScaledInnerRadius, vScaledWarpRadius, 0.0, 1.0);",
      "vec3 vecFromCenterToPos = vDir - vDirToCenter;",
      "vec3 axis = cross(vDirToCenter, vecFromCenterToPos);",
      "float minAngle = -M_PI;",
      "float maxAngle = M_PI;",
      "float angle = map(fac, 0.0, 1.0, -M_PI, M_PI);",
      "mat4 rotMatrix = rotationMatrix(axis, angle);",
      "vec3 newDir = vec3(rotMatrix * vec4(vDir, 0.0));",
      "vec4 refractedColor = textureCube(tCubeStatic, newDir);",
      "float darkFactor = map(d, 0.0, vScaledInnerRadius, 0.0, 0.8);",
      "darkFactor = darkFactor * darkFactor * darkFactor;",
      "vec4 darkColor = vec4(darkFactor, darkFactor, darkFactor, darkFactor);",
      "float glowFactor = map(d, vScaledInnerRadius * 0.97, vScaledInnerRadius, 0.0, 1.0);",
      "glowFactor = clamp(glowFactor, 0.0, 1.0);",
      "vec4 glowColor1 = vec4(1.0 * glowFactor, 0.9 * glowFactor, 0.3 * glowFactor, glowFactor * 0.5);",
      "vec4 glowColor2 = vec4(1.0, 1.0, 1.0, glowFactor * 0.5);",
      "vec4 glowColor = mix(glowColor1, glowColor2, glowFactor * 0.35);",
      "refractedColor = refractedColor * darkColor;",
      "refractedColor = refractedColor + glowColor;",
      "refractedColor.a = 1.0;",
      "gl_FragColor = refractedColor;",
      "} else if(d < vScaledWarpRadius) {",
      "float fac = 1.0 - map(d, vScaledInnerRadius, vScaledWarpRadius, 0.0, 1.0);",
      "fac = fac * fac;",
      "vec3 vecFromCenterToPos = vDir - vDirToCenter;",
      "vec3 axis = cross(vDirToCenter, vecFromCenterToPos);",
      "float minAngle = 0.0;",
      "float maxAngle = M_PI * 0.15;",
      "float angle = map(fac, 0.0, 1.0, minAngle, maxAngle);",
      "mat4 rotMatrix = rotationMatrix(axis, angle);",
      "vec3 newDir = vec3(rotMatrix * vec4(vDir, 0.0));",
      "vec4 refractedColor = textureCube( tCube, newDir );",
      "float glowFactor = clamp(map(fac, 0.7, 1.0, 0.0, 1.0), 0.0, 1.0) * 0.8;",
      "glowFactor = pow(2.0, 10.0 * (glowFactor - 1.0));",
      "vec4 glowColor = vec4(1.0 * glowFactor, 0.9 * glowFactor, 0.0, glowFactor);",
      "glowFactor *= glowFactor;",
      "refractedColor = refractedColor + glowColor;",
      "refractedColor.a = 1.0;",
      "gl_FragColor = refractedColor;",
      "} else {",
      "vec3 color = textureCube( tCube, vDir ).rgb;",
      "float opac = 1. - map(d, vScaledWarpRadius, vScaledOuterRadius, 0., 1.);",
      "gl_FragColor = vec4(color, opac);",
      "}",
      "}",
    ].join("\n"),
  }),
  (window.requestAnimationFrame =
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    function (e) {
      window.setTimeout(e, 1e3 / 60);
    }),
  (window.cancelAnimationFrame =
    window.cancelAnimationFrame || window.mozCancelAnimationFrame);
var SimplexNoise = function (e) {
  null == e && (e = Math),
    (this.grad3 = [
      [1, 1, 0],
      [-1, 1, 0],
      [1, -1, 0],
      [-1, -1, 0],
      [1, 0, 1],
      [-1, 0, 1],
      [1, 0, -1],
      [-1, 0, -1],
      [0, 1, 1],
      [0, -1, 1],
      [0, 1, -1],
      [0, -1, -1],
    ]),
    (this.grad4 = [
      [0, 1, 1, 1],
      [0, 1, 1, -1],
      [0, 1, -1, 1],
      [0, 1, -1, -1],
      [0, -1, 1, 1],
      [0, -1, 1, -1],
      [0, -1, -1, 1],
      [0, -1, -1, -1],
      [1, 0, 1, 1],
      [1, 0, 1, -1],
      [1, 0, -1, 1],
      [1, 0, -1, -1],
      [-1, 0, 1, 1],
      [-1, 0, 1, -1],
      [-1, 0, -1, 1],
      [-1, 0, -1, -1],
      [1, 1, 0, 1],
      [1, 1, 0, -1],
      [1, -1, 0, 1],
      [1, -1, 0, -1],
      [-1, 1, 0, 1],
      [-1, 1, 0, -1],
      [-1, -1, 0, 1],
      [-1, -1, 0, -1],
      [1, 1, 1, 0],
      [1, 1, -1, 0],
      [1, -1, 1, 0],
      [1, -1, -1, 0],
      [-1, 1, 1, 0],
      [-1, 1, -1, 0],
      [-1, -1, 1, 0],
      [-1, -1, -1, 0],
    ]),
    (this.p = []);
  for (var t = 0; t < 256; t++) this.p[t] = Math.floor(256 * e.random());
  this.perm = [];
  for (t = 0; t < 512; t++) this.perm[t] = this.p[255 & t];
  this.simplex = [
    [0, 1, 2, 3],
    [0, 1, 3, 2],
    [0, 0, 0, 0],
    [0, 2, 3, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1, 2, 3, 0],
    [0, 2, 1, 3],
    [0, 0, 0, 0],
    [0, 3, 1, 2],
    [0, 3, 2, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1, 3, 2, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1, 2, 0, 3],
    [0, 0, 0, 0],
    [1, 3, 0, 2],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [2, 3, 0, 1],
    [2, 3, 1, 0],
    [1, 0, 2, 3],
    [1, 0, 3, 2],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [2, 0, 3, 1],
    [0, 0, 0, 0],
    [2, 1, 3, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [2, 0, 1, 3],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [3, 0, 1, 2],
    [3, 0, 2, 1],
    [0, 0, 0, 0],
    [3, 1, 2, 0],
    [2, 1, 0, 3],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [3, 1, 0, 2],
    [0, 0, 0, 0],
    [3, 2, 0, 1],
    [3, 2, 1, 0],
  ];
};
(SimplexNoise.prototype.dot = function (e, t, i) {
  return e[0] * t + e[1] * i;
}),
  (SimplexNoise.prototype.dot3 = function (e, t, i, r) {
    return e[0] * t + e[1] * i + e[2] * r;
  }),
  (SimplexNoise.prototype.dot4 = function (e, t, i, r, n) {
    return e[0] * t + e[1] * i + e[2] * r + e[3] * n;
  }),
  (SimplexNoise.prototype.noise = function (e, t) {
    var i,
      r,
      n = (e + t) * (0.5 * (Math.sqrt(3) - 1)),
      o = Math.floor(e + n),
      a = Math.floor(t + n),
      s = (3 - Math.sqrt(3)) / 6,
      l = (o + a) * s,
      h = e - (o - l),
      c = t - (a - l);
    h > c ? ((i = 1), (r = 0)) : ((i = 0), (r = 1));
    var u = h - i + s,
      p = c - r + s,
      d = h - 1 + 2 * s,
      f = c - 1 + 2 * s,
      m = 255 & o,
      E = 255 & a,
      g = this.perm[m + this.perm[E]] % 12,
      v = this.perm[m + i + this.perm[E + r]] % 12,
      y = this.perm[m + 1 + this.perm[E + 1]] % 12,
      T = 0.5 - h * h - c * c,
      R = 0.5 - u * u - p * p,
      x = 0.5 - d * d - f * f;
    return (
      70 *
      ((T < 0 ? 0 : (T *= T) * T * this.dot(this.grad3[g], h, c)) +
        (R < 0 ? 0 : (R *= R) * R * this.dot(this.grad3[v], u, p)) +
        (x < 0 ? 0 : (x *= x) * x * this.dot(this.grad3[y], d, f)))
    );
  }),
  (SimplexNoise.prototype.noise3d = function (e, t, i) {
    var r,
      n,
      o,
      a,
      s,
      l,
      h = (e + t + i) * (1 / 3),
      c = Math.floor(e + h),
      u = Math.floor(t + h),
      p = Math.floor(i + h),
      d = 1 / 6,
      f = (c + u + p) * d,
      m = e - (c - f),
      E = t - (u - f),
      g = i - (p - f);
    m >= E
      ? E >= g
        ? ((r = 1), (n = 0), (o = 0), (a = 1), (s = 1), (l = 0))
        : m >= g
        ? ((r = 1), (n = 0), (o = 0), (a = 1), (s = 0), (l = 1))
        : ((r = 0), (n = 0), (o = 1), (a = 1), (s = 0), (l = 1))
      : E < g
      ? ((r = 0), (n = 0), (o = 1), (a = 0), (s = 1), (l = 1))
      : m < g
      ? ((r = 0), (n = 1), (o = 0), (a = 0), (s = 1), (l = 1))
      : ((r = 0), (n = 1), (o = 0), (a = 1), (s = 1), (l = 0));
    var v = m - r + d,
      y = E - n + d,
      T = g - o + d,
      R = m - a + 2 * d,
      x = E - s + 2 * d,
      H = g - l + 2 * d,
      b = m - 1 + 3 * d,
      w = E - 1 + 3 * d,
      q = g - 1 + 3 * d,
      M = 255 & c,
      _ = 255 & u,
      S = 255 & p,
      C = this.perm[M + this.perm[_ + this.perm[S]]] % 12,
      L = this.perm[M + r + this.perm[_ + n + this.perm[S + o]]] % 12,
      A = this.perm[M + a + this.perm[_ + s + this.perm[S + l]]] % 12,
      k = this.perm[M + 1 + this.perm[_ + 1 + this.perm[S + 1]]] % 12,
      D = 0.6 - m * m - E * E - g * g,
      P = 0.6 - v * v - y * y - T * T,
      I = 0.6 - R * R - x * x - H * H,
      V = 0.6 - b * b - w * w - q * q;
    return (
      32 *
      ((D < 0 ? 0 : (D *= D) * D * this.dot3(this.grad3[C], m, E, g)) +
        (P < 0 ? 0 : (P *= P) * P * this.dot3(this.grad3[L], v, y, T)) +
        (I < 0 ? 0 : (I *= I) * I * this.dot3(this.grad3[A], R, x, H)) +
        (V < 0 ? 0 : (V *= V) * V * this.dot3(this.grad3[k], b, w, q)))
    );
  }),
  (SimplexNoise.prototype.noise4d = function (e, t, i, r) {
    var n,
      o,
      a,
      s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E = this.grad4,
      g = this.simplex,
      v = this.perm,
      y = (Math.sqrt(5) - 1) / 4,
      T = (5 - Math.sqrt(5)) / 20,
      R = (e + t + i + r) * y,
      x = Math.floor(e + R),
      H = Math.floor(t + R),
      b = Math.floor(i + R),
      w = Math.floor(r + R),
      q = (x + H + b + w) * T,
      M = e - (x - q),
      _ = t - (H - q),
      S = i - (b - q),
      C = r - (w - q),
      L =
        (M > _ ? 32 : 0) +
        (M > S ? 16 : 0) +
        (_ > S ? 8 : 0) +
        (M > C ? 4 : 0) +
        (_ > C ? 2 : 0) +
        (S > C ? 1 : 0),
      A = M - (n = g[L][0] >= 3 ? 1 : 0) + T,
      k = _ - (o = g[L][1] >= 3 ? 1 : 0) + T,
      D = S - (a = g[L][2] >= 3 ? 1 : 0) + T,
      P = C - (s = g[L][3] >= 3 ? 1 : 0) + T,
      I = M - (l = g[L][0] >= 2 ? 1 : 0) + 2 * T,
      V = _ - (h = g[L][1] >= 2 ? 1 : 0) + 2 * T,
      O = S - (c = g[L][2] >= 2 ? 1 : 0) + 2 * T,
      F = C - (u = g[L][3] >= 2 ? 1 : 0) + 2 * T,
      z = M - (p = g[L][0] >= 1 ? 1 : 0) + 3 * T,
      U = _ - (d = g[L][1] >= 1 ? 1 : 0) + 3 * T,
      B = S - (f = g[L][2] >= 1 ? 1 : 0) + 3 * T,
      N = C - (m = g[L][3] >= 1 ? 1 : 0) + 3 * T,
      j = M - 1 + 4 * T,
      G = _ - 1 + 4 * T,
      W = S - 1 + 4 * T,
      X = C - 1 + 4 * T,
      Q = 255 & x,
      $ = 255 & H,
      Y = 255 & b,
      Z = 255 & w,
      K = v[Q + v[$ + v[Y + v[Z]]]] % 32,
      J = v[Q + n + v[$ + o + v[Y + a + v[Z + s]]]] % 32,
      ee = v[Q + l + v[$ + h + v[Y + c + v[Z + u]]]] % 32,
      te = v[Q + p + v[$ + d + v[Y + f + v[Z + m]]]] % 32,
      ie = v[Q + 1 + v[$ + 1 + v[Y + 1 + v[Z + 1]]]] % 32,
      re = 0.6 - M * M - _ * _ - S * S - C * C,
      ne = 0.6 - A * A - k * k - D * D - P * P,
      oe = 0.6 - I * I - V * V - O * O - F * F,
      ae = 0.6 - z * z - U * U - B * B - N * N,
      se = 0.6 - j * j - G * G - W * W - X * X;
    return (
      27 *
      ((re < 0 ? 0 : (re *= re) * re * this.dot4(E[K], M, _, S, C)) +
        (ne < 0 ? 0 : (ne *= ne) * ne * this.dot4(E[J], A, k, D, P)) +
        (oe < 0 ? 0 : (oe *= oe) * oe * this.dot4(E[ee], I, V, O, F)) +
        (ae < 0 ? 0 : (ae *= ae) * ae * this.dot4(E[te], z, U, B, N)) +
        (se < 0 ? 0 : (se *= se) * se * this.dot4(E[ie], j, G, W, X)))
    );
  });
var THREEx = THREEx || {};
THREEx.WindowResize = function (e, t) {
  var i = function () {
    e.setSize(window.innerWidth, window.innerHeight),
      (t.aspect = window.innerWidth / window.innerHeight),
      t.updateProjectionMatrix();
  };
  $(window).resize(i);
};
var Stats = function () {
    var e = Date.now(),
      t = e,
      i = 0,
      r = 1 / 0,
      n = 0,
      o = 0,
      a = 1 / 0,
      s = 0,
      l = 0,
      h = 0,
      c = document.createElement("div");
    (c.id = "stats"),
      c.addEventListener(
        "mousedown",
        function (e) {
          e.preventDefault(), v(++h % 2);
        },
        !1
      ),
      (c.style.cssText = "width:80px;opacity:0.9;cursor:pointer");
    var u = document.createElement("div");
    (u.id = "fps"),
      (u.style.cssText =
        "padding:0 0 3px 3px;text-align:left;background-color:#002"),
      c.appendChild(u);
    var p = document.createElement("div");
    (p.id = "fpsText"),
      (p.style.cssText =
        "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px"),
      (p.innerHTML = "FPS"),
      u.appendChild(p);
    var d = document.createElement("div");
    for (
      d.id = "fpsGraph",
        d.style.cssText =
          "position:relative;width:74px;height:30px;background-color:#0ff",
        u.appendChild(d);
      74 > d.children.length;

    ) {
      var f = document.createElement("span");
      (f.style.cssText =
        "width:1px;height:30px;float:left;background-color:#113"),
        d.appendChild(f);
    }
    var m = document.createElement("div");
    (m.id = "ms"),
      (m.style.cssText =
        "padding:0 0 3px 3px;text-align:left;background-color:#020;display:none"),
      c.appendChild(m);
    var E = document.createElement("div");
    (E.id = "msText"),
      (E.style.cssText =
        "color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px"),
      (E.innerHTML = "MS"),
      m.appendChild(E);
    var g = document.createElement("div");
    for (
      g.id = "msGraph",
        g.style.cssText =
          "position:relative;width:74px;height:30px;background-color:#0f0",
        m.appendChild(g);
      74 > g.children.length;

    )
      ((f = document.createElement("span")).style.cssText =
        "width:1px;height:30px;float:left;background-color:#131"),
        g.appendChild(f);
    var v = function (e) {
      switch ((h = e)) {
        case 0:
          (u.style.display = "block"), (m.style.display = "none");
          break;
        case 1:
          (u.style.display = "none"), (m.style.display = "block");
      }
    };
    return {
      REVISION: 11,
      domElement: c,
      setMode: v,
      begin: function () {
        e = Date.now();
      },
      end: function () {
        var h = Date.now();
        (i = h - e),
          (r = Math.min(r, i)),
          (n = Math.max(n, i)),
          (E.textContent = i + " MS (" + r + "-" + n + ")");
        var c = Math.min(30, 30 - (i / 200) * 30);
        return (
          (g.appendChild(g.firstChild).style.height = c + "px"),
          l++,
          h > t + 1e3 &&
            ((o = Math.round((1e3 * l) / (h - t))),
            (a = Math.min(a, o)),
            (s = Math.max(s, o)),
            (p.textContent = o + " FPS (" + a + "-" + s + ")"),
            (c = Math.min(30, 30 - (o / 100) * 30)),
            (d.appendChild(d.firstChild).style.height = c + "px"),
            (t = h),
            (l = 0)),
          h
        );
      },
      update: function () {
        e = this.end();
      },
    };
  },
  SceneManager = (function () {
    function e() {
      (R = requestAnimationFrame(e)), t();
    }
    function t() {
      // E.position.set(a.position.x, a.position.y, a.position.z),
      // null != c && (c.position.set(a.position.x, a.position.y, a.position.z)),
      // c.material.uniforms.cameraPos.value.set(c.position.x, c.position.y, c.position.z)),
      b && h.update(),
        TWEEN.update(),
        i(),
        r.usePhysics && r.physics.tick(),
        H ? m.render() : s.render(o, a);
    }
    function i() {}
    var r,
      n,
      o,
      a,
      s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E,
      g,
      v,
      y,
      T,
      R = null,
      x = !0,
      H = !1,
      b = !1,
      w = function (e) {
        r = this;
        // var i = 6072307
        var i = 15352741,
          v = 15524824;
        (this.SKYDOME_VIEW_COLORS = {
          intro: {
            topColor: new THREE.Color(16777215),
            bottomColor: new THREE.Color(16777215),
            exponent: 1.2,
            offset: 0.4,
          },
          drift: {
            topColor: new THREE.Color(i),
            bottomColor: new THREE.Color(v),
            exponent: 1,
            offset: 0,
          },
          tags: {
            topColor: new THREE.Color(i),
            bottomColor: new THREE.Color(v),
            exponent: 1,
            offset: 0,
          },
          search: {
            topColor: new THREE.Color(i),
            bottomColor: new THREE.Color(v),
            exponent: 1,
            offset: 0,
          },
        }),
          (l = new THREE.Clock(!0)),
          (this.physics = new ParticleSystem(0, 0.01)),
          (this.usePhysics = !1),
          (n = e),
          (o = new THREE.Scene()),
          (this.fogColor = new THREE.Color(14540253)),
          (this.fogDensity = 0.001),
          (o.fog = new THREE.FogExp2(this.fogColor, this.fogDensity));
        var y = 60,
          R = $(window).width() / $(window).height(),
          w = 5,
          q = 8e4;
        (a = new THREE.PerspectiveCamera(y, R, w, q)).position.set(0, 0, 0),
          a.quaternion.setFromAxisAngle(
            new THREE.Vector3(1, 0, 0),
            -Math.PI / 2
          ),
          o.add(a),
          (s = Detector.webgl
            ? new THREE.WebGLRenderer({
                antialias: !0,
                maxLights: 21,
              })
            : new THREE.CanvasRenderer()).setPixelRatio(
            window.devicePixelRatio
          ),
          s.setSize($(window).width(), $(window).height()),
          (f = 0),
          (p = this.fogColor),
          (d = this.fogColor),
          (u = lerpColors(p, d, f)),
          s.setClearColor(u, 1);
        new TWEEN.Tween({
          fac: 0,
        })
          .to(
            {
              fac: 1,
            },
            3e3
          )
          .easing(TWEEN.Easing.Quadratic.InOut)
          .onUpdate(function () {
            f = this.fac;
          })
          .start();
        if (
          (s.setClearColor(this.fogColor),
          $(n).append(s.domElement),
          $(s.domElement).attr("id", "threejs-canvas"),
          (this.projector = new THREE.Projector()),
          (this.raycaster = new THREE.Raycaster()),
          H)
        ) {
          (m = new THREE.EffectComposer(s)).addPass(new THREE.RenderPass(o, a));
          var M = THREE.VignetteShader,
            _ = new THREE.ShaderPass(M),
            S = 0.7,
            C = 1.6;
          (_.uniforms.offset.value = S),
            (_.uniforms.darkness.value = C),
            (_.renderToScreen = !0),
            m.addPass(_);
        }
        var L = function () {
          var e = $(window).width(),
            i = $(window).height();
          s.setSize(e, i),
            (a.aspect = e / i),
            a.updateProjectionMatrix(),
            x && t();
        };
        $(window).resize(L),
          b &&
            (((h = new Stats()).domElement.style.position = "absolute"),
            (h.domElement.style.bottom = "0"),
            document.body.appendChild(h.domElement)),
          (this.skyDomeRadius = 5e4),
          (this.skyDomeExponent = 1),
          (this.skyDomeOffset = 0.7),
          (this.skyDomeBottomColor = new THREE.Color(16777215)),
          (this.skyDomeTopColor = new THREE.Color(16777215));
        var A = new THREE.SphereGeometry(r.skyDomeRadius, 20, 20),
          k = THREE.ShaderLib.skydomegradient,
          D = new THREE.ShaderMaterial({
            vertexShader: k.vertexShader,
            fragmentShader: k.fragmentShader,
            uniforms: k.uniforms,
            side: THREE.DoubleSide,
          });
        (D.uniforms.topColor.value = r.skyDomeTopColor),
          (D.uniforms.bottomColor.value = r.skyDomeBottomColor),
          (D.uniforms.exponent.value = r.skyDomeExponent),
          (D.uniforms.offset.value = r.skyDomeOffset),
          (c = new THREE.Mesh(A, D)).position.set(0, 0, 0),
          o.add(c),
          (g = new THREE.AmbientLight(6316128)),
          o.add(g),
          (E = new THREE.PointLight(16777215, 0.79, 3e3)),
          o.add(E),
          this.start(),
          this.tweenSkyDomeState(this.SKYDOME_VIEW_COLORS.intro, 4e3);
      };
    return (
      (w.prototype = {
        constructor: w,
        setUpdateFunc: function (e) {
          i = e;
        },
        add: function (e) {
          o.add(e);
        },
        remove: function (e) {
          o.remove(e);
        },
        start: function () {
          x && ((x = !1), l.start(), e());
        },
        stop: function () {
          x || ((x = !0), l.stop(), R && (cancelAnimationFrame(R), (R = null)));
        },
        isStopped: function () {
          return this.stopped;
        },
        show: function () {
          $(n).show();
        },
        hide: function () {
          $(n).hide();
        },
        getClock: function () {
          return l;
        },
        getCamera: function () {
          return a;
        },
        getScene: function () {
          return o;
        },
        getRenderer: function () {
          return s;
        },
        getContainer: function () {
          return n;
        },
        getContainerWidth: function () {
          return n.width();
        },
        getContainerHeight: function () {
          return n.height();
        },
        getCanvas: function () {
          return $(n).find("canvas");
        },
        setClearColor: function (e) {
          d = e;
        },
        getClearColor: function () {
          return u;
        },
        updateClearColor: function () {
          (u = lerpColors(p, d, f)), s.setClearColor(u, 1);
        },
        getMouseVector: function (e, t) {
          return GeomUtils.mouseToDirectionalVector(e, t, a, this.projector, s);
        },
        getNormScreenXY: function (e, t) {
          var i = $(window).width() / 2,
            r = $(window).height() / 2,
            o = new THREE.Vector2();
          return (o.x = (e - i) / i), (o.y = (r - t) / r), o;
        },
        getScreenXY: function (e) {
          return GeomUtils.toScreenXY(e, a, this.projector, s);
        },
        getObjectScreenXY: function (e) {
          return GeomUtils.objectScreenXY(e, a, this.projector, s);
        },
        getCenteredScreenXY: function (e) {
          var t = GeomUtils.toScreenXY(e, a, this.projector, s);
          return (
            (t.x -= $(window).width() / 2), (t.y -= $(window).height() / 2), t
          );
        },
        getDistanceForRectSize: function (e, t) {
          var i,
            r = 50,
            o = e / t,
            a = $(window).width() - 2 * r,
            s = $(window).height() - 2 * r;
          o > (a = Math.min(a, 1e3)) / (s = Math.min(s, 1e3))
            ? (a, (i = a / o))
            : (i = s);
          var l = (t * $(window).height()) / i,
            h = (sceneManager.getCamera().fov * Math.PI) / 180;
          return l / 2 / Math.tan(h / 2);
        },
        getRectWorldSize: function (e, t, i) {
          return GeomUtils.getRectWorldSize(e, t, i, a, $(window).height());
        },
        getRectScreenSize: function (e, t, i) {
          return GeomUtils.getRectScreenSize(e, t, i, a, $(window).height());
        },
        getCircleScreenSize: function (e, t) {
          return GeomUtils.getCircleScreenSize(e, t, a, $(window).height());
        },
        getPositionRelativeToCam: function (e) {
          return a.worldToLocal(e);
        },
        getCanvasSize: function () {
          return new THREE.Vector2($(window).width(), $(window).height());
        },
        setPaused: function (e) {
          e ? this.stop() : this.start();
        },
        isPaused: function () {
          return x;
        },
        setFogDensity: function (e) {
          o.fog.density = e;
        },
        tweenLightIntensity: function (e, t, i, r) {
          null != v && v.stop(),
            (v = new TWEEN.Tween({
              intensity: E.intensity,
              distance: E.distance,
            })
              .to(
                {
                  intensity: e,
                  distance: t,
                },
                i
              )
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                (E.intensity = this.intensity), (E.distance = this.distance);
              })
              .onComplete(function () {
                null != r && r();
              })
              .start());
        },
        tweenSkyDomeState: function (e, t, i) {
          var r = e.bottomColor,
            n = e.topColor,
            o = e.exponent,
            a = e.offset,
            s = e.easing || TWEEN.Easing.Quadratic.InOut;
          null != y && y.stop();
          var l = this.skyDomeBottomColor.clone(),
            h = this.skyDomeTopColor.clone(),
            u = this.skyDomeExponent,
            p = this.skyDomeOffset,
            d = this;
          y = new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              t
            )
            .easing(s)
            .onUpdate(function () {
              (c.material.uniforms.bottomColor.value = d.skyDomeBottomColor =
                l.clone().lerp(r, this.t)),
                (c.material.uniforms.topColor.value = d.skyDomeTopColor =
                  h.clone().lerp(n, this.t)),
                (c.material.uniforms.exponent.value = d.skyDomeExponent =
                  lerp(u, o, this.t)),
                (c.material.uniforms.offset.value = d.skyDomeOffset =
                  lerp(p, a, this.t));
            })
            .onComplete(function () {
              null != i && i();
            })
            .start();
        },
        getCamLight: function () {
          return E;
        },
      }),
      w
    );
  })(),
  VisManager = (function () {
    var e,
      t,
      i,
      r,
      n = {},
      o = !0,
      a = function (r, n, a) {
        (e = this),
          (t = r),
          n,
          (this.objects = {
            item: {},
            tag: {},
          });
        var s = n.itemList;
        for (var l in s) {
          var h = a.getIndex(l);
          (this.objects.item[l] = new ItemNode(s[l], h)),
            this.objects.item[l].position.set(0, 0, 0);
        }
        a.updateItems(), (i = null);
        var c = t.getCanvas();
        $(c)
          .on("mousemove", function (t) {
            o || e.mouseMove(t);
          })
          .on("touchmove", function (t) {
            o || e.touchMove(t);
          })
          .on("mousedown", function (t) {
            o || e.mouseDown(t);
          })
          .on("touchstart", function (t) {
            o || e.touchStart(t);
          })
          .on("mouseup", function (t) {
            o || e.mouseUp(t);
          })
          .on("touchend", function (t) {
            o || e.touchEnd(t);
          })
          .on("mousewheel", function (t, i, r, n) {
            o || e.mouseWheel(t, i, r, n);
          })
          .on("mouseleave", function () {
            o || e.mouseLeave();
          }),
          $(window).on("resize", function () {
            o || e.resize();
          });
      };
    return (
      (a.prototype = {
        constructor: a,
        add: function (e) {
          (o = !1), (e.objects = this.objects), (n[e.name] = e);
        },
        update: function () {
          n[i].update();
        },
        setTo: function (t, o) {
          console.log(111111);
          if (i === "drift") {
            back.add(function () {
              vis.setTo("drift");
              setTimeout(function () {
                console.log("关闭");
                $("#back").trigger("click");
              }, 2000);
            });
          }

          null !== i
            ? // ui.hideItemLabel(),
              (console.log(n, i, n[i], "----------------"),
              n[i].release(function () {
                (r = i), (i = t), e.setParentVis(), n[i].init(o);
              }))
            : ((r = i),
              (i = t),
              e.setParentVis(),
              console.log("点击文字"),
              n[i].init(o));
        },
        revert: function (e) {
          this.setTo(r, e);
        },
        setParentVis: function () {
          for (var e in this.objects.item)
            this.objects.item[e].parentVis = n[i];
        },
        getCurrentVis: function () {
          return n[i];
        },
        getLastVisName: function () {
          return r;
        },
        getVisByName: function (e) {
          return n[e];
        },
        getItemField: function () {
          return itemField;
        },
        mouseMove: function (e) {
          n[i].mouseMove(e);
        },
        mouseDown: function (e) {
          n[i].mouseDown(e);
        },
        mouseUp: function (e) {
          n[i].mouseUp(e);
        },
        mouseWheel: function (e, t, r, o) {
          n[i].mouseWheel(e, t, r, o);
        },
        mouseLeave: function () {
          n[i].mouseLeave();
        },
        //   keyDown: function(e) {
        //       n[i].keyDown(e)
        //   },
        //   keyUp: function(e) {
        //       n[i].keyUp(e)
        //   },
        resize: function (e) {
          n[i].resize(e);
        },
      }),
      a
    );
  })(),
  IVis = (function () {
    var e,
      t,
      i,
      r = {
        type: null,
        id: null,
      },
      n = !0;
    (mediumThumbThresh = 1e3),
      (largeThumbThresh = 250),
      (viewAngle = 0.4 * Math.PI),
      (resInterval = 3),
      (resCounter = 0),
      (resCloseItemsLimit = 10),
      (unloadThumbThresh = 2e3),
      (resDisposeBatchLimit = 10);
    var o = [],
      a = !1,
      s = 4,
      l = 0,
      h = 0,
      c = !0,
      u = !0,
      p = function (i, r, n) {
        (t = this),
          (this.sm = i),
          (this.apiRef = r),
          (this.itemFieldRef = n),
          (this.name = "[untitled]"),
          (this.sceneObject = new THREE.Object3D()),
          this.sm.add(this.sceneObject),
          new THREE.Projector(),
          (e = new THREE.Raycaster()),
          (this.mouseX = -1),
          (this.mouseY = -1),
          (this.pmouseX = -1),
          (this.pmouseY = -1),
          (this.mousePressed = !1),
          (this.uiEnabled = !0),
          (this.hoveringOnObject = !1),
          (this.shouldWaitForFadeout = !1),
          (this.transDuration = 3500),
          (this.fadeoutDuration = 1e3),
          (this.lastClicked = {
            type: null,
            id: null,
          }),
          (this.lastClickWasSame = !1),
          (this.firstTime = !0),
          (this.state = "normal");
      };
    return (
      (p.prototype = {
        constructor: p,
        init: function (e) {
          (this.uiEnabled = !1),
            //   ui.setInfoWidgetContent(this.name),
            //   this.localUI = $("#ui #local"),
            //   this.globalUI = $("#ui #global"),
            //   this.localUI.append('<span id="back"></span>'),
            //   $("#back").hide(),
            this.onInit(e),
            this.sm.add(this.sceneObject);
        },
        onInit: function () {},
        release: function (e) {
          // ui.disableNav(),
          //   this.onRelease(),
          //   this.localUI.empty(),
          // $("#item-label-wrapper").addClass("hidden"),
          this.sceneObject.traverse(function (e) {
            e.material && (e.material.transparent = !0);
          });
          var t = this;
          new TWEEN.Tween({
            t: 1,
          })
            .to(
              {
                t: 0,
              },
              this.fadeoutDuration
            )
            .easing(TWEEN.Easing.Quadratic.InOut)
            .onUpdate(function () {
              var e = this.t;
              t.sceneObject.traverse(function (t) {
                if (null != t.material) {
                  var i = 1;
                  null != t.lastOpacity && (i = t.lastOpacity),
                    null != t.material.uniforms &&
                    void 0 !== t.material.uniforms.opacity
                      ? ((t.material.uniforms.opacity.value = map(
                          e,
                          0,
                          1,
                          0,
                          i
                        )),
                        (t.material.opacity = map(e, 0, 1, 0, i)))
                      : null != t.material.opacity &&
                        (t.material.opacity = map(e, 0, 1, 0, i));
                }
              }),
                t.duringRelease(1 - this.t);
            })
            .onComplete(function () {
              for (var i = t.sceneObject.children.length - 1; i >= 0; i--) {
                var r = t.sceneObject.children[i];
                t.sceneObject.remove(r);
              }
              for (i = t.sceneObject.children.length - 1; i >= 0; i--) {
                r = t.sceneObject.children[i];
                t.sceneObject.remove(r);
              }
              t.onReleaseEnd(), t.shouldWaitForFadeout && null != e && e();
            })
            .start(),
            t.shouldWaitForFadeout || null == e || e();
        },
        onRelease: function () {},
        duringRelease: function () {},
        onReleaseEnd: function () {},
        onInfoOpen: function () {},
        onInfoClose: function () {},
        update: function () {
          for (var e in (this.sm.updateClearColor(),
          this.itemFieldRef.setFogColor(this.sm.getClearColor()),
          this.itemFieldRef.update(),
          this.itemFieldRef.computeBoundingSphere(),
          this.onUpdate(),
          this.objects.item))
            this.objects.item[e].update();
          u && this.doRes();
        },
        doRes: function () {
          if (n && resCounter === resInterval) {
            var e = sceneManager.getCamera().position,
              t = this.camControls.getLookVector(),
              i = [],
              r = [];
            for (var c in this.objects.item) {
              var u = !1,
                p = (g = this.objects.item[c]).distanceToCamera;
              if (p < mediumThumbThresh) {
                var d = g.position.clone().sub(e).normalize(),
                  f = GeomUtils.angleBetweenVecs(t, d);
                (f < viewAngle || p < 350) &&
                  (i.push(g), (g.angle = f), (u = !0));
              }
              u || r.push(g);
            }
            i.sort(function (e, t) {
              return e.distanceToCamera > t.distanceToCamera
                ? 1
                : e.distanceToCamera < t.distanceToCamera
                ? -1
                : 0;
            });
            var m = i.splice(resCloseItemsLimit);
            r.concat(m), (o = []);
            for (var E = 0; E < i.length; E++) {
              var g;
              (g = i[E]).thumbLoaded
                ? (g.ensureThumbnailOn(),
                  g.distanceToCamera < largeThumbThresh
                    ? g.thumbLoadedLarge
                      ? g.ensureLargeThumb()
                      : o.length < s &&
                        !g.busyLoadingThumb &&
                        !g.noThumbExists &&
                        (o.containsObject(g) || o.push(g))
                    : g.ensureMediumThumb())
                : o.length < s &&
                  !g.busyLoadingThumb &&
                  !g.noThumbExists &&
                  (o.containsObject(g) || o.push(g));
            }
            if (!a && 0 !== o.length) {
              (l = o.length), (h = 0), (a = !0);
              for (E = 0; E < o.length; E++)
                o[E].thumbLoaded
                  ? o[E].ensureThumbnailLargeLoaded(function () {
                      ++h === l && ((h = 0), (l = 0), (a = !1));
                    })
                  : o[E].ensureThumbnailLoaded(function () {
                      ++h === l && ((h = 0), (l = 0), (a = !1));
                    });
            }
            r.sort(function (e, t) {
              return e.distanceToCamera < t.distanceToCamera
                ? 1
                : e.distanceToCamera > t.distanceToCamera
                ? -1
                : 0;
            });
            var v = 0;
            for (E = 0; E < r.length; E++)
              r[E].ensureThumbnailOff(),
                r[E].thumbLoaded &&
                  v <= resDisposeBatchLimit &&
                  r[E].distanceToCamera > unloadThumbThresh &&
                  (r[E].ensureThumbDisposed(), v++);
            resCounter = 0;
          } else resCounter++;
        },
        checkForMouseHover: function () {
          if (!this.camControls.dragging) {
            var t = sceneManager.getCamera(),
              i = sceneManager.getScene(),
              n = new THREE.Vector3(this.nmouseX, this.nmouseY, 1);
            n.unproject(t), e.set(t.position, n.sub(t.position).normalize());
            var o = e.intersectObjects(i.children, !0);
            if (o.length > 0) {
              for (; o[0].object.skipRaycast; ) o.splice(0, 1);
              this.hoveringOnObject = !0;
              var a = o[0].object.type,
                s = !0;
              switch (o[0].object.type) {
                case "IF":
                  var l = ~~(o[0].faceIndex / 2),
                    h = this.itemFieldRef.getId(l);
                  this.objects.item[h].isInteractive &&
                  !this.camControls.dragging
                    ? (h === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.objects.item[h].hoverOn(),
                      (r.type = a),
                      (r.id = h))
                    : this.clearLastHover();
                  break;
                case "HRM":
                  h = o[0].object.objId;
                  this.objects.item[h].isInteractive &&
                  !this.camControls.dragging
                    ? (h === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.objects.item[h].hoverOn(),
                      (r.type = a),
                      (r.id = h))
                    : this.clearLastHover();
                  break;
                case "BCS":
                  if ("out" === this.state || "in" === this.state)
                    ((h = o[0].object.index) === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.hoverOnSphere(h),
                      (r.type = a),
                      (r.id = h));
                  break;
                case "ADD":
                  if ("out" === this.state)
                    ((c = o[0].object.index) === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.hoverOnAdder(c),
                      (r.type = a),
                      (r.id = c));
                  break;
                case "BNL":
                  if ("out" === this.state)
                    ((c = o[0].object.index) === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.hoverOnBucketLabel(c),
                      (r.type = a),
                      (r.id = c));
                  break;
                case "BNX":
                  if ("out" === this.state)
                    ((c = o[0].object.index) === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.hoverOnBucketClose(c),
                      (r.type = a),
                      (r.id = c));
                  break;
                case "EGG":
                  var c;
                  if ("normal" === this.state)
                    ((c = o[0].object.index) === r.id && a === r.type) ||
                      (null !== r.id && this.clearLastHover(),
                      this.hoverOnEgg(c),
                      (r.type = a),
                      (r.id = c));
                  break;
                default:
                  this.clearLastHover(), (this.hoveringOnObject = !1), (s = !1);
              }
              s &&
                (o[0].distance < 1700
                  ? $("body").css("cursor", "pointer")
                  : $("body").css("cursor", "default"));
            } else
              $("body").css("cursor", "default"),
                this.clearLastHover(),
                (this.hoveringOnObject = !1);
          }
        },
        clearLastHover: function () {
          if (void 0 !== r || void 0 !== r.type) {
            switch (r.type) {
              case "HRM":
              case "IF":
                this.objects.item[r.id].hoverOff();
                break;
              case "BCS":
                this.hoverOffSphere(r.id);
                break;
              case "ADD":
                this.hoverOffAdder(r.id);
                break;
              case "BNL":
                this.hoverOffBucketLabel(r.id);
                break;
              case "BNX":
                this.hoverOffBucketClose(r.id);
                break;
              case "EGG":
                "drift" === vis.getCurrentVis().name && this.hoverOffEgg(r.id);
            }
            (r.type = null), (r.id = null);
          }
        },
        disableItemInteraction: function () {
          for (var e in ($("body").css("cursor", "default"), this.objects.item))
            this.objects.item[e].isInteractive = !1;
        },
        enableItemInteraction: function () {
          for (var e in this.objects.item)
            this.objects.item[e].isInteractive = !0;
        },
        onUpdate: function () {},
        mouseMove: function (e) {
          var t = sceneManager.getContainer();
          (this.pmouseX = this.mouseX),
            (this.pmouseY = this.mouseY),
            (this.mouseX = e.pageX - $(t).offset().left),
            (this.mouseY = e.pageY - $(t).offset().top),
            (this.nmouseX = (this.mouseX / $(t).width()) * 2 - 1),
            (this.nmouseY = (-this.mouseY / $(t).height()) * 2 + 1),
            this.uiEnabled && (this.checkForMouseHover(), this.onMouseMove(e));
          // ui.setItemLabelPosition(this.mouseX, this.mouseY))
        },
        onMouseMove: function () {},
        mouseDown: function (e) {
          this.uiEnabled && ((this.mousePressed = !0), this.onMouseDown(e));
          // this.hideItemLabel())
        },
        onMouseDown: function () {},
        mouseUp: function (e) {
          console.log("点击");
          if (((this.mousePressed = !1), this.uiEnabled)) {
            if (null !== r.id) {
              if (!this.camControls.dragging)
                switch (
                  (null != this.lastClicked.type && this.lastClicked.id == r.id
                    ? (this.lastClickWasSame = !0)
                    : (this.lastClickWasSame = !1),
                  r.type)
                ) {
                  case "HRM":
                  case "IF":
                    this.objects.item[r.id].isInteractive
                      ? (this.objects.item[r.id].click(),
                        (this.lastClicked = {
                          type: "item",
                          id: r.id,
                        }))
                      : this.onNothingClicked();
                    break;
                  case "BCS":
                    this.openSphere(r.id),
                      (this.lastClicked = {
                        type: "blocksphere",
                        id: r.id,
                      });
                    break;
                  case "ADD":
                    this.clickAdder(r.id);
                    break;
                  case "BNL":
                    this.clickBucketLabel(r.id);
                    break;
                  case "BNX":
                    this.clickBucketClose(r.id);
                    break;
                  case "EGG":
                    this.clickEgg(r.id);
                    break;
                  default:
                    this.onNothingClicked(), this.hideItemLabel();
                }
            } else
              this.camControls.dragging ||
                (this.onNothingClicked(), this.hideItemLabel());
            this.onMouseUp(e);
          }
        },
        onMouseUp: function () {},
        touchMove: function (e) {
          if (this.uiEnabled) {
            var t =
              e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            (e.pageX = t.pageX), (e.pageY = t.pageY), this.mouseMove(e);
          }
        },
        touchStart: function (e) {
          if (this.uiEnabled) {
            var t =
              e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            (e.pageX = t.pageX), (e.pageY = t.pageY), this.mouseDown(e);
          }
        },
        touchEnd: function (e) {
          if (this.uiEnabled) {
            var t =
              e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            (e.pageX = t.pageX), (e.pageY = t.pageY), this.mouseUp(e);
          }
        },
        getLastHover: function () {
          return r;
        },
        onNothingClicked: function () {},
        mouseWheel: function (e, t, i, r) {
          this.uiEnabled &&
            (this.onMouseWheel(e, t, i, r), this.checkForMouseHover());
        },
        onMouseWheel: function () {},
        // keyUp: function(e) {
        //     this.uiEnabled && this.onKeyUp(e)
        // },
        // onKeyUp: function() {},
        // keyDown: function(e) {
        //     if (this.uiEnabled) {
        //         if (c && !ui.searchBoxIsOpen()) {
        //             var t = String.fromCharCode(e.keyCode);
        //             /[a-zA-Z0-9]/.test(t) && (ui.openSearchInput(),
        //             this.uiEnabled = !1)
        //         }
        //         this.onKeyDown(e)
        //     }
        // },
        // onKeyDown: function() {},
        windowOut: function () {},
        mouseLeave: function () {
          this.clearLastHover();
          //   this.uiEnabled && (ui.hideItemLabel(),
          //   this.onMouseLeave())
        },
        onMouseLeave: function () {},
        resize: function (e) {
          this.uiEnabled && this.onResize(e);
        },
        onResize: function () {},
        getSceneObject: function () {
          return this.sm;
        },
        showItemLabel: function (e) {
          ("normal" != this.state && "in" != this.state) ||
            this.camControls.dragging ||
            (ui.setItemLabel(e.basicInfo), ui.showItemLabel());
        },
        hideItemLabel: function () {
          // ui.hideItemLabel()
        },
        tweenFog: function (e, t, r) {
          void 0 !== i && i.stop();
          var n = this.sm.getScene().fog;
          i = new TWEEN.Tween({
            density: n.density,
          })
            .to(
              {
                density: e,
              },
              t
            )
            .easing(TWEEN.Easing.Quadratic.InOut)
            .onUpdate(function () {
              n.density = this.density;
            })
            .onComplete(function () {
              null != r && r();
            })
            .start();
        },
        randomizeIndices: function (e) {
          for (var t = [], i = [], r = 0; r < e; r++) i.push(r);
          for (; 0 != i.length; ) {
            var n = Math.floor(Math.random() * i.length);
            t.push(i[n]), i.splice(n, 1);
          }
          return t;
        },
        orderPositionsByDistanceTo: function (e, t) {
          for (var i = [], r = 0; r < e.length; r++) {
            var n = e[r].distanceTo(t);
            i.push({
              pos: e[r],
              dis: n,
            });
          }
          i.sort(function (e, t) {
            return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
          });
          var o = new Array(i.length);
          for (r = 0; r < i.length; r++) o[r] = i[r].pos;
          return o;
        },
        orderIdsByDistanceTo: function (e, t) {
          for (var i = [], r = 0; r < e.length; r++) {
            var n = this.objects.item[e[r]].position.distanceTo(t);
            i.push({
              id: e[r],
              dis: n,
            });
          }
          i.sort(function (e, t) {
            return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
          });
          var o = new Array(i.length);
          for (r = 0; r < i.length; r++) o[r] = i[r].id;
          return o;
        },
        matchClosestPositions: function (e, i, r) {
          var n = {},
            o = t.orderPositionsByDistanceTo(e.slice(), i),
            a = [];
          if (null == r) for (var s in this.objects.item) a.push(s);
          else a = r.slice();
          for (a = t.orderIdsByDistanceTo(a, i); 0 != a.length; ) {
            s = a[0];
            var l = this.objects.item[s].position,
              h = this.getPositionsByProximity(l, o)[0].index,
              c = o[h];
            (n[s] = c), a.splice(0, 1), o.splice(h, 1);
          }
          return n;
        },
        getPositionsByProximity: function (e, t) {
          for (var i = new Array(), r = 0; r < t.length; r++) {
            var n = e.distanceTo(t[r]);
            i.push({
              index: r,
              distance: n,
            });
          }
          return (
            i.sort(function (e, t) {
              return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
            }),
            i
          );
        },
        getItemsByProximity: function (e, t) {
          var i = new Array(),
            r = [];
          if (void 0 === t || 0 === t.length)
            for (var n in this.objects.item) r.push(n);
          else r = t.slice();
          for (var o = 0; o < r.length; o++) {
            n = r[o];
            var a = e.distanceTo(this.objects.item[n].position);
            i.push({
              id: n,
              distance: a,
            });
          }
          return (
            i.sort(function (e, t) {
              return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
            }),
            i
          );
        },
        enableQuickSearch: function () {
          c = !0;
        },
        disableQuickSearch: function () {
          c = !1;
        },
        enableRes: function () {
          u = !0;
        },
        disableRes: function () {
          u = !1;
        },
        clear: function () {
          var e, t;
          for (t = this.sceneObject.children.length - 1; t >= 0; t--)
            (e = this.sceneObject.children[t]), this.sceneObject.remove(e);
          this.sm.remove(this.sceneObject);
        },
      }),
      p
    );
  })(),
  INode = (function () {
    var e = function (e) {
      THREE.Object3D.call(this),
        void 0 !== sceneManager ? sceneManager.add(this) : e.add(this),
        (this.r = 0),
        (this.w = 0),
        (this.h = 0),
        (this.isCircular = !0),
        (this.isExpanded = !1),
        (this.isInteractive = !0),
        (this.hovering = !1),
        (this.labels = []),
        (this.viewData = {}),
        (this.labelEnabled = !0),
        (this.fadeState = 0),
        (this.fadeSpeed = 0.15),
        (this.forceLabel = !1);
    };
    return (
      (e.prototype = Object.create(THREE.Object3D.prototype)),
      (e.prototype.update = function () {
        if (null != this.physicsParticle) {
          var e = this.physicsParticle.position;
          this.position.set(e.x, e.y, e.z);
        }
        this.onUpdate();
      }),
      (e.prototype.onUpdate = function () {}),
      (e.prototype.expand = function () {}),
      (e.prototype.collapse = function () {}),
      (e.prototype.checkForMouseOver = function () {
        return 0;
      }),
      (e.prototype.hoverOn = function () {
        this.parentVis.uiEnabled &&
          this.isInteractive &&
          ((this.hovering = !0), this.hoverOnCallback());
      }),
      (e.prototype.hoverOff = function () {
        this.isInteractive && ((this.hovering = !0), this.hoverOffCallback());
      }),
      (e.prototype.hoverOnCallback = function () {}),
      (e.prototype.hoverOffCallback = function () {}),
      (e.prototype.click = function () {
        this.isInteractive && this.clickCallback();
      }),
      (e.prototype.clickCallback = function () {}),
      (e.prototype.onClickCallback = function () {}),
      (e.prototype.setPosition = function (e) {
        this.position = e;
      }),
      (e.prototype.getPosition = function () {
        return this.position;
      }),
      (e.prototype.getWorldPosition = function () {
        return this.localToWorld(new THREE.Vector(0, 0, 0));
      }),
      (e.prototype.cleanUp = function () {
        this.parentVis.sceneObject.remove(this), this.onCleanUp();
      }),
      (e.prototype.onCleanUp = function () {}),
      e
    );
  })(),
  ItemNode = (function () {
    new TWEEN.Tween();
    var e,
      t,
      i,
      r = 1e3,
      n = 1700,
      o = function (r, n) {
        var o, a;
        INode.call(this),
          this,
          (this.animating = !1),
          (this.type = "item"),
          (this.itemIndex = n),
          (this.goyaId = r.id),
          (this.imageid = r.image_id),
          (this.aspectRatio = itemField.aspectRatios[n]),
          (this.previewing = !1),
          (e = itemField.sizeScalar),
          (t = 0.8 * e),
          (i = 0.6 * e),
          (this.highlightTween = new TWEEN.Tween()),
          (this.highlightFactor = 0),
          this.aspectRatio > 1
            ? ((o = e), (a = ~~(e / this.aspectRatio)))
            : ((o = ~~(e * this.aspectRatio)), (a = e)),
          (this.thumbWidth = o),
          (this.thumbHeight = a),
          (this.corners = [
            new THREE.Vector3(-o / 2, -a / 2, 0),
            new THREE.Vector3(o / 2, -a / 2, 0),
            new THREE.Vector3(-o / 2, a / 2, 0),
            new THREE.Vector3(o / 2, a / 2, 0),
          ]),
          (this.cornersRotated = [
            new THREE.Vector3(),
            new THREE.Vector3(),
            new THREE.Vector3(),
            new THREE.Vector3(),
          ]),
          (this.cornersHidden = [
            new THREE.Vector3(0, 0, 0),
            new THREE.Vector3(0, 0, 0),
            new THREE.Vector3(0, 0, 0),
            new THREE.Vector3(0, 0, 0),
          ]),
          (this.sizeState = 0),
          (this.targetQuaternion = new THREE.Quaternion()),
          (this.frameColors = {
            normal: new THREE.Color(16720452),
            favorite: new THREE.Color(16720452),
          }),
          (this.position = new THREE.Vector3(0, 0, 0)),
          (this.coordinates = [0, 0]),
          (this.isCircular = !0),
          (this.basicInfo = r),
          this.detailedInfo,
          (this.noThumbExists = null === this.imageid),
          this.noThumbExists && console.log("Missing imageid", this.basicInfo),
          (this.thumbLoaded = !1),
          (this.thumbLoadedLarge = !1),
          (this.busyLoadingThumb = !1),
          (this.enableRotateToCamera = !0),
          (this.forceRotateToCamera = !1),
          (this.rotateToCamera = !0),
          (this.constrainToYAxis = !1),
          (this.rotateToTarget = !1),
          this.rotationTarget,
          (this.shouldHideLowRes = !1),
          (this.shouldHideHighRes = !1),
          -1 !== itemField.noThumbList.indexOf(this.id)
            ? (this.hasThumb = !1)
            : (this.hasThumb = !0),
          (this.screenDimensions = {}),
          (this.fadeStates = {
            thumbnail: 0,
          });
      };
    return (
      (o.prototype = Object.create(INode.prototype)),
      (o.prototype.setParent = function (e) {
        this.parentVis = e;
      }),
      (o.prototype.setPosition = function (e) {
        this.position.set(e.x, e.y, e.z);
      }),
      (o.prototype.getPosition = function () {
        return this.position;
      }),
      (o.prototype.setCoordinates = function (e, t) {
        (this.coordinates[0] = e), (this.coordinates[1] = t);
      }),
      (o.prototype.getCoordinates = function () {
        return this.coordinates;
      }),
      (o.prototype.setQuaternion = function (e) {
        this.quaternion.set(e.x, e.y, e.z, e.w);
      }),
      (o.prototype.getQuaternion = function () {
        return this.quaternion;
      }),
      (o.prototype.setVisible = function (e) {
        itemField.setVisible(this.itemIndex, e);
      }),
      (o.prototype.setHighlightColor = function (e) {
        void 0 !== this.mediumMaterial &&
          (this.mediumMaterial.uniforms.highlightColor.value = e),
          void 0 !== this.largeMaterial &&
            (this.largeMaterial.uniforms.highlightColor.value = e),
          itemField.setHighlightColor(this.itemIndex, e);
      }),
      (o.prototype.getHighlightColor = function () {
        itemField.getHighlightColor(this.itemIndex);
      }),
      (o.prototype.setHighlightFactor = function (e) {
        (this.highlightFactor = e),
          void 0 !== this.mediumMaterial &&
            (this.mediumMaterial.uniforms.highlightFactor.value = e),
          void 0 !== this.largeMaterial &&
            (this.largeMaterial.uniforms.highlightFactor.value = e),
          itemField.setHighlightFactor(this.itemIndex, e);
      }),
      (o.prototype.getHighlightFactor = function () {
        itemField.getHighlightFactor(this.itemIndex);
      }),
      (o.prototype.updateScreenBounds = function () {
        (this.screenSize = GeomUtils.getRectScreenSize(
          this.getPosition(),
          150,
          150,
          sceneManager.getCamera(),
          sceneManager.getContainer().height()
        )),
          (this.screenPos = sceneManager.getScreenXY(this.getPosition()));
      }),
      (o.prototype.onUpdate = function () {
        void 0 !== this.highResMesh &&
          ((this.highResMesh.material.uniforms.cameraPos.value =
            sceneManager.getCamera().position),
          (this.highResMesh.material.uniforms.skyDomeRadius.value =
            sceneManager.skyDomeRadius),
          (this.highResMesh.material.uniforms.skyDomeExponent.value =
            sceneManager.skyDomeExponent),
          (this.highResMesh.material.uniforms.skyDomeOffset.value =
            sceneManager.skyDomeOffset),
          (this.highResMesh.material.uniforms.skyDomeBottomColor.value =
            sceneManager.skyDomeBottomColor),
          (this.highResMesh.material.uniforms.skyDomeTopColor.value =
            sceneManager.skyDomeTopColor));
        var e = sceneManager.getCamera().position;
        if (
          ((this.distanceToCamera = distVec3(this.position, e)),
          this.forceRotateToCamera ||
          (this.enableRotateToCamera &&
            this.distanceToCamera < 2e3 &&
            this.distanceToCamera > 150)
            ? (this.rotateToCamera = !0)
            : (this.rotateToCamera = !1),
          this.rotateToCamera)
        )
          if (this.constrainToYAxis) {
            var n = new THREE.Quaternion();
            (c = new THREE.Vector3()).set(
              this.position.x,
              this.position.y,
              this.position.z
            );
            var o = e.x - c.x,
              a = e.z - c.z,
              s = Math.atan2(o, a);
            n.setFromAxisAngle(new THREE.Vector3(0, 1, 0), s);
            this.targetQuaternion.set(n.x, n.y, n.z, n.w);
          } else {
            var l = sceneManager.getCamera().quaternion;
            this.targetQuaternion.set(l.x, l.y, l.z, l.w);
          }
        else this.rotateToTarget && this.lookAt(this.rotationTarget);
        var h = new THREE.Quaternion();
        if (
          (THREE.Quaternion.slerp(
            this.quaternion,
            this.targetQuaternion,
            h,
            0.05
          ),
          h.normalize(),
          this.quaternion.set(h.x, h.y, h.z, h.w),
          void 0 !== this.highResMesh)
        ) {
          var c = this.getPosition();
          // todo
          switch (this.fadeStates.thumbnail) {
            case -1:
              // this.highResMesh.currentScale = 0.000001,
              // this.highResMesh.scale.set(0.000001, 0.000001, 0.000001),
              (this.highResMesh.material.opacity = 0),
                (this.fadeStates.thumbnail = 0);
              break;
            case 1:
              (this.highResMesh.currentScale = 1),
                this.highResMesh.scale.set(1, 1, 1),
                (this.highResMesh.material.opacity = 1),
                (this.fadeStates.thumbnail = 0);
          }
        }
        (this.shouldHideHighRes = !1),
          this.distanceToCamera < r
            ? this.distanceToCamera > t
              ? this.highResMesh && 1 === this.highResMesh.material.opacity
                ? ((this.highResMesh.material.uniforms.nearOpacity.value = 1),
                  (this.shouldHideLowRes = !0))
                : (this.shouldHideLowRes = !1)
              : this.distanceToCamera > i
              ? ((this.shouldHideLowRes = !0),
                this.highResMesh &&
                  (this.highResMesh.material.uniforms.nearOpacity.value =
                    Math.max(
                      Math.min(map(this.distanceToCamera, i, t, 0, 1), 1),
                      0
                    )))
              : ((this.shouldHideLowRes = !0),
                (this.shouldHideHighRes = !0),
                this.highResMesh &&
                  (this.highResMesh.material.uniforms.nearOpacity.value = 0))
            : (this.shouldHideLowRes = !1),
          this.highResMesh &&
            (this.shouldHideHighRes
              ? this.highResMesh.scale.set(1e-6, 1e-6, 1e-6)
              : this.highResMesh.scale.set(
                  this.highResMesh.currentScale,
                  this.highResMesh.currentScale,
                  this.highResMesh.currentScale
                ));
        this.calculateCornerPositions();
      }),
      (o.prototype.calculateCornerPositions = function () {
        if (this.shouldHideLowRes) {
          var e = [this.position, this.position, this.position, this.position];
          itemField.setVertexPositions(this.itemIndex, e);
        } else {
          for (var t = 0; t < this.corners.length; t++)
            (this.cornersRotated[t] = this.corners[t].clone()),
              this.cornersRotated[t].applyQuaternion(this.quaternion),
              this.cornersRotated[t].add(this.position);
          itemField.setVertexPositions(this.itemIndex, this.cornersRotated);
          var i = new THREE.Vector3(0, 0, 1);
          i.applyQuaternion(this.quaternion),
            itemField.setVertexNormals(this.itemIndex, i);
        }
      }),
      (o.prototype.hoverOnCallback = function () {
        return;
        if (
          this.isInteractive &&
          this.position.distanceTo(sceneManager.getCamera().position) < n
        ) {
          var e = this;
          setTimeout(function () {
            var t = e.parentVis.getLastHover();
            null !== t.id &&
              e.basicInfo.id === t.id &&
              ui.openItemPreview(e.basicInfo);
          }, 1),
            $("body").css("cursor", "pointer"),
            "preview" !== vis.getCurrentVis().state && this.highlightOn();
        }
      }),
      (o.prototype.hoverOffCallback = function () {
        return;
        $("body").css("cursor", "default"),
          ui.closeItemPreview(),
          "preview" !== vis.getCurrentVis().state && this.highlightOff();
      }),
      (o.prototype.highlightOn = function () {
        var e = this,
          t = this.highlightFactor;
        this.highlightTween.stop(),
          (this.highlightTween = new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              200
            )
            .onUpdate(function () {
              var i = lerp(t, 0.9, this.t);
              e.setHighlightFactor(i), itemField.updateHighlights();
            })
            .start());
      }),
      (o.prototype.highlightOff = function () {
        var e = this,
          t = this.highlightFactor;
        this.highlightTween.stop(),
          (this.highlightTween = new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              200
            )
            .onUpdate(function () {
              var i = lerp(t, 0, this.t);
              e.setHighlightFactor(i), itemField.updateHighlights();
            })
            .start());
      }),
      (o.prototype.clickCallback = function () {
        // ui.closeItemPreview(),
        if (this.position.distanceTo(sceneManager.getCamera().position) < n) {
          this.onClickCallback();
        }
      }),
      (o.prototype.onClickCallback = function () {}),
      (o.prototype.createHoverBox = function (e, t, i, r, n, o, a, s) {
        s || (s = 20);
        var l = e,
          h = document.createElement("canvas"),
          c = h.getContext("2d");
        c.font = n + "pt 'Conv_DINPro-Regular'";
        var u = c.measureText(l).width;
        (this.w = h.width = u + 2 * s),
          (this.h = h.height = n + 2 * s),
          a &&
            ((c.fillStyle = a),
            c.fillRect(
              h.width / 2 - u / 2 - s / 2,
              h.height / 2 - n / 2 - +s / 2,
              u + s,
              n + s
            )),
          (c.textAlign = "center"),
          (c.textBaseline = "middle"),
          (c.fillStyle = o),
          (c.shadowColor = "black"),
          (c.shadowOffsetX = 0),
          (c.shadowOffsetY = 0),
          (c.shadowBlur = 3),
          c.fillText(l, h.width / 2, h.height / 2);
        var p = new THREE.Texture(h);
        p.needsUpdate = !0;
        var d,
          f = p.image.width / p.image.height,
          m = new THREE.SpriteMaterial({
            color: 16777215,
            map: p,
            blending: THREE.AdditiveBlending,
            transparent: !1,
            fog: !0,
          });
        return (
          ((d = new THREE.Sprite(m)).scale.x = 80 * f), (d.scale.y = 80), d
        );
      }),
      (o.prototype.createThumbnail = function (e, t) {
        (this.busyLoadingThumb = !0),
          (function (e, i) {
            var r = new THREE.TextureLoader();
            (r.crossOrigin = "anonymous"),
              r.load(
                i,
                function (i) {
                  var r = new THREE.PlaneBufferGeometry(
                    e.thumbWidth,
                    e.thumbHeight
                  );
                  e.mediumMaterial = e.createMaterial(i);
                  var n = new THREE.Mesh(r, e.mediumMaterial);
                  sceneManager.getCamera().position;
                  (e.highResMesh = n),
                    (e.highResMesh.type = "HRM"),
                    (e.highResMesh.objId = e.goyaId),
                    (e.highResMesh.currentScale = 1),
                    e.add(e.highResMesh),
                    (e.busyLoadingThumb = !1),
                    (e.noThumbExists = !1),
                    (e.thumbLoaded = !0),
                    void 0 !== t && t(!0);
                },
                function () {
                  (e.busyLoadingThumb = !1),
                    (e.noThumbExists = !0),
                    (e.thumbLoaded = !1),
                    void 0 !== t && t(!1);
                }
              );
          })(this, e);
      }),
      (o.prototype.createThumbnailLarge = function (e, t) {
        (this.busyLoadingThumb = !0),
          (function (e, i) {
            var r = new THREE.TextureLoader();
            (r.crossOrigin = "anonymous"),
              r.load(
                i,
                function (i) {
                  (e.largeMaterial = e.createMaterial(i)),
                    (e.highResMesh.material = e.largeMaterial),
                    (e.thumbLoadedLarge = !0),
                    (e.busyLoadingThumb = !1),
                    (e.noThumbExists = !1),
                    void 0 !== t && t(!0);
                },
                function (t) {
                  console.log("Error loading large texture", t),
                    (e.busyLoadingThumb = !1),
                    (e.noThumbExists = !0);
                }
              );
          })(this, e);
      }),
      (o.prototype.createMaterial = function (e) {
        var t = THREE.ShaderLib.itembig,
          i = THREE.UniformsUtils.clone(t.uniforms);
        (i.cameraPos.value = new THREE.Vector3(0, 0, 0)),
          (i.skyDomeRadius.value = sceneManager.skyDomeRadius),
          (i.skyDomeExponent.value = sceneManager.skyDomeExponent),
          (i.skyDomeOffset.value = sceneManager.skyDomeOffset),
          (i.skyDomeBottomColor.value = sceneManager.skyDomeBottomColor),
          (i.skyDomeTopColor.value = sceneManager.skyDomeTopColor),
          (i.thumbTexture.value = e),
          (i = THREE.UniformsUtils.merge([i, THREE.UniformsLib.lights]));
        var r = new THREE.ShaderMaterial({
          uniforms: i,
          vertexShader: t.vertexShader,
          fragmentShader: t.fragmentShader,
          side: THREE.DoubleSide,
          transparent: !0,
          depthWrite: !0,
          depthTest: !0,
          lights: !0,
          fog: !0,
        });
        return (
          (i.thumbTexture.value.needsUpdate = !0),
          (i.highlightColor.value = itemField.getHighlightColor(
            this.itemIndex
          )),
          (i.highlightFactor.value = this.highlightFactor),
          r
        );
      }),
      (o.prototype.rotateSide = function () {
        var e = new THREE.Quaternion();
        e.setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2),
          this.targetQuaternion.multiply(e);
      }),
      (o.prototype.ensureThumbDisposed = function () {
        this.thumbLoaded &&
          (this.remove(this.highResMesh),
          this.highResMesh.geometry.dispose(),
          this.highResMesh.material.uniforms.thumbTexture.value.dispose(),
          this.highResMesh.material.dispose(),
          (this.highResMesh = void 0),
          void 0 !== this.mediumMaterial &&
            (this.mediumMaterial.dispose(),
            this.mediumMaterial.uniforms.thumbTexture.value.dispose(),
            (this.mediumMaterial = void 0)),
          void 0 !== this.largeMaterial &&
            (this.largeMaterial.dispose(),
            this.largeMaterial.uniforms.thumbTexture.value.dispose(),
            (this.largeMaterial = void 0)),
          (this.thumbLoaded = !1));
      }),
      (o.prototype.ensureThumbnailOn = function () {
        this.thumbLoaded &&
          1 != this.highResMesh.material.opacity &&
          1 != this.fadeState.thumbnail &&
          (this.fadeStates.thumbnail = 1);
      }),
      (o.prototype.ensureThumbnailOff = function () {
        this.thumbLoaded &&
          0 != this.highResMesh.material.opacity &&
          -1 != this.fadeStates.thumbnail &&
          ((this.fadeStates.thumbnail = -1),
          0 != this.sizeState && (this.sizeState = 0));
      }),
      (o.prototype.ensureMediumThumb = function () {
        void 0 !== this.highResMesh &&
          1 != this.sizeState &&
          ((this.highResMesh.material = this.mediumMaterial),
          (this.sizeState = 1));
      }),
      (o.prototype.ensureLargeThumb = function () {
        void 0 !== this.highResMesh &&
          void 0 !== this.largeMaterial &&
          2 != this.sizeState &&
          ((this.highResMesh.material = this.largeMaterial),
          (this.sizeState = 2));
      }),
      (o.prototype.ensureThumbnailLoaded = function (e) {
        this.thumbLoaded || this.noThumbExists || this.busyLoadingThumb
          ? void 0 !== e && e(!1)
          : this.createThumbnail(getImageUrl(this.imageid, 256), e);
      }),
      (o.prototype.ensureThumbnailLargeLoaded = function (e) {
        this.thumbLoadedLarge || this.noThumbExists || this.busyLoadingThumb
          ? void 0 !== e && e(!1)
          : this.createThumbnailLarge(getImageUrl(this.imageid, 680), e);
      }),
      (o.prototype.show = function () {
        void 0 !== this.highResMesh &&
          (this.highResMesh.material.uniforms.opacity.value = 1),
          this.setVisible(1);
      }),
      (o.prototype.hide = function () {
        void 0 !== this.highResMesh &&
          (this.highResMesh.material.uniforms.opacity.value = 0),
          this.setVisible(0);
      }),
      (o.prototype.addFrame = function () {
        if (null == this.frame) {
          var e = new THREE.Geometry(),
            t = 15,
            i = 5,
            r = new THREE.Vector2(
              -this.thumbWidth / 2 - i,
              this.thumbHeight / 2 + i
            ),
            n = new THREE.Vector2(
              this.thumbWidth / 2 + i,
              this.thumbHeight / 2 + i
            ),
            o = new THREE.Vector2(
              -this.thumbWidth / 2 - i,
              -this.thumbHeight / 2 - i
            ),
            a = new THREE.Vector2(
              this.thumbWidth / 2 + i,
              -this.thumbHeight / 2 - i
            );
          e.vertices.push(new THREE.Vector3(r.x, r.y, 0)),
            e.vertices.push(new THREE.Vector3(r.x + t, r.y, 0)),
            e.vertices.push(new THREE.Vector3(r.x, r.y, 0)),
            e.vertices.push(new THREE.Vector3(r.x, r.y - t, 0)),
            e.vertices.push(new THREE.Vector3(n.x, n.y, 0)),
            e.vertices.push(new THREE.Vector3(n.x - t, n.y, 0)),
            e.vertices.push(new THREE.Vector3(n.x, n.y, 0)),
            e.vertices.push(new THREE.Vector3(n.x, n.y - t, 0)),
            e.vertices.push(new THREE.Vector3(o.x, o.y, 0)),
            e.vertices.push(new THREE.Vector3(o.x + t, o.y, 0)),
            e.vertices.push(new THREE.Vector3(o.x, o.y, 0)),
            e.vertices.push(new THREE.Vector3(o.x, o.y + t, 0)),
            e.vertices.push(new THREE.Vector3(a.x, a.y, 0)),
            e.vertices.push(new THREE.Vector3(a.x - t, a.y, 0)),
            e.vertices.push(new THREE.Vector3(a.x, a.y, 0)),
            e.vertices.push(new THREE.Vector3(a.x, a.y + t, 0));
          var s = new THREE.LineBasicMaterial({
            color: this.frameColors.normal,
            transparent: !0,
            opacity: 0.5,
            linewidth: 1,
          });
          (this.frame = new THREE.Line(e, s, THREE.LinePieces)),
            this.add(this.frame);
        }
      }),
      (o.prototype.removeFrame = function () {
        this.remove(this.frame), (this.frame = void 0);
      }),
      (o.prototype.favoriteFrame = function () {
        this.frame.material.color = this.frameColors.favorite;
      }),
      (o.prototype.unfavoriteFrame = function () {
        this.frame.material.color = this.frameColors.normal;
      }),
      (o.prototype.onCleanUp = function () {}),
      o
    );
  })(),
  ItemField = (function () {
    var e,
      t,
      i,
      r = {},
      n = [],
      o = function (t, i, o, a) {
        THREE.Object3D.call(this), (e = this), (this.loaded = !1), t.length;
        for (var s = 0; s < t.length; s++) {
          (r[t[s].id] = s), (n[s] = t[s].id);
        }
        (this.sizeScalar = 128),
          (this.onLoad = a),
          (this.noThumbList = []),
          this.createThumbMesh(t, i, o);
      };
    return (
      (o.prototype = Object.create(THREE.Object3D.prototype)),
      (o.prototype.createThumbMesh = function (r, n, o) {
        var a = new THREE.TextureLoader();
        (a.crossOrigin = "anonymous"),
          a.load(
            "./image/thumb_sheet_32.png",
            function (n) {
              (thumbSheet = n), (jsonInfo = o);
              var a = THREE.ShaderLib.itemthumb;
              ((i = a.uniforms).cameraPos.value = new THREE.Vector3(0, 0, 0)),
                (i.thumbTexture.value = thumbSheet),
                (i.skyDomeRadius.value = sceneManager.skyDomeRadius),
                (i.skyDomeOffset.value = sceneManager.skyDomeOffset),
                (i.skyDomeExponent.value = sceneManager.skyDomeExponent),
                (i.skyDomeBottomColor.value = sceneManager.skyDomeBottomColor),
                (i.skyDomeTopColor.value = sceneManager.skyDomeTopColor),
                (i = THREE.UniformsUtils.merge([i, THREE.UniformsLib.lights])),
                THREE.UniformsUtils.clone(a.attributes);
              var s = new THREE.ShaderMaterial({
                uniforms: i,
                vertexShader: a.vertexShader,
                fragmentShader: a.fragmentShader,
                shading: THREE.FlatShading,
                side: THREE.DoubleSide,
                transparent: !0,
                lights: !0,
                fog: !0,
              });
              i.thumbTexture.value.needsUpdate = !0;
              var l = 2 * r.length,
                h = new THREE.BufferGeometry();
              h.setIndex(new THREE.BufferAttribute(new Uint16Array(3 * l), 1)),
                h.addAttribute(
                  "position",
                  new THREE.BufferAttribute(new Float32Array(3 * l * 3), 3)
                ),
                h.addAttribute(
                  "normal",
                  new THREE.BufferAttribute(new Float32Array(3 * l * 3), 3)
                ),
                h.addAttribute(
                  "color",
                  new THREE.BufferAttribute(new Float32Array(3 * l * 3), 3)
                ),
                h.addAttribute(
                  "uv",
                  new THREE.BufferAttribute(new Float32Array(3 * l * 3), 3)
                ),
                h.addAttribute(
                  "highlightColor",
                  new THREE.BufferAttribute(new Float32Array(3 * l * 3), 3)
                ),
                h.addAttribute(
                  "highlightFactor",
                  new THREE.BufferAttribute(new Float32Array(3 * l), 1)
                ),
                h.addAttribute(
                  "visible",
                  new THREE.BufferAttribute(new Float32Array(3 * l), 1)
                );
              var c = h.getAttribute("uv").array;
              thumbSheet.image.width, thumbSheet.image.height, jsonInfo.res;
              e.aspectRatios = [];
              for (var u = 0, p = 0; p < r.length; p++) {
                var d = r[p].image_id;
                if (void 0 !== jsonInfo.coords[d]) {
                  var f = jsonInfo.coords[d].u1,
                    m = 1 - jsonInfo.coords[d].v1,
                    E = jsonInfo.coords[d].u2,
                    g = 1 - jsonInfo.coords[d].v2;
                  var ea = Math.abs(
                    ((E - f) * thumbSheet.image.width) /
                      ((g - m) * thumbSheet.image.height)
                  );
                  e.aspectRatios.push(ea),
                    (c[3 * u + 0] = f),
                    (c[3 * u + 1] = g),
                    (c[3 * (u + 1) + 0] = E),
                    (c[3 * (u + 1) + 1] = g),
                    (c[3 * (u + 2) + 0] = f),
                    (c[3 * (u + 2) + 1] = m),
                    (c[3 * (u + 3) + 0] = f),
                    (c[3 * (u + 3) + 1] = m),
                    (c[3 * (u + 4) + 0] = E),
                    (c[3 * (u + 4) + 1] = g),
                    (c[3 * (u + 5) + 0] = E),
                    (c[3 * (u + 5) + 1] = m);
                } else {
                  e.aspectRatios.push(0.6 * Math.random() + 0.7),
                    e.noThumbList.push(r[p].id);
                }
                u += 6;
              }
              var v = 21845,
                y = h.index.array;
              for (p = 0; p < y.length; p++) y[p] = p % (3 * v);
              var T = h.getAttribute("position").array,
                R = h.getAttribute("normal").array,
                x = h.getAttribute("highlightColor").array,
                H = new THREE.Color(16777215),
                b = (new THREE.Color(), new THREE.Vector3()),
                w = new THREE.Vector3(),
                q = new THREE.Vector3(),
                M = new THREE.Vector3(),
                _ = new THREE.Vector3(),
                S = new THREE.Vector3(),
                C = new THREE.Vector3(),
                L = new THREE.Vector3(),
                A = 100,
                k = 10,
                D = Math.ceil(r.length / k),
                P = 0;
              for (p = 0; p < T.length; p += 18) {
                var I,
                  V,
                  O = P % k,
                  F = Math.floor(P / k),
                  z = (Math.PI, 3 * A),
                  U = (-D * z) / 2 + F * z,
                  B = (-k * z) / 2 + O * z,
                  N = 0;
                d = r[P].image_id;
                if ((p % 18 == 0 && P++, void 0 !== jsonInfo.coords[d])) {
                  (f = jsonInfo.coords[d].u1),
                    (m = jsonInfo.coords[d].v1),
                    (E = jsonInfo.coords[d].u2),
                    (g = jsonInfo.coords[d].v2);
                  (I = (E - f) * thumbSheet.image.width),
                    (V = (g - m) * thumbSheet.image.height);
                } else {
                  (I = jsonInfo.res / 1.3), (V = jsonInfo.res / 1.3);
                }
                var j = U - I,
                  G = B - V,
                  W = N,
                  X = U + I,
                  Q = B - V,
                  $ = N,
                  Y = U - I,
                  Z = B + V,
                  K = N,
                  J = U + I,
                  ee = B + V,
                  te = N;
                (T[p] = j),
                  (T[p + 1] = G),
                  (T[p + 2] = W),
                  (T[p + 3] = X),
                  (T[p + 4] = Q),
                  (T[p + 5] = $),
                  (T[p + 6] = Y),
                  (T[p + 7] = Z),
                  (T[p + 8] = K),
                  (T[p + 9] = Y),
                  (T[p + 10] = Z),
                  (T[p + 11] = K),
                  (T[p + 12] = X),
                  (T[p + 13] = Q),
                  (T[p + 14] = $),
                  (T[p + 15] = J),
                  (T[p + 16] = ee),
                  (T[p + 17] = te),
                  b.set(j, G, W),
                  w.set(X, Q, $),
                  q.set(Y, Z, K),
                  M.set(J, ee, te),
                  _.set(J, ee, te),
                  S.set(J, ee, te),
                  C.subVectors(q, w),
                  L.subVectors(b, w),
                  C.cross(L),
                  C.normalize();
                var ie = C.x,
                  re = C.y,
                  ne = C.z;
                (R[p] = ie),
                  (R[p + 1] = re),
                  (R[p + 2] = ne),
                  (R[p + 3] = ie),
                  (R[p + 4] = re),
                  (R[p + 5] = ne),
                  (R[p + 6] = ie),
                  (R[p + 7] = re),
                  (R[p + 8] = ne),
                  (R[p + 9] = ie),
                  (R[p + 10] = re),
                  (R[p + 11] = ne),
                  (R[p + 12] = ie),
                  (R[p + 13] = re),
                  (R[p + 14] = ne),
                  (R[p + 15] = ie),
                  (R[p + 16] = re),
                  (R[p + 17] = ne),
                  (x[p] = H.r),
                  (x[p + 1] = H.g),
                  (x[p + 2] = H.b),
                  (x[p + 3] = H.r),
                  (x[p + 4] = H.g),
                  (x[p + 5] = H.b),
                  (x[p + 6] = H.r),
                  (x[p + 7] = H.g),
                  (x[p + 8] = H.b),
                  (x[p + 9] = H.r),
                  (x[p + 10] = H.g),
                  (x[p + 11] = H.b),
                  (x[p + 12] = H.r),
                  (x[p + 13] = H.g),
                  (x[p + 14] = H.b),
                  (x[p + 15] = H.r),
                  (x[p + 16] = H.g),
                  (x[p + 17] = H.b);
              }
              var oe = h.getAttribute("highlightFactor").array,
                ae = h.getAttribute("visible").array;
              for (p = 0; p < ae.length; p++) (oe[p] = 0), (ae[p] = 1);
              h.groups = [];
              var se = l / v;
              for (p = 0; p < se; p++) {
                var le = {
                  start: p * v * 3,
                  index: p * v * 3,
                  count: 3 * Math.min(l - p * v, v),
                };
                h.groups.push(le);
              }
              (h.dynamic = !0),
                h.computeBoundingSphere(),
                ((t = new THREE.Mesh(h, s)).type = "IF"),
                sceneManager.add(t),
                e.updateItems(),
                (e.loaded = !0),
                void 0 !== e.onLoad && e.onLoad();
            },
            function (e) {
              console.log("ERROR!"), console.log(e);
            }
          );
      }),
      (o.prototype.setVertexPositions = function (e, i) {
        var r = t.geometry.attributes.position.array,
          n = 18 * e;
        (r[n] = i[0].x),
          (r[n + 1] = i[0].y),
          (r[n + 2] = i[0].z),
          (r[n + 3] = i[1].x),
          (r[n + 4] = i[1].y),
          (r[n + 5] = i[1].z),
          (r[n + 6] = i[2].x),
          (r[n + 7] = i[2].y),
          (r[n + 8] = i[2].z),
          (r[n + 9] = i[2].x),
          (r[n + 10] = i[2].y),
          (r[n + 11] = i[2].z),
          (r[n + 12] = i[1].x),
          (r[n + 13] = i[1].y),
          (r[n + 14] = i[1].z),
          (r[n + 15] = i[3].x),
          (r[n + 16] = i[3].y),
          (r[n + 17] = i[3].z);
      }),
      (o.prototype.setVertexNormals = function (e, i) {
        var r = t.geometry.attributes.normal.array,
          n = 18 * e;
        (r[n] = i.x),
          (r[n + 1] = i.y),
          (r[n + 2] = i.z),
          (r[n + 3] = i.x),
          (r[n + 4] = i.y),
          (r[n + 5] = i.z),
          (r[n + 6] = i.x),
          (r[n + 7] = i.y),
          (r[n + 8] = i.z),
          (r[n + 9] = i.x),
          (r[n + 10] = i.y),
          (r[n + 11] = i.z),
          (r[n + 12] = i.x),
          (r[n + 13] = i.y),
          (r[n + 14] = i.z),
          (r[n + 15] = i.x),
          (r[n + 16] = i.y),
          (r[n + 17] = i.z);
      }),
      (o.prototype.getHighlightColor = function (e) {
        var i = 18 * e,
          r = t.geometry.attributes.highlightColor.array[i],
          n = t.geometry.attributes.highlightColor.array[i + 1],
          o = t.geometry.attributes.highlightColor.array[i + 2],
          a = new THREE.Color(16777215);
        return a.setRGB(r, n, o), a;
      }),
      (o.prototype.setHighlightFactor = function (e, i) {
        for (var r = 6 * e, n = 0; n < 6; n++)
          t.geometry.attributes.highlightFactor.array[r + n] = i;
      }),
      (o.prototype.getHighlightFactor = function (e) {
        return t.geometry.attributes.highlightFactor.array[e];
      }),
      (o.prototype.setScale = function (e, i) {
        var r = 6 * e;
        (t.geometry.attributes.customScale.array[r] = i),
          (t.geometry.attributes.customScale.array[r + 1] = i),
          (t.geometry.attributes.customScale.array[r + 2] = i),
          (t.geometry.attributes.customScale.array[r + 3] = i),
          (t.geometry.attributes.customScale.array[r + 4] = i),
          (t.geometry.attributes.customScale.array[r + 5] = i);
      }),
      (o.prototype.setVisible = function (e, i) {
        for (var r = 6 * e, n = 0; n < 6; n++)
          t.geometry.attributes.visible.array[r + n] = i;
      }),
      (o.prototype.getScale = function (e) {
        var i = 6 * e;
        return t.geometry.attributes.customScale.array[i];
      }),
      (o.prototype.computeBoundingSphere = function () {
        t.geometry.computeBoundingSphere();
      }),
      (o.prototype.updateItems = function () {
        this.updatePositions(),
          this.updateNormals(),
          this.updateHighlightColors(),
          this.updateHighlights(),
          this.updateVisible();
      }),
      (o.prototype.updatePositions = function () {
        t.geometry.attributes.position.needsUpdate = !0;
      }),
      (o.prototype.updateNormals = function () {
        t.geometry.attributes.normal.needsUpdate = !0;
      }),
      (o.prototype.updateVisible = function () {
        t.geometry.attributes.visible.needsUpdate = !0;
      }),
      (o.prototype.updateHighlightColors = function () {
        t.geometry.attributes.highlightColor.needsUpdate = !0;
      }),
      (o.prototype.updateHighlights = function () {
        t.geometry.attributes.highlightFactor.needsUpdate = !0;
      }),
      (o.prototype.getIndex = function (e) {
        return r[e];
      }),
      (o.prototype.getId = function (e) {
        return n[e];
      }),
      (o.prototype.getCount = function () {
        return t.geometry.vertices.length;
      }),
      (o.prototype.setFogColor = function (e) {
        void 0 !== i && (i.fogColor.value = e);
      }),
      (o.prototype.getUniforms = function () {
        return i;
      }),
      (o.prototype.update = function () {
        this.loaded &&
          ((i.skyDomeExponent.value = sceneManager.skyDomeExponent),
          (i.skyDomeOffset.value = sceneManager.skyDomeOffset),
          (i.skyDomeBottomColor.value = sceneManager.skyDomeBottomColor),
          (i.skyDomeTopColor.value = sceneManager.skyDomeTopColor),
          (i.cameraPos.value = sceneManager.getCamera().position),
          this.updatePositions(),
          this.updateNormals());
      }),
      (o.prototype.getThumbMesh = function () {
        return t;
      }),
      o
    );
  })(),
  EasterEggManager = (function () {
    function e() {
      if (
        (T.tag.length >= api.tagListArray.length &&
          (T.tag = T.tag.slice(0, Math.floor(0.5 * T.tag.length))),
        0 === R.itemTags.length)
      )
        return t();
      for (var e = R.itemTags.length - 1; e >= 0; e--)
        for (var i = R.itemTags[e], r = i.length - 1; e >= 0; r--) {
          var n = i[r];
          i.splice(r, 1), 0 === i.length && R.itemTags.splice(e, 1);
          for (var o = !1, a = 0; a < T.tag.length; a++)
            if (T.tag[a].id === n) {
              o = !0;
              break;
            }
          if (!o) return api.tagList[n];
        }
      return found ? void 0 : t();
    }
    function t() {
      for (var e, t = !0; t; ) {
        var i = !1,
          r = Math.floor(Math.random() * api.tagListArray.length);
        e = api.tagListArray[r];
        for (var n = 0; n < T.tag.length; n++)
          if (T.tag[n].id === e.id) {
            i = !0;
            break;
          }
        for (n = 0; n < g.length; n++)
          if (g[n].data.id === e.id) {
            i = !0;
            break;
          }
        for (n = 0; n < v.length; n++)
          if (v[n].data.id === e.id) {
            i = !0;
            break;
          }
        if (!i) return (t = !1), e;
      }
    }
    function i(e, t) {
      for (
        var i = [],
          r = new THREE.Vector3(0, 0, -1)
            .applyQuaternion(sceneManager.getCamera().quaternion)
            .normalize(),
          n = 0;
        n < t.length;
        n++
      ) {
        var o = t[n].distanceTo(e);
        if (o > l && o < h) {
          var a = t[n].clone().sub(e).normalize();
          GeomUtils.angleBetweenVecs(r, a) < c &&
            i.push({
              index: n,
              position: t[n],
            });
        }
      }
      return i;
    }
    function r(e, t, i) {
      vis.getCurrentVis();
      var r = t.sort(function (t, i) {
        var r = e.distanceTo(t.position),
          n = e.distanceTo(i.position);
        return r > n ? -1 : r < n ? 1 : 0;
      });
      if (0 !== r.length) {
        var n = [r[r.length - 1]];
        if (1 !== r.length)
          e: for (var o = r.length - 2; o >= 0; o--) {
            for (var a = !1, s = 0; s < n.length; s++) {
              if (r[o].position.distanceTo(n[s].position) < u) {
                a = !0;
                break;
              }
            }
            if (!a)
              for (s = 0; s < v.length; s++) {
                if (r[o].position.distanceTo(v[s].position) < u) {
                  a = !0;
                  break;
                }
              }
            if (!a && (n.push(r[o]), n.length === i)) break e;
          }
        return n;
      }
      return [];
    }
    function n(e) {
      for (
        var t = sceneManager.getCamera(),
          i = new THREE.Vector3(0, 0, -1)
            .applyQuaternion(t.quaternion)
            .normalize(),
          r = 99999999999,
          n = -1,
          o = 0.18 * Math.PI,
          a = 0;
        a < e.length;
        a++
      ) {
        var s = e[a].distanceTo(t.position);
        if (s > u && s < r) {
          var l = e[a].clone().sub(t.position).normalize();
          GeomUtils.angleBetweenVecs(i, l) < o && ((n = a), (r = s));
        }
      }
      return -1 === n
        ? null
        : {
            position: e[n],
            distance: r,
            index: n,
          };
    }
    var o,
      a,
      s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E,
      g = [],
      v = [],
      y = !1,
      T = {
        tag: [],
      },
      R = {
        itemTags: [],
      },
      x = function (e) {
        (o = this),
          (a = e),
          (l = 600),
          (h = 2900),
          (s = 700),
          (c = 0.18 * Math.PI),
          (u = 900),
          (p = 3500),
          (d = new THREE.Vector3()),
          (f = new THREE.Vector3()),
          (E = new MiniSceneLoader());
      };
    return (
      (x.prototype = {
        constructor: x,
        add: function (e) {
          if ((g.push(e), "tag" === e.type)) T.tag.push(e.data);
          else console.log("Easter egg has no type");
        },
        remove: function (e) {
          for (var t = v.length - 1; t >= 0; t--)
            if (v[t].data.id == e.data.id) {
              v.splice(t, 1), !0;
              break;
            }
        },
        removeUnlaid: function (e) {
          for (var t = g.length - 1; t >= 0; t--)
            if (g[t] == e) {
              g.splice(t, 1);
              break;
            }
        },
        layBatch: function () {
          var t = Math.round(3 + 4 * Math.random());
          g = [];
          for (var n = 0; n < t; n++) {
            var s = e(),
              l = new EasterEggTag(o, s);
            g.push(l);
          }
          if (E.available()) {
            if (d.distanceTo(sceneManager.getCamera().position) > p) {
              !0;
              l = new EasterEggBlackHole(o, {});
              g.unshift(l);
            }
          }
          var h = a.getPlaceholderPositions().slice(),
            c = sceneManager.getCamera().position,
            u = i(c, h);
          u = r(c, u, t);
          var f = [];
          for (n = 0; n < u.length; n++) {
            o.layEgg(u[n]) && f.push(u[n].index);
          }
          f.sort(function (e, t) {
            return e - t;
          });
          for (n = f.length - 1; n >= 0; n--) {
            var m = f[n];
            a.getPlaceholderTestObjects().children[m];
            a.removePlaceholderTestObject(m),
              a.getPlaceholderPositions().splice(m, 1);
          }
        },
        layEgg: function (e) {
          if (g.length > 0) {
            var t,
              i = a.getPlaceholderPositions();
            if (null !== (t = void 0 !== e ? e.position : n(i))) {
              var r = g[0];
              return (
                g.shift(),
                r.lay(t),
                v.push(r),
                "blackhole" === r.type && d.copy(r.position),
                !0
              );
            }
            return !1;
          }
          return !1;
        },
        start: function () {
          y = !0;
        },
        stop: function () {
          y = !1;
        },
        clear: function () {
          g = [];
          for (var e = v.length - 1; e >= 0; e--) v[e].expire(!0);
        },
        reset: function () {
          d.copy(sceneManager.getCamera().position);
        },
        laidCount: function () {
          return v.length;
        },
        getLaidList: function () {
          return v;
        },
        update: function () {
          for (var e = v.length - 1; e >= 0; e--) v[e].update();
          if (y) {
            var t = sceneManager.getCamera().position.clone();
            f.distanceTo(t) > s && (f.copy(t), this.layBatch());
          }
        },
        addItemTags: function (e) {
          R.itemTags.push(e);
        },
        loadMiniscene: function () {
          E.loadNext();
        },
        setCurrentBlackHole: function (e) {
          m = e;
        },
        exitBlackHole: function () {
          m.expire(), (m = void 0);
        },
        implodeBlackholes: function () {
          for (var e = 0; e < v.length; e++)
            "blackhole" === v[e].type &&
              (console.log("implode", e), v[e].implode());
        },
      }),
      x
    );
  })(),
  EasterEgg = (function () {
    var e = function (e) {
      this,
        (this.managerRef = e),
        (this.data = {
          id: null,
        }),
        (this.expireDistance = 2900),
        (this.expiring = !1),
        THREE.Object3D.call(this);
    };
    return (
      (e.prototype = Object.create(THREE.Object3D.prototype)),
      (e.prototype.lay = function (e) {
        this.onLay(e);
      }),
      (e.prototype.onLay = function () {}),
      (e.prototype.hatch = function () {}),
      (e.prototype.click = function () {}),
      (e.prototype.hoverOn = function () {}),
      (e.prototype.hoverOff = function () {}),
      (e.prototype.onUpdate = function () {}),
      (e.prototype.onExpire = function () {}),
      (e.prototype.update = function () {
        this.onUpdate(),
          sceneManager.getCamera().position.distanceTo(this.position) >
            this.expireDistance && this.expire();
      }),
      (e.prototype.expire = function (e) {
        this.expiring ||
          (!0 === e
            ? (vis.getCurrentVis().sceneObject.remove(this),
              this.managerRef.remove(this))
            : this.onExpire(function (e) {
                vis.getCurrentVis().sceneObject.remove(e),
                  e.managerRef.remove(e);
              }),
          (this.expiring = !0));
      }),
      e
    );
  })(),
  EasterEggTag = (function () {
    function e(e, i) {
      var r = 24,
        n = 0,
        o = [e];
      o.reverse(), void 0 === n && (n = [0, 0]);
      for (
        var a,
          s = {
            size: r,
            curveSegments: 2,
            font: "circular",
            bevelEnabled: !1,
            amount: 1,
          },
          l = r + 0.5 * r,
          h = [],
          c = 0;
        c < o.length;
        c++
      ) {
        var u = THREE.FontUtils.generateShapes(o[c], s),
          p = new THREE.ExtrudeGeometry(u, s);
        p.computeBoundingBox(),
          h.push({
            x: -0.5 * (p.boundingBox.max.x - p.boundingBox.min.x),
            y: c * l,
          });
        for (var d = 0; d < p.vertices.length; d++)
          (p.vertices[d].x += h[c].x), (p.vertices[d].y += h[c].y);
        0 === c ? (a = p) : a.merge(p);
      }
      a.computeBoundingBox();
      var f = t(new THREE.Color(0)),
        m = new THREE.Mesh(a, f),
        E = new THREE.Object3D();
      return (
        (E.textMesh = m),
        E.add(m),
        (E.width = a.boundingBox.max.x - a.boundingBox.min.x),
        (E.height = a.boundingBox.max.y - a.boundingBox.min.y),
        (E.textMesh.position.y = -E.height / 2),
        (E.clickMesh = new THREE.BoundingBoxHelper(E.textMesh, 16777215)),
        (E.clickMesh.material.depthTest = !1),
        (E.clickMesh.renderOrder = 1),
        (E.clickMesh.material.transparent = !0),
        (E.clickMesh.material.opacity = 0),
        (E.clickMesh.lastOpacity = 0),
        E.clickMesh.update(),
        E.add(E.clickMesh),
        (E.clickMesh.type = "EGG"),
        (E.clickMesh.index = i),
        E
      );
    }
    function t(e) {
      var t = THREE.ShaderLib.gradfogobject,
        i = THREE.UniformsUtils.clone(t.uniforms);
      THREE.UniformsUtils.clone(t.attributes);
      return (
        (i.cameraPos.value = new THREE.Vector3(0, 0, 0)),
        (i.skyDomeRadius.value = sceneManager.skyDomeRadius),
        (i.skyDomeExponent.value = sceneManager.skyDomeExponent),
        (i.skyDomeOffset.value = sceneManager.skyDomeOffset),
        (i.skyDomeBottomColor.value = sceneManager.skyDomeBottomColor),
        (i.skyDomeTopColor.value = sceneManager.skyDomeTopColor),
        (i.color.value = e),
        (i.opacity.value = 0),
        (i = THREE.UniformsUtils.merge([i, THREE.UniformsLib.lights])),
        new THREE.ShaderMaterial({
          uniforms: i,
          vertexShader: t.vertexShader,
          fragmentShader: t.fragmentShader,
          side: THREE.DoubleSide,
          transparent: !0,
          depthWrite: !0,
          depthTest: !0,
          lights: !0,
          fog: !0,
        })
      );
    }
    var i,
      r = function (e, t) {
        EasterEgg.call(this, e), (this.type = "tag"), (this.data = t);
      },
      n = 100,
      o = 1600,
      a = !1;
    return (
      (r.prototype = Object.create(EasterEgg.prototype)),
      (r.prototype.onLay = function (t) {
        (this.textNode = e(this.data.name, this.data.id)),
          this.add(this.textNode),
          (this.textNode.textMesh.material.needsUpdate = !0),
          this.position.copy(t),
          (this.textNode.textMesh.material.uniforms.opacity.value = 0),
          (this.position.y -= n),
          vis.getCurrentVis().sceneObject.add(this);
        var r = this,
          s = this.textNode.textMesh;
        (a = !0),
          (i = new TWEEN.Tween({
            o: 0,
            y: r.position.y,
          })
            .to(
              {
                o: 1,
                y: t.y,
              },
              o
            )
            .easing(TWEEN.Easing.Quartic.Out)
            .onUpdate(function () {
              (s.material.uniforms.opacity.value = this.o),
                (s.material.uniforms.nearOpacity.value = this.o),
                (r.position.y = this.y);
            })
            .onComplete(function () {
              a = !1;
            })
            .start());
      }),
      (r.prototype.hatch = function () {
        var e = this;
        e.managerRef.stop(),
          (vis.getCurrentVis().uiEnabled = !1),
          vis.getCurrentVis().animateCamTowardTag(e.position, function () {
            vis.setTo("tags", {
              tagIds: [e.data.id],
              center: e.position.clone(),
              lastView: "drift",
            });
          });
        //   setTimeout((function() {
        //       vis.getCurrentVis().animateCamTowardTag(e.position, (function() {
        //           ui.openView("tags", {
        //               tagIds: [e.data.id],
        //               center: e.position.clone(),
        //               lastView: "drift"
        //           })
        //       }
        //       ))
        //   }
        //   ), 1e3)
      }),
      (r.prototype.click = function () {
        this.hatch();
      }),
      (r.prototype.hoverOn = function () {}),
      (r.prototype.hoverOff = function () {}),
      (r.prototype.onUpdate = function () {
        var e = this.position.distanceTo(sceneManager.getCamera().position);
        (this.textNode.textMesh.material.uniforms.cameraPos.value =
          sceneManager.getCamera().position),
          a ||
            (this.textNode.textMesh.material.uniforms.nearOpacity.value =
              Math.max(0, Math.min(1, map(e, 70, 90, 0, 1))));
        var t = sceneManager.getCamera().quaternion.clone();
        this.quaternion.copy(t);
      }),
      (r.prototype.onExpire = function (e) {
        if (void 0 !== this.textNode) {
          this.getFadeTween();
          !(function (t) {
            a = !0;
            var i = t.textNode.textMesh;
            new TWEEN.Tween({
              o: i.material.uniforms.opacity.value,
              y: t.position.y,
            })
              .to(
                {
                  o: 0,
                  y: t.position.y + n,
                },
                o
              )
              .easing(TWEEN.Easing.Quartic.InOut)
              .onUpdate(function () {
                (i.material.uniforms.opacity.value = this.o),
                  (i.material.uniforms.nearOpacity.value = this.o),
                  (t.position.y = this.y);
              })
              .onComplete(function () {
                (a = !1), e(t);
              })
              .start();
          })(this);
        }
      }),
      (r.prototype.getFadeTween = function () {
        return i;
      }),
      r
    );
  })(),
  EasterEggBlackHole = (function () {
    function e(e, t, n, o) {
      var a = new THREE.CircleGeometry(n, 40),
        s = THREE.WarpAuraShader,
        l = THREE.UniformsUtils.clone(s.uniforms);
      (l.minRadFactor.value = 0.3),
        (l.maxAngle.value = 5),
        (l.tCube.value = i.renderTarget),
        (l.tCubeStatic.value = r.renderTarget),
        (l.outerRadius.value = n),
        (l.warpRadius.value = t),
        (l.innerRadius.value = e),
        (l.sizeScalar.value = o);
      var h = {
          vertexShader: s.vertexShader,
          fragmentShader: s.fragmentShader,
          uniforms: l,
          fog: !1,
          transparent: !0,
        },
        c = new THREE.ShaderMaterial(h),
        u = new THREE.Mesh(a, c);
      return (
        (u.material.uniforms.objectCenter.value = new THREE.Vector3()),
        (u.material.needsUpdate = !0),
        u
      );
    }
    function t() {
      var e = new THREE.BoxGeometry(100, 100, 100),
        t = new THREE.MeshBasicMaterial({
          color: 0,
          transparent: !0,
          opacity: 1,
          side: THREE.BackSide,
        });
      return new THREE.Mesh(e, t);
    }
    var i,
      r,
      n,
      o = 950,
      a = function (e) {
        EasterEgg.call(this, e),
          (this.type = "blackhole"),
          (this.data = {
            id: Math.round(1e6 * Math.random()),
          }),
          this;
      },
      s = 2500,
      l = 4500;
    (a.prototype = Object.create(EasterEgg.prototype)),
      (a.prototype.onLay = function (o) {
        (this.fadeBox = t()),
          (i = new THREE.CubeCamera(30, 8e4, 512)),
          sceneManager.getScene().add(i),
          (r = new THREE.CubeCamera(30, 8e4, 512)),
          sceneManager.getScene().add(r);
        var a = 50,
          l = 160,
          h = 172,
          c = 1e-5;
        (this.swirl = e(a, l, h, c)),
          this.swirl.scale.set(c, c, c),
          this.add(this.swirl),
          this.position.copy(o),
          vis.getCurrentVis().sceneObject.add(this),
          (this.hatched = !1);
        this.position.distanceTo(sceneManager.getCamera().position);
        this.updateCubeCameraStatic();
        var u = this;
        n = new TWEEN.Tween({
          s: this.swirl.scale.x,
        })
          .to(
            {
              s: 1,
            },
            s
          )
          .easing(TWEEN.Easing.Quartic.Out)
          .onUpdate(function () {
            u.swirl.scale.set(this.s, this.s, this.s),
              (u.swirl.material.uniforms.sizeScalar.value = this.s);
          })
          .start();
      }),
      (a.prototype.hatch = function () {
        this.managerRef.stop(),
          (vis.getCurrentVis().uiEnabled = !1),
          this.managerRef.setCurrentBlackHole(this),
          vis.getCurrentVis().attractBlackHole(this);
      }),
      (a.prototype.click = function () {}),
      (a.prototype.hoverOn = function () {}),
      (a.prototype.hoverOff = function () {});
    return (
      (a.prototype.onUpdate = function () {
        var e = this.position.distanceTo(sceneManager.getCamera().position),
          t = sceneManager.getCamera().quaternion.clone();
        (this.quaternion.copy(t), this.hatched) ||
          (this.position.distanceTo(sceneManager.getCamera().position) < o &&
            ((this.hatched = !0), this.hatch()));
        (this.swirl.material.uniforms.objectCenter.value = this.position),
          this.updateCubeCamera(e);
      }),
      (a.prototype.updateCubeCameraStatic = function () {
        (this.swirl.visible = !1),
          r.position.copy(sceneManager.getCamera().position),
          r.updateCubeMap(sceneManager.getRenderer(), sceneManager.getScene()),
          (this.swirl.visible = !0);
      }),
      (a.prototype.updateCubeCamera = function (e) {
        for (
          var t = this.managerRef.getLaidList(), r = [], n = 0;
          n < t.length;
          n++
        ) {
          if ("tag" === t[n].type)
            sceneManager.getCamera().position.distanceTo(t[n].position) < e &&
              r.push(t[n]);
        }
        var o = [],
          a = vis.getCurrentVis().objects.item;
        for (var s in a) {
          a[s].distanceToCamera < e && o.push(s);
        }
        this.swirl.visible = !1;
        for (n = 0; n < r.length; n++) r[n].textNode.textMesh.visible = !1;
        for (n = 0; n < o.length; n++) a[o[n]].hide();
        0 !== o.length && itemField.updateVisible(),
          i.position.copy(sceneManager.getCamera().position),
          i.updateCubeMap(sceneManager.getRenderer(), sceneManager.getScene());
        for (n = 0; n < r.length; n++) r[n].textNode.textMesh.visible = !0;
        for (n = 0; n < o.length; n++) a[o[n]].show();
        0 !== o.length && itemField.updateVisible(), (this.swirl.visible = !0);
      }),
      (a.prototype.implode = function () {
        var e = this;
        n = new TWEEN.Tween({
          s: this.swirl.scale.x,
        })
          .to(
            {
              s: 0,
            },
            800
          )
          .easing(TWEEN.Easing.Quartic.In)
          .onUpdate(function () {
            e.swirl.scale.set(this.s, this.s, this.s),
              (e.swirl.material.uniforms.sizeScalar.value = this.s);
          })
          .start();
      }),
      (a.prototype.onExpire = function (e) {
        if (void 0 !== this.fadeBox) {
          this.getFadeTween();
          !(function (t) {
            t.remove(t.swirl),
              t.hatched &&
                (sceneManager.getCamera().add(t.fadeBox),
                t.fadeBox.position.set(0, 0, -5),
                sceneManager.setPaused(!1));
            var i = vis.getCurrentVis().camControls,
              r = i.getTargetHeadingAngle(),
              n = i.lastSpinDirection,
              o = t.fadeBox;
            new TWEEN.Tween({
              o: o.material.opacity,
            })
              .to(
                {
                  o: 0,
                },
                l
              )
              .easing(TWEEN.Easing.Quartic.InOut)
              .onUpdate(function () {
                t.hatched &&
                  ((r += 0.14 * this.o * n), i.setTargetHeadingAngle(r)),
                  (o.material.opacity = this.o);
              })
              .onComplete(function () {
                t.hatched && sceneManager.getCamera().remove(t.fadeBox),
                  (vis.getCurrentVis().uiEnabled = !0),
                  e(t);
              })
              .start();
          })(this);
        }
      }),
      (a.prototype.getFadeTween = function () {
        return n;
      }),
      a
    );
  })(),
  MiniSceneLoader = (function () {
    var e = function () {
      this.availableList = api.minisceneslist;
      var e = this;
    };
    return (
      (e.prototype = {
        constructor: e,
        loadNext: function () {
          if (this.availableList.length > 0) {
            var e = $("#uncertain")[0];
            $(e).find(".mini-scene-container-wrapper").remove(),
              $(e).after('<div class="mini-scene-container-wrapper"></div>');
            var t = $(".mini-scene-container-wrapper"),
              i = Math.floor(Math.random() * this.availableList.length),
              r =
                "/uncertain/blackhole/" + this.availableList[i].name + "/embed";
            this.availableList.splice(i, 1),
              t.load(r, function () {
                var e = $(".mini-scene-container");
                e.append('<div class="close-scene"></div>'),
                  e.find(".close-scene").on("click", function () {
                    $(this).off("click"),
                      void 0 !== e[0].beforefade && e[0].beforefade(),
                      e.fadeOut("slow", function () {
                        e.remove(),
                          void 0 !== e[0].cleanup && e[0].cleanup(),
                          vis.getCurrentVis().exitBlackHole(),
                          t.remove();
                      });
                  }),
                  e.fadeIn("slow");
              });
          } else console.log("No available miniscenes");
        },
        available: function () {
          return this.availableList.length > 0;
        },
      }),
      e
    );
  })(),
  DriftVis = (function () {
    function e(e, t, i) {
      for (var r = e.slice(), o = x.children.length - 1; o >= 0; o--)
        x.remove(x.children[o]);
      var a,
        s = [];
      a = t || i ? T * r.length : Math.round(T * api.itemListArray.length);
      var l = Math.ceil(r.length / a);
      for (o = r.length - 1; o >= 0; o--)
        o % l == 0 && s.push(r.splice(o, 1)[0]);
      if (((R = !0 === t ? R.concat(s) : s), t)) {
        var h = sceneManager.getCamera().position.clone();
        h.y = 0;
        var c = n.getFarthestFlatDistance();
        for (o = R.length - 1; o >= 0; o--) {
          var u = R[o].clone();
          (u.y = 0),
            h.distanceTo(u) > c && (R.splice(o, 1), x.remove(x.children[o]));
        }
      }
      for (o = 0; o < R.length; o++) {
        var p = new THREE.Mesh(
            new THREE.IcosahedronGeometry(50, 0),
            new THREE.MeshBasicMaterial({
              color: 255,
              wireframe: !0,
              fog: !1,
            })
          ),
          d = new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(0, 1, 0),
            Math.random() * Math.PI * 2
          );
        p.quaternion.copy(d), p.position.copy(R[o]), x.add(p);
      }
      return r;
    }
    function t() {
      for (var e = x.children.length - 1; e >= 0; e--) x.remove(x.children[e]);
      R = [];
    }
    function i(e, t, i) {
      var o = n.orderPositionsByDistanceTo(e.slice(), t),
        a = [];
      if (null == i) for (var l in n.objects.item) a.push(l);
      else a = i.slice();
      for (
        var h = r((a = n.orderIdsByDistanceTo(a, t)), s.getLaidList(), t),
          c = 0,
          u = s.getLaidList();
        c < h.length;

      ) {
        var p,
          d = h[c];
        l = d.id;
        if ("item" === d.type) p = n.objects.item[l].position;
        else
          p = u.filter(function (e) {
            return e.data.id === l;
          })[0].position;
        var f = n.getPositionsByProximity(p, o)[0].index,
          m = o[f];
        (h[c].closestPosition = m), o.splice(f, 1), c++;
      }
      return h;
    }
    function r(e, t, i) {
      for (var r = [], o = 0; o < e.length; o++) {
        var a = e[o],
          s = n.objects.item[a],
          l = s.position.distanceTo(i);
        r.push({
          type: "item",
          id: s.basicInfo.id,
          distance: l,
        });
      }
      for (o = 0; o < t.length; o++) {
        l = t[o].position.distanceTo(i);
        r.push({
          type: "egg",
          id: t[o].data.id,
          distance: l,
        });
      }
      return (
        r.sort(function (e, t) {
          return (e = e.distance) < (t = t.distance) ? -1 : e > t ? 1 : 0;
        }),
        r
      );
    }
    var n,
      o,
      a,
      s,
      l,
      h = 300,
      u = 900,
      p = !0,
      d = [],
      f = 1,
      m = 0,
      E = !1,
      g = null,
      v = null,
      y = (new THREE.Vector3(0, 0, -1), new TWEEN.Tween()),
      T = 0.11,
      R = [],
      x = new THREE.Object3D(),
      H = !1,
      b = !1,
      w = !1,
      q = [],
      M = {
        attractorId: null,
        similarIds: [],
      },
      _ = null,
      S = null,
      C = !1,
      L = !1,
      A = function (e, t, i) {
        IVis.call(this, e, t, i),
          (n = this),
          (this.name = "drift"),
          (l = sceneManager.physics),
          (sceneManager.usePhysics = !0),
          (s = new EasterEggManager(this)),
          (this.camControls = new DriftCamControls(e.getCamera()));
      };
    return (
      (A.prototype = Object.create(IVis.prototype)),
      (A.prototype.onInit = function (e) {
        if (
          (void 0 !== e
            ? ((this.preloadInfo = e),
              (C = !0 === e.isIntro),
              (L = void 0 !== e.refData))
            : ((this.preloadInfo = void 0), (C = !1)),
          (this.state = "normal"),
          this.enableAttraction(),
          this.camControls.init(),
          this.camControls.detatchFomItem(),
          L
            ? this.initItemsWithRef(e.refData.refId, e.refData.srcId)
            : this.initItems(),
          C)
        ) {
          for (var t in (sceneManager.getCamera().position.set(0, 3e3, 0),
          (this.camControls.suspended = !1),
          this.objects.item)) {
            var i = this.objects.item[t];
            i.position.set(
              i.viewData.drift.destination.x,
              i.viewData.drift.destination.y,
              i.viewData.drift.destination.z
            ),
              (i.forceRotateToCamera = !0);
          }
          setTimeout(function () {
            for (var e in n.objects.item) {
              n.objects.item[e].forceRotateToCamera = !1;
            }
          }, 1e3),
            (this.uiEnabled = !0),
            (this.animating = !1);
        } else {
          sceneManager.tweenSkyDomeState(
            sceneManager.SKYDOME_VIEW_COLORS.drift,
            this.transDuration
          ),
            (this.animating = !0),
            y.stop();
          var r = n;
          (y = new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              this.transDuration
            )
            .onUpdate(function () {
              for (var e in r.objects.item) {
                var t = r.objects.item[e],
                  i = lerpVec3(
                    t.viewData.drift.positionPrev,
                    t.viewData.drift.destination,
                    this.t
                  );
                t.position.set(i.x, i.y, i.z);
              }
            })
            .easing(TWEEN.Easing.Quartic.InOut)
            .onComplete(function () {
              n.firstTime || ui.enableHelpLink(),
                (r.uiEnabled = !0),
                (r.animating = !1),
                //   ui.enableNav(),
                s.reset(),
                s.start();
            })
            .start()),
            this.initCamPos();
        }
        b &&
          ((repoBoundsCube = new THREE.Mesh(
            new THREE.BoxGeometry(500, 500, 500),
            new THREE.MeshBasicMaterial({
              color: 65535,
              wireframe: !0,
            })
          )),
          sceneManager.add(repoBoundsCube)),
          b
            ? this.tweenFog(8e-5, this.transDuration)
            : this.tweenFog(9e-4, this.transDuration);
      }),
      (A.prototype.initItems = function (t) {
        function i(e, i) {
          var r = [],
            o = 0;
          for (var a in e.objects.item) {
            var s,
              l = e.objects.item[a];
            if (
              (l.setParent(e),
              (l.enableRotateToCamera = !0),
              (l.constrainToYAxis = !0),
              (l.forceRotateToCamera = !0),
              (l.shouldAttractSimilar = !0),
              (l.rotateToTarget = !1),
              (l.isInteractive = !0),
              C)
            ) {
              var h = i[o];
              s = t[h];
            } else s = E[a];
            (l.viewData.drift = {}),
              (l.viewData.drift.destination = s),
              (l.viewData.drift.positionPrev = l.position.clone()),
              r.push(s),
              (l.viewData.drift.particle = sceneManager.physics.makeParticle(
                1,
                s.x,
                s.y,
                s.z
              )),
              (l.viewData.drift.attractions = []),
              // l.onClickCallback = e.itemClickCallback.bind(null, l),
              o++;
          }
          n.camControls.setVerticalLimits(m.min.y - 2e3, m.max.y + 2e3);
        }
        var r = api.itemListArray.length,
          s = sceneManager.getCamera().position.clone();
        s.y = 0;
        var l = r + Math.ceil(r * T),
          c = 10;
        C && (l += c);
        var p = {
          count: l,
          center: s,
          minDistance: h,
          height: u,
        };
        t = getPoissonPoints(p);
        (t = this.objToVecArray(t)), C && t.splice(0, c);
        var d = r + Math.ceil(r * T);
        t.splice(d, t.length - d), (g = p.center), (v = g.clone());
        var f = this.getPointsBounds(t, !0),
          m = this.getPointsBounds(t);
        (t = e(t)),
          (lastRealRad = f.width / 2),
          (o = f.width / 2 + 0.06 * f.width),
          (a = f.width + 0.3 * f.width);
        var E = this.matchClosestPositions(
            t,
            sceneManager.getCamera().position
          ),
          y = [];
        if (C) {
          var R = 85,
            x = [],
            H = 0;
          for (var b in this.objects.item)
            x.push({
              id: b,
              date: new Date(this.objects.item[b].basicInfo.date_end),
              originalIndex: H,
            }),
              H++;
          x.sort(function (e, t) {
            return t.date - e.date;
          });
          for (var w = [], q = [], M = 0; M < x.length; M++)
            M < R ? w.push(x[M].originalIndex) : q.push(x[M].originalIndex);
          q = shuffle(q);
          for (M = 0; M < q.length; M++) w.push(q[M]);
          y = new Array(w.length);
          for (M = 0; M < w.length; M++) y[w[M]] = M;
          i(this, y);
        } else i(this);
      }),
      (A.prototype.initItemsWithRef = function (t, i) {
        var r = n.camControls.getLookVector();
        (r.y = 0), r.normalize();
        var s = sceneManager
          .getCamera()
          .position.clone()
          .add(r.clone().multiplyScalar(200));
        s.y = 0;
        n.objects.item[i];
        var l = s.clone().add(r.multiplyScalar(h)),
          c = api.itemListArray.length,
          p = sceneManager.getCamera().position.clone();
        p.y = 0;
        var d = c,
          f = 10;
        C && (d += f);
        var m = {
            count: d - 1,
            center: p,
            minDistance: h,
            height: u,
            existingPoints: [s],
            newOnly: !0,
          },
          E = getPoissonPoints(m);
        (E = this.objToVecArray(E)),
          C && E.splice(0, f),
          (g = m.center),
          (v = g.clone());
        var y = this.getPointsBounds(E, !0),
          T = this.getPointsBounds(E);
        (E = e(E)),
          (lastRealRad = y.width / 2),
          (o = y.width / 2 + 0.06 * y.width),
          (a = y.width + 0.3 * y.width);
        var R = [];
        for (var x in this.objects.item) x !== t && x !== i && R.push(x);
        var H = this.matchClosestPositions(
            E,
            sceneManager.getCamera().position,
            R
          ),
          b = [];
        C && (b = this.randomizeIndices(propertyCount(this.objects.item)));
        var w = [],
          q = 0;
        for (var x in this.objects.item) {
          var M,
            _ = this.objects.item[x];
          if (
            (_.setParent(this),
            (_.enableRotateToCamera = !0),
            (_.constrainToYAxis = !0),
            (_.forceRotateToCamera = !0),
            (_.shouldAttractSimilar = !0),
            (_.rotateToTarget = !1),
            (_.isInteractive = !0),
            C)
          )
            M = E[b[q]];
          else M = x === t ? s : x === i ? l : H[x];
          (_.viewData.drift = {}),
            (_.viewData.drift.destination = M),
            (_.viewData.drift.positionPrev = _.position.clone()),
            w.push(M),
            (_.viewData.drift.particle = sceneManager.physics.makeParticle(
              1,
              M.x,
              M.y,
              M.z
            )),
            (_.viewData.drift.attractions = []),
            (_.onClickCallback = n.itemClickCallback.bind(null, _)),
            q++;
        }
        this.camControls.setVerticalLimits(T.min.y - 400, T.max.y + 400);
      }),
      (A.prototype.initCamPos = function (e, t) {
        var i;
        i = void 0 !== e ? e : this.transDuration;
        var r = sceneManager.getCamera().position.clone();
        r.y = 0;
        var o = this.camControls.getLookVector().clone();
        (o.y = 0), o.normalize();
        var a = r.clone().add(o.multiplyScalar(1e3));
        // this.uiEnabled = !1,
        // 初始进入中心
        this.camControls.animate({
          pos: r,
          look: a,
          duration: i,
          callback: function () {
            n.enableItemInteraction(),
              (n.camControls.suspended = !1),
              n.camControls.setAutoFloat(0),
              // C && n.openInitAbout(),
              void 0 !== t && t();
            n.uiEnabled = !0;
          },
        });
      }),
      (A.prototype.getCamControls = function () {
        return this.camControls;
      }),
      (A.prototype.onMouseLeave = function (e) {
        this.camControls.onMouseLeave(e);
      }),
      (A.prototype.onMouseDown = function (e) {
        this.camControls.onMouseDown(e);
      }),
      (A.prototype.onMouseUp = function () {
        this.camControls.onMouseUp();
      }),
      (A.prototype.onMouseMove = function (e) {
        this.camControls.onMouseMove(e);
      }),
      (A.prototype.onMouseWheel = function (e, t) {
        // ui.ensureInfoWidgetClosed(),
        "normal" == this.state && this.camControls.onMouseWheel(t);
      }),
      (A.prototype.onKeyDown = function (e) {
        ui.getSearchBoxWebgl().isOpen() ||
          (this.checkForMouseHover(), this.camControls.onKeyDown(e));
      }),
      //   A.prototype.onKeyUp = function(e) {
      //       this.checkForMouseHover(),
      //       this.camControls.onKeyUp(e)
      //   }
      (A.prototype.onNothingClicked = function () {
        this.uiEnabled &&
          "preview" == this.state &&
          ui.closeItemPreview(this.onCloseItemPreview);
      }),
      (A.prototype.propelBack = function () {
        (this.state = "normal"),
          (this.uiEnabled = !1),
          this.camControls.setAutoFloat(!1);
        var e = this.camControls.getLookVector().clone().negate();
        (e.y = 0), e.normalize();
        var t = sceneManager
          .getCamera()
          .position.clone()
          .add(e.multiplyScalar(200));
        this.camControls.animate({
          pos: t,
          duration: 1400,
          callback: function () {
            (n.uiEnabled = !0),
              n.camControls.setAutoFloat(!0),
              ui.enableHelpLink();
          },
        });
      }),
      (A.prototype.propelTo = function (e) {
        (this.uiEnabled = !1), this.camControls.setAutoFloat(!1);
        var t = sceneManager.getCamera(),
          i = t.position.clone().sub(e).normalize().multiplyScalar(250),
          r = e.clone().add(i),
          o = 3 * t.position.distanceTo(e);
        this.camControls.animate({
          pos: r,
          duration: o,
          callback: function () {
            (n.uiEnabled = !0), n.camControls.setAutoFloat(!0);
          },
        });
      }),
      (A.prototype.onUpdate = function () {
        s.update();
        var e = sceneManager.getCamera().position.clone();
        // 相机控制
        this.camControls.update();
        var t = sceneManager.getCamera().position.clone();
        e.distanceTo(t);
        if ((this.calculateHeading(), this.doRepo(), !this.animating)) {
          for (var i in this.objects.item) {
            var r = this.objects.item[i],
              n = r.viewData.drift.destination,
              o = r.viewData.drift.particle.position;
            r.animating ||
              ((o.x = lerp(o.x, n.x, 0.04)),
              (o.y = lerp(o.y, n.y, 0.04)),
              (o.z = lerp(o.z, n.z, 0.04))),
              (r.position.x = o.x),
              (r.position.y = o.y),
              (r.position.z = o.z);
          }
          //   this.uiEnabled && !this.camControls.dragging && this.checkForMouseHover()
        }
      }),
      (A.prototype.calculateHeading = function () {
        var e = new THREE.Vector3(0, 0, -1);
        e.applyQuaternion(sceneManager.getCamera().quaternion),
          (e.y = 0),
          e.normalize(),
          e;
      }),
      (A.prototype.doRepo = function () {
        p &&
          !E &&
          (m == f
            ? (this.checkForFaraway(),
              d.length > 0 && !w && this.repo(),
              (m = 0))
            : m++);
      }),
      (A.prototype.checkForFaraway = function () {
        var e = sceneManager.getCamera().position.clone();
        if (((e.y = 0), e.distanceTo(g) > h))
          for (var t in this.objects.item)
            if (!this.objects.item[t].animating) {
              var i = this.objects.item[t].viewData.drift.destination.clone();
              (i.y = 0), i.distanceTo(e) > o && -1 == d.indexOf(t) && d.push(t);
            }
      }),
      (A.prototype.repo = function () {
        if (b)
          for (var t = q.length - 1; t >= 0; t--)
            n.sceneObject.remove(q[t]), q.splice(t, 1);
        var i = sceneManager.getCamera().position.clone();
        i.y = 0;
        var r = i,
          o = a,
          l = u + 400,
          p = a,
          f = this.getObjectsInBounds(r, o, l, p),
          m = [],
          y = s.getLaidList();
        for (t = 0; t < f.length; t++) {
          var x,
            H = f[t].id,
            w = !0;
          switch (f[t].type) {
            case 0:
              x = this.objects.item[H].position;
              break;
            case 1:
              x = R[H];
              break;
            case 2:
              x = y[H].position;
          }
          if (w) {
            var M = {
              x: Math.round(x.x),
              y: Math.round(x.y),
              z: Math.round(x.z),
            };
            m.push(M);
          }
        }
        var _ = n.camControls.getMoveVector();
        0 === _.length() && (_ = n.camControls.getLookVector()),
          (_.y = 0),
          _.normalize();
        var S = {
          mode: "static",
          width: a,
          depth: a,
          height: u,
          center: r,
          lastCenter: g,
          existingPoints: m,
          minDistance: h,
          directionalVec: _,
          maxAngleFromDirVec: Math.PI / 2,
          borderSampleCount: 40,
          newOnly: !0,
        };
        this.fetchPoissonPoints(S, function (t) {
          var i = n.camControls.getLookVector();
          if (((i.y = 0), i.normalize(), b))
            for (var r = 0; r < t.length; r++) {
              var o = new THREE.BoxGeometry(100, 100, 100);
              c = new THREE.Color(65280);
              var a = new THREE.MeshBasicMaterial({
                  color: c,
                  transparent: !0,
                  opacity: 0.5,
                }),
                l = new THREE.Mesh(o, a);
              l.position.set(t[r].x, t[r].y, t[r].z),
                q.push(l),
                n.sceneObject.add(l);
            }
          var u = d.length + Math.ceil(d.length * T);
          t = t.slice(0, u);
          var p = [];
          for (r = 0; r < t.length; r++)
            p.push(new THREE.Vector3(t[r].x, t[r].y, t[r].z));
          var f = h;
          for (r = p.length - 1; r >= 0; r--) {
            var m = !1;
            for (var y in n.objects.item) {
              var x = n.objects.item[y];
              if (p[r].distanceTo(x.position) < f) {
                m = !0;
                break;
              }
            }
            if (!m)
              for (var H = 0; H < R.length; H++) {
                if (p[r].distanceTo(R[H]) < f) {
                  m = !0;
                  break;
                }
              }
            if (!m) {
              var w = s.getLaidList();
              for (H = 0; H < w.length; H++) {
                if (p[r].distanceTo(w[H].position) < f) {
                  m = !0;
                  break;
                }
              }
            }
            m && p.splice(r, 1);
          }
          var M = Math.min(p.length, d.length + Math.round(d.length * T));
          p.length > M && (p = p.slice(0, M)), (p = e(p, !0));
          var _ = n.randomizeIndices(d.length);
          for (r = 0; r < d.length && p.length > r; r++) {
            var C = p[r],
              L = ((y = d[_[r]]), n.objects.item[y]);
            (L.viewData.drift.destination.x =
              L.viewData.drift.particle.position.x =
              L.position.x =
                C.x),
              (L.viewData.drift.destination.y =
                L.viewData.drift.particle.position.y =
                L.position.y =
                  C.y),
              (L.viewData.drift.destination.z =
                L.viewData.drift.particle.position.z =
                L.position.z =
                  C.z),
              null != L.viewData.drift.futureDestination &&
                (L.viewData.drift.previousDestination =
                  L.viewData.drift.futureDestination =
                    L.viewData.drift.destination.clone());
          }
          var A = n.getFarthestVec(t, S.center);
          (lastRealRad = S.center.distanceTo(A)),
            (g = v.clone()),
            (d = []),
            setTimeout(function () {
              E = !1;
            }, 100);
        }),
          (v = i),
          (E = !0);
      }),
      (A.prototype.onRelease = function () {
        for (var e in ((this.uiEnabled = !1),
        s.stop(),
        ui.disableHelpLink(),
        t(),
        s.implodeBlackholes(),
        y.stop(),
        this.objects.item))
          l.removeParticleClean(this.objects.item[e].viewData.drift.particle);
        ui.closeItemPreview();
      }),
      (A.prototype.onReleaseEnd = function () {
        s.clear();
      }),
      (A.prototype.itemClickCallback = function (e) {
        (vis.getCurrentVis().uiEnabled = !1),
          vis.getCurrentVis().animateCamTowardTag(e.position, function () {
            console.log("e", e.basicInfo);
            vis.setTo("tags", {
              tagIds: [e.basicInfo.tags[0].tag_goya_id],
              center: e.position.clone(),
              lastView: "drift",
            });
          });
      }),
      (A.prototype.attractSimilar = function (e) {
        if (H) {
          var t = this.objects.item[e],
            i = (sceneManager.getCamera(), t);
          api.getArchiveObjectSimilar(
            {
              id: e,
              detail: "id_only",
            },
            function (e) {
              if (null !== e) {
                var t = e;
                if (0 != t.length) {
                  for (var r = t.length - 1; r >= 0; r--) {
                    var o = t[r];
                    void 0 === n.objects.item[o] && t.splice(r, 1);
                  }
                  var a = 999999,
                    s = 0,
                    l = {};
                  for (r = 0; r < t.length; r++)
                    t[r].count > s
                      ? (s = t[r].count)
                      : t[r].count < a && (a = t[r].count),
                      void 0 === l[t[r].count]
                        ? (l[t[r].count] = [t[r]])
                        : l[t[r].count].push(t[r]);
                  for (var h in l) l[h] = shuffle(l[h]);
                  var c = [];
                  for (var h in l)
                    for (r = 0; r < l[h].length; r++) c.push(l[h][r]);
                  c.reverse(),
                    (c = c.slice(0, 20)),
                    n.disableItemInteraction(),
                    n.attractItems(i, c);
                }
              }
            },
            function (e) {
              console.log(e);
            }
          );
        }
      }),
      (A.prototype.attractBlackHole = function (e, t) {
        (this.uiEnabled = !1),
          $("body").css("cursor", "default"),
          ui.closeItemPreview(),
          (p = !1);
        var i = sceneManager.getCamera().position.clone().sub(e.position),
          r = e.position.clone(),
          n = e.position.clone().add(i.normalize().multiplyScalar(10));
        this.camControls.forceStop(),
          this.camControls.animate({
            pos: n,
            look: r,
            motion: "spiral",
            duration: 8e3,
            easing: TWEEN.Easing.Quadratic.In,
            interpolate: !0,
            callback: function () {
              sceneManager.setPaused(!0), (p = !0);
              s.loadMiniscene();
              void 0 !== t && t();
            },
          });
      }),
      (A.prototype.getBlackHoleSceneIndex = function () {
        return s.getBlackHoleSceneIndex();
      }),
      (A.prototype.setBlackHoleSceneIndex = function (e) {
        s.setBlackHoleSceneIndex(e);
      }),
      (A.prototype.exitBlackHole = function () {
        var e = Math.random() * Math.PI * 2,
          t = vis.getCurrentVis();
        t.camControls.setTargetHeadingAngle(e),
          t.camControls.setTargetTiltAngle(0),
          n.camControls.setAutoFloat(!0),
          s.start(),
          s.exitBlackHole();
      }),
      (A.prototype.attractTag = function (e, t) {
        ui.startLoader(),
          (this.uiEnabled = !1),
          s.stop(),
          api.getTagArchiveObjects(
            {
              id: e.data.id,
            },
            function (i) {
              ui.stopLoader();
              for (var r = new Array(i.length), o = 0; o < i.length; o++)
                r[o] = i[o].object_goya_id;
              n.attractItems(e, r, !1, t);
            }
          );
      }),
      (A.prototype.attractItems = function (t, r, o, a) {
        var l;
        l = t instanceof ItemNode;
        var c = t.position.clone(),
          p = c.clone();
        p.y = 0;
        var d = r.length + s.laidCount(),
          f = {
            mode: "dynamic",
            count: (d += Math.ceil(d * T)),
            height: u,
            center: p,
            existingPoints: [c],
            minDistance: h,
            newOnly: !0,
          };
        n.fetchPoissonPoints(f, function (f) {
          var m = n.orderPositionsByDistanceTo(f, c),
            E = m.slice();
          m.splice(d, m.length - d), (m = e(m, !1, !0));
          for (var g = 0, v = 0; v < r.length; v++) {
            if (void 0 === m[v]) {
              console.log("don't have enough points!");
              break;
            }
            var R = r[v];
            ((_ = n.objects.item[R]).viewData.drift.previousDestination =
              _.position.clone()),
              (_.viewData.drift.futureDestination = m[v].clone()),
              (H = m[v].distanceTo(c)) > g && (g = H);
            var x = {};
            m[v].y > 0 ? (x.up = !0) : (x.up = !1);
            var H = m[v].distanceTo(_.position);
            (x.maxHeight = map(H, 0, 8e3, 3e3, 8e3)),
              (_.viewData.drift.attractParams = x);
          }
          var b = propertyCount(n.objects.item);
          (b += s.laidCount()),
            (b += Math.ceil(b * T)),
            (b += 0.26178 * b),
            E.unshift(c);
          var w = !1,
            q = !1;
          if (l) camAnimation = !0;
          else {
            var M = sceneManager
              .getCamera()
              .position.clone()
              .sub(c)
              .normalize();
            M.multiplyScalar(g + 250), M.add(c);
            for (v = 0; v < r.length; v++) {
              var _;
              R = r[v];
              if (
                (_ =
                  n.objects.item[
                    R
                  ]).viewData.drift.futureDestination.distanceTo(M) < 100
              ) {
                M.y += 100;
                break;
              }
            }
            n.camControls.animate({
              pos: M,
              look: c,
              duration: 3e3,
              callback: function () {
                (q = !0), w && (n.uiEnabled = !0);
              },
            });
          }
          console.log("h", h);
          x = {
            mode: "dynamic",
            count: b,
            height: u,
            center: p,
            existingPoints: E,
            minDistance: h,
            newOnly: !0,
          };
          n.fetchPoissonPoints(x, function (h) {
            var u = n.orderPositionsByDistanceTo(h, c);
            u = e((u = u.slice(0, b)), !0);
            var p = [];
            if (l)
              for (var d in n.objects.item) {
                var f = !1;
                (d !== t.basicInfo.id && -1 === r.indexOf(d)) || (f = !0),
                  f || p.push(d);
              }
            else
              for (var d in n.objects.item) {
                f = !1;
                -1 !== r.indexOf(d) && (f = !0), f || p.push(d);
              }
            for (
              var m = i(u, c, p), E = s.getLaidList(), g = 0;
              g < m.length;
              g++
            ) {
              var v,
                T = m[g].closestPosition;
              if ("item" === m[g].type) {
                d = m[g].id;
                v = n.objects.item[d];
              } else
                (v = E.filter(function (e) {
                  return e.data.id === m[g].id;
                })[0]),
                  void 0 === v.viewData &&
                    (v.viewData = {
                      drift: {},
                    });
              (v.viewData.drift.previousDestination = v.position.clone()),
                (v.viewData.drift.futureDestination = T);
              var R = {};
              v.viewData.drift.futureDestination.y > c.y
                ? (R.up = !0)
                : (R.up = !1);
              var x = v.viewData.drift.previousDestination.distanceTo(c);
              (R.maxHeight = x < 800 ? 800 - x : 0),
                (v.viewData.drift.attractParams = R);
            }
            if (
              ((t.viewData.drift.previousDestination = t.position.clone()), l)
            )
              if (o) {
                var H = t.viewData.drift.destination.clone(),
                  M =
                    n.objects.item[
                      r[0]
                    ].viewData.drift.futureDestination.clone();
                (t.viewData.drift.futureDestination = M.clone()),
                  (n.objects.item[r[0]].viewData.drift.futureDestination =
                    H.clone());
                var _ = H.clone().add(
                    n.camControls
                      .getLookVector()
                      .normalize()
                      .multiplyScalar(250)
                  ),
                  S = -1,
                  C = 9999999999;
                for (var d in n.objects.item) {
                  var L = n.objects.item[d];
                  x = _.distanceTo(L.viewData.drift.futureDestination);
                  d !== r[0] && x < C && ((C = x), (S = d));
                }
                var A = t.viewData.drift.futureDestination.clone(),
                  k =
                    n.objects.item[S].viewData.drift.futureDestination.clone();
                (t.viewData.drift.futureDestination = k),
                  (n.objects.item[S].viewData.drift.futureDestination = A);
              } else
                t.viewData.drift.futureDestination =
                  t.viewData.drift.destination.clone();
            else t.viewData.drift.futureDestination = t.position.clone();
            var D = p.slice(0, 10);
            (D = n.orderIdsByDistanceTo(D, c)),
              l
                ? n.createAttractSimilarPhysics(t.basicInfo.id, D, o)
                : n.createAttractTagPhysics(D, o),
              o && n.propelTo(c);
            var P = [];
            for (g = 0; g < m.length; g++)
              if ("egg" === m[g].type) {
                var I = E.filter(function (e) {
                  return e.data.id === m[g].id;
                })[0];
                I.position.distanceTo(c) > 10 && P.push(I);
              }
            y.stop(),
              (y = new TWEEN.Tween({
                t: 0,
              })
                .to(
                  {
                    t: 1,
                  },
                  1800
                )
                .easing(TWEEN.Easing.Quartic.InOut)
                .onUpdate(function () {
                  l &&
                    (t.viewData.drift.destination = lerpVec3(
                      t.viewData.drift.previousDestination,
                      t.viewData.drift.futureDestination,
                      this.t
                    ));
                  for (
                    var e = Math.sin(Math.PI * this.t), i = 0;
                    i < r.length;
                    i++
                  ) {
                    var o = r[i],
                      a = lerpVec3(
                        (h = n.objects.item[o]).viewData.drift
                          .previousDestination,
                        h.viewData.drift.futureDestination,
                        this.t
                      ),
                      s = e * h.viewData.drift.attractParams.maxHeight;
                    h.viewData.drift.attractParams.up || (s = -s),
                      (a.y += s),
                      (h.viewData.drift.destination = a);
                  }
                  for (i = 0; i < p.length; i++) {
                    var h;
                    o = p[i];
                    (h = n.objects.item[o]).viewData.drift.destination =
                      lerpVec3(
                        h.viewData.drift.previousDestination,
                        h.viewData.drift.futureDestination,
                        this.t
                      );
                    s = e * h.viewData.drift.attractParams.maxHeight;
                    h.viewData.drift.attractParams.up || (s = -s),
                      (h.viewData.drift.destination.y += s),
                      (h.position.x = h.viewData.drift.particle.position.x =
                        lerp(
                          h.viewData.drift.particle.position.x,
                          h.viewData.drift.destination.x,
                          0.01
                        )),
                      (h.position.y = h.viewData.drift.particle.position.y =
                        lerp(
                          h.viewData.drift.particle.position.y,
                          h.viewData.drift.destination.y,
                          0.01
                        )),
                      (h.position.z = h.viewData.drift.particle.position.z =
                        lerp(
                          h.viewData.drift.particle.position.z,
                          h.viewData.drift.destination.z,
                          0.01
                        ));
                  }
                  for (i = 0; i < P.length; i++) {
                    var c = P[i];
                    c.position.copy(
                      lerpVec3(
                        c.viewData.drift.previousDestination,
                        c.viewData.drift.futureDestination,
                        this.t
                      )
                    );
                    s = e * c.viewData.drift.attractParams.maxHeight;
                    c.viewData.drift.attractParams.up || (s = -s),
                      (c.position.y += s);
                  }
                })
                .onComplete(function () {
                  n.enableItemInteraction(),
                    n.removeAttractSimilarPhysics(),
                    void 0 !== a && a(),
                    s.start(),
                    (w = !0),
                    q && (n.uiEnabled = !0);
                })
                .start());
          });
        });
      }),
      (A.prototype.createAttractSimilarPhysics = function (e, t, i) {
        var r = this.objects.item[e];
        r.viewData.drift.particle.fixed = !0 !== i;
        for (var n = -2e4, o = 0; o < t.length; o++) {
          var a = this.objects.item[t[o]];
          l.makeAttraction(
            r.viewData.drift.particle,
            a.viewData.drift.particle,
            n,
            1
          );
          for (var s = 0; s < t.length; s++)
            if (o !== s) {
              var h = this.objects.item[t[s]];
              l.makeAttraction(
                a.viewData.drift.particle,
                h.viewData.drift.particle,
                n,
                1
              );
            }
        }
        (M = {
          attractorId: e,
          similarIds: t,
        }),
          (sceneManager.usePhysics = !0);
      }),
      (A.prototype.createAttractTagPhysics = function (e) {
        for (var t = -2e4, i = 0; i < e.length; i++)
          for (var r = this.objects.item[e[i]], n = 0; n < e.length; n++)
            if (i !== n) {
              var o = this.objects.item[e[n]];
              l.makeAttraction(
                r.viewData.drift.particle,
                o.viewData.drift.particle,
                t,
                1
              );
            }
        (M = {
          attractorId: null,
          similarIds: e,
        }),
          (sceneManager.usePhysics = !0);
      }),
      (A.prototype.removeAttractSimilarPhysics = function () {
        var e = M.attractorId;
        null !== e &&
          l.removeParticleClean(this.objects.item[e].viewData.drift.particle);
        for (var t = 0; t < M.similarIds.length; t++) {
          var i = M.similarIds[t];
          l.removeParticleClean(this.objects.item[i].viewData.drift.particle);
        }
        null !== e && (this.objects.item[e].viewData.drift.particle.fixed = !1),
          (M = {
            attractorId: null,
            similarIds: [],
          }),
          (sceneManager.usePhysics = !1);
      }),
      (A.prototype.fetchPoissonPoints = function (e, t) {
        var i = new Worker("/assets/poisson-task.js");
        i.addEventListener(
          "message",
          function (e) {
            (poissonTmpContainer = n.objToVecArray(e.data)),
              void 0 !== t && t(poissonTmpContainer),
              !1,
              i.terminate();
          },
          !1
        ),
          i.postMessage(e);
      }),
      (A.prototype.getObjectBounds = function (e, t) {
        var i = [];
        for (var r in e) i.push(e[r].position);
        return this.getPointsBounds(i, t);
      }),
      (A.prototype.getPointsBounds = function (e, t) {
        for (
          var i = 99999999999,
            r = -99999999999,
            n = 99999999999,
            o = -99999999999,
            a = 99999999999,
            s = -99999999999,
            l = 0;
          l < e.length;
          l++
        )
          e[l].x < i ? (i = e[l].x) : e[l].x > r && (r = e[l].x),
            e[l].y < n ? (n = e[l].y) : e[l].y > o && (o = e[l].y),
            e[l].z < a ? (a = e[l].z) : e[l].z > s && (s = e[l].z);
        return !0 === t
          ? {
              width: r - i,
              height: o - n,
              depth: s - a,
            }
          : {
              min: {
                x: i,
                y: n,
                z: a,
              },
              max: {
                x: r,
                y: o,
                z: s,
              },
            };
      }),
      (A.prototype.getObjectsInBounds = function (e, t, i, r) {
        var n = {
            x: e.x - t / 2,
            y: e.y - i / 2,
            z: e.z - r / 2,
          },
          o = {
            x: e.x + t / 2,
            y: e.y + i / 2,
            z: e.z + r / 2,
          },
          a = [];
        for (var s in this.objects.item) {
          var l = {
            x: this.objects.item[s].viewData.drift.destination.x,
            y: this.objects.item[s].viewData.drift.destination.y,
            z: this.objects.item[s].viewData.drift.destination.z,
          };
          l.x > n.x &&
            l.x < o.x &&
            l.y > n.y &&
            l.y < o.y &&
            l.z > n.z &&
            l.z < o.z &&
            a.push({
              type: 0,
              id: s,
            });
        }
        return a;
      }),
      (A.prototype.objToVecArray = function (e) {
        for (var t = new Array(e.length), i = 0; i < e.length; i++)
          t[i] = new THREE.Vector3(e[i].x, e[i].y, e[i].z);
        return t;
      }),
      (A.prototype.getFarthestVec = function (e, t) {
        for (
          var i = {
              index: null,
              distance: 0,
            },
            r = 0;
          r < e.length;
          r++
        ) {
          var n = e[r].distanceTo(t);
          n > i.distance && ((i.index = r), (i.distance = n));
        }
        return e[i.index];
      }),
      (A.prototype.getFarthestFlatDistance = function () {
        var e = sceneManager.getCamera().position.clone();
        e.y = 0;
        var t = 0;
        for (var i in this.objects.item) {
          var r = this.objects.item[i].position.clone();
          r.y = 0;
          var n = e.distanceTo(r);
          n > t && (t = n);
        }
        return t;
      }),
      (A.prototype.clearAttractions = function (e) {
        for (var t = l.attractions, i = t.length - 1; i >= 0; i--)
          t[i].animationId == e.viewData.drift.animationId &&
            l.attractions.remove(i);
        e.viewData.drift.attractions = [];
        var r = l.springs;
        for (i = r.length - 1; i >= 0; i--)
          r[i].animationId == e.viewData.drift.animationId &&
            l.springs.remove(i);
        (e.viewData.drift.particle.fixed = !1),
          (e.viewData.drift.anchorSpring = void 0),
          (e.viewData.drift.tmpParticle = void 0),
          (e.viewData.drift.animationId = void 0);
      }),
      (A.prototype.createSinePath = function (e, t, i, r, n) {
        for (
          var o = [], a = 20, s = t.clone().sub(e).length(), l = 0;
          l < a;
          l++
        ) {
          var h = l / (a - 1),
            c = lerpVec3(e, t, h),
            u = h * Math.PI,
            p = map(s, 0, 1e4, i, r);
          (c.y -= Math.sin(u) * p), o.push(c);
        }
        var d = new THREE.Spline(o),
          f = new THREE.Geometry();
        for (l = 0; l < n; l++) {
          var m = d.getPoint(l / n);
          c = new THREE.Vector3(m.x, m.y, m.z);
          f.vertices.push(c);
        }
        if (b) {
          var E = 15,
            g = t.clone().sub(e);
          g.normalize();
          var v = new THREE.Vector3(0, 0, -1),
            y = this.getQuaternionBetweenVecs(v, g),
            T = new THREE.Mesh(
              new THREE.SphereGeometry(E, E, E),
              new THREE.MeshBasicMaterial({
                color: 16763904,
              })
            );
          T.position.set(e.x, e.y, e.z), this.sceneObject.add(T);
          var R = new THREE.Mesh(
            new THREE.SphereGeometry(E, E, E),
            new THREE.MeshBasicMaterial({
              color: 16763904,
            })
          );
          R.position.set(t.x, t.y, t.z), this.sceneObject.add(R);
          var x = new THREE.Geometry(),
            H = v;
          H.multiplyScalar(s),
            H.applyQuaternion(y),
            H.add(e),
            x.vertices.push(e.clone()),
            x.vertices.push(H);
          var w = new THREE.LineBasicMaterial({
              color: 65535,
            }),
            q = new THREE.Line(x, w);
          this.sceneObject.add(q);
          var M = new THREE.LineBasicMaterial({
              color: 16711935,
            }),
            _ = new THREE.Line(f, M);
          this.sceneObject.add(_);
        }
        return d;
      }),
      (A.prototype.createSplinePath = function (e, t, i, r, n, o) {
        var a = 15,
          s = [],
          l = t.clone().sub(e);
        l.normalize();
        var h = new THREE.Vector3(0, 0, -1),
          c = this.getQuaternionBetweenVecs(h, l),
          u = t.clone().sub(e).length();
        s.push(e.clone());
        for (var p = 1; p < n; p++) {
          var d = e.clone().lerp(t.clone(), p / n),
            f = Math.random() * Math.PI * 2,
            m = new THREE.Vector3(),
            E = Math.sin((Math.PI * p) / n);
          (m.x = Math.cos(f) * ((Math.random() * (r - i) - i) * E)),
            (m.y = Math.sin(f) * ((Math.random() * (r + i) - i) * E)),
            m.applyQuaternion(c),
            d.add(m),
            s.push(d);
        }
        s.push(t.clone());
        var g = new THREE.Spline(s),
          v = new THREE.Geometry();
        for (p = 0; p < o; p++) {
          d = g.getPoint(p / o);
          var y = new THREE.Vector3(d.x, d.y, d.z);
          v.vertices.push(y);
        }
        if (b) {
          var T = new THREE.Mesh(
            new THREE.SphereGeometry(a, a, a),
            new THREE.MeshBasicMaterial({
              color: 16763904,
            })
          );
          T.position.set(e.x, e.y, e.z), this.sceneObject.add(T);
          var R = new THREE.Mesh(
            new THREE.SphereGeometry(a, a, a),
            new THREE.MeshBasicMaterial({
              color: 16763904,
            })
          );
          R.position.set(t.x, t.y, t.z), this.sceneObject.add(R);
          var x = new THREE.Geometry(),
            H = h;
          H.multiplyScalar(u),
            H.applyQuaternion(c),
            H.add(e),
            x.vertices.push(e.clone()),
            x.vertices.push(H);
          var w = new THREE.LineBasicMaterial({
              color: 65535,
            }),
            q = new THREE.Line(x, w);
          this.sceneObject.add(q);
          var M = new THREE.LineBasicMaterial({
              color: 16711935,
            }),
            _ = new THREE.Line(v, M);
          this.sceneObject.add(_);
        }
        return g;
      }),
      (A.prototype.onReferenceClick = function (e, t) {
        sceneManager.setPaused(!1),
          this.camControls.setAutoFloat(!0),
          ui.closeItemPreview(this.onCloseItemPreviewFromRef);
        var i = this.objects.item[e];
        this.attractItems(i, [t], !0);
      }),
      (A.prototype.onCloseItemPreview = function () {
        (null != S && _ === S) || n.attractSimilar(_),
          (n.state = "normal"),
          n.propelBack(),
          n.enableItemInteraction();
      }),
      (A.prototype.onCloseItemPreviewFromRef = function () {
        (n.state = "normal"), n.enableItemInteraction();
      }),
      (A.prototype.pickRandomProperty = function (e) {
        var t,
          i = 0;
        for (var r in e) Math.random() < 1 / ++i && (t = r);
        return t;
      }),
      (A.prototype.enableAttraction = function () {
        H = !0;
      }),
      (A.prototype.disableAttraction = function () {
        H = !1;
      }),
      (A.prototype.getQuaternionBetweenVecs = function (e, t) {
        var i = e.clone().cross(t),
          r = new THREE.Quaternion(i.x, i.y, i.z, 1 + e.clone().dot(t));
        return r.normalize(), r;
      }),
      (A.prototype.openInitAbout = function () {
        n.firstTime &&
          (ui.showHelpLink(),
          ui.showAboutLink(),
          (n.firstTime = !1),
          (n.uiEnabled = !0));
      }),
      (A.prototype.getPlaceholderPositions = function () {
        return R;
      }),
      (A.prototype.getPlaceholderTestObjects = function () {
        return x;
      }),
      (A.prototype.removePlaceholderTestObject = function (e) {
        x.remove(x.children[e]);
      }),
      (A.prototype.hoverOnEgg = function (e) {
        var t = s.getLaidList(),
          i = t.filter(function (t) {
            return t.data.id == e;
          });
        0 !== i.length &&
          t
            .filter(function (t) {
              return t.data.id == e;
            })[0]
            .hoverOn();
      }),
      (A.prototype.hoverOffEgg = function (e) {
        var t = s.getLaidList(),
          i = t.filter(function (t) {
            return t.data.id == e;
          });
        0 !== i.length &&
          t
            .filter(function (t) {
              return t.data.id == e;
            })[0]
            .hoverOff();
      }),
      (A.prototype.clickEgg = function (e) {
        var t = s.getLaidList(),
          i = t.filter(function (t) {
            return t.data.id == e;
          });
        0 !== i.length &&
          t
            .filter(function (t) {
              return t.data.id == e;
            })[0]
            .click();
      }),
      (A.prototype.animateCamTowardTag = function (e, t) {
        this.uiEnabled = !1;
        var i = sceneManager.getCamera().position.clone();
        (i.y = e.y),
          this.camControls.animate({
            pos: i,
            look: e,
            duration: 1400,
            callback: function () {
              (n.uiEnabled = !0), void 0 !== t && t();
            },
          });
      }),
      (A.prototype.onInfoOpen = function () {
        s.stop();
      }),
      (A.prototype.onInfoClose = function () {
        s.start();
      }),
      (A.prototype.addItemTagsToHistory = function (e) {
        s.addItemTags(e);
      }),
      A
    );
  })(),
  TagsCamControls = (function () {
    var e,
      t,
      i = 100,
      r = i,
      n = new THREE.Quaternion(),
      o = new THREE.Quaternion(),
      a = new THREE.Quaternion(),
      s = new THREE.Vector3(),
      l = !1,
      h = !0,
      c = !0,
      u = 0,
      p = 8e-4,
      d = (new THREE.Vector3(0, -1, 0), new THREE.Vector3()),
      f = 0,
      m = 1e6,
      E = 0,
      g = 0,
      v = ((a = new THREE.Quaternion()), 0),
      y = 0,
      T = 0,
      R = 0,
      x = 0,
      H = !1,
      b = function (i) {
        this,
          (e = i),
          (this.moveSpeed = 200),
          (this.transitionDuration = 3e3),
          (this.drag = 0.3),
          (t = new TWEEN.Tween()),
          (this.mousedown = !1),
          (this.dragging = !1);
      };
    return (
      (b.prototype = {
        constructor: b,
        init: function (t) {
          a.copy(t), n.copy(e.quaternion), (i = r);
          var o = new THREE.Vector3(0, 0, -1);
          o.applyQuaternion(a),
            (o.y = 0),
            o.normalize(),
            (v = 0.5 * Math.PI + Math.atan2(o.z, o.x));
        },
        setOutPosition: function (e) {
          outPosition.set(e.x, e.y, e.z);
        },
        setInDistance: function (e) {
          inDistance = e;
        },
        onMouseDown: function (e) {
          (R = y),
            (x = T),
            (y = e.clientX),
            (T = e.clientY),
            (this.mousedown = !0);
        },
        onMouseUp: function () {
          (this.mousedown = !1), (this.dragging = !1);
        },
        onMouseLeave: function () {
          (this.mousedown = !1), (this.dragging = !1);
        },
        onMouseMove: function (e) {
          ((R = y),
          (x = T),
          (y = e.clientX),
          (T = e.clientY),
          this.mousedown && !l) &&
            (this.dragging || (this.dragging = !0),
            (E += 0.01 * -(y - R)),
            (g += 0.01 * -(T - x)),
            this.updateTargets(),
            (u = 0));
        },
        updateTargets: function () {
          g > Math.PI / 2
            ? (g = Math.PI / 2)
            : g < -Math.PI / 2 && (g = -Math.PI / 2);
          var e = new THREE.Quaternion();
          e.setFromAxisAngle(new THREE.Vector3(0, 1, 0), E + v);
          var t = new THREE.Quaternion();
          t.setFromAxisAngle(new THREE.Vector3(1, 0, 0), g),
            (n = a.clone().multiply(e).multiply(t));
        },
        onMouseWheel: function (e) {
          l || H || ((i += 25 * -e), (i = Math.min(Math.max(i, f), m)));
        },
        onKeyDown: function () {
          this.dragging = !0;
        },
        onKeyUp: function () {
          ui.previewOpen && ui.closeItemPreview(), (this.dragging = !1);
        },
        update: function () {
          l ||
            (H
              ? e.position.lerp(s, this.drag)
              : ((r = lerp(r, i, this.drag)),
                o.slerp(n, this.drag),
                e.position.set(0, 0, 1),
                e.position.multiplyScalar(r),
                e.position.applyQuaternion(o),
                e.position.add(d)),
            e.quaternion.slerp(n, this.drag),
            this.dragging
              ? e.lookAt(d)
              : h &&
                c &&
                (u < p && (u += 1e-5), (E += u), this.updateTargets()));
        },
        animate: function (a) {
          t.stop();
          var h = {
              cx: e.position.x,
              cy: e.position.y,
              cz: e.position.z,
              t: 0,
            },
            c = {
              cx: a.pos.x,
              cy: a.pos.y,
              cz: a.pos.z,
              t: 1,
            },
            p = !1;
          if (void 0 !== a.look) {
            var f = e.position.distanceTo(a.look),
              m = this.getLookVector().multiplyScalar(f).add(e.position);
            (h.lx = m.x),
              (h.ly = m.y),
              (h.lz = m.z),
              (c.lx = a.look.x),
              (c.ly = a.look.y),
              (c.lz = a.look.z),
              (p = !0);
          }
          (l = !0),
            (t = new TWEEN.Tween(h)
              .to(c, a.duration)
              .onUpdate(function () {
                e.position.set(this.cx, this.cy, this.cz),
                  p && e.lookAt(new THREE.Vector3(this.lx, this.ly, this.lz));
              })
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onComplete(function () {
                var t = e.position.clone().sub(d).length();
                (i = t),
                  (r = t),
                  s.copy(e.position),
                  p && (n.copy(e.quaternion), o.copy(e.quaternion)),
                  void 0 !== a.callback && a.callback(),
                  (l = !1),
                  (u = 0);
              })
              .start());
        },
        animateSlerp: function (a) {
          t.stop();
          var h = e.position.clone().sub(d),
            c = a.pos.clone().sub(d),
            p = h.length(),
            f = c.length(),
            m = new THREE.Vector3(1, 0, 0),
            v = this.quaternionBetweenVecs(m, h.normalize()),
            y = this.quaternionBetweenVecs(m, c.normalize());
          new THREE.Quaternion();
          (l = !0),
            (t = new TWEEN.Tween({
              t: 0,
            })
              .to(
                {
                  t: 1,
                },
                a.duration
              )
              .onUpdate(function () {
                var t = v.clone().slerp(y, this.t),
                  i = lerp(p, f, this.t),
                  r = m.clone().applyQuaternion(t).multiplyScalar(i).add(d);
                e.position.copy(r), e.lookAt(d);
              })
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onComplete(function () {
                var t = e.position.clone().sub(d).length();
                (i = t),
                  (r = t),
                  n.copy(e.quaternion),
                  o.copy(e.quaternion),
                  s.copy(e.position);
                var h = e.position.x - d.x,
                  c = e.position.y - d.y,
                  p = e.position.z - d.z,
                  f = e.position.distanceTo(d);
                (E = 0.5 * Math.PI - Math.atan2(p, h)),
                  (g = -Math.asin(c / f)),
                  void 0 !== a.callback && a.callback(),
                  (l = !1),
                  (u = 0);
              })
              .start());
        },
        stopAnimation: function () {
          t.stop();
        },
        getLookVector: function () {
          var t = new THREE.Vector3(0, 0, -1);
          return t.applyQuaternion(e.quaternion), t.normalize(), t;
        },
        getTargetScrollPos: function () {
          return s;
        },
        isAnimating: function () {
          return l;
        },
        setScrollMode: function (e) {
          H = e;
        },
        setRotationCenter: function (t) {
          d = t;
          var i = e.position.x - d.x,
            r = e.position.z - d.z;
          (E = 0.5 * Math.PI - Math.atan2(r, i)), (g = 0);
        },
        setZoomLimits: function (e, t) {
          (f = e), (m = t), (i = Math.max(Math.min(i, m), f));
        },
        setAutoRotate: function (e) {
          h = e;
        },
        quaternionBetweenVecs: function (e, t) {
          var i = new THREE.Vector3();
          i.crossVectors(e, t),
            i.normalize(),
            0 == i.x && 0 == i.y && 0 == i.z && (i = t);
          var r = GeomUtils.angleBetweenVecs(e, t),
            n = new THREE.Quaternion();
          return n.setFromAxisAngle(i, r), n.normalize(), n;
        },
      }),
      b
    );
  })(),
  TagNode = (function () {
    var e,
      t = function (t) {
        THREE.Object3D.call(this),
          (e = this),
          (this.parentVis = t),
          (this.color = new THREE.Color(16777215)),
          this.color.setHSL(Math.random(), 0.7, 0.7),
          (this.radius = 100),
          (this.data = {}),
          (this.point = this.parentVis.getPointSprite()),
          (this.point.visible = !1),
          this.add(this.point),
          (this.isEmpty = !0);
      };
    return (
      (t.prototype = Object.create(THREE.Object3D.prototype)),
      (t.prototype.fill = function (t, i, r) {
        function n(e) {
          (o.allItems = e), (o.isEmpty = !1), null != r && r();
        }
        this.data = t;
        var o = this;
        null == i
          ? api.getTagArchiveObjects(
              {
                id: t.id,
                detail: "id_only",
              },
              function (t) {
                for (var i = [], r = 0; r < t.length; r++) {
                  var o = t[r],
                    a = e.parentVis.objects.item[o];
                  void 0 !== a && i.push(a);
                }
                n(i);
              }
            )
          : n(i);
      }),
      (t.prototype.empty = function () {
        (this.data = null), (this.allItems = []), (this.isEmpty = !0);
      }),
      t
    );
  })(),
  TagAddNode = (function () {
    function e(e) {
      var t = THREE.ShaderLib.gradfogobject,
        i = THREE.UniformsUtils.clone(t.uniforms);
      return (
        (i.cameraPos.value = new THREE.Vector3(0, 0, 0)),
        (i.skyDomeRadius.value = sceneManager.skyDomeRadius),
        (i.skyDomeExponent.value = sceneManager.skyDomeExponent),
        (i.skyDomeOffset.value = sceneManager.skyDomeOffset),
        (i.skyDomeBottomColor.value = sceneManager.skyDomeBottomColor),
        (i.skyDomeTopColor.value = sceneManager.skyDomeTopColor),
        (i.color.value = e),
        (i.opacity.value = 0),
        (i = THREE.UniformsUtils.merge([i, THREE.UniformsLib.lights])),
        new THREE.ShaderMaterial({
          uniforms: i,
          vertexShader: t.vertexShader,
          fragmentShader: t.fragmentShader,
          side: THREE.DoubleSide,
          transparent: !0,
          depthWrite: !0,
          depthTest: !0,
          lights: !0,
          fog: !0,
        })
      );
    }
    var t = 1,
      i = new THREE.Color(16777215),
      r = new THREE.Color(16711680),
      n = function (t, n) {
        THREE.Object3D.call(this), (this.parentVis = t), (this.srcTags = n);
        var o = new CompassPointer(250);
        (o.children[0].material = e(r)),
          (o.children[1].material = e(i)),
          (o.children[0].material.needsUpdate = !0),
          (o.children[1].material.needsUpdate = !0);
        for (var a = 0; a < o.children.length; a++) o.children[a].type = "ADD";
        (this.pointer = o), this.add(o), this.add(this.pointer);
      };
    return (
      (n.prototype = Object.create(THREE.Object3D.prototype)),
      (n.prototype.setIndex = function (e) {
        for (var t = 0; t < this.pointer.children.length; t++)
          this.pointer.children[t].index = e;
      }),
      (n.prototype.hoverOn = function () {}),
      (n.prototype.hoverOff = function () {}),
      (n.prototype.click = function () {
        this.parentVis.openTagsDialog();
      }),
      (n.prototype.setOpacity = function (e) {
        for (var i = 0; i < this.pointer.children.length; i++)
          this.pointer.children[i].material.uniforms.opacity.value = e * t;
      }),
      (n.prototype.hide = function () {
        for (var e = 0; e < this.pointer.children.length; e++)
          this.pointer.children[e].visible = !1;
      }),
      (n.prototype.show = function () {
        for (var e = 0; e < this.pointer.children.length; e++)
          this.pointer.children[e].visible = !0;
      }),
      (n.prototype.getScalar = function () {
        return this.pointer.getScalar();
      }),
      (n.prototype.update = function () {
        for (
          var e = this.position.distanceTo(sceneManager.getCamera().position),
            t = 0;
          t < this.pointer.children.length;
          t++
        )
          (this.pointer.children[t].material.uniforms.cameraPos.value =
            sceneManager.getCamera().position),
            (this.pointer.children[t].material.uniforms.nearOpacity.value = map(
              e,
              70,
              90,
              0,
              1
            ));
        var i = new THREE.Quaternion();
        i.setFromAxisAngle(new THREE.Vector3(0, 0, 1), 0.02),
          this.pointer.quaternion.multiply(i);
      }),
      n
    );
  })(),
  TagsVis = (function () {
    function e() {
      return new THREE.LineBasicMaterial({
        color: 16777215,
        linewidth: 2,
        opacity: 0,
        transparent: !0,
        blending: THREE.AdditiveBlending,
        fog: !1,
      });
    }
    function t(e) {
      for (var t = [], i = 0; i < e.length; i++)
        t.push(e[i]), i !== e.length - 1 && t.push("+");
      return t;
    }
    function i(e) {
      for (var t = "", i = 0; i < e.length; i++)
        (t += e[i]), i !== e.length - 1 && (t += "<br />+<br />");
      return t;
    }
    function r(e) {
      if (0 === e.length) return !1;
      for (var t = !0, i = 0; i < e.length; i++)
        if (0 !== e[i].indexOf("TEL")) {
          t = !1;
          break;
        }
      return t;
    }
    function n() {
      for (var e = [], t = 0; t < f.length; t++) e.push(f[t].data.id);
      var i = "/uncertain/connections/" + e.join(),
        r = "Studio Olafur Eliasson";
      window.history.replaceState(null, r, i);
      var n = "https://" + window.location.host + i;
      0 !== $("#copy-url-input").length
        ? $("#copy-url-input").val(n)
        : ($(".share-actions .share-arrow").after(
            '<a id="copy-url-button" href="#">Copy link</a>'
          ),
          $("#footer-nav").before(
            '<input id="copy-url-input" type="text" value="' +
              n +
              '" style="display:none" />'
          )),
        $("#copy-url-button")
          .unbind("click")
          .click(function (e) {
            e.preventDefault(),
              void 0 !== n && $("#copy-url-input").val(n),
              $("#copy-url-input").is(":visible")
                ? $("#copy-url-input").focus().select()
                : $("#copy-url-input").fadeIn("fast").focus().select();
          }),
        $("#copy-url-input").focusout(function () {
          $(this).fadeOut("fast");
        });
    }
    // function o() {
    //     window.history.replaceState(null, "Studio Olafur Eliasson", "/uncertain"),
    //     $(".share-actions #copy-url-button").remove(),
    //     $("#copy-url-input").remove()
    // }
    var a,
      s,
      l,
      h,
      c,
      u,
      p,
      d,
      f,
      m,
      E,
      g,
      v,
      y,
      T,
      R,
      x,
      H,
      b,
      w,
      q,
      M = 800,
      _ = (Math.cos(Math.PI / 6), Math.cos(Math.PI / 6), 4),
      S = {
        0: [0],
        1: [1],
        2: [2],
        3: [3],
        4: [0, 1],
        5: [1, 2],
        6: [2, 0],
        7: [0, 3],
        8: [1, 3],
        9: [2, 3],
        10: [0, 1, 2],
        11: [0, 1, 3],
        12: [0, 2, 3],
        13: [1, 2, 3],
        14: [0, 1, 2, 3],
      },
      C = {
        0: [0, 4, 6, 7, 10, 11, 12, 14],
        1: [1, 4, 5, 8, 10, 11, 13, 14],
        2: [2, 5, 6, 9, 10, 12, 13, 14],
        3: [3, 7, 8, 9, 11, 12, 13, 14],
      },
      L = new THREE.Quaternion(),
      A = 0,
      k = new TWEEN.Tween(),
      D = new TWEEN.Tween(),
      P = 2e3,
      I = 2e3,
      V = 800,
      O = 400,
      F = 200,
      z = [],
      U = -2e4,
      B = [],
      N = new THREE.Object3D(),
      j = new THREE.Object3D(),
      G = new THREE.Object3D(),
      W = 0.8,
      X = 3,
      Q = 60,
      Y = 0.06,
      Z = 0.08,
      K = 0.06,
      J = 0.06,
      ee = 0.025,
      te = 4,
      ie = 1,
      re = 0.62 * Math.PI,
      ne = new Array(15),
      oe = new Array(15),
      ae = new Array(15),
      se = [],
      le = new Array(4),
      he = [],
      ce = -1,
      ue = new THREE.Vector3(),
      pe = 0.25,
      de = 0.12,
      fe = 0.17,
      me = 0,
      Ee = 1,
      ge = 4,
      ve = !1,
      ye = function (e, t, i) {
        IVis.call(this, e, t, i),
          (a = this),
          (this.name = "tags"),
          (this.camControls = new TagsCamControls(e.getCamera(), L)),
          (c = sceneManager.physics),
          ((q = new THREE.LoadingManager()).onLoad = function () {
            for (var e = 0; e < ae.length; e++)
              void 0 !== ae[e] &&
                ((ae[e].lightSprite.material.map = H),
                (ae[e].glowSprite.material.map = b));
          }),
          setTimeout(function () {
            var e = new THREE.TextureLoader(q);
            (e.crossOrigin = "anonymous"),
              e.load("./webgl/light_point.jpg", function (e) {
                H = e;
              });
            var t = new THREE.TextureLoader(q);
            (t.crossOrigin = "anonymous"),
              t.load("./webgl/glow.jpg", function (e) {
                b = e;
              });
            var i = new THREE.TextureLoader(q);
            (i.crossOrigin = "anonymous"),
              i.load("./webgl/point.jpg", function (e) {
                w = e;
              });
          }, 100),
          (this.onResize = function () {
            $("#tags-dialog").each(function () {
              var e = $(this).find(".upper-section").height(),
                t = 0.5 * ($(window).height() - e);
              (t = Math.max(t, 76)), $(this).css("margin-top", t + "px");
            });
          }),
          (this.shouldWaitForFadeout = !0);
      };
    return (
      (ye.prototype = Object.create(IVis.prototype)),
      (ye.prototype.onInit = function (t) {
        null != t
          ? ((this.preloadInfo = t), (ve = t.isIntro || !1))
          : (this.preloadInfo = void 0),
          (this.state = "out"),
          this.sceneObject.add(j),
          this.sceneObject.add(G),
          (f = []),
          (m = []),
          (E = []),
          (g = []),
          (v = []),
          (y = []),
          (T = []);
        for (var i = 0; i < ne.length; i++) {
          (ne[i] = new Array()),
            (ae[i] = new THREE.Object3D()),
            (ae[i].viewData = {
              tags: {},
            }),
            (ae[i].viewData.tags.particle = c.makeParticle(10, 0, 0, 0)),
            ae[i].viewData.tags.particle.fixed,
            (ae[i].viewData.tags.repulsions = {}),
            (ae[i].viewData.tags.positionPrevious = new THREE.Vector3()),
            (ae[i].viewData.tags.positionTarget = new THREE.Vector3()),
            (ae[i].inbetweenLines = {}),
            (ae[i].itemLines = {}),
            (ae[i].glowTween = new TWEEN.Tween()),
            (ae[i].isNew = !1),
            (ae[i].selfIndex = i);
          var r = new THREE.SpriteMaterial({
              map: H,
              blending: THREE.AdditiveBlending,
              transparent: !0,
              opacity: 0,
            }),
            n = new THREE.Sprite(r);
          n.scale.set(1e-5, 1e-5, 1e-5),
            (n.maxOpacity = pe),
            (n.previousScale = new THREE.Vector3()),
            (n.targetScale = new THREE.Vector3()),
            (n.name = "light sprite"),
            (n.skipRaycast = !0),
            (ae[i].lightSprite = n),
            ae[i].add(n);
          var o = new THREE.SpriteMaterial({
              map: b,
              blending: THREE.AdditiveBlending,
              transparent: !0,
              opacity: 0,
            }),
            u = new THREE.Sprite(o);
          u.scale.set(1e-5, 1e-5, 1e-5),
            (u.maxOpacity = de),
            (u.previousScale = new THREE.Vector3()),
            (u.targetScale = new THREE.Vector3()),
            (u.name = "glow sprite"),
            (u.skipRaycast = !0),
            (ae[i].glowSprite = u),
            ae[i].add(u);
          var p = new THREE.PointLight(16777215, 0, 1);
          (p.maxIntensity = 2), (ae[i].light = p), ae[i].add(p);
          var d = new THREE.SphereGeometry(1, 20, 20),
            R = new THREE.MeshBasicMaterial({
              color: 16777215,
              transparent: !0,
              opacity: 0,
              blending: THREE.AdditiveBlending,
              depthWrite: !1,
            }),
            x = new THREE.Mesh(d, R);
          (x.maxOpacity = ee),
            (x.previousScale = new THREE.Vector3()),
            (x.targetScale = new THREE.Vector3()),
            (x.type = "BCS"),
            (x.index = i),
            (x.name = "click sphere"),
            ae[i].add(x),
            (ae[i].clickSphere = x),
            this.sceneObject.add(ae[i]),
            (oe[i] = 0);
        }
        for (i = 0; i < le.length; i++) {
          (le[i] = new THREE.PointLight(16777215, 0, 1)),
            this.sceneObject.add(le[i]);
        }
        this.updateLightMaterials();
        var w = this.camControls.getLookVector();
        (w.y = 0), w.normalize();
        var q = 1.5 * Math.PI - Math.atan2(w.z, w.x);
        (L = new THREE.Quaternion()).setFromAxisAngle(
          new THREE.Vector3(0, 1, 0),
          q
        );
        var M,
          _ = new THREE.Vector3(1, 0, 0).clone().applyQuaternion(L).normalize();
        (A = Math.atan2(_.z, _.x)),
          this.camControls.init(L),
          this.initTagsDialog();
        if (t && t.center)
          (M = t.center.clone()).y = sceneManager.getCamera().position.y;
        else {
          var S = this.camControls.getLookVector();
          (S.y = 0),
            S.normalize(),
            (M = sceneManager
              .getCamera()
              .position.clone()
              .add(S.multiplyScalar(1e3)));
        }
        (centerAnchor = new THREE.Object3D()),
          centerAnchor.position.set(M.x, M.y, M.z),
          (centerAnchor.point = this.getPointSprite()),
          (centerAnchor.point.visible = !1),
          centerAnchor.add(centerAnchor.point),
          this.sceneObject.add(centerAnchor);
        var C =
          itemField.sizeScalar *
          itemField.sizeScalar *
          2 *
          propertyCount(this.objects.item);
        (h = Math.sqrt((C / 4) * Math.PI)),
          (l = h - 2),
          this.camControls.setRotationCenter(centerAnchor.position),
          this.camControls.setZoomLimits(s, l),
          this.initItems();
        for (i = 0; i < 3; i++) {
          (d = new THREE.Geometry()).vertices.push(new THREE.Vector3()),
            d.vertices.push(new THREE.Vector3()),
            (d.dynamic = !1);
          R = e();
          B.push(new THREE.Line(d, R)), this.sceneObject.add(B[i]);
        }
        this.tweenFog(27e-5, this.transDuration),
          sceneManager.tweenSkyDomeState(
            sceneManager.SKYDOME_VIEW_COLORS.tags,
            this.transDuration
          ),
          !1,
          this.hideAddStuff(),
          this.camControls.animate({
            pos: sceneManager.getCamera().position.clone(),
            look: M,
            duration: a.transDuration,
          });
      }),
      (ye.prototype.initTagsDialog = function () {
        function e(e, t) {
          return (e = e.name.toUpperCase()) < (t = t.name.toUpperCase())
            ? -1
            : e > t
            ? 1
            : 0;
        }
        (u = api.tagList),
          (p = api.tagListArray),
          $("#ui #local").append(
            '<div id="tags-dialog-wrapper"><div id="tags-dialog"><div class="upper-section"><div class="heading"><h1>Choose a tag</h1></div><div id="suggested"><ul class="tags"></ul></div><div class="refresh-suggested-container"><img class="refresh-suggested" src="./ui/refresh_black_32.png" /></div><div id="expand-all-tags" class="alpha-group"><span>View all tags \u2193</span></div></div><div id="all"></div></div></div>'
          ),
          (d = $("#tags-dialog")),
          (tagsDialogWrapper = $("#tags-dialog-wrapper")),
          tagsDialogWrapper.hide(),
          d.find("#all").hide(),
          d.find("#expand-all-tags span").click(function () {
            var e,
              t = 400;
            $(this).hasClass("opened")
              ? ($(this).removeClass("opened"),
                $(this).html("View all tags \u2193"),
                $("#tags-dialog-wrapper")
                  .stop()
                  .animate(
                    {
                      scrollTop: 0,
                    },
                    {
                      duration: t,
                      easing: "easeOutQuad",
                      complete: function () {
                        d.find("#all").stop().fadeOut("fast");
                      },
                    }
                  ))
              : (d.find("#all").stop().fadeIn("fast"),
                $(this).addClass("opened"),
                $(this).html("Hide all tags \u2191"),
                (e = d.find("#all").position().top + 5),
                $("#tags-dialog-wrapper").stop().animate(
                  {
                    scrollTop: e,
                  },
                  {
                    duration: t,
                    easing: "easeOutQuad",
                  }
                ));
          });
        this.generateUniqueRandomInts(25, 282);
        this.refreshSuggested();
        for (
          var t = [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L",
              "M",
              "N",
              "O",
              "P",
              "Q",
              "R",
              "S",
              "T",
              "U",
              "V",
              "W",
              "X",
              "Y",
              "Z",
            ],
            i = new Array(t.length),
            r = [],
            n = d.find("#all"),
            o = 0;
          o < t.length;
          o++
        ) {
          i[o] = [];
          var s = "alpha-" + t[o];
          n.append(
            '<div id="' +
              s +
              '" class="alpha-group"><div class="label">' +
              t[o] +
              '</div><div class="tags"></div></div>'
          );
        }
        n.append(
          '<div id="alpha-rest" class="alpha-group"><div class="label">...</div><div class="tags"></div></div>'
        );
        for (o = 0; o < p.length; o++) {
          var l = (m = p[o]).name.charAt(0).toUpperCase(),
            h = t.indexOf(l);
          -1 != h ? i[h].push(m) : r.push(m);
        }
        for (o = 0; o < i.length; o++) {
          i[o].sort(e);
          for (
            var c = n.find("#alpha-" + t[o] + " .tags"), f = 0;
            f < i[o].length;
            f++
          ) {
            var m = i[o][f];
            c.append(
              '<span id="' +
                m.id +
                '" class="tag-basic"><a href="#">' +
                m.name +
                "</a></span>"
            );
          }
        }
        r.sort(e);
        var E = n.find("#alpha-rest .tags");
        for (o = 0; o < r.length; o++) {
          m = r[o];
          E.append(
            '<span id="' +
              m.id +
              '" class="tag-basic"><a href="#">' +
              m.name +
              "</a></span>"
          );
        }
        d.find(".alpha-group .tags").each(function () {
          $(this).is(":empty") && $(this).parent().hide(),
            1 === $(this).find("a").length && $(this).addClass("no-columns");
        }),
          d.find(".tag, .tag-basic").click(function (e) {
            e.preventDefault(), a.onTagClick(this);
          }),
          d.find(".refresh-suggested").click(function () {
            a.refreshSuggested();
          });
      }),
      (ye.prototype.openTagsDialog = function (e) {
        (this.uiEnabled = !1),
          ui.disableHelpLink(),
          $("#back").stop().fadeIn("fast"),
          d
            .find("#expand-all-tags span")
            .html("View all tags \u2193")
            .removeClass("opened"),
          d.find("#all").hide(),
          this.hideAllLabels(),
          f.length > 0
            ? (d.find(".heading h1").html("Add a tag"),
              $("#back")
                .unbind("click")
                .click(function () {
                  a.uiEnabled &&
                    (a.closeTagsDialog(),
                    a.fadeUpAllBucketNodes(),
                    a.adjustCameraDistance());
                }))
            : $("#back")
                .unbind("click")
                .click(function () {
                  a.uiEnabled &&
                    ($(this).stop().fadeOut("fast"), vis.setTo("drift"));
                });
        var t = function (e) {
          null == e && (e = a.getRandomTags(25));
          var t = d.find("#suggested .tags");
          t.empty();
          for (var i = 0; i < e.length; i++)
            t.append(
              '<li id="' +
                e[i].id +
                '" class="tag"><a href="#">' +
                e[i].name +
                "</a></li>"
            );
          t.find(".tag").click(function (e) {
            e.preventDefault(), a.onTagClick(this);
          }),
            $(".tag")
              .show()
              .each(function () {
                for (var e = $(this).attr("id"), t = 0; t < f.length; t++)
                  f[t].data.id == e && $(this).hide();
              }),
            tagsDialogWrapper
              .stop()
              .scrollTop(0)
              .fadeIn("slow", function () {
                a.uiEnabled = !0;
              }),
            a.onResize();
        };
        if (
          (null == e && 0 == m.length
            ? this.getRandomTags(25, t)
            : this.getSuggestedTags(e, 25, t),
          !1,
          this.hideAddStuff(),
          0 != f.length)
        ) {
          sceneManager.getCamera().position.distanceTo(centerAnchor.position);
          var i = sceneManager
            .getCamera()
            .position.clone()
            .sub(centerAnchor.position)
            .normalize()
            .multiplyScalar(l)
            .add(centerAnchor.position);
          this.camControls.animate({
            pos: i,
            duration: V,
          });
        }
      }),
      (ye.prototype.closeTagsDialog = function () {
        $("#back")
          .unbind("click")
          .click(function () {
            a.uiEnabled &&
              ($(this).stop().fadeOut("fast"), ui.openView("drift"));
          }),
          (this.uiEnabled = !1),
          ui.enableHelpLink(),
          $("body").css("cursor", "default"),
          tagsDialogWrapper.stop().fadeOut("fast", function () {
            setTimeout(function () {
              !1 === a.uiEnabled &&
                ($("#back").stop().fadeIn("fast"),
                (a.uiEnabled = !0),
                !0,
                a.showAllLabels());
            }, P + 250);
          });
      }),
      (ye.prototype.initItems = function () {
        function e() {
          if (
            // ui.enableNav(),
            null != v.preloadInfo
          )
            if (!0 === v.preloadInfo.loadLastTags) {
              if (void 0 !== v.preloadInfo.lastTags)
                r(v.preloadInfo.lastTags) && (z = v.preloadInfo.lastTags);
              0 !== z.length && v.setTags(z);
              // : v.openTagsDialog()
            } else
              void 0 !== v.preloadInfo.tagIds
                ? v.setTags(v.preloadInfo.tagIds)
                : v.openTagsDialog();
          // else
          //     v.openTagsDialog();
          // v.openInitAbout()
        }
        var t = [];
        if (void 0 !== this.preloadInfo && void 0 !== this.preloadInfo.lastView)
          switch (this.preloadInfo.lastView) {
            case "drift":
              for (var i in this.objects.item) {
                var n = (p = this.objects.item[i]).position
                    .clone()
                    .sub(centerAnchor.position),
                  o = n.clone().normalize();
                (a = n.add(o.multiplyScalar(h))).add(centerAnchor.position),
                  t.push(a);
              }
              break;
            case "search":
              for (var i in this.objects.item) {
                var a = (p =
                  this.objects.item[i]).viewData.search.positionRest.clone();
                t.push(a);
              }
          }
        else {
          var s = (2 * Math.PI) / api.itemListArray.length,
            l = 0,
            u = 5e3;
          for (var i in this.objects.item) {
            var p = this.objects.item[i],
              d = s * l + 0.02 * Math.random(),
              f =
                ((a = new THREE.Vector3(h + 1e3 + 4e3 * Math.random(), 0, 0)),
                new THREE.Quaternion().setFromAxisAngle(
                  new THREE.Vector3(0, 1, 0),
                  d
                ));
            (a.y += Math.random() * u - u / 2),
              a.applyQuaternion(f),
              t.push(a),
              l++;
          }
        }
        var m = this.matchClosestPositions(
          t,
          sceneManager.getCamera().position
        );
        for (var i in this.objects.item) {
          ((p = this.objects.item[i]).viewData.tags = {}),
            (p.viewData.tags.positionPrev = p.position.clone());
          var E = m[i];
          (p.viewData.tags.positionRest = E),
            (p.viewData.tags.positionActive = new THREE.Vector3()),
            (p.viewData.tags.particle = c.makeParticle(
              1,
              p.position.x,
              p.position.y,
              p.position.z
            )),
            (p.viewData.tags.repulsions = []),
            (p.viewData.tags.activeTagConnections = []),
            (p.viewData.tags.bucketConnection = -1),
            (p.onClickCallback = this.itemClickCallback),
            (p.forceRotateToCamera = !1),
            (p.enableRotateToCamera = !1),
            (p.rotateToTarget = !0);
          var g = new THREE.Vector3(0, 0, 1);
          g
            .applyQuaternion(p.quaternion)
            .multiplyScalar(2e3)
            .add(centerAnchor.position),
            (p.rotationTarget = g),
            (p.viewData.tags.rotationTargetPrev = g),
            (p.viewData.tags.rotationTargetDest = centerAnchor.position),
            (p.isInteractive = !1);
        }
        var v = this;
        if (ve)
          for (var i in v.objects.item) {
            var y = (p = v.objects.item[i]).viewData.tags.positionRest.clone();
            y
              .sub(centerAnchor.position)
              .multiplyScalar(2)
              .add(centerAnchor.position),
              p.position.set(y.x, y.y, y.z),
              p.viewData.tags.particle.position.set(y.x, y.y, y.z),
              (p.viewData.tags.destination = y.clone());
            var T = p.viewData.tags.rotationTargetDest;
            p.rotationTarget.set(T.x, T.y, T.z);
          }
        k = new TWEEN.Tween({
          t: 0,
        })
          .to(
            {
              t: 1,
            },
            this.transDuration
          )
          .onUpdate(function () {
            for (var e in v.objects.item) {
              var t = v.objects.item[e],
                i = lerpVec3(
                  t.viewData.tags.positionPrev,
                  t.viewData.tags.positionRest,
                  this.t
                );
              t.position.set(i.x, i.y, i.z),
                (t.viewData.tags.destination = i.clone());
              var r = lerpVec3(
                t.viewData.tags.rotationTargetPrev,
                t.viewData.tags.rotationTargetDest,
                this.t
              );
              t.rotationTarget.set(r.x, r.y, r.z);
            }
          })
          .easing(TWEEN.Easing.Quartic.InOut)
          .onComplete(function () {
            e();
          })
          .start();
      }),
      (ye.prototype.getCamControls = function () {
        return this.camControls;
      }),
      (ye.prototype.initCamPos = function () {}),
      (ye.prototype.onKeyDown = function (e) {
        "in" === this.state
          ? 38 === e.keyCode
            ? this.handleBucketScroll(2.5)
            : 40 === e.keyCode && this.handleBucketScroll(-2.5)
          : "out" === this.state &&
            (38 === e.keyCode
              ? this.camControls.onMouseWheel(5)
              : 40 === e.keyCode && this.camControls.onMouseWheel(-5));
      }),
      (ye.prototype.onNothingClicked = function () {
        $("#back").trigger("click");
        // this.uiEnabled && "in" === this.state && this.closeSphere(R)
      }),
      (ye.prototype.onMouseDown = function (e) {
        this.camControls.onMouseDown(e);
      }),
      (ye.prototype.onMouseUp = function () {
        this.camControls.onMouseUp();
      }),
      (ye.prototype.onMouseMove = function (e) {
        "out" == this.state &&
          (this.camControls.dragging && this.ensureHoverOffSphere(),
          this.camControls.onMouseMove(e));
      }),
      (ye.prototype.onMouseWheel = function (e, t) {
        switch (this.state) {
          case "in":
            this.handleBucketScroll(t);
            break;
          case "out":
            this.camControls.onMouseWheel(t);
        }
      }),
      (ye.prototype.onMouseLeave = function () {
        this.hideAddStuff(), this.camControls.onMouseUp();
      }),
      (ye.prototype.handleBucketScroll = function (e) {
        var t,
          i = 20 * -e,
          r = !1;
        (e < 0
          ? (this.bucketScrollPos + i > this.bucketScrollHeight &&
              (i = this.bucketScrollHeight - this.bucketScrollPos),
            (r = !0))
          : (this.bucketScrollPos + i < 0 && (i = -this.bucketScrollPos),
            (r = !0)),
        r) &&
          ((this.bucketScrollPos += i),
          (t =
            e > 0
              ? new THREE.Vector3(0, 1, 0)
              : new THREE.Vector3(0, -1, 0)).applyQuaternion(
            sceneManager.getCamera().quaternion
          ),
          t.multiplyScalar(Math.abs(i)),
          this.camControls.getTargetScrollPos().add(t));
      }),
      (ye.prototype.onUpdate = function () {
        for (var e in (this.camControls.update(), this.objects.item)) {
          var t = this.objects.item[e];
          void 0 !== t.viewData.tags.destination &&
            ((t.position.x = t.viewData.tags.particle.position.x =
              lerp(
                t.viewData.tags.particle.position.x,
                t.viewData.tags.destination.x,
                0.1
              )),
            (t.position.y = t.viewData.tags.particle.position.y =
              lerp(
                t.viewData.tags.particle.position.y,
                t.viewData.tags.destination.y,
                0.1
              )),
            (t.position.z = t.viewData.tags.particle.position.z =
              lerp(
                t.viewData.tags.particle.position.z,
                t.viewData.tags.destination.z,
                0.1
              )));
        }
        for (var i = 0; i < he.length; i++) he[i].update();
        var r = sceneManager.getCamera().position;
        for (i = 0; i < ae.length; i++) {
          var n = r.clone().sub(ae[i].position).normalize().multiplyScalar(1);
          ae[i].lightSprite.position.set(n.x, n.y, n.z),
            ae[i].glowSprite.position.set(n.x, n.y, n.z);
        }
        this.updateLabels();
      }),
      (ye.prototype.onRelease = function () {
        (this.uiEnabled = !1),
          o(),
          // ui.disableHelpLink(),
          this.removeTagAdders(),
          k.stop();
        for (var e = 0; e < ae.length; e++)
          ae[e].remove(ae[e].spriteX),
            e > 3 && ae[e].remove(ae[e].spriteLabel),
            (ae[e].light.lastIntensity = ae[e].light.intensity),
            (ae[e].lightSprite.lastOpacity =
              ae[e].lightSprite.material.opacity),
            (ae[e].glowSprite.lastOpacity = ae[e].glowSprite.material.opacity),
            (ae[e].clickSphere.lastOpacity =
              ae[e].clickSphere.material.opacity);
        for (e = 0; e < g.length; e++) {
          var t = g[e],
            i = a.objects.item[t];
          c.removeParticleForces(i.viewData.tags.particle),
            (i.viewData.tags.repulsions = {}),
            (i.viewData.tags.activeTagConnections = []);
        }
        d.is(":visible")
          ? d.fadeOut("fast", function () {
              $("#ui #local").empty();
            })
          : $("#ui #local").empty();
      }),
      (ye.prototype.duringRelease = function (e) {
        for (var t = 0; t < ae.length; t++)
          ae[t].light.intensity = lerp(ae[t].light.lastIntensity, 0, e);
      }),
      (ye.prototype.onReleaseEnd = function () {
        this.removeItemLines(),
          this.removeAllInbetweenLines(),
          this.removeAllTagCenterLines(),
          this.updateLightMaterials();
      }),
      (ye.prototype.getRefQuaternion = function () {
        return L;
      }),
      (ye.prototype.refreshSuggested = function () {
        function e(e) {
          i.empty(), i.show();
          // for (var r = a.generateUniqueRandomInts(t, 282), n = 0; n < r.length; n++) {
          //     var o = p[r[n]];
          //     i.append('<li id="' + o.id + '" class="tag"><a href="#">' + o.name + "</a></li>"),
          //     e && i.find("#" + o.id).css("opacity", 0)
          // }
          if (
            (i.find(".tag").click(function (e) {
              e.preventDefault(), a.onTagClick(this);
            }),
            e)
          ) {
            var s = i.find(".tag"),
              l = 0;
            s.each(function () {
              var e = this;
              setTimeout(function () {
                $(e).stop().fadeTo(200, 1);
              }, l),
                (l += 100);
            });
          }
        }
        var t = 25,
          i = d.find("#suggested .tags");
        0 != i.find(".tag").length
          ? i.stop().fadeOut("fast", function () {
              e(!0);
            })
          : e(!1);
      }),
      (ye.prototype.onTagClick = function (e) {
        a.closeTagsDialog();
        var t = $(e).attr("id");
        a.addTag(t);
      }),
      (ye.prototype.clearTags = function () {
        (this.uiEnabled = !1),
          this.fadeOutAll(function () {
            for (var e = f.length - 1; e >= 0; e--) a.removeTag(e);
            var t = new THREE.Vector3(1e-5, 1e-5, 1e-5);
            for (e = 0; e < ae.length; e++)
              (ae[e].lightSprite.previousScale = t),
                (ae[e].glowSprite.previousScale = t),
                (ae[e].clickSphere.previousScale = t),
                (ae[e].shiftIndex = void 0);
            a.calculateBuckets(),
              a.calculateActivePositions(!0),
              a.repelItemsToAdd(),
              a.removeItemLines(),
              a.setLabels(),
              (z = []);
            for (e = 0; e < f.length; e++) z.push(f[e].data.id);
            a.animateContent(), a.adjustCameraDistance();
          });
      }),
      (ye.prototype.setTags = function (e) {
        (this.uiEnabled = !1),
          d.is(":visible") && d.stop().fadeOut("fast"),
          this.fadeOutAll(function () {
            E = [];
            for (var t = 0; t < f.length; t++) E.push(t);
            if (0 == f.length) 0;
            else if ((M, 0 != E.length))
              for (t = E.length - 1; t >= 0; t--) a.removeTag(E[t]);
            y = g.slice();
            for (t = 0; t < y.length; t++) {
              var i = a.objects.item[y[t]];
              i.viewData.tags.positionPrev = i.position.clone();
            }
            for (t = 0; t < e.length; t++) {
              var r = new TagNode(a, null);
              (r.viewData = {
                tags: {},
              }),
                f.push(r),
                (f[t].selfIndex = t),
                a.sceneObject.add(r);
            }
            switch (f.length) {
              case 1:
                f[0].position.set(
                  centerAnchor.position.x,
                  centerAnchor.position.y,
                  centerAnchor.position.z
                );
                break;
              case 2:
                f[0].position.set(
                  centerAnchor.position.x,
                  centerAnchor.position.y,
                  centerAnchor.position.z
                ),
                  f[1].position.set(
                    centerAnchor.position.x,
                    centerAnchor.position.y,
                    centerAnchor.position.z
                  ),
                  (f[0].position.x -= M),
                  (f[1].position.x += M);
                break;
              case 3:
                var o = new THREE.Vector3(0, M, 0),
                  s = 0.666666 * Math.PI,
                  l = o
                    .clone()
                    .applyEuler(new THREE.Euler(0, 0, s))
                    .add(centerAnchor.position);
                f[0].position.set(l.x, l.y, l.z);
                var h = o
                  .clone()
                  .applyEuler(new THREE.Euler(0, 0, -s))
                  .add(centerAnchor.position);
                f[1].position.set(h.x, h.y, h.z);
                var c = o.add(centerAnchor.position);
                f[2].position.set(c.x, c.y, c.z);
                break;
              case 4:
                (o = new THREE.Vector3(0, M, 0)),
                  (s = 0.666666 * Math.PI),
                  (l = o
                    .clone()
                    .applyEuler(new THREE.Euler(0, 0, s))
                    .add(centerAnchor.position));
                f[0].position.set(l.x, l.y, l.z);
                h = o
                  .clone()
                  .applyEuler(new THREE.Euler(0, 0, -s))
                  .add(centerAnchor.position);
                f[1].position.set(h.x, h.y, h.z);
                c = o.add(centerAnchor.position);
                f[2].position.set(c.x, c.y, c.z);
                for (
                  o = new THREE.Vector3(0, 0, M),
                    s = (109.5 * Math.PI) / 180,
                    t = 0;
                  t < f.length - 2;
                  t++
                ) {
                  var p = o.clone().normalize(),
                    d = f[t].position
                      .clone()
                      .sub(centerAnchor.position)
                      .normalize(),
                    m = p.cross(d);
                  m.normalize();
                  var R = new THREE.Quaternion();
                  R.setFromAxisAngle(m, s);
                  var x = o.clone();
                  x.applyQuaternion(R),
                    x.add(centerAnchor.position),
                    f[t].position.set(x.x, x.y, x.z);
                }
                var H = o.add(centerAnchor.position);
                f[f.length - 1].position.set(H.x, H.y, H.z);
            }
            var b = {
              ids: e,
              detail: "id_only",
            };
            // ui.startLoader(),
            var t = api.tagsObjects;
            for (var i = 0; i < e.length; i++) {
              for (
                var r = e[i], o = u[r], s = [], l = 0;
                l < t[r].length;
                l++
              ) {
                var h = t[r][l],
                  c = a.objects.item[h];
                void 0 !== c && s.push(c);
              }
              f[i].fill(o, s);
            }
            // n();
            for (i = 0; i < e.length; i++) {
              var p = f[i];
              for (l = 0; l < p.allItems.length; l++) {
                var d = p.allItems[l].basicInfo.id,
                  m = a.objects.item[d];
                -1 == g.indexOf(d)
                  ? ((m.viewData.tags.activeTagConnections = [f[i].data.id]),
                    g.push(d),
                    v.push(d))
                  : m.viewData.tags.activeTagConnections.push(f[i].data.id),
                  (m.isInteractive = !0);
              }
              for (l = 0; l < v.length; l++)
                for (var E = 0; E < T.length; E++)
                  if (v[l] == T[E]) {
                    T.splice(E, 1);
                    break;
                  }
            }
            a.calculateBuckets(),
              a.calculateActivePositions(!0),
              a.repelItemsToAdd(),
              a.removeItemLines(),
              a.setLabels(),
              (ae[f.length - 1].isNew = !0),
              (z = []);
            for (i = 0; i < f.length; i++) z.push(f[i].data.id);
            a.animateContent(), a.adjustCameraDistance();
          });
      }),
      (ye.prototype.addTag = function (e) {
        var t = f.length;
        (this.uiEnabled = !1),
          this.fadeOutAll(function () {
            for (var i = 0; i < _; i++)
              ae[i].viewData.tags.positionPrevious = ae[i].position.clone();
            for (i = 0; i < _; i++)
              if (f.length > i) {
                for (var r = !1, o = 0; o < E.length; o++)
                  if (i === E[o]) {
                    r = !0;
                    break;
                  }
                if (!r) {
                  var s = 0;
                  for (o = 0; o < E.length; o++) i > E[o] && s++;
                  ae[i].shiftIndex = i - s;
                }
              }
            var l;
            if (0 == f.length) 0;
            else if ((M, 0 != E.length))
              for (i = E.length - 1; i >= 0; i--) a.removeTag(E[i]);
            y = g.slice();
            for (i = 0; i < y.length; i++) {
              var h = a.objects.item[y[i]];
              h.viewData.tags.positionPrev = h.position.clone();
            }
            0 == f.length
              ? ((H = centerAnchor.position.clone()), (l = new THREE.Vector3()))
              : (H = (l = he[ce].position
                  .clone()
                  .sub(centerAnchor.position)
                  .normalize()
                  .multiplyScalar(M))
                  .clone()
                  .add(centerAnchor.position));
            var c,
              p = new TagNode(a, null),
              d = u[e];
            switch (
              ((p.viewData = {
                tags: {},
              }),
              p.position.set(H.x, H.y, H.z),
              2 == f.length
                ? (c = 0.666666666 * Math.PI)
                : 3 == f.length && (c = (109.5 * Math.PI) / 180),
              f.length)
            ) {
              case 1:
                (H = l.clone()).negate().add(centerAnchor.position),
                  f[0].position.set(H.x, H.y, H.z);
                break;
              case 2:
              case 3:
                for (i = 0; i < f.length; i++) {
                  var m = l.clone().normalize(),
                    R = f[i].position
                      .clone()
                      .sub(centerAnchor.position)
                      .normalize(),
                    x = m.cross(R);
                  x.normalize();
                  var H,
                    b = new THREE.Quaternion();
                  b.setFromAxisAngle(x, c),
                    (H = l.clone()).applyQuaternion(b),
                    H.add(centerAnchor.position),
                    f[i].position.set(H.x, H.y, H.z);
                }
            }
            f.push(p), a.sceneObject.add(p);
            for (i = 0; i < f.length; i++) f[i].selfIndex = i;
            ui.startLoader(),
              p.fill(d, null, function () {
                ui.stopLoader(), n();
                for (var e = 0; e < ae.length; e++) {
                  var i = ae[e].shiftIndex;
                  if (void 0 !== i && e >= i && e < _) {
                    var r = i;
                    r < t &&
                      ((ae[r].viewData.tags.positionPrevious =
                        ae[e].position.clone()),
                      ae[r].position.set(
                        ae[r].position.x,
                        ae[e].position.y,
                        ae[e].position.z
                      ),
                      (ae[r].lightSprite.material.opacity =
                        ae[e].lightSprite.material.opacity),
                      (ae[r].glowSprite.material.opacity =
                        ae[e].glowSprite.material.opacity),
                      (ae[r].lightSprite.previousScale =
                        ae[e].lightSprite.scale.clone()),
                      (ae[r].glowSprite.previousScale =
                        ae[e].glowSprite.scale.clone()),
                      (ae[r].clickSphere.previousScale =
                        ae[e].clickSphere.scale.clone()));
                  } else
                    (ae[e].lightSprite.previousScale =
                      ae[e].lightSprite.scale.clone()),
                      (ae[e].glowSprite.previousScale =
                        ae[e].glowSprite.scale.clone()),
                      (ae[e].clickSphere.previousScale =
                        ae[e].clickSphere.scale.clone());
                  ae[e].shiftIndex = void 0;
                }
                for (e = 0; e < p.allItems.length; e++) {
                  var o = p.allItems[e].basicInfo.id,
                    s = a.objects.item[o];
                  -1 == g.indexOf(o)
                    ? ((s.viewData.tags.activeTagConnections = [
                        f[f.length - 1].data.id,
                      ]),
                      g.push(o),
                      v.push(o))
                    : s.viewData.tags.activeTagConnections.push(
                        f[f.length - 1].data.id
                      ),
                    (s.isInteractive = !0);
                }
                for (e = 0; e < v.length; e++)
                  for (var l = 0; l < T.length; l++)
                    if (v[e] == T[l]) {
                      T.splice(l, 1);
                      break;
                    }
                a.calculateBuckets(),
                  a.calculateActivePositions(!0),
                  a.repelItemsToAdd(),
                  a.removeItemLines(),
                  a.setLabels(),
                  (ae[f.length - 1].isNew = !0),
                  (z = []);
                for (e = 0; e < f.length; e++) z.push(f[e].data.id);
                a.animateContent(), a.adjustCameraDistance();
              });
          });
      }),
      (ye.prototype.removeTag = function (e, t) {
        $("#back").trigger("click");
        return;
        function i() {
          f[e].position.clone().clone().sub(centerAnchor.position);
          for (var i = f[e], s = C[e], l = 0; l < s.length; l++) {
            var h = s[l];
            0 != ne[h].length && a.removeItemLinesConnectedTo(ae[e]);
          }
          a.removeTagCenterLine(i), a.sceneObject.remove(i);
          var c = f[e].data.id;
          for (l = 0; l < i.allItems.length; l++) {
            var u = i.allItems[l].basicInfo.id,
              p = (w = a.objects.item[u]).viewData.tags.activeTagConnections;
            if ((p.splice(p.indexOf(c), 1), 0 == p.length)) {
              var d = g.indexOf(u);
              g.splice(d, 1),
                T.push(u),
                (w.viewData.tags.positionActive = w.position.clone()),
                (w.viewData.tags.bucketConnection = -1),
                (w.isInteractive = !1);
            }
          }
          if (null != ae[e].lightSprite) {
            var m = new THREE.Object3D();
            m.position.set(
              ae[e].position.x,
              ae[e].position.y,
              ae[e].position.z
            );
            var E = ae[e].lightSprite.clone();
            E.material = ae[e].lightSprite.material.clone();
            var v = ae[e].glowSprite.clone();
            (v.material = ae[e].glowSprite.material.clone()),
              (m.lightSprite = E),
              (m.glowSprite = v),
              m.add(E),
              m.add(v);
            var R = ae[e].position
              .clone()
              .sub(centerAnchor.position)
              .normalize()
              .multiplyScalar(5e3)
              .add(centerAnchor.position);
            (m.viewData = {
              tags: {
                positionPrevious: ae[e].position.clone(),
                positionTarget: R,
                previousLightSpriteOpacity: ae[e].lightSprite.material.opacity,
                previousGlowSpriteOpacity: ae[e].glowSprite.material.opacity,
              },
            }),
              se.push(m),
              a.sceneObject.add(m),
              (le[se.length - 1].distance = oe[e] * ge);
          }
          if (t)
            for (l = 0; l < _; l++)
              ae[l].viewData.tags.positionPrevious = ae[l].position.clone();
          var x = f[e].position.clone();
          if ((f.splice(e, 1), 0 === f.length ? o() : n(), t)) {
            for (l = 0; l < _; l++) {
              var H = void 0;
              l < r && l !== e && l > e && (H = l - 1), (ae[l].shiftIndex = H);
            }
            for (l = 0; l < ae.length; l++) {
              if (void 0 !== (H = ae[l].shiftIndex) && l >= H && l < _) {
                var b = H;
                (ae[b].viewData.tags.positionPrevious = ae[l].position.clone()),
                  ae[b].position.set(
                    ae[b].position.x,
                    ae[l].position.y,
                    ae[l].position.z
                  ),
                  (ae[b].lightSprite.material.opacity =
                    ae[l].lightSprite.material.opacity),
                  (ae[b].glowSprite.material.opacity =
                    ae[l].glowSprite.material.opacity),
                  (ae[b].lightSprite.previousScale =
                    ae[l].lightSprite.scale.clone()),
                  (ae[b].glowSprite.previousScale =
                    ae[l].glowSprite.scale.clone()),
                  (ae[b].clickSphere.previousScale =
                    ae[l].clickSphere.scale.clone());
              } else
                (ae[l].lightSprite.previousScale =
                  ae[l].lightSprite.scale.clone()),
                  (ae[l].glowSprite.previousScale =
                    ae[l].glowSprite.scale.clone()),
                  (ae[l].clickSphere.previousScale =
                    ae[l].clickSphere.scale.clone());
              ae[l].shiftIndex = void 0;
            }
            a.removeTagAdders();
            for (l = 0; l < f.length; l++) f[l].selfIndex = l;
            y = g.slice();
            for (l = 0; l < y.length; l++) {
              var w;
              (w = a.objects.item[y[l]]).viewData.tags.positionPrev =
                w.position.clone();
            }
            switch (f.length) {
              case 1:
                f[0].position.set(
                  centerAnchor.position.x,
                  centerAnchor.position.y,
                  centerAnchor.position.z
                );
                break;
              case 2:
                var q = x.clone().sub(centerAnchor.position),
                  M = f[0].position.clone().sub(centerAnchor.position).cross(q);
                M.normalize();
                var S = f[1].position
                  .clone()
                  .sub(centerAnchor.position)
                  .cross(q);
                S.normalize();
                var L = f[0].position.clone().sub(centerAnchor.position),
                  A = f[1].position.clone().sub(centerAnchor.position),
                  k = 0.25 * GeomUtils.angleBetweenVecs(L, A),
                  D = new THREE.Quaternion(),
                  P = new THREE.Quaternion();
                D.setFromAxisAngle(M, k),
                  P.setFromAxisAngle(S, k),
                  L.applyQuaternion(D),
                  A.applyQuaternion(P),
                  L.add(centerAnchor.position),
                  A.add(centerAnchor.position),
                  f[0].position.set(L.x, L.y, L.z),
                  f[1].position.set(A.x, A.y, A.z);
                break;
              case 3:
                var I = x.clone().sub(centerAnchor.position);
                for (l = 0; l < f.length; l++) {
                  var V = I.clone().normalize(),
                    O = f[l].position
                      .clone()
                      .sub(centerAnchor.position)
                      .normalize(),
                    F = V.cross(O);
                  F.normalize();
                  var z = new THREE.Quaternion();
                  z.setFromAxisAngle(F, 0.5 * Math.PI);
                  var U = I.clone();
                  U.applyQuaternion(z),
                    U.add(centerAnchor.position),
                    f[l].position.set(U.x, U.y, U.z);
                }
            }
            a.calculateBuckets(),
              a.calculateActivePositions(!1),
              a.removeItemLines(),
              a.setLabels(),
              a.animateContent(),
              a.adjustCameraDistance();
          }
        }
        var r = f.length;
        t ? this.fadeOutAll(i) : i();
      }),
      (ye.prototype.addTagAdders = function () {
        switch (f.length) {
          case 1:
            this.addAdder([f[0]]);
            break;
          case 2:
            this.addAdder([f[0]]),
              this.addAdder([f[1]]),
              this.addAdder([f[0], f[1]]);
            break;
          case 3:
            this.addAdder([f[0]]),
              this.addAdder([f[1]]),
              this.addAdder([f[2]]),
              this.addAdder([f[0], f[1]]),
              this.addAdder([f[1], f[2]]),
              this.addAdder([f[2], f[0]]),
              this.addAdder([f[0], f[1], f[2]]);
            break;
          case 4:
            this.addAdder([f[0]]),
              this.addAdder([f[1]]),
              this.addAdder([f[2]]),
              this.addAdder([f[3]]),
              this.addAdder([f[0], f[1]]),
              this.addAdder([f[1], f[2]]),
              this.addAdder([f[2], f[0]]),
              this.addAdder([f[0], f[3]]),
              this.addAdder([f[1], f[3]]),
              this.addAdder([f[2], f[3]]),
              this.addAdder([f[0], f[1], f[2]]),
              this.addAdder([f[3], f[0], f[1]]),
              this.addAdder([f[3], f[1], f[2]]),
              this.addAdder([f[3], f[2], f[0]]);
        }
      }),
      (ye.prototype.addAdder = function (e) {
        var t = new TagAddNode(this, e),
          i = 400,
          r = this.getBoundingRadius() + i;
        if (1 == f.length)
          t.position.set(
            centerAnchor.position.x,
            centerAnchor.position.y,
            centerAnchor.position.z
          ),
            (t.position.x += r);
        else if (2 == f.length && 2 == e.length) {
          t.position.set(
            centerAnchor.position.x,
            centerAnchor.position.y,
            centerAnchor.position.z
          );
          var n = f[1].position.clone().sub(f[0].position).normalize(),
            o = this.quaternionBetweenVecs(new THREE.Vector3(1, 0, 0), n),
            a = new THREE.Vector3(0, 0.66 * r, 0);
          a.applyQuaternion(o), t.position.add(a);
        } else if (3 == f.length && 3 == e.length) {
          t.position.set(
            centerAnchor.position.x,
            centerAnchor.position.y,
            centerAnchor.position.z
          );
          var s = f[0].position.clone().sub(centerAnchor.position),
            l = f[1].position.clone().sub(centerAnchor.position);
          (n = s.cross(l)).normalize().multiplyScalar(-r + i),
            t.position.add(n);
          var h = new TagAddNode(this, e);
          h.position.set(
            centerAnchor.position.x,
            centerAnchor.position.y,
            centerAnchor.position.z
          ),
            h.position.sub(n),
            h.setIndex(he.length),
            he.push(h),
            this.sceneObject.add(h);
        } else {
          n = new THREE.Vector3();
          for (var c = 0; c < e.length; c++) {
            var u = e[c].position.clone().sub(centerAnchor.position);
            n.add(u);
          }
          n.divideScalar(e.length), n.normalize();
          var p = n.multiplyScalar(r).add(centerAnchor.position);
          t.position.set(p.x, p.y, p.z);
        }
        t.setIndex(he.length), he.push(t), this.sceneObject.add(t);
        for (c = 0; c < he.length; c++) {
          he[c].position
            .clone()
            .sub(centerAnchor.position)
            .normalize()
            .multiplyScalar(1e4)
            .add(centerAnchor.position),
            he[c].lookAt(centerAnchor.position);
        }
      }),
      (ye.prototype.removeTagAdders = function () {
        ce = -1;
        for (var e = he.length - 1; e >= 0; e--)
          this.sceneObject.remove(he[e]), he.splice(e, 1);
      }),
      (ye.prototype.addAllTagCenterLines = function () {
        for (var e = 0; e < f.length; e++) this.addTagCenterLine(f[e]);
      }),
      (ye.prototype.removeAllTagCenterLines = function () {
        for (var e = 0; e < f.length; e++) this.removeTagCenterLine(f[e]);
      }),
      (ye.prototype.addTagCenterLine = function (t) {
        var i = new THREE.Geometry();
        i.vertices.push(centerAnchor.position),
          i.vertices.push(t.position),
          (i.dynamic = !0);
        var r = e();
        (t.centerLine = new THREE.Line(i, r)),
          (t.centerLine.maxOpacity = Z),
          (t.centerLine.src1 = centerAnchor),
          (t.centerLine.src2 = t),
          j.add(t.centerLine);
      }),
      (ye.prototype.removeTagCenterLine = function (e) {
        j.remove(e.centerLine), delete e.centerLine;
      }),
      (ye.prototype.removeAllTagCenterLines = function () {
        for (var e = 0; e < _; e++)
          null != f[e] && this.removeTagCenterLine(f[e]);
      }),
      (ye.prototype.addAllInbetweenLines = function () {
        for (var e = 4; e < ae.length; e++)
          0 != ne[e].length && this.addInbetweenLines(e);
      }),
      (ye.prototype.removeAllInbetweenLines = function () {
        for (var e = 4; e < ae.length; e++) this.removeInbetweenLines(e);
      }),
      (ye.prototype.addInbetweenLines = function (t) {
        for (var i = S[t], r = 0; r < i.length; r++) {
          var n = i[r];
          if (null == ae[t].inbetweenLines[n] && null != f[n]) {
            var o = new THREE.Geometry();
            o.vertices.push(new THREE.Vector3()),
              o.vertices.push(new THREE.Vector3()),
              (o.dynamic = !0);
            var a = e(),
              s = new THREE.Line(o, a);
            (s.maxOpacity = K),
              (s.src1 = ae[t]),
              (s.src2 = ae[n]),
              (ae[t].inbetweenLines[n] = s),
              G.add(s);
          }
        }
      }),
      (ye.prototype.updateInbetweenLinePositions = function () {
        for (var e = 0; e < G.children.length; e++) {
          var t = G.children[e],
            i = t.geometry.vertices,
            r = t.src1.position.clone(),
            n = t.src2.position.clone(),
            o = oe[t.src1.selfIndex],
            a = oe[t.src2.selfIndex];
          0 !== o && (o += Q), 0 !== a && (a += Q);
          var s = n.clone().sub(r).normalize(),
            l = r.clone().sub(n).normalize();
          r.add(s.clone().multiplyScalar(o)),
            n.add(l.clone().multiplyScalar(a));
          for (var h = 0; h < i.length; h++)
            t.geometry.vertices[h] = lerpVec3(r, n, h / (i.length - 1));
          t.geometry.verticesNeedUpdate = !0;
        }
      }),
      (ye.prototype.removeInbetweenLines = function (e) {
        for (var t in ae[e].inbetweenLines)
          null != ae[e].inbetweenLines[t] &&
            (G.remove(ae[e].inbetweenLines[t]), delete ae[e].inbetweenLines[t]);
      }),
      (ye.prototype.updateCenterLinePositions = function () {
        for (var e = 0; e < j.children.length; e++) {
          var t,
            i = j.children[e],
            r = i.geometry.vertices,
            n = i.src1.position.clone(),
            o = i.src2.position.clone();
          t =
            0 !== ne[14].length
              ? oe[14] + Q
              : 0 !== ne[10].length && 3 === f.length
              ? oe[10] + Q
              : 0 !== ne[4].length && 2 === f.length
              ? oe[4] + Q
              : 0;
          var a = i.src2.selfIndex,
            s = oe[a];
          0 !== s && (s += Q);
          var l = o.clone().sub(n).normalize(),
            h = n.clone().sub(o).normalize();
          n.add(l.clone().multiplyScalar(t)),
            o.add(h.clone().multiplyScalar(s));
          for (var c = 0; c < r.length; c++)
            i.geometry.vertices[c] = lerpVec3(n, o, c / (r.length - 1));
          i.geometry.verticesNeedUpdate = !0;
        }
      }),
      (ye.prototype.updateCursorLinePositions = function (e) {
        for (var t = [], i = 0; i < B.length; i++)
          if (null != he[e].srcTags[i]) {
            var r = he[e].srcTags[i];
            this.hoverOnSphere(r.selfIndex);
            var n = r.position.clone(),
              o = he[e].position.clone(),
              a = oe[r.selfIndex] + Q + 1,
              s = o.clone().sub(n).normalize();
            n.add(s.clone().multiplyScalar(a));
            var l = 0.5 * he[e].getScalar(),
              h = o
                .clone()
                .sub(centerAnchor.position)
                .normalize()
                .multiplyScalar(l);
            o.sub(h);
            for (var c = B[i].geometry.vertices, u = 0; u < c.length; u++)
              c[u] = lerpVec3(n, o, u / (c.length - 1));
            B[i].geometry.verticesNeedUpdate = !0;
          } else t.push(i);
        return t;
      }),
      (ye.prototype.repelItems = function (e, t) {
        var i = this.objects.item[e],
          r = this.objects.item[t],
          n = i.viewData.tags.repulsions,
          o = r.viewData.tags.repulsions;
        null == n[t] &&
          null == o[e] &&
          (o[e] = n[t] =
            c.makeAttraction(
              i.viewData.tags.particle,
              r.viewData.tags.particle,
              U,
              1
            ));
      }),
      (ye.prototype.repelItemToBucket = function (e, t) {
        var i = this.objects.item[e],
          r = ae[t],
          n = r.viewData.tags.repulsions;
        null == n[e] &&
          (n[e] = c.makeAttraction(
            i.viewData.tags.particle,
            r.viewData.tags.particle,
            U,
            1
          ));
      }),
      (ye.prototype.removeItemRepulsion = function (e, t) {
        var i = this.objects.item[e],
          r = this.objects.item[t],
          n = i.viewData.tags.repulsions,
          o = r.viewData.tags.repulsions;
        null != n[t] &&
          null != o[e] &&
          (c.attractions.remove(n[t]), delete n[t], delete o[e]);
      }),
      (ye.prototype.removeItemBucketRepulsion = function (e, t) {
        this.objects.item[e];
        var i = ae[t].viewData.tags.repulsions;
        null != i[e] && (c.attractions.remove(i[e]), delete i[e]);
      }),
      (ye.prototype.lineToItem = function (e, t) {
        var i = this.objects.item[t],
          r = i.position.clone().sub(e.position).normalize().multiplyScalar(2),
          n = new THREE.Geometry();
        n.vertices.push(e.position.clone()),
          n.vertices.push(i.position.clone().add(r));
        var o = new THREE.LineBasicMaterial({
            color: 16777215,
            linewidth: 2,
            opacity: 0,
            transparent: !0,
            blending: THREE.AdditiveBlending,
            fog: !1,
          }),
          a = new THREE.Line(n, o);
        (a.maxOpacity = 0.3),
          N.add(a),
          void 0 === e.itemLines[t] && (e.itemLines[t] = a),
          (a.src1 = e),
          (a.src2 = i);
      }),
      (ye.prototype.calculateActivePositions = function (e) {
        for (var t = 0; t < ne.length; t++)
          if (t < _ || 0 != ne[t].length) {
            var i;
            switch (t) {
              case 0:
              case 1:
              case 2:
              case 3:
                null != f[t] && (i = f[t].position);
                break;
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
                if (10 == t && 3 == f.length) i = centerAnchor.position.clone();
                else {
                  for (
                    var r = new THREE.Vector3(), n = 0;
                    n < S[t].length;
                    n++
                  ) {
                    var o = f[S[t][n]].position
                      .clone()
                      .sub(centerAnchor.position);
                    r.add(o);
                  }
                  r.divideScalar(S[t].length),
                    r.add(centerAnchor.position),
                    (i = r),
                    f.length > 2 &&
                      i
                        .sub(centerAnchor.position)
                        .normalize()
                        .multiplyScalar(M)
                        .add(centerAnchor.position);
                }
                break;
              case 14:
                i = centerAnchor.position.clone();
            }
            e &&
              t == f.length - 1 &&
              (ae[t].viewData.tags.positionPrevious = ue),
              (ae[t].viewData.tags.positionTarget = i);
            var a = GeomUtils.pointsOnSphere(ne[t].length, oe[t]);
            for (n = 0; n < ne[t].length; n++) {
              var s = ne[t][n],
                l = this.objects.item[s];
              1 == ne[t].length &&
                a[n].applyEuler(new THREE.Euler(0, 0.5 * -Math.PI, 0)),
                (l.viewData.tags.positionActive = a[n].add(i)),
                (l.viewData.tags.bucketConnection = t);
            }
            if (
              ((ae[t].light.distance = null != i ? oe[t] * ge : 1), null != i)
            ) {
              var h = ae[t].light;
              (h.intensity = h.maxIntensity),
                0 == oe[t] ? (h.distance = 1) : (h.distance = oe[t] * ge);
            }
          } else ae[t].light.distance = 1;
      }),
      (ye.prototype.animateContent = function () {
        this.removeAllTagCenterLines(),
          this.removeAllInbetweenLines(),
          this.addAllTagCenterLines(),
          this.addAllInbetweenLines(),
          this.hideAddStuff(),
          this.hideItemLines(),
          this.hideDiagramLines(),
          this.hideInbetweenNodes(),
          this.setRotationTargets(),
          this.expandRepulsionsToActive(),
          (this.animating = !0),
          (this.uiEnabled = !1),
          !1;
        for (var e = 0; e < T.length; e++) {
          var t = a.objects.item[T[e]];
          (t.forceRotateToCamera = !0),
            (t.enableRotateToCamera = !0),
            (t.rotateToTarget = !1);
        }
        sceneManager.usePhysics = !0;
        var i = 0;
        for (e = 0; e < oe.length; e++) i < oe[e] && (i = oe[e]);
        (s = M + i + 1400), this.camControls.setZoomLimits(s, l);
        var r = 0.025;
        if (ve)
          for (e = 0; e < _; e++) 0 !== ne[e].length && (ae[e].isNew = !0);
        for (e = 0; e < _; e++)
          e >= f.length && (ae[e].viewData.tags.positionTarget = void 0);
        k.stop(),
          (k = new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              P
            )
            .easing(TWEEN.Easing.Quadratic.InOut)
            .onUpdate(function () {
              if (this.t <= r)
                for (
                  var e = map(this.t, 0, r, 0, 1), t = lerp(0, U, e), i = 0;
                  i < c.attractions.length;
                  i++
                )
                  c.attractions[i].constant = t;
              else if (this.t >= 1 - r)
                for (
                  e = map(this.t, 1 - r, 1, 0, 1), t = lerp(U, 0, e), i = 0;
                  i < c.attractions.length;
                  i++
                )
                  c.attractions[i].constant = t;
              for (i = 0; i < g.length; i++) {
                (n = a.objects.item[g[i]]).viewData.tags.destination = lerpVec3(
                  n.viewData.tags.positionPrev,
                  n.viewData.tags.positionActive,
                  this.t
                );
              }
              for (i = 0; i < T.length; i++) {
                var n;
                (n = a.objects.item[T[i]]).viewData.tags.destination = lerpVec3(
                  n.viewData.tags.positionActive,
                  n.viewData.tags.positionRest,
                  this.t
                );
              }
              for (i = 0; i < ae.length; i++) {
                if (i < _ && void 0 !== ae[i].viewData.tags.positionTarget) {
                  var o = lerpVec3(
                    ae[i].viewData.tags.positionPrevious,
                    ae[i].viewData.tags.positionTarget,
                    this.t
                  );
                  ae[i].position.set(o.x, o.y, o.z),
                    (ae[i].viewData.tags.particle.position.x =
                      ae[i].position.x),
                    (ae[i].viewData.tags.particle.position.y =
                      ae[i].position.y),
                    (ae[i].viewData.tags.particle.position.z =
                      ae[i].position.z),
                    ae[i].isNew &&
                      ((ae[i].lightSprite.material.opacity = this.t * pe),
                      (ae[i].glowSprite.material.opacity = this.t * de),
                      (ae[i].light.intensity =
                        this.t * ae[i].light.maxIntensity));
                }
                if (
                  (i < _ && void 0 !== ae[i].viewData.tags.positionTarget) ||
                  i >= _
                ) {
                  var s = lerpVec3(
                      ae[i].lightSprite.previousScale,
                      ae[i].lightSprite.targetScale,
                      this.t
                    ),
                    l = lerpVec3(
                      ae[i].glowSprite.previousScale,
                      ae[i].glowSprite.targetScale,
                      this.t
                    ),
                    h = lerpVec3(
                      ae[i].clickSphere.previousScale,
                      ae[i].clickSphere.targetScale,
                      this.t
                    );
                  ae[i].lightSprite.scale.set(s.x, s.y, s.z),
                    ae[i].glowSprite.scale.set(l.x, l.y, l.z),
                    ae[i].clickSphere.scale.set(h.x, h.y, h.z);
                } else
                  ae[i].lightSprite.scale.set(1e-5, 1e-5, 1e-5),
                    ae[i].glowSprite.scale.set(1e-5, 1e-5, 1e-5),
                    ae[i].clickSphere.scale.set(1e-5, 1e-5, 1e-5),
                    (ae[i].lightSprite.material.opacity = 0),
                    (ae[i].glowSprite.material.opacity = 0),
                    (ae[i].intensity = 0);
              }
              for (i = 0; i < se.length; i++) {
                o = lerpVec3(
                  se[i].viewData.tags.positionPrevious,
                  se[i].viewData.tags.positionTarget,
                  this.t
                );
                le[i].position.set(o.x, o.y, o.z),
                  se[i].position.set(o.x, o.y, o.z),
                  (le[i].intensity = 1 - this.t),
                  (se[i].lightSprite.material.opacity = lerp(
                    se[i].viewData.tags.previousLightSpriteOpacity,
                    0,
                    this.t
                  )),
                  (se[i].glowSprite.material.opacity = lerp(
                    se[i].viewData.tags.previousGlowSpriteOpacity,
                    0,
                    this.t
                  ));
              }
            })
            .onComplete(function () {
              (ve = !1),
                a.showItemLines(),
                a.showDiagramLines(),
                a.showInbetweenNodes(),
                a.reduceRepulsionsToBuckets();
              for (var e = 0; e < _; e++) ae[e].isNew = !1;
              for (e = 0; e < T.length; e++) {
                var t = T[e],
                  i = a.objects.item[t];
                c.removeParticleForces(i.viewData.tags.particle),
                  (i.viewData.tags.repulsions = {}),
                  (i.viewData.tags.activeTagConnections = []);
              }
              for (e = 0; e < ae.length; e++) {
                var r = ae[e].viewData.tags.particle;
                c.removeParticleForces(r),
                  (ae[e].viewData.tags.replusions = {});
              }
              0 == f.length
                ? a.openTagsDialog()
                : (a.updateInbetweenNodePositions(), a.fadeInAll()),
                a.clearLastHover();
              for (e = 0; e < le.length; e++)
                (le[e].intensity = 0), (le[e].distance = 1);
              for (e = 0; e < se.length; e++) a.sceneObject.remove(se[e]);
              (se = []),
                (v = []),
                (T = []),
                (y = []),
                a.removeTagAdders(),
                a.addTagAdders(),
                (sceneManager.usePhysics = !1),
                a.updateCenterLinePositions(),
                a.updateInbetweenLinePositions(),
                a.showAllLabels(),
                a.camControls.setAutoRotate(!0),
                (a.animating = !1),
                (a.uiEnabled = !0),
                !0,
                // ui.enableHelpLink(),
                a.firstTime && (a.firstTime = !1);
            })
            .start());
      }),
      (ye.prototype.calculateBuckets = function () {
        ne = new Array(15);
        for (var e = 0; e < ne.length; e++) ne[e] = new Array();
        for (e = 0; e < g.length; e++) {
          var t = g[e],
            i = this.objects.item[t].viewData.tags.activeTagConnections,
            r = !1;
          e: for (var n in S)
            if (i.length == S[n].length) {
              for (var o = !0, a = 0; a < S[n].length; a++) {
                var s = S[n][a];
                t = f[s].data.id;
                if (-1 == i.indexOf(t)) {
                  o = !1;
                  break;
                }
              }
              if (o) {
                ne[n].push(g[e]), (r = !0);
                break e;
              }
            }
          r || console.log("didn'nt find bucket for " + t + "!");
        }
        oe = new Array(15);
        var l = 50;
        for (e = 0; e < ne.length; e++) {
          if (0 != ne[e].length) {
            var h =
              itemField.sizeScalar * itemField.sizeScalar * 0.2 * ne[e].length;
            (oe[e] = Math.sqrt((h / 4) * Math.PI)), oe[e] < l && (oe[e] = l);
          } else oe[e] = 0;
          e < _ && null != f[e] && (f[e].radius = oe[e]);
        }
        var c = l;
        for (e = 0; e < oe.length; e++) oe[e] > c && (c = oe[e]);
        M = Math.max(2.5 * c, 400);
        for (e = 0; e < f.length; e++)
          f[e].position
            .sub(centerAnchor.position)
            .normalize()
            .multiplyScalar(M)
            .add(centerAnchor.position);
        for (e = 0; e < ae.length; e++)
          if (0 != ne[e].length) {
            var u = oe[e] * W,
              p = oe[e] * X,
              d = oe[e] + Q;
            (ae[e].lightSprite.targetScale = new THREE.Vector3(u, u, u)),
              (ae[e].glowSprite.targetScale = new THREE.Vector3(p, p, p)),
              (ae[e].clickSphere.targetScale = new THREE.Vector3(d, d, d));
          } else {
            var m = new THREE.Vector3(1e-5, 1e-5, 1e-5);
            (ae[e].lightSprite.targetScale = m),
              (ae[e].glowSprite.targetScale = m),
              (ae[e].clickSphere.targetScale = m);
          }
      }),
      (ye.prototype.clear = function () {
        for (var e = 0; e < f.length; e++) this.removeTag(e);
      }),
      (ye.prototype.generateUniqueRandomInts = function (e, t) {
        for (var i = []; i.length < e; ) {
          for (
            var r = Math.ceil(Math.random() * t), n = !1, o = 0;
            o < i.length;
            o++
          )
            if (i[o] == r) {
              n = !0;
              break;
            }
          n || (i[i.length] = r);
        }
        return i;
      }),
      (ye.prototype.showAddStuff = function (e) {
        if (B[0].material.opacity != Y)
          for (var t = 0; t < B.length; t++)
            (null == e || -1 == e.indexOf(t)) &&
              ((B[t].visible = !0), (B[t].material.opacity = Y));
      }),
      (ye.prototype.hideAddStuff = function () {
        if (0 != B[0].material.opacity)
          for (var e = 0; e < B.length; e++)
            (B[e].visible = !1), (B[e].material.opacity = 0);
      }),
      (ye.prototype.getPointSprite = function () {
        var e = new THREE.SpriteMaterial({
            map: w,
            blending: THREE.AdditiveBlending,
            transparent: !0,
            opacity: Ee,
          }),
          t = new THREE.Sprite(e);
        return (
          (t.visible = !1),
          t.scale.set(te, te, te),
          (t.maxOpacity = Ee),
          (t.name = "point sprite"),
          t
        );
      }),
      (ye.prototype.quickTestSphere = function (e) {
        var t = new THREE.SphereGeometry(e, 20, 20),
          i = new THREE.MeshNormalMaterial();
        return new THREE.Mesh(t, i);
      }),
      (ye.prototype.angleFromCenter = function (e) {
        var t = e.clone().sub(centerAnchor.position),
          i = Math.atan2(t.z, t.x);
        return (i -= A);
      }),
      (ye.prototype.getRandomTags = function (e, t) {
        for (var i = [], r = 0; r < e; r++)
          for (var n = !1; !n; ) {
            var o = ~~(Math.random() * (p.length - 1));
            -1 == i.indexOf(o) && (i.push(o), (n = !0));
          }
        var a = [];
        for (r = 0; r < i.length; r++) a.push(p[i[r]]);
        return t(a), a;
      }),
      (ye.prototype.getSuggestedTags = function (e, t, i) {
        for (var r = [], n = 0; n < e.length; n++) r.push(e[n].data.id);
        api.getTagsSimilar(
          {
            ids: r,
            detail: "id_only",
          },
          function (e) {
            e = e.slice(0, t);
            for (var r = [], n = 0; n < e.length; n++) {
              var o = e[n],
                a = api.tagList[o];
              r.push(a);
            }
            i(r);
          }
        );
      }),
      (ye.prototype.getTagNodeIndex = function (e) {
        for (var t = 0; t < f.length; t++) if (e == f[t]) return t;
        return -1;
      }),
      (ye.prototype.repelItemsToAdd = function () {
        for (var e = 0; e < v.length; e++) {
          for (var t = 0; t < g.length; t++)
            v[e] != g[t] && this.repelItems(v[e], g[t]);
          for (t = 0; t < ae.length; t++)
            (null == f[t] && 0 == ne[t].length) ||
              this.repelItemToBucket(v[e], t);
        }
      }),
      (ye.prototype.reduceRepulsionsToBuckets = function () {
        for (var e = 0; e < ne.length; e++)
          for (var t = 0; t < ne[e].length; t++) {
            for (var i = ne[e][t], r = 0; r < ne.length; r++)
              if (e != r)
                for (var n = 0; n < ne[r].length; n++) {
                  var o = ne[r][n];
                  this.removeItemRepulsion(i, o);
                }
            for (r = 0; r < ae.length; r++)
              (null == f[r] && 0 == ne[r].length) ||
                this.removeItemBucketRepulsion(i, r);
          }
      }),
      (ye.prototype.expandRepulsionsToActive = function () {
        for (var e = 0; e < ne.length; e++)
          for (var t = 0; t < ne[e].length; t++) {
            for (var i = ne[e][t], r = 0; r < ne.length; r++)
              if (e != r)
                for (var n = 0; n < ne[r].length; n++) {
                  var o = ne[r][n];
                  this.repelItems(i, o);
                }
            for (r = 0; r < ae.length; r++)
              (null == f[r] && 0 == ne[r].length) ||
                this.repelItemToBucket(i, r);
          }
      }),
      (ye.prototype.setRotationTargets = function () {
        for (var e = 0; e < ne.length; e++)
          for (var t = 0; t < ne[e].length; t++) {
            var i = ne[e][t],
              r = this.objects.item[i];
            (r.forceRotateToCamera = !1),
              (r.enableRotateToCamera = !1),
              (r.rotateToTarget = !0),
              (r.rotationTarget = ae[e].position);
          }
      }),
      (ye.prototype.addItemLines = function () {
        for (var e = 0; e < ne.length; e++)
          if (0 != ne[e].length)
            for (var t = 0; t < ne[e].length; t++) {
              var i = ne[e][t];
              a.lineToItem(ae[e], i, oe[e]);
            }
      }),
      (ye.prototype.removeItemLines = function () {
        for (var e = 0; e < ne.length; e++)
          this.removeItemLinesConnectedTo(ae[e]), (ae[e].itemLines = {});
        for (e = N.children.length - 1; e >= 0; e--) {
          var t = N.children[e];
          N.remove(t);
        }
      }),
      (ye.prototype.removeItemLinesConnectedTo = function (e) {
        for (var t = N.children.length - 1; t >= 0; t--) {
          var i = N.children[t];
          (i.src1 != e && i.src2 != e) || N.remove(i);
        }
      }),
      (ye.prototype.removeRepulsionsConnectedTo = function (e) {
        var t = e.viewData.tags.repulsions;
        for (var i in t) {
          delete e.viewData.tags.repulsions[i];
          var r = e.basicInfo.id;
          delete this.objects.item[i].viewData.tags.repulsions[r],
            c.removeParticleAttractions(t[i]);
        }
      }),
      (ye.prototype.getActiveCylindricalBounds = function () {
        var e = this.getActiveRectBounds(),
          t = centerAnchor.position.clone();
        t.y = 0;
        var i = e.max.clone();
        i.y = 0;
        var r = t.distanceTo(i),
          n = lerpVec3(e.min, e.max, 0.5);
        return {
          radius: r,
          height: e.max.y - e.min.y,
          center: n,
        };
      }),
      (ye.prototype.getBoundingRadius = function () {
        for (var e = 0, t = 0; t < oe.length; t++) e = Math.max(e, oe[t]);
        var i = 0;
        for (t = 0; t < f.length; t++) {
          var r = f[t].position.distanceTo(centerAnchor.position) + e;
          r > i && (i = r);
        }
        return i;
      }),
      (ye.prototype.getActiveRectBounds = function () {
        for (
          var e = {
              min: new THREE.Vector3(9999999999, 9999999999, 9999999999),
              max: new THREE.Vector3(-9999999999, -9999999999, -9999999999),
            },
            t = 0;
          t < g.length;
          t++
        ) {
          var i = this.objects.item[g[t]].viewData.tags.positionActive;
          i.x < e.min.x && (e.min.x = i.x),
            i.x > e.max.x && (e.max.x = i.x),
            i.y < e.min.y && (e.min.y = i.y),
            i.y > e.max.y && (e.max.y = i.y),
            i.z < e.min.z && (e.min.z = i.z),
            i.z > e.max.z && (e.max.z = i.z);
        }
        for (t = 0; t < f.length; t++) {
          var r = f[t].position;
          r.x < e.min.x && (e.min.x = r.x),
            r.x > e.max.x && (e.max.x = r.x),
            r.y < e.min.y && (e.min.y = r.y),
            r.y > e.max.y && (e.max.y = r.y),
            r.z < e.min.z && (e.min.z = r.z),
            r.z > e.max.z && (e.max.z = r.z);
        }
        return e;
      }),
      (ye.prototype.adjustCameraDistance = function () {
        if (0 != g.length) {
          var e,
            t,
            i = f.length / _ - 1 / _;
          (t = lerp(s, l, i)),
            (e = new THREE.Vector3(0, 0, t).add(centerAnchor.position)),
            this.camControls.animateSlerp({
              pos: e,
              duration: P,
            });
        }
      }),
      (ye.prototype.hoverOnAdder = function (e) {
        if (!this.animating && !this.camControls.dragging) {
          this.camControls.setAutoRotate(!1), this.hideAllAdders(e);
          for (
            var t = this.updateCursorLinePositions(e), i = [], r = 0;
            r < he[e].srcTags.length;
            r++
          ) {
            var n = he[e].srcTags[r].selfIndex;
            i.push(n),
              (ae[n].spriteLabel.forceShow = !0),
              (ae[n].spriteX.forceShow = !0);
          }
          for (var o = [], a = 0; a < ae.length; a++) {
            var s = !0;
            if (0 != ne[a].length || null != f[a]) {
              for (S[a], r = 0; r < i.length; r++) {
                if (a === i[r]) {
                  s = !1;
                  break;
                }
              }
              s && o.push(a);
            }
          }
          0 != o.length && this.fadeDownBucketNodes(o),
            this.showAddStuff(t),
            he[e].hoverOn();
        }
      }),
      (ye.prototype.hoverOffAdder = function (e) {
        if (
          !this.animating &&
          (this.camControls.setAutoRotate(!0),
          this.showAllAdders(),
          void 0 !== he[e])
        ) {
          this.hideAddStuff();
          for (var t = 0; t < he[e].srcTags.length; t++) {
            var i = he[e].srcTags[t];
            this.hoverOffSphere(i.selfIndex);
          }
          for (var r = [], n = 0; n < he[e].srcTags.length; n++) {
            var o = he[e].srcTags[n].selfIndex;
            r.push(o),
              (ae[o].spriteLabel.forceShow = !1),
              (ae[o].spriteX.forceShow = !1);
          }
          var a = [];
          for (t = 0; t < ae.length; t++) {
            var s = !0;
            if (0 != ne[t].length || null != f[t]) {
              for (S[t], n = 0; n < r.length; n++) {
                if (t === r[n]) {
                  s = !1;
                  break;
                }
              }
              s && a.push(t);
            }
          }
          0 != a.length && this.fadeUpBucketNodes(a), he[e].hoverOff();
        }
      }),
      (ye.prototype.hoverOnSphere = function (e) {
        if (
          !this.animating &&
          !this.camControls.dragging &&
          "out" == this.state
        ) {
          ae[e].glowTween.stop();
          var t = ae[e].glowSprite.material.opacity;
          t != fe &&
            (ae[e].glowTween = new TWEEN.Tween({
              o: t,
            })
              .to(
                {
                  o: fe,
                },
                F
              )
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                ae[e].glowSprite.material.opacity = this.o;
                var i = 3 * oe[e];
                (i = map(this.o, t, fe, i, i + 100)),
                  ae[e].glowSprite.scale.set(i, i, i);
              })
              .start()),
            (ae[e].spriteLabel.forceShow = !0),
            void 0 !== ae[e].spriteX && (ae[e].spriteX.forceShow = !0);
          for (var i = 0; i < f.length; i++)
            (ae[i].spriteLabel.enabled = !1), (ae[i].spriteX.enabled = !1);
          $("body").css("cursor", "pointer"), !1, (x = e);
        }
      }),
      (ye.prototype.ensureHoverOffSphere = function () {
        null != x &&
          ae[x].glowSprite.material.opacity != de &&
          this.hoverOffSphere(x, !0);
      }),
      (ye.prototype.hoverOffSphere = function (e, t) {
        if (
          t ||
          (this.uiEnabled &&
            !this.animating &&
            !this.camControls.dragging &&
            "out" === this.state)
        ) {
          ae[e].glowTween.stop();
          var i = ae[e].glowSprite.material.opacity;
          i != de &&
            (ae[e].glowTween = new TWEEN.Tween({
              o: i,
            })
              .to(
                {
                  o: de,
                },
                F
              )
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                ae[e].glowSprite.material.opacity = this.o;
                var t = 3 * oe[e];
                (t = map(this.o, i, de, t + 100, t)),
                  ae[e].glowSprite.scale.set(t, t, t);
              })
              .start()),
            (ae[e].spriteLabel.forceShow = !1),
            void 0 !== ae[e].spriteX && (ae[e].spriteX.forceShow = !1);
          for (var r = 0; r < f.length; r++)
            (ae[r].spriteLabel.enabled = !0), (ae[r].spriteX.enabled = !0);
          $("body").css("cursor", "default"), !0, (x = null);
        }
      }),
      (ye.prototype.fadeDownBucketNodes = function (e) {
        if (this.uiEnabled)
          for (var t = 0; t < e.length; t++) {
            (l = e[t]) < _ &&
              ((ae[l].spriteLabel.enabled = !1), (ae[l].spriteX.enabled = !1));
          }
        var i = [];
        for (t = 0; t < G.children.length; t++) {
          var r = G.children[t].src1.selfIndex,
            n = G.children[t].src2.selfIndex;
          (-1 === e.indexOf(r) && -1 === e.indexOf(n)) || i.push(t);
        }
        var o = ae[e[0]].glowSprite.material.opacity,
          a = ae[e[0]].lightSprite.material.opacity,
          s = ae[e[0]].clickSphere.material.opacity;
        if (o > me) {
          for (t = 0; t < e.length; t++) {
            var l = e[t];
            ae[l].glowTween.stop();
          }
          D.stop(),
            (D = new TWEEN.Tween({
              o: 1,
            })
              .to(
                {
                  o: 0,
                },
                F
              )
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                for (var t = 0; t < e.length; t++) {
                  var r = e[t],
                    n = ae[r];
                  (n.glowSprite.material.opacity = map(this.o, 1, 0, o, 0)),
                    (n.lightSprite.material.opacity = map(this.o, 1, 0, a, 0)),
                    (n.clickSphere.material.opacity = map(this.o, 1, 0, s, 0));
                  var l = this.o * J;
                  for (var h in n.itemLines)
                    n.itemLines[h].material.opacity = l;
                  void 0 !== f[r] && (f[r].point.material.opacity = this.o),
                    (n.light.intensity = this.o * n.light.maxIntensity);
                }
                var c = this.o * K;
                for (t = 0; t < i.length; t++) {
                  r = i[t];
                  G.children[r].material.opacity = c;
                }
                var u = this.o * Z;
                for (t = 0; t < j.children.length; t++)
                  j.children[t].material.opacity = u;
              })
              .onComplete(function () {
                (G.visible = !1), (j.visible = !1);
              })
              .start());
        }
      }),
      (ye.prototype.fadeUpAllBucketNodes = function () {
        for (var e = [], t = 0; t < ae.length; t++)
          0 === ae[t].glowSprite.material.opacity &&
            0 !== ae[t].clickSphere.material.opacity &&
            e.push(t);
        0 != e.length && this.fadeUpBucketNodes(e);
      }),
      (ye.prototype.fadeUpBucketNodes = function (e) {
        (G.visible = !0), (j.visible = !0);
        for (var t = 0; t < j.children.length; t++)
          j.children[t].material.opacity = Z;
        if (this.uiEnabled)
          for (t = 0; t < e.length; t++) {
            (l = e[t]) < _ &&
              ((ae[l].spriteLabel.enabled = !0), (ae[l].spriteX.enabled = !0));
          }
        var i = [];
        for (t = 0; t < G.children.length; t++) {
          var r = G.children[t].src1.selfIndex,
            n = G.children[t].src2.selfIndex;
          (-1 === e.indexOf(r) && -1 === e.indexOf(n)) || i.push(t);
        }
        var o = ae[e[0]].glowSprite.material.opacity,
          a = ae[e[0]].lightSprite.material.opacity,
          s = ae[e[0]].clickSphere.material.opacity;
        if (o < de) {
          for (t = 0; t < e.length; t++) {
            var l = e[t];
            ae[l].glowTween.stop();
          }
          D.stop(),
            (D = new TWEEN.Tween({
              o: 0,
            })
              .to(
                {
                  o: 1,
                },
                F
              )
              .easing(TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                for (var t = 0; t < e.length; t++) {
                  var r = e[t],
                    n = ae[r];
                  (n.glowSprite.material.opacity = map(this.o, 0, 1, o, de)),
                    (n.lightSprite.material.opacity = map(this.o, 0, 1, a, pe)),
                    (n.clickSphere.material.opacity = map(this.o, 0, 1, s, ee));
                  var l = this.o * J;
                  for (var h in n.itemLines)
                    n.itemLines[h].material.opacity = l;
                  void 0 !== f[r] && (f[r].point.material.opacity = this.o),
                    (n.light.intensity = this.o * n.light.maxIntensity);
                }
                var c = this.o * K;
                for (t = 0; t < i.length; t++) {
                  r = i[t];
                  G.children[r].material.opacity = c;
                }
                var u = this.o * Z;
                for (t = 0; t < j.children.length; t++)
                  j.children[t].material.opacity = u;
              })
              .start());
        }
      }),
      (ye.prototype.moveFromDetailToIn = function () {
        (this.uiEnabled = !0),
          $("#back")
            .unbind("click")
            .click(function () {
              a.uiEnabled && a.closeSphere(R);
            })
            .show(),
          $(".bucket-title").stop().fadeIn("fast"),
          (this.state = "in");
      }),
      (ye.prototype.setTagsFromWithin = function (e) {
        (this.uiEnabled = !1),
          this.closeSphere(R, function () {
            a.setTags(e);
          });
      }),
      (ye.prototype.clickAdder = function (e) {
        (ce = e), (ue = he[e].position.clone()), (E = []);
        for (var t = 0; t < f.length; t++) {
          for (var i = !1, r = 0; r < he[e].srcTags.length; r++) {
            if (t === he[e].srcTags[r].selfIndex) {
              i = !0;
              break;
            }
          }
          i || E.push(t);
        }
        var n = he[e];
        this.openTagsDialog(n.srcTags);
      }),
      (ye.prototype.clickBucketLabel = function (e) {
        0 !== ne[e].length &&
          (void 0 !== ae[e].spriteX && (ae[e].spriteX.enabled = !1),
          this.openSphere(e));
      }),
      (ye.prototype.clickBucketClose = function (e) {
        (ae[e].spriteX.enabled = !1), this.removeTag(e, !0);
      }),
      (ye.prototype.hoverOnBucketLabel = function (e) {
        this.hoverOnSphere(e);
      }),
      (ye.prototype.hoverOffBucketLabel = function (e) {
        this.hoverOffSphere(e);
      }),
      (ye.prototype.hoverOnBucketClose = function () {
        $("body").css("cursor", "pointer");
      }),
      (ye.prototype.hoverOffBucketClose = function () {
        $("body").css("cursor", "default");
      }),
      // 开启列表图片
      (ye.prototype.openSphere = function (e) {
        "out" === this.state &&
          ((this.uiEnabled = !1),
          (this.animating = !0),
          // ui.disableHelpLink(),
          (this.state = "in"),
          this.camControls.setAutoRotate(!1),
          this.fadeOutNode(e),
          this.fadeOutAll(function () {
            (R = e),
              ae[e].clickSphere.scale.set(1e-4, 1e-4, 1e-4),
              (ae[e].spriteLabel.enabled = !1),
              void 0 !== ae[e].spriteX && (ae[e].spriteX.enabled = !1);
            for (var t = 0; t < ae.length; t++)
              if (t != e) {
                ae[t].viewData.tags.positionPrevious = ae[t].position.clone();
                var r = ae[t].position
                  .clone()
                  .sub(ae[e].position)
                  .normalize()
                  .multiplyScalar(4e3)
                  .add(ae[e].position);
                ae[t].viewData.tags.positionTarget = r;
                for (var n = 0; n < ne[t].length; n++) {
                  var o = a.objects.item[ne[t][n]],
                    s = o.viewData.tags.destination.clone().sub(ae[t].position);
                  (o.viewData.tags.positionPrevious = o.position.clone()),
                    (o.viewData.tags.positionTarget = s.add(r));
                }
              }
            a.bucketScrollUpVector = new THREE.Vector3(0, 1, 0).applyQuaternion(
              sceneManager.getCamera().quaternion
            );
            var l = a.camControls.getLookVector(),
              h = l.clone().cross(a.bucketScrollUpVector);
            h.normalize(),
              (a.bucketScrollUpQuaternion = sceneManager
                .getCamera()
                .quaternion.clone());
            var u = new THREE.Quaternion();
            u.setFromAxisAngle(h, 0.5 * -Math.PI),
              a.bucketScrollUpQuaternion.multiply(u);
            var p = [],
              d = 4,
              f = Math.min(ne[e].length, d),
              m = Math.ceil(ne[e].length / f),
              E = 170,
              g = 1.2 * E,
              v = (f - 1) * E,
              y = 0,
              T = 0;
            for (t = 0; t < ne[e].length; t++) {
              var x = ne[e][t],
                H = a.objects.item[x];
              (y = ~~(t / f)),
                (T = t % f),
                ((_ = new THREE.Vector3()).x = T * E - v / 2),
                (_.y = -y * g),
                (_.z = -100),
                m > 1 && (_.y += 0.5 * g);
              var b = sceneManager.getCamera().quaternion.clone();
              _.applyQuaternion(b),
                _.add(ae[e].position),
                (H.viewData.tags.positionPrevious = H.position.clone()),
                p.push(_),
                (H.viewData.tags.previousQuaternion = H.quaternion.clone()),
                (H.viewData.tags.targetQuaternion = b),
                (H.rotateToTarget = !1);
            }
            (a.bucketScrollHeight = y * g),
              m > 1 && (a.bucketScrollHeight -= g),
              (a.bucketScrollPos = 0);
            // var w = api.orderIdsByType(ne[e], ["Artwork", "Exhibition", "Book", "Essay"]);
            var w = ne[e];
            for (t = 0; t < w.length; t++) {
              x = w[t];
              ((H = a.objects.item[x]).viewData.tags.positionTarget = p[t]),
                p.length > 1 &&
                  H.thumbWidth > H.thumbHeight &&
                  (H.viewData.tags.positionTarget.y -=
                    (H.thumbWidth - H.thumbHeight) / 2);
            }
            sceneManager.usePhysics = !0;
            var q = 0.1,
              M = -4e3;
            new TWEEN.Tween({
              t: 0,
            })
              .to(
                {
                  t: 1,
                },
                I
              )
              .easing(TWEEN.Easing.Quartic.InOut)
              .onUpdate(function () {
                if (this.t <= q)
                  for (
                    var t = map(this.t, 0, q, 0, 1), i = lerp(0, M, t), r = 0;
                    r < c.attractions.length;
                    r++
                  )
                    c.attractions[r].constant = i;
                else if (this.t >= 1 - q)
                  for (
                    t = map(this.t, 1 - q, 1, 0, 1), i = lerp(M, 0, t), r = 0;
                    r < c.attractions.length;
                    r++
                  )
                    c.attractions[r].constant = i;
                for (r = 0; r < ae.length; r++)
                  if (r != e) {
                    var n = lerpVec3(
                      ae[r].viewData.tags.positionPrevious,
                      ae[r].viewData.tags.positionTarget,
                      this.t
                    );
                    ae[r].position.set(n.x, n.y, n.z),
                      (ae[r].viewData.tags.particle.position.x = n.x),
                      (ae[r].viewData.tags.particle.position.y = n.y),
                      (ae[r].viewData.tags.particle.position.z = n.z);
                  }
                for (r = 0; r < ne[e].length; r++) {
                  var o = ne[e][r];
                  ((l = a.objects.item[o]).viewData.tags.destination = lerpVec3(
                    l.viewData.tags.positionPrevious,
                    l.viewData.tags.positionTarget,
                    this.t
                  )),
                    THREE.Quaternion.slerp(
                      l.viewData.tags.previousQuaternion,
                      l.viewData.tags.targetQuaternion,
                      l.targetQuaternion,
                      this.t
                    );
                }
                for (r = 0; r < ne.length; r++)
                  if (r != e)
                    for (var s = 0; s < ne[r].length; s++) {
                      var l;
                      ((l =
                        a.objects.item[ne[r][s]]).viewData.tags.destination =
                        lerpVec3(
                          l.viewData.tags.positionPrevious,
                          l.viewData.tags.positionTarget,
                          this.t
                        )),
                        (l.rotationTarget = ae[r].position),
                        (l.forceRotateToCamera = !1),
                        (l.enableRotateToCamera = !1),
                        (l.rotateToTarget = !0);
                    }
              })
              .onComplete(function () {
                console.log(",<<<<<<<<<");
                back.add(function () {
                  console.log("R", R);
                  a.uiEnabled && a.closeSphere(R);
                });
                if (ne[e].length > 1) {
                  var t = i(ae[e].names);
                  $("#ui #local").append(
                    '<div class="bucket-title">' + t + "</div>"
                  );
                } else {
                  var r = a.objects.item[ne[e][0]];
                  function n() {
                    sceneManager.setPaused(!0);
                    var e = [];
                    if (
                      ($("#ajax-content .tag-grid .tag a").each(function () {
                        var t = $(this)
                          .attr("href")
                          .match(/tag\/(.*?)\//)[1];
                        e.push(t);
                      }),
                      0 !== e.length)
                    ) {
                      var t = vis.getVisByName("drift");
                      void 0 !== t && t.addItemTagsToHistory(e);
                    }
                  }
                  function o() {
                    sceneManager.setPaused(!1), (r.parentVis.uiEnabled = !0);
                    debugger;
                    $("#back")
                      .unbind("click")
                      .click(function () {
                        a.uiEnabled && a.closeSphere(R);
                      })
                      .show()
                      .trigger("click");
                  }
                  ui.addToPath(r.basicInfo, "item"),
                    ui.openItemDetails(r.basicInfo, n, o),
                    (a.state = "detail");
                }
                (sceneManager.usePhysics = !1),
                  setTimeout(function () {
                    (a.animating = !1), (a.uiEnabled = !0);
                  }, 800);
              })
              .start(),
              (a.camControls.lastOutPosition = sceneManager
                .getCamera()
                .position.clone());
            var _ = ae[e].position.clone(),
              S = sceneManager.getDistanceForRectSize(v, 50);
            _.add(l.negate().multiplyScalar(S)),
              a.camControls.animate({
                pos: _,
                duration: I,
                callback: function () {
                  a.camControls.setScrollMode(!0);
                  var e = sceneManager.getCamera();
                  a.camControls.prevInPosition = new THREE.Vector3(
                    e.position.x,
                    e.position.y,
                    e.position.z
                  );
                },
              });
          }, !1));
      }),
      // 关闭列表图片
      (ye.prototype.closeSphere = function (e, t) {
        console.log("关闭", e, t);
        "in" == this.state &&
          $(".bucket-title")
            .stop()
            .fadeOut("fast", function () {
              $(this).remove();
            }),
          this.camControls.setAutoRotate(!0);
        for (var i = 0; i < ne[e].length; i++) {
          var r = ne[e][i];
          this.objects.item[r].rotateToTarget = !0;
        }
        sceneManager.usePhysics = !0;
        var n = 0.1,
          o = -4e3;
        (this.animating = !0),
          (this.uiEnabled = !1),
          new TWEEN.Tween({
            t: 0,
          })
            .to(
              {
                t: 1,
              },
              I
            )
            .easing(TWEEN.Easing.Quartic.InOut)
            .onUpdate(function () {
              if (this.t <= n)
                for (
                  var t = map(this.t, 0, n, 0, 1), i = lerp(0, o, t), r = 0;
                  r < c.attractions.length;
                  r++
                )
                  c.attractions[r].constant = i;
              else if (this.t >= 1 - n)
                for (
                  t = map(this.t, 1 - n, 1, 0, 1), i = lerp(o, 0, t), r = 0;
                  r < c.attractions.length;
                  r++
                )
                  c.attractions[r].constant = i;
              for (r = 0; r < ae.length; r++)
                if (r != e) {
                  var s = lerpVec3(
                    ae[r].viewData.tags.positionTarget,
                    ae[r].viewData.tags.positionPrevious,
                    this.t
                  );
                  ae[r].position.set(s.x, s.y, s.z),
                    (ae[r].viewData.tags.particle.position.x = s.x),
                    (ae[r].viewData.tags.particle.position.y = s.y),
                    (ae[r].viewData.tags.particle.position.z = s.z);
                }
              for (r = 0; r < ne[e].length; r++) {
                var l = ne[e][r];
                ((u = a.objects.item[l]).viewData.tags.destination = lerpVec3(
                  u.viewData.tags.positionTarget,
                  u.viewData.tags.positionPrevious,
                  this.t
                )),
                  THREE.Quaternion.slerp(
                    u.viewData.tags.targetQuaternion,
                    u.viewData.tags.previousQuaternion,
                    u.targetQuaternion,
                    this.t
                  );
              }
              for (r = 0; r < ne.length; r++)
                if (r != e)
                  for (var h = 0; h < ne[r].length; h++) {
                    var u;
                    ((u = a.objects.item[ne[r][h]]).viewData.tags.destination =
                      lerpVec3(
                        u.viewData.tags.positionTarget,
                        u.viewData.tags.positionPrevious,
                        this.t
                      )),
                      (u.rotationTarget = ae[r].position);
                  }
            })
            .onComplete(function () {
              (sceneManager.usePhysics = !1), console.log(2222, a.uiEnabled);
              // back.add(function () {
              //     vis.setTo("drift");
              //     // setTimeout(function() {
              //     //     console.log('22222', '点击');
              //     //     $("#back").trigger("click");
              //     // }, 10000);
              // }),
              (a.animating = !1),
                (a.uiEnabled = !0),
                !0,
                // ui.enableHelpLink(),
                (a.state = "out");
              var i = oe[e] + 60;
              ae[e].clickSphere.scale.set(i, i, i),
                e < _ &&
                  ((ae[e].spriteLabel.enabled = !0),
                  (ae[e].spriteX.enabled = !0)),
                a.fadeInAll(function () {}, !1),
                a.fadeInTag(R),
                void 0 !== t && t();
            })
            .start(),
          this.camControls.animate({
            pos: this.camControls.lastOutPosition,
            duration: I,
            callback: function () {
              a.camControls.setScrollMode(!1);
            },
          });
      }),
      (ye.prototype.showClickSpheres = function () {
        for (var e = 0; e < ae.length; e++)
          0 != ne[e].length && (ae[e].clickSphere.visible = !0);
      }),
      (ye.prototype.hideClickSpheres = function () {
        for (var e = 0; e < ae.length; e++)
          0 != ne[e].length && (ae[e].clickSphere.visible = !1);
      }),
      (ye.prototype.hideItemLines = function () {
        for (var e = 0; e < N.children.length; e++) N.children[e].visible = !1;
      }),
      (ye.prototype.showItemLines = function () {
        for (var e = 0; e < N.children.length; e++) N.children[e].visible = !0;
      }),
      (ye.prototype.hideDiagramLines = function () {
        (centerAnchor.point.visible = !1),
          centerAnchor.point.scale.set(0, 0, 0);
        for (var e = 0; e < f.length; e++) f[e].point.visible = !1;
        for (e = 0; e < j.children.length; e++) j.children[e].visible = !1;
        for (e = 0; e < G.children.length; e++) G.children[e].visible = !1;
      }),
      (ye.prototype.showDiagramLines = function () {
        (G.visible = !0),
          (j.visible = !0),
          (centerAnchor.point.visible = !0),
          centerAnchor.point.scale.set(te, te, te),
          (centerAnchor.point.material.opacity = 0);
        for (var e = 0; e < f.length; e++)
          (f[e].point.visible = !0), (f[e].point.material.opacity = 0);
        for (e = 0; e < j.children.length; e++)
          (j.children[e].visible = !0), (j.children[e].material.opacity = 0);
        for (e = 0; e < G.children.length; e++)
          (G.children[e].visible = !0), (G.children[e].material.opacity = 0);
      }),
      (ye.prototype.hideInbetweenNodes = function () {
        for (var e = 4; e < ae.length; e++)
          (ae[e].lightSprite.visible = !1), (ae[e].glowSprite.visible = !1);
      }),
      (ye.prototype.showInbetweenNodes = function () {
        for (var e = 4; e < ae.length; e++)
          0 != ne[e].length &&
            ((ae[e].lightSprite.visible = !0),
            (ae[e].lightSprite.material.opacity = 0),
            (ae[e].glowSprite.visible = !0),
            (ae[e].glowSprite.material.opacity = 0));
      }),
      (ye.prototype.updateInbetweenNodePositions = function () {
        for (var e = 3; e < ae.length; e++)
          if (0 != ne[e].length) {
            var t = ae[e].viewData.tags.positionTarget;
            ae[e].position.set(t.x, t.y, t.z),
              (ae[e].viewData.tags.particle.position.x = t.x),
              (ae[e].viewData.tags.particle.position.y = t.y),
              (ae[e].viewData.tags.particle.position.z = t.z);
          }
      }),
      (ye.prototype.setLabels = function () {
        for (var e = 0; e < ae.length; e++)
          this.removeBucketLabel(e),
            e < _
              ? void 0 !== f[e] && this.addBucketLabel(e)
              : 0 != ne[e].length && this.addBucketLabel(e);
        this.updateLabels();
      }),
      (ye.prototype.updateLabels = function () {
        centerAnchor.position.distanceTo(sceneManager.getCamera().position);
        var e = new THREE.Vector3(0, 1, 0);
        e.applyQuaternion(sceneManager.getCamera().quaternion);
        var t = new THREE.Vector3(1, 0, 0);
        t.applyQuaternion(sceneManager.getCamera().quaternion);
        for (
          var i = sceneManager
              .getCamera()
              .position.clone()
              .sub(centerAnchor.position),
            r = sceneManager.getCamera().quaternion,
            n = 0;
          n < ae.length;
          n++
        )
          if ((n < _ || 0 != ne[n].length) && null != ae[n].spriteLabel) {
            var o = 115,
              a = 5,
              s = ae[n].spriteLabel,
              l = e.clone().multiplyScalar(oe[n] + o);
            s.position.set(l.x, l.y, l.z), s.quaternion.set(r.x, r.y, r.z, r.w);
            var h = s.width + a,
              c = (s.height, ae[n].position.clone().add(s.position)),
              u = sceneManager.getRectWorldSize(c, h, 1),
              p = u.w / s.width;
            if ((s.scale.set(p, p, 1), null != ae[n].spriteX)) {
              var d = ae[n].spriteX,
                m = sceneManager.getRectWorldSize(c, 13, 1),
                E = t
                  .clone()
                  .multiplyScalar(u.w / 2 + m.w)
                  .add(s.position);
              d.position.set(E.x, E.y, E.z),
                d.quaternion.set(r.x, r.y, r.z, r.w),
                d.scale.set(p, p, 1);
            }
            var g = 0.31;
            if (ae[n].spriteLabel.forceShow)
              ae[n].spriteLabel.textMesh.material.opacity < ie &&
                (ae[n].spriteLabel.textMesh.material.opacity = lerp(
                  ae[n].spriteLabel.textMesh.material.opacity,
                  ie,
                  g
                ));
            else if (ae[n].spriteLabel.enabled) {
              var v = ae[n].position.clone().sub(centerAnchor.position);
              GeomUtils.angleBetweenVecs(i, v) > re
                ? ae[n].spriteLabel.textMesh.material.opacity > 0 &&
                  (ae[n].spriteLabel.textMesh.material.opacity = lerp(
                    ae[n].spriteLabel.textMesh.material.opacity,
                    0,
                    g
                  ))
                : ae[n].spriteLabel.textMesh.material.opacity < ie &&
                  (ae[n].spriteLabel.textMesh.material.opacity = lerp(
                    ae[n].spriteLabel.textMesh.material.opacity,
                    ie,
                    g
                  ));
            } else
              ae[n].spriteLabel.textMesh.material.opacity > 0 &&
                (ae[n].spriteLabel.textMesh.material.opacity = lerp(
                  ae[n].spriteLabel.textMesh.material.opacity,
                  0,
                  g
                ));
            n < f.length &&
              (ae[n].spriteX.textMesh.material.opacity =
                ae[n].spriteLabel.textMesh.material.opacity);
          }
      }),
      (ye.prototype.addBucketLabel = function (e) {
        var i = 9,
          r = "#000000",
          n = void 0,
          o = [0, 0];
        if (e < _)
          (ae[e].names = [f[e].data.name]),
            (ae[e].spriteLabel = this.createLabel(ae[e].names, i, r, n, o)),
            (ae[e].spriteLabel.textMesh.material.opacity = 0),
            (ae[e].spriteLabel.clickMesh.index = e),
            (ae[e].spriteLabel.clickMesh.type = "BNL"),
            (ae[e].spriteLabel.enabled = !1),
            (ae[e].spriteLabel.forceShow = !1),
            ae[e].add(ae[e].spriteLabel),
            (ae[e].spriteX = this.createLabel(["\xd7"], i, r, n, [5, 5])),
            (ae[e].spriteX.textMesh.material.opacity = 0),
            (ae[e].spriteX.clickMesh.index = e),
            (ae[e].spriteX.clickMesh.type = "BNX"),
            (ae[e].spriteX.enabled = !1),
            (ae[e].spriteX.forceShow = !1),
            ae[e].add(ae[e].spriteX);
        else {
          for (var a = S[e], s = [], l = 0; l < a.length; l++)
            s.push(f[a[l]].data.name);
          ae[e].names = s;
          var h = t(s);
          (ae[e].spriteLabel = this.createLabel(h, i, r, n)),
            (ae[e].spriteLabel.textMesh.material.opacity = 0),
            (ae[e].spriteLabel.enabled = !1),
            (ae[e].spriteLabel.forceShow = !1),
            ae[e].add(ae[e].spriteLabel);
        }
      }),
      (ye.prototype.removeBucketLabel = function (e) {
        null != ae[e].spriteLabel &&
          (ae[e].remove(ae[e].spriteLabel),
          delete ae[e].spriteLabel,
          null != ae[e].spriteX &&
            (ae[e].remove(ae[e].spriteX), delete ae[e].spriteX));
      }),
      (ye.prototype.showAllLabels = function () {
        for (var e = 0; e < _; e++)
          null != ae[e].spriteLabel &&
            ((ae[e].spriteLabel.enabled = !0),
            (ae[e].spriteLabel.forceShow = !1),
            (ae[e].spriteX.enabled = !0),
            (ae[e].spriteX.forceShow = !1));
      }),
      (ye.prototype.hideAllAdders = function (e) {
        for (var t = 0; t < he.length; t++) t !== e && he[t].hide();
      }),
      (ye.prototype.showAllAdders = function (e) {
        for (var t = 0; t < he.length; t++) t !== e && he[t].show();
      }),
      (ye.prototype.hideAllLabels = function () {
        for (var e = 0; e < ae.length; e++)
          null != ae[e].spriteLabel &&
            ((ae[e].spriteLabel.enabled = !1),
            (ae[e].spriteLabel.forceShow = !1),
            void 0 !== ae[e].spriteX &&
              ((ae[e].spriteX.enabled = !1), (ae[e].spriteX.forceShow = !1)));
      }),
      (ye.prototype.itemClickCallback = function () {
        return;
        var e = this;
        if (this.parentVis.uiEnabled && "in" === this.parentVis.state) {
          function t() {
            sceneManager.setPaused(!0);
            var e = [];
            if (
              ($("#ajax-content .tag-grid .tag a").each(function () {
                var t = $(this)
                  .attr("href")
                  .match(/tag\/(.*?)\//)[1];
                e.push(t);
              }),
              0 !== e.length)
            ) {
              var t = vis.getVisByName("drift");
              void 0 !== t && t.addItemTagsToHistory(e);
            }
          }
          function i() {
            sceneManager.setPaused(!1),
              (e.parentVis.uiEnabled = !0),
              $("#back")
                .unbind("click")
                .click(function () {
                  a.uiEnabled && a.closeSphere(R);
                })
                .show(),
              ne[R].length > 1
                ? e.parentVis.moveFromDetailToIn()
                : $("#back").trigger("click");
          }
          $(".bucket-title").stop().fadeOut("fast"),
            ui.addToPath(e.basicInfo, "item"),
            ui.openItemDetails(e.basicInfo, t, i),
            (this.parentVis.state = "detail");
        }
      }),
      (ye.prototype.fadeOutNode = function (e, t) {
        new TWEEN.Tween({
          o: 1,
        })
          .to(
            {
              o: 0,
            },
            O
          )
          .easing(TWEEN.Easing.Quadratic.InOut)
          .onUpdate(function () {
            (ae[e].lightSprite.material.opacity = this.o * pe),
              (ae[e].glowSprite.material.opacity = this.o * de);
            var t = ae[e].light;
            t.intensity = this.o * t.maxIntensity;
          })
          .onComplete(function () {
            null != t &&
              (t(),
              (ae[e].lightSprite.visible = !1),
              (ae[e].glowSprite.visible = !1));
          })
          .start();
      }),
      (ye.prototype.fadeInTag = function (e, t) {
        (ae[e].lightSprite.visible = !0), (ae[e].glowSprite.visible = !0);
        new TWEEN.Tween({
          o: 0,
        })
          .to(
            {
              o: 1,
            },
            O
          )
          .easing(TWEEN.Easing.Quadratic.InOut)
          .onUpdate(function () {
            (ae[e].lightSprite.material.opacity = this.o * pe),
              (ae[e].glowSprite.material.opacity = this.o * de);
            var t = ae[e].light;
            t.intensity = this.o * t.maxIntensity;
          })
          .onComplete(function () {
            null != t && t();
          })
          .start();
      }),
      (ye.prototype.fadeOutAll = function (e, t) {
        console.log("fadeOutAll", 11111);
        this.hideAllLabels(),
          this.sceneObject.traverse(function (e) {
            e.material && (e.material.transparent = !0);
          });
        for (var i = 0; i < ae.length; i++)
          (ae[i].light.lastIntensity = ae[i].light.intensity),
            (ae[i].lightSprite.lastOpacity =
              ae[i].lightSprite.material.opacity),
            (ae[i].glowSprite.lastOpacity = ae[i].glowSprite.material.opacity),
            (ae[i].clickSphere.lastOpacity =
              ae[i].clickSphere.material.opacity);
        for (i = 0; i < N.children.length; i++)
          N.children[i].lastOpacity = N.children[i].material.opacity;
        new TWEEN.Tween({
          o: 1,
        })
          .to(
            {
              o: 0,
            },
            O
          )
          .easing(TWEEN.Easing.Quadratic.InOut)
          .onUpdate(function () {
            centerAnchor.point.material.opacity = this.o * Ee;
            for (var e = 0; e < f.length; e++)
              f[e].point.material.opacity = this.o * Ee;
            for (e = 0; e < j.children.length; e++)
              j.children[e].material.opacity = map(
                this.o,
                0,
                1,
                0,
                j.children[e].maxOpacity
              );
            for (e = 0; e < G.children.length; e++)
              G.children[e].material.opacity = map(
                this.o,
                0,
                1,
                0,
                G.children[e].maxOpacity
              );
            for (e = 0; e < ae.length; e++)
              0 != ne[e].length &&
                ((e > 3 || t) &&
                  0 !== ae[e].lightSprite.material.opacity &&
                  ((ae[e].lightSprite.material.opacity =
                    this.o * ae[e].lightSprite.lastOpacity),
                  (ae[e].glowSprite.material.opacity =
                    this.o * ae[e].glowSprite.lastOpacity),
                  (ae[e].light.intensity = this.o * ae[e].light.lastIntensity)),
                (ae[e].clickSphere.material.opacity =
                  this.o * ae[e].clickSphere.lastOpacity));
            for (e = 0; e < N.children.length; e++)
              N.children[e].material.opacity =
                this.o * N.children[e].lastOpacity;
            for (e = 0; e < he.length; e++) he[e].setOpacity(this.o);
          })
          .onComplete(function () {
            a.hideAllAdders(),
              a.hideItemLines(),
              a.hideDiagramLines(),
              a.hideInbetweenNodes(),
              a.hideClickSpheres(),
              null != e && e();
          })
          .start();
      }),
      (ye.prototype.fadeInAll = function (e, t) {
        this.showItemLines(),
          this.showDiagramLines(),
          this.showInbetweenNodes(),
          a.showClickSpheres(),
          this.sceneObject.traverse(function (e) {
            e.material && (e.material.transparent = !0);
          });
        new TWEEN.Tween({
          o: 0,
        })
          .to(
            {
              o: 1,
            },
            O
          )
          .easing(TWEEN.Easing.Quadratic.InOut)
          .onUpdate(function () {
            centerAnchor.point.material.opacity = this.o * Ee;
            for (var e = 0; e < f.length; e++)
              f[e].point.material.opacity = this.o * Ee;
            for (e = 0; e < j.children.length; e++)
              j.children[e].material.opacity = map(
                this.o,
                0,
                1,
                0,
                j.children[e].maxOpacity
              );
            for (e = 0; e < G.children.length; e++)
              G.children[e].material.opacity = map(
                this.o,
                0,
                1,
                0,
                G.children[e].maxOpacity
              );
            for (e = 0; e < ae.length; e++)
              0 != ne[e].length &&
                ((e > 3 || t) &&
                  ((ae[e].lightSprite.material.opacity = this.o * pe),
                  (ae[e].glowSprite.material.opacity = this.o * de),
                  (ae[e].light.intensity = this.o * ae[e].light.maxIntensity)),
                (ae[e].clickSphere.material.opacity = this.o * ee));
            for (e = 0; e < N.children.length; e++)
              N.children[e].material.opacity =
                this.o * N.children[e].maxOpacity;
            for (e = 0; e < he.length; e++) he[e].setOpacity(this.o);
          })
          .onComplete(function () {
            a.showAllAdders(), a.showAllLabels(), null != e && e();
          })
          .start();
      }),
      (ye.prototype.createLabel = function (e, t, i, r, n) {
        void 0 === n && (n = [0, 0]);
        for (
          var o,
            a = {
              size: t,
              curveSegments: 2,
              font: "circular",
              bevelEnabled: !1,
              amount: 1,
            },
            s = [],
            l = 0;
          l < e.length;
          l++
        ) {
          var h = THREE.FontUtils.generateShapes(e[l], a),
            c = new THREE.ExtrudeGeometry(h, a);
          c.computeBoundingBox(),
            s.push({
              x: -0.5 * (c.boundingBox.max.x - c.boundingBox.min.x),
              y: l * (t + 0.4 * t),
            });
          for (var u = 0; u < c.vertices.length; u++)
            (c.vertices[u].x += s[l].x), (c.vertices[u].y += s[l].y);
          0 === l ? (o = c) : o.merge(c);
        }
        o.computeBoundingBox();
        var p = new THREE.Mesh(
          o,
          new THREE.MeshBasicMaterial({
            color: 0,
            fog: !1,
            transparent: !0,
            opacity: 1,
            depthWrite: !1,
            depthTest: !1,
          })
        );
        p.renderOrder = 2e3;
        var d = new THREE.Object3D();
        return (
          (d.textMesh = p),
          d.add(p),
          (d.width = o.boundingBox.max.x - o.boundingBox.min.x),
          (d.height = o.boundingBox.max.y - o.boundingBox.min.y),
          (d.clickMesh = new THREE.BoundingBoxHelper(d.textMesh, 16777215)),
          (d.clickMesh.material.depthTest = !1),
          (d.clickMesh.renderOrder = 1),
          (d.clickMesh.material.transparent = !0),
          (d.clickMesh.material.opacity = 0),
          (d.clickMesh.lastOpacity = 0),
          d.clickMesh.update(),
          d.add(d.clickMesh),
          d
        );
      }),
      (ye.prototype.updateLightMaterials = function () {
        for (var e in this.objects.item) {
          var t = this.objects.item[e];
          null != t.highResMesh && (t.highResMesh.material.needsUpdate = !0);
        }
        itemField.getThumbMesh().material.needsUpdate = !0;
      }),
      (ye.prototype.getTexture = function (e) {
        switch (e) {
          case "lightSprite":
            return H;
          case "glow":
            return b;
          case "point":
            return w;
          default:
            return null;
        }
      }),
      (ye.prototype.quaternionBetweenVecs = function (e, t) {
        var i = new THREE.Vector3();
        i.crossVectors(e, t),
          i.normalize(),
          0 == i.x && 0 == i.y && 0 == i.z && (i = t);
        var r = GeomUtils.angleBetweenVecs(e, t),
          n = new THREE.Quaternion();
        return n.setFromAxisAngle(i, r), n.normalize(), n;
      }),
      (ye.prototype.getCenter = function () {
        return centerAnchor.position;
      }),
      (ye.prototype.openInitAbout = function () {
        ve &&
          a.firstTime &&
          ($("#bg-widget-curtain").hide(),
          // ui.showHelpLink(),
          // ui.showAboutLink(),
          // ui.openAbout(),
          (a.firstTime = !1),
          (a.uiEnabled = !0));
        // ui.showNav()
      }),
      ye
    );
  })(),
  CompassPointer = (function () {
    var e,
      t = function (t) {
        THREE.Object3D.call(this), (e = void 0 === t ? 200 : t);
        var i = 0.1,
          r = 0.5,
          n = 0.5,
          o = (new THREE.Color(16711680), new THREE.Geometry());
        o.vertices.push(new THREE.Vector3(0, i, 0)),
          o.vertices.push(new THREE.Vector3(i, 0, 0)),
          o.vertices.push(new THREE.Vector3(0, -i, 0)),
          o.vertices.push(new THREE.Vector3(-i, 0, 0)),
          o.vertices.push(new THREE.Vector3(0, 0, -n)),
          o.faces.push(new THREE.Face3(0, 1, 4)),
          o.faces.push(new THREE.Face3(1, 2, 4)),
          o.faces.push(new THREE.Face3(2, 3, 4)),
          o.faces.push(new THREE.Face3(3, 0, 4)),
          o.computeFaceNormals();
        var a = new THREE.Geometry();
        a.vertices.push(new THREE.Vector3(0, i, 0)),
          a.vertices.push(new THREE.Vector3(i, 0, 0)),
          a.vertices.push(new THREE.Vector3(0, -i, 0)),
          a.vertices.push(new THREE.Vector3(-i, 0, 0)),
          a.vertices.push(new THREE.Vector3(0, 0, r)),
          a.faces.push(new THREE.Face3(0, 1, 4)),
          a.faces.push(new THREE.Face3(1, 2, 4)),
          a.faces.push(new THREE.Face3(2, 3, 4)),
          a.faces.push(new THREE.Face3(3, 0, 4)),
          a.computeFaceNormals();
        var s = new THREE.MeshLambertMaterial({
            color: 16711680,
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: 1,
          }),
          l = new THREE.MeshLambertMaterial({
            color: 11184810,
            side: THREE.DoubleSide,
            transparent: !0,
            opacity: 1,
          }),
          h = new THREE.Mesh(o, s),
          c = new THREE.Mesh(a, l);
        this.add(h), this.add(c), this.scale.set(e, e, e);
      };
    return (
      (t.prototype = Object.create(THREE.Object3D.prototype)),
      (t.prototype.getScalar = function () {
        return e;
      }),
      t
    );
  })(),
  DriftCamControls = (function () {
    var e,
      t,
      i,
      r,
      n,
      o = 0,
      a = 18,
      s = 0,
      l = 0,
      h = 0,
      c = 0,
      u = 0.25 * -Math.PI;
    maxTiltAngle = 0.25 * Math.PI;
    var p,
      d,
      f,
      m = -450,
      E = 450,
      g = !1,
      v = !1,
      y = !1,
      T = !1,
      R = 0,
      x = 0.003,
      H = 0.6,
      b = 0.07,
      w = 0,
      q = !1,
      M = 0,
      _ = 0,
      S = 0,
      C = 0,
      L = 0,
      A = function (o) {
        (e = this),
          (t = o),
          (this.lookSpeed = 0.002),
          (this.moveSpeed = 8),
          (this.lookDrag = 0.05),
          (this.moveDrag = 0.5),
          (this.lastSpinDirection = 1),
          (i = new THREE.Vector3()),
          (r = new THREE.Vector3()),
          (n = new THREE.Vector3()),
          (p = new TWEEN.Tween()),
          (this.mousedown = !1),
          (this.dragging = !1),
          (this.autoFloat = !0),
          (this.animating = !1),
          (this.suspended = !1),
          this.init();
      };
    return (
      (A.prototype = {
        constructor: A,
        init: function () {
          i.set(t.position.x, t.position.y, t.position.z),
            this.calculateLookVector();
        },
        onMouseLeave: function () {
          (this.mousedown = !1), (this.dragging = !1);
        },
        onMouseDown: function (e) {
          (C = _),
            (L = S),
            (_ = e.clientX),
            (S = e.clientY),
            (this.mousedown = !0);
        },
        onMouseUp: function () {
          (this.mousedown = !1), (this.dragging = !1);
        },
        onMouseMove: function (e) {
          if (
            ((C = _), (L = S), (_ = e.clientX), (S = e.clientY), this.mousedown)
          ) {
            this.dragging ||
              (vis.getCurrentVis().clearLastHover(), (this.dragging = !0));
            var t = S - L;
            (s += -(_ - C) * this.lookSpeed),
              (h += -t * this.lookSpeed),
              (h = Math.max(Math.min(h, maxTiltAngle), u));
          }
        },
        onMouseWheel: function (e) {
          new THREE.Vector3(r.x, 0, r.z).normalize(),
            (M = e > 0 ? 1 : e < 0 ? -1 : 0),
            (w = sceneManager.getClock().getElapsedTime() + b),
            (q = !0);
        },
        //   onKeyDown: function(e) {
        //       switch (e.keyCode) {
        //       case 38:
        //           g = !0;
        //           break;
        //       case 40:
        //           v = !0;
        //           break;
        //       case 37:
        //           y = !0;
        //           break;
        //       case 39:
        //           T = !0
        //       }
        //   },
        //   onKeyUp: function(e) {
        //       switch (ui.previewOpen && ui.closeItemPreview(),
        //       e.keyCode) {
        //       case 38:
        //           g = !1;
        //           break;
        //       case 40:
        //           v = !1;
        //           break;
        //       case 37:
        //           y = !1;
        //           break;
        //       case 39:
        //           T = !1
        //       }
        //   },
        forceStop: function () {
          (this.mousedown = !1),
            (this.dragging = !1),
            (g = !1),
            (v = !1),
            (y = !1),
            (T = !1);
        },
        update: function () {
          var e = sceneManager.getCamera().position.clone();
          if (!this.suspended && !this.animating)
            if (f)
              i.set(d.position.x, d.position.y, d.position.z),
                i.sub(attachedOffset),
                t.position.set(i.x, i.y, i.z),
                t.lookAt(d.position);
            else {
              if (this.dragging) {
                var l = 0.25,
                  h = (_ - 0.5 * window.innerWidth) / window.innerWidth;
                if (Math.abs(h) > l) {
                  var c = 0.06;
                  s += -(h > 0 ? (h - l) * c : (h + l) * c);
                }
              }
              if (q) {
                (o += 0.22 * this.moveSpeed * M) > 0
                  ? (o = Math.min(o, a))
                  : o < 0 && (o = Math.max(o, -a));
                var u = sceneManager.getClock().getElapsedTime();
                w < u && (q = !1);
              }
              var p = t.position.clone().add(r.clone().multiplyScalar(o));
              if (
                (i.set(p.x, p.y, p.z),
                (i.y = Math.min(Math.max(i.y, m), E)),
                (o *= 0.95),
                this.autoFloat)
              ) {
                var b = r.clone();
                (b.y = 0), b.normalize(), i.add(b.multiplyScalar(R));
              }
              if (
                (t.position.lerp(i, this.moveDrag),
                this.updateAngles(),
                this.calculateLookVector(),
                g && !v && (o = 2 * this.moveSpeed),
                v && !g && ((o = 2 * -this.moveSpeed), (R = 0)),
                y && !T && (s += 15 * this.lookSpeed),
                T && !y && (s -= 15 * this.lookSpeed),
                this.autoFloat && !g && !v && !y && !T)
              ) {
                var S = new THREE.Vector3(r.x, 0, r.z);
                p = t.position.clone().add(S.multiplyScalar(R));
                i.set(p.x, p.y, p.z), (R += x) >= H && (R = H);
              }
            }
          (n = sceneManager.getCamera().position.clone().sub(e)).normalize();
        },
        animate: function (n) {
          console.log("参数", n);
          p.stop(), this.calculateLookVector();
          var a,
            u = t.position.clone(),
            d = n.pos.clone(),
            f = !1;
          if (null != n.look) {
            f = !0;
            var m = d.clone().sub(u).length();
            0 === m && (m = 1e3),
              (startLook = r.clone().multiplyScalar(m).add(t.position)),
              (a = n.look.clone());
          }
          var E = !1,
            g = !1;
          void 0 !== n.dynamicTarget &&
            ((E = !0), void 0 !== n.relativeVector && (g = !0));
          var v,
            y = !1;
          if ("spiral" === n.motion) {
            y = !0;
            var T = new THREE.Matrix4();
            T.getInverse(t.matrixWorld);
            var R = d.clone().applyMatrix4(T);
            (v = R.x >= 0 ? -1 : 1), (this.lastSpinDirection = v);
          }
          var x = !1,
            H = o,
            b = r.clone(),
            w = u.clone();
          !0 === n.interpolate && (x = !0),
            (this.animating = !0),
            (o = 0),
            (p = new TWEEN.Tween({
              t: 0,
            })
              .to(
                {
                  t: 1,
                },
                n.duration
              )
              .easing(n.easing || TWEEN.Easing.Quadratic.InOut)
              .onUpdate(function () {
                E &&
                  ((a = n.dynamicTarget.position),
                  g && (d = a.clone().sub(n.relativeVector)));
                var i = lerpVec3(u, d, this.t);
                if (y) {
                  var r = i.clone().sub(d),
                    o = (r.length(), this.t * Math.PI * 2 * v),
                    s = new THREE.Vector3(0, 1, 0),
                    l = new THREE.Quaternion();
                  l.setFromAxisAngle(s, o),
                    r.applyQuaternion(l),
                    (i = r.add(d));
                }
                if (x) {
                  var h = map(this.t, 0, 0.22, 0.1, 1);
                  (h = Math.min(Math.max(h, 0), 1)),
                    t.position.lerpVectors(w, i, h),
                    (H *= 0.97),
                    w.add(b.clone().multiplyScalar(H));
                } else t.position.copy(i);
                if (f) {
                  var c;
                  if (y) {
                    var p = Math.min(5 * this.t, 1);
                    c = lerpVec3(startLook, a, p);
                  } else c = lerpVec3(startLook, a, this.t);
                  t.lookAt(c);
                }
                e.calculateLookVector();
              })
              .onComplete(function () {
                if (
                  (i.set(t.position.x, t.position.y, t.position.z),
                  e.calculateLookVector(),
                  f)
                ) {
                  var u = r.clone();
                  (u.y = 0),
                    u.normalize(),
                    (l = s = 1.5 * Math.PI - Math.atan2(u.z, u.x));
                  var p = GeomUtils.angleBetweenVecs(u, r);
                  isNaN(p) && (p = 0),
                    E
                      ? n.dynamicTarget.position.y < i.y && (p = -p)
                      : a.y < i.y && (p = -p),
                    (c = h = p),
                    (o = 0);
                }
                void 0 !== n.callback && n.callback(), (e.animating = !1);
              })
              .start());
        },
        stopAnimation: function () {
          p.stop();
        },
        setAutoFloat: function (e) {
          e
            ? ((this.autoFloat = !0), (R = 0))
            : ((this.autoFloat = !1), (R = 0));
        },
        setVerticalLimits: function (e, t) {
          (m = e), (E = t);
        },
        setTargetPosition: function (e) {
          i.set(e.x, e.y, e.z);
        },
        setTargetPositionToCurrent: function () {
          i.set(t.position.x, t.position.y, t.position.z);
        },
        attachToItem: function (e, t) {
          (d = e), (attachedOffset = t), (f = !0);
        },
        detatchFomItem: function () {
          if (f) {
            var e = d.position.clone().sub(attachedOffset),
              t = d.position.clone().clone().sub(e),
              i = t.clone();
            (i.y = 0), (l = s = 1.5 * Math.PI - Math.atan2(i.z, i.x));
            var r = t.clone(),
              n = Math.sqrt(r.x * r.x + r.y * r.y);
            (c = h = Math.atan2(r.y, n)),
              this.updateAngles(),
              this.calculateLookVector(),
              (R = 0),
              (o = 0),
              (f = !1),
              null,
              (attachedOffset = null);
          }
        },
        calculateLookVector: function () {
          var e = new THREE.Vector3(0, 0, -1);
          e.applyQuaternion(t.quaternion),
            e.normalize(),
            (r = e),
            (t.lookVector = r);
        },
        updateAngles: function () {
          (l = lerp(l, s, this.lookDrag)), (c = lerp(c, h, this.lookDrag));
          var e = new THREE.Quaternion();
          e.setFromAxisAngle(new THREE.Vector3(0, 1, 0), l);
          var i = new THREE.Quaternion();
          i.setFromAxisAngle(new THREE.Vector3(1, 0, 0), c),
            e.multiply(i),
            t.quaternion.set(e.x, e.y, e.z, e.w);
        },
        getTargetHeadingAngle: function () {
          return s;
        },
        setTargetHeadingAngle: function (e) {
          s = e;
        },
        getTargetTiltAngle: function () {
          return h;
        },
        setTargetTiltAngle: function (e) {
          h = e;
        },
        getLookVector: function () {
          return r;
        },
        getMoveVector: function () {
          return n;
        },
      }),
      A
    );
  })();
_typeface_js &&
  _typeface_js.loadFace &&
  _typeface_js.loadFace({
    glyphs: {
      S: {
        x_min: 52.78125,
        x_max: 761.171875,
        ha: 824,
        o: "m 630 718 q 612 774 626 744 q 573 829 598 804 q 511 870 548 854 q 422 886 473 886 q 345 873 380 886 q 285 838 311 861 q 245 786 259 816 q 231 722 231 757 q 263 631 231 669 q 358 579 295 593 l 505 547 q 695 447 629 519 q 761 270 761 375 q 737 161 761 213 q 669 68 713 108 q 562 3 625 27 q 420 -20 500 -20 q 265 5 331 -20 q 154 73 200 31 q 84 167 109 115 q 52 272 59 219 l 183 313 q 203 234 187 272 q 249 166 219 195 q 321 120 279 137 q 419 102 363 102 q 571 148 520 102 q 622 259 622 194 q 586 354 622 312 q 475 412 550 397 l 334 443 q 161 534 229 466 q 94 712 94 601 q 119 823 94 770 q 188 916 144 876 q 291 981 231 957 q 419 1005 351 1005 q 561 982 502 1005 q 660 923 620 959 q 722 844 700 887 q 752 761 744 801 l 630 718 ",
      },
      "\xa6": {
        x_min: 125.015625,
        x_max: 238.90625,
        ha: 364,
        o: "m 238 1090 l 238 536 l 125 536 l 125 1090 l 238 1090 m 238 348 l 238 -205 l 125 -205 l 125 348 l 238 348 ",
      },
      "/": {
        x_min: 0,
        x_max: 602.828125,
        ha: 603,
        o: "m 126 0 l 0 0 l 476 984 l 602 984 l 126 0 ",
      },
      y: {
        x_min: 13.890625,
        x_max: 712.5625,
        ha: 726,
        o: "m 134 -279 l 301 73 l 13 668 l 163 668 l 372 206 l 572 668 l 712 668 l 277 -279 l 134 -279 ",
      },
      "\u017d": {
        x_min: 62.5,
        x_max: 822.28125,
        ha: 878,
        o: "m 62 0 l 62 136 l 650 858 l 76 858 l 76 984 l 815 984 l 815 852 l 225 127 l 822 127 l 822 0 l 62 0 m 333 1219 l 446 1130 l 564 1219 l 692 1219 l 529 1054 l 362 1054 l 207 1219 l 333 1219 ",
      },
      "\xc1": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 m 546 1054 l 416 1054 l 556 1219 l 737 1219 l 546 1054 ",
      },
      g: {
        x_min: 62.5,
        x_max: 705.609375,
        ha: 803,
        o: "m 188 -6 q 245 -124 195 -77 q 370 -170 294 -170 q 525 -116 476 -170 q 575 45 575 -62 l 575 141 q 498 63 551 95 q 370 31 445 31 q 247 56 304 31 q 150 122 191 80 q 86 225 109 165 q 63 355 63 284 q 86 482 63 423 q 148 585 108 541 q 245 654 188 629 q 370 680 301 680 q 500 652 448 680 q 576 575 551 625 l 576 668 l 705 668 l 705 50 q 688 -74 705 -13 q 632 -181 672 -134 q 529 -256 593 -227 q 370 -284 465 -284 q 254 -265 308 -284 q 160 -213 201 -247 q 93 -135 119 -180 q 62 -36 68 -90 l 188 -6 m 390 141 q 527 200 475 141 q 580 355 580 258 q 527 511 580 452 q 390 569 475 569 q 250 511 302 569 q 197 355 197 452 q 249 199 197 256 q 390 141 301 141 ",
      },
      "\xb2": {
        x_min: 84.734375,
        x_max: 456.984375,
        ha: 540,
        o: "m 93 788 q 89 811 90 800 q 88 832 88 823 q 101 894 88 865 q 137 945 113 923 q 195 981 161 968 q 272 994 229 994 q 348 981 315 994 q 405 946 381 968 q 441 895 429 925 q 454 834 454 866 q 427 747 454 786 q 356 682 401 709 l 256 619 q 229 595 241 608 q 213 568 216 583 l 456 568 l 456 477 l 84 477 l 84 495 q 112 609 84 558 q 202 697 140 659 l 286 748 q 345 836 345 784 q 326 884 345 863 q 270 905 306 905 q 213 883 234 905 q 191 825 191 861 q 192 809 191 820 q 195 788 193 798 l 93 788 ",
      },
      "\u2013": {
        x_min: 90.28125,
        x_max: 801.453125,
        ha: 892,
        o: "m 90 341 l 90 455 l 801 455 l 801 341 l 90 341 ",
      },
      "\xeb": {
        x_min: 56.953125,
        x_max: 697.28125,
        ha: 753,
        o: "m 561 402 q 512 524 558 475 q 377 573 466 573 q 303 559 336 573 q 247 520 270 544 q 211 465 225 495 q 195 402 197 434 l 561 402 m 693 190 q 652 107 679 145 q 586 40 625 69 q 500 -4 548 12 q 393 -20 451 -20 q 265 2 326 -20 q 157 72 204 26 q 84 184 111 118 q 56 336 56 251 q 83 479 56 415 q 153 591 109 544 q 255 663 197 637 q 376 688 313 688 q 513 663 452 688 q 613 591 573 637 q 675 481 654 545 q 697 338 697 416 q 696 315 697 326 q 694 297 695 304 l 191 297 q 208 215 193 252 q 250 150 223 177 q 314 109 277 123 q 393 94 351 94 q 518 133 475 94 q 580 229 561 172 l 693 190 m 174 862 q 197 919 174 895 q 253 943 220 943 q 312 919 288 943 q 335 862 335 895 q 312 804 335 827 q 253 782 288 782 q 197 804 220 782 q 174 862 174 827 m 434 862 q 457 919 434 895 q 515 943 480 943 q 572 919 548 943 q 595 862 595 895 q 572 804 595 827 q 515 782 548 782 q 457 804 480 782 q 434 862 434 827 ",
      },
      "\u0192": {
        x_min: -41.671875,
        x_max: 661.15625,
        ha: 668,
        o: "m 273 552 l 120 552 l 120 668 l 297 668 l 329 825 q 361 916 338 877 q 416 978 384 954 q 484 1014 447 1002 q 558 1026 520 1026 q 620 1023 598 1026 q 661 1012 641 1019 l 661 897 q 627 904 645 901 q 587 907 609 907 q 549 903 569 907 q 511 886 529 900 q 477 847 493 873 q 454 779 462 822 l 431 668 l 611 668 l 611 552 l 408 552 l 294 -18 q 261 -109 283 -70 q 207 -171 238 -147 q 139 -207 176 -195 q 65 -219 102 -219 q 0 -215 22 -219 q -41 -205 -22 -212 l -41 -90 q -7 -97 -26 -94 q 36 -100 11 -100 q 74 -95 54 -100 q 112 -78 94 -91 q 145 -40 130 -65 q 169 27 161 -15 l 273 552 ",
      },
      "\xce": {
        x_min: -37.71875,
        x_max: 447.046875,
        ha: 389,
        o: "m 125 0 l 125 984 l 263 984 l 263 0 l 125 0 m -37 1054 l 117 1219 l 284 1219 l 447 1054 l 319 1054 l 201 1143 l 88 1054 l -37 1054 ",
      },
      e: {
        x_min: 56.953125,
        x_max: 697.28125,
        ha: 753,
        o: "m 561 402 q 512 524 558 475 q 377 573 466 573 q 303 559 336 573 q 247 520 270 544 q 211 465 225 495 q 195 402 197 434 l 561 402 m 693 190 q 652 107 679 145 q 586 40 625 69 q 500 -4 548 12 q 393 -20 451 -20 q 265 2 326 -20 q 157 72 204 26 q 84 184 111 118 q 56 336 56 251 q 83 479 56 415 q 153 591 109 544 q 255 663 197 637 q 376 688 313 688 q 513 663 452 688 q 613 591 573 637 q 675 481 654 545 q 697 338 697 416 q 696 315 697 326 q 694 297 695 304 l 191 297 q 208 215 193 252 q 250 150 223 177 q 314 109 277 123 q 393 94 351 94 q 518 133 475 94 q 580 229 561 172 l 693 190 ",
      },
      "\xc3": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 m 702 1201 q 665 1085 702 1123 q 569 1047 627 1047 q 515 1055 538 1047 q 470 1079 491 1063 l 449 1093 q 424 1107 436 1101 q 398 1112 412 1112 q 363 1098 376 1112 q 349 1051 349 1083 l 255 1051 l 255 1073 q 293 1189 255 1151 q 390 1227 331 1227 q 445 1218 419 1227 q 491 1195 470 1208 l 512 1183 q 539 1169 527 1175 q 565 1163 551 1163 q 596 1174 583 1163 q 609 1212 609 1184 l 609 1223 l 702 1223 l 702 1201 ",
      },
      J: {
        x_min: 27.78125,
        x_max: 630.609375,
        ha: 742,
        o: "m 27 356 l 163 387 l 163 294 q 211 150 163 195 q 333 105 258 105 q 451 152 408 105 q 494 284 494 198 l 494 984 l 630 984 l 630 294 q 610 172 630 229 q 551 72 590 115 q 457 4 512 29 q 334 -20 402 -20 q 205 1 262 -20 q 109 65 148 23 q 48 164 69 106 q 27 293 27 222 l 27 356 ",
      },
      "\xbb": {
        x_min: 27.78125,
        x_max: 612.546875,
        ha: 654,
        o: "m 298 137 l 480 402 l 298 668 l 427 668 l 612 402 l 427 137 l 298 137 m 27 137 l 209 402 l 27 668 l 156 668 l 341 402 l 156 137 l 27 137 ",
      },
      "\xa9": {
        x_min: 62.5,
        x_max: 1077.859375,
        ha: 1140,
        o: "m 170 493 q 201 329 170 405 q 286 199 231 254 q 412 112 340 144 q 568 80 484 80 q 723 112 651 80 q 850 199 795 144 q 934 329 904 254 q 965 493 965 405 q 934 655 965 580 q 850 786 904 730 q 723 872 795 841 q 568 904 651 904 q 412 872 484 904 q 286 786 340 841 q 201 655 231 730 q 170 493 170 580 m 62 493 q 102 691 62 598 q 210 854 141 784 q 370 965 279 925 q 568 1005 462 1005 q 766 965 673 1005 q 928 854 859 925 q 1037 691 997 784 q 1077 493 1077 598 q 1037 293 1077 387 q 928 130 997 200 q 766 20 859 61 q 568 -20 673 -20 q 370 20 462 -20 q 210 130 279 61 q 102 293 141 200 q 62 493 62 387 m 570 686 q 509 674 538 686 q 456 638 479 662 q 419 578 433 613 q 405 495 405 543 q 419 413 405 448 q 455 353 433 377 q 508 316 477 329 q 572 304 538 304 q 637 315 611 304 q 681 343 663 326 q 709 380 698 361 q 723 416 719 400 l 818 375 q 788 316 808 345 q 738 261 769 286 q 666 220 708 236 q 572 205 625 205 q 461 227 512 205 q 375 288 411 250 q 318 380 338 327 q 297 495 297 433 q 318 611 297 558 q 375 703 338 665 q 463 763 412 741 q 570 784 513 784 q 666 769 625 784 q 738 729 708 754 q 786 672 768 704 q 813 611 804 641 l 716 570 q 701 611 711 590 q 673 647 691 632 q 630 675 655 663 q 570 686 605 686 ",
      },
      "\u02d8": {
        x_min: 48.609375,
        x_max: 454.203125,
        ha: 503,
        o: "m 251 757 q 165 773 202 757 q 102 818 127 790 q 62 881 76 845 q 48 954 48 916 l 150 954 q 175 893 151 922 q 251 863 198 863 q 327 893 304 863 q 352 954 350 922 l 454 954 q 441 881 454 916 q 402 818 427 845 q 339 773 377 790 q 251 757 301 757 ",
      },
      "\xf2": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 173 957 l 337 957 l 456 754 l 348 754 l 173 957 ",
      },
      "\ufb04": {
        x_min: 27.78125,
        x_max: 1166.765625,
        ha: 1278,
        o: "m 151 780 q 168 879 151 836 q 215 951 186 922 q 285 995 245 980 q 370 1009 325 1009 q 424 1004 404 1009 q 448 995 444 998 l 448 879 q 429 884 443 882 q 391 887 416 887 q 356 882 375 887 q 321 865 337 877 q 295 830 305 852 q 286 773 286 808 l 286 668 l 590 668 l 590 780 q 607 879 590 836 q 654 951 625 922 q 724 995 684 980 q 809 1009 763 1009 q 863 1004 843 1009 q 887 995 883 998 l 887 879 q 868 884 882 882 q 830 887 855 887 q 795 882 813 887 q 760 865 776 877 q 734 830 744 852 q 725 773 725 808 l 725 668 l 1037 668 l 1037 1005 l 1166 1005 l 1166 0 l 1037 0 l 1037 550 l 725 550 l 725 0 l 590 0 l 590 550 l 286 550 l 286 0 l 151 0 l 151 550 l 27 550 l 27 668 l 151 668 l 151 780 ",
      },
      "^": {
        x_min: 34.71875,
        x_max: 688.9375,
        ha: 724,
        o: "m 551 491 l 362 850 l 172 491 l 34 491 l 304 986 l 419 986 l 688 491 l 551 491 ",
      },
      "\xab": {
        x_min: 41.671875,
        x_max: 626.4375,
        ha: 654,
        o: "m 226 137 l 41 402 l 226 668 l 355 668 l 173 402 l 355 137 l 226 137 m 497 137 l 312 402 l 497 668 l 626 668 l 444 402 l 626 137 l 497 137 ",
      },
      D: {
        x_min: 125.015625,
        x_max: 937.578125,
        ha: 1e3,
        o: "m 462 120 q 591 143 530 120 q 698 212 652 166 q 770 327 744 258 q 797 490 797 397 q 770 653 797 583 q 699 770 744 723 q 593 840 654 816 q 465 863 533 863 l 261 863 l 261 120 l 462 120 m 125 0 l 125 984 l 469 984 q 647 952 562 984 q 797 858 733 920 q 899 703 861 795 q 937 490 937 611 q 899 277 937 369 q 795 124 861 186 q 645 31 730 62 q 466 0 559 0 l 125 0 ",
      },
      "\xff": {
        x_min: 13.890625,
        x_max: 712.5625,
        ha: 726,
        o: "m 134 -279 l 301 73 l 13 668 l 163 668 l 372 206 l 572 668 l 712 668 l 277 -279 l 134 -279 m 152 862 q 175 919 152 895 q 231 943 198 943 q 290 919 266 943 q 313 862 313 895 q 290 804 313 827 q 231 782 266 782 q 175 804 198 782 q 152 862 152 827 m 412 862 q 435 919 412 895 q 493 943 458 943 q 550 919 526 943 q 573 862 573 895 q 550 804 573 827 q 493 782 526 782 q 435 804 458 782 q 412 862 412 827 ",
      },
      "\xed": {
        x_min: 111.125,
        x_max: 402.359375,
        ha: 351,
        o: "m 227 754 l 117 754 l 238 957 l 402 957 l 227 754 m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 ",
      },
      "\u02c6": {
        x_min: 48.609375,
        x_max: 486.15625,
        ha: 535,
        o: "m 48 757 l 193 950 l 341 950 l 486 757 l 363 757 l 266 869 l 169 757 l 48 757 ",
      },
      w: {
        x_min: 20.828125,
        x_max: 1080.640625,
        ha: 1101,
        o: "m 622 668 l 795 165 l 943 668 l 1080 668 l 863 0 l 729 0 l 551 508 l 377 0 l 240 0 l 20 668 l 163 668 l 313 165 l 487 668 l 622 668 ",
      },
      $: {
        x_min: 69.453125,
        x_max: 748.671875,
        ha: 826,
        o: "m 372 -162 l 372 -18 q 245 15 300 -11 q 154 81 191 43 q 95 165 116 119 q 69 256 75 211 l 201 298 q 215 233 204 265 q 248 175 227 201 q 300 129 269 148 q 372 104 330 111 l 372 394 l 337 401 q 168 487 230 423 q 106 654 106 551 q 126 748 106 704 q 181 828 145 793 q 265 887 216 863 q 372 918 313 911 l 372 1063 l 480 1063 l 480 916 q 590 884 544 908 q 666 829 636 861 q 714 760 697 797 q 740 690 732 723 l 615 644 q 602 686 612 663 q 576 729 593 708 q 536 767 559 750 q 480 793 512 784 l 480 508 l 501 504 q 683 410 618 480 q 748 245 748 340 q 731 155 748 200 q 680 75 713 111 q 597 14 647 38 q 480 -18 547 -9 l 480 -162 l 372 -162 m 612 238 q 580 320 612 283 q 480 372 548 356 l 480 104 q 580 153 548 116 q 612 238 612 190 m 244 659 q 272 581 244 615 q 372 533 301 547 l 372 797 q 277 748 311 786 q 244 659 244 711 ",
      },
      "\u0237": {
        x_min: -20.828125,
        x_max: 241.6875,
        ha: 353,
        o: "m 111 668 l 241 668 l 241 -77 q 193 -227 241 -169 q 56 -284 144 -284 q 2 -281 19 -284 q -20 -275 -13 -277 l -20 -166 q -2 -168 -15 -168 q 20 -169 9 -169 q 91 -143 72 -169 q 111 -72 111 -118 l 111 668 ",
      },
      "\\": {
        x_min: 0,
        x_max: 602.828125,
        ha: 603,
        o: "m 0 984 l 129 984 l 602 0 l 473 0 l 0 984 ",
      },
      "\xcc": {
        x_min: -61,
        x_max: 263.90625,
        ha: 389,
        o: "m 125 0 l 125 984 l 263 984 l 263 0 l 125 0 m -61 1219 l 118 1219 l 259 1054 l 130 1054 l -61 1219 ",
      },
      "\xb5": {
        x_min: 111.125,
        x_max: 688.9375,
        ha: 793,
        o: "m 558 80 q 475 3 530 27 q 361 -20 419 -20 q 295 -13 323 -20 q 241 6 266 -5 l 241 -263 l 111 -263 l 111 668 l 241 668 l 241 266 q 250 200 241 231 q 276 145 258 169 q 322 108 294 122 q 393 94 351 94 q 511 141 472 94 q 551 265 551 188 l 551 668 l 682 668 l 682 123 q 684 48 682 83 q 688 0 686 13 l 563 0 q 559 35 561 11 q 558 80 558 59 ",
      },
      "\xc7": {
        x_min: 62.5,
        x_max: 986.1875,
        ha: 1042,
        o: "m 469 -86 l 511 -19 q 341 24 422 -12 q 197 126 259 61 q 99 284 136 191 q 62 493 62 376 q 104 711 62 616 q 214 872 145 807 q 371 971 283 937 q 551 1005 459 1005 q 707 983 636 1005 q 833 920 777 961 q 927 822 888 880 q 984 693 965 763 l 858 648 q 752 820 830 761 q 551 880 673 880 q 421 856 484 880 q 309 783 358 832 q 230 661 259 734 q 201 493 201 588 q 230 324 201 397 q 309 202 259 251 q 421 128 358 152 q 551 104 484 104 q 663 122 612 104 q 754 171 715 140 q 822 246 794 202 q 865 340 850 290 l 986 295 q 933 179 968 233 q 850 84 898 125 q 741 16 802 43 q 609 -18 680 -9 l 580 -63 q 677 -94 638 -63 q 715 -177 715 -125 q 705 -225 715 -202 q 676 -264 695 -247 q 625 -292 657 -281 q 552 -302 594 -302 q 460 -283 500 -302 q 400 -238 420 -263 l 451 -176 q 489 -206 463 -190 q 551 -223 515 -223 q 596 -212 576 -223 q 616 -177 616 -201 q 600 -145 616 -158 q 555 -133 584 -133 q 515 -140 533 -133 l 469 -86 ",
      },
      "\u2019": {
        x_min: 55.5625,
        x_max: 255.578125,
        ha: 311,
        o: "m 55 911 q 82 971 55 945 q 150 997 109 997 q 223 966 191 997 q 255 875 255 936 q 236 763 255 809 q 189 687 218 718 q 127 641 161 657 q 63 622 94 626 l 63 688 q 140 741 111 700 q 170 829 169 782 q 161 824 168 826 q 143 822 154 822 q 81 845 106 822 q 55 911 55 869 ",
      },
      "-": {
        x_min: 62.5,
        x_max: 438.921875,
        ha: 501,
        o: "m 62 341 l 62 455 l 438 455 l 438 341 l 62 341 ",
      },
      Q: {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1013 284 1051 375 q 912 129 975 194 l 1027 0 l 934 -81 l 815 50 q 691 -3 757 13 q 556 -20 625 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 729 147 651 104 l 558 338 l 652 420 l 825 226 q 888 341 865 275 q 912 493 912 406 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 ",
      },
      M: {
        x_min: 125.015625,
        x_max: 1188.984375,
        ha: 1314,
        o: "m 1054 0 l 1054 766 l 718 0 l 593 0 l 259 766 l 259 0 l 125 0 l 125 984 l 309 984 l 657 183 l 1007 984 l 1188 984 l 1188 0 l 1054 0 ",
      },
      C: {
        x_min: 62.5,
        x_max: 986.1875,
        ha: 1042,
        o: "m 551 -20 q 367 13 455 -20 q 211 112 279 47 q 103 273 144 177 q 62 493 62 369 q 104 711 62 616 q 214 872 145 807 q 371 971 283 937 q 551 1005 459 1005 q 707 983 636 1005 q 833 920 777 961 q 927 822 888 880 q 984 693 965 763 l 858 648 q 752 820 830 761 q 551 880 673 880 q 421 856 484 880 q 309 783 358 832 q 230 661 259 734 q 201 493 201 588 q 230 324 201 397 q 309 202 259 251 q 421 128 358 152 q 551 104 484 104 q 665 122 613 104 q 756 171 716 140 q 822 246 795 202 q 865 340 850 290 l 986 295 q 927 168 966 226 q 834 68 888 109 q 707 2 779 26 q 551 -20 636 -20 ",
      },
      "\u0153": {
        x_min: 55.5625,
        x_max: 1245.9375,
        ha: 1302,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 1109 402 q 1060 524 1107 475 q 926 573 1013 573 q 852 559 884 573 q 796 520 819 544 q 759 465 773 495 q 744 402 745 434 l 1109 402 m 1241 190 q 1200 107 1227 145 q 1135 40 1173 69 q 1048 -4 1097 12 q 941 -20 1000 -20 q 788 13 859 -20 q 670 113 718 47 q 555 15 626 51 q 397 -20 484 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 q 555 652 484 688 q 670 552 626 615 q 782 652 715 616 q 925 688 850 688 q 1061 663 1001 688 q 1162 591 1122 637 q 1224 481 1202 545 q 1245 338 1245 416 q 1245 315 1245 327 q 1243 297 1244 304 l 740 297 q 757 215 741 252 q 800 152 773 179 q 863 109 827 125 q 941 94 900 94 q 1066 133 1023 94 q 1129 229 1109 172 l 1241 190 ",
      },
      "!": {
        x_min: 125.015625,
        x_max: 306.96875,
        ha: 432,
        o: "m 262 281 l 169 281 l 133 984 l 297 984 l 262 281 m 125 83 q 151 147 125 120 q 215 175 177 175 q 279 147 252 175 q 306 83 306 120 q 279 19 306 45 q 215 -6 252 -6 q 151 19 177 -6 q 125 83 125 45 ",
      },
      "\xe7": {
        x_min: 55.5625,
        x_max: 694.5,
        ha: 736,
        o: "m 305 -87 l 350 -18 q 231 20 284 -9 q 138 96 177 50 q 77 204 98 143 q 55 334 55 265 q 81 476 55 411 q 152 588 106 541 q 259 662 197 636 q 391 688 320 688 q 509 670 458 688 q 596 620 559 651 q 655 552 633 590 q 688 476 677 513 l 570 426 q 551 476 563 451 q 517 521 538 501 q 465 554 495 541 q 391 568 434 568 q 315 552 351 568 q 250 508 279 537 q 205 435 222 479 q 188 334 188 391 q 205 234 188 277 q 250 160 222 190 q 315 115 277 130 q 393 100 352 100 q 471 113 438 100 q 525 148 504 127 q 560 193 547 169 q 579 237 573 218 l 694 187 q 663 122 683 155 q 613 61 643 88 q 542 12 583 33 q 448 -16 501 -8 l 416 -65 q 513 -95 475 -65 q 551 -179 551 -126 q 512 -264 551 -227 q 388 -301 473 -301 q 296 -283 336 -301 q 236 -240 256 -265 l 287 -177 q 325 -208 300 -191 q 387 -225 351 -225 q 432 -213 412 -225 q 452 -179 452 -202 q 436 -147 452 -159 q 391 -134 420 -134 q 351 -141 369 -134 l 305 -87 ",
      },
      "\xc8": {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 807,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 555 l 680 555 l 680 427 l 261 427 l 261 126 l 723 126 l 723 0 l 125 0 m 207 1219 l 386 1219 l 527 1054 l 398 1054 l 207 1219 ",
      },
      "\ufb01": {
        x_min: 27.78125,
        x_max: 757,
        ha: 839,
        o: "m 370 1009 q 424 1004 404 1009 q 448 995 444 998 l 448 879 q 429 884 443 882 q 391 887 416 887 q 356 882 375 887 q 321 865 337 877 q 295 831 305 852 q 286 775 286 809 l 286 668 l 727 668 l 727 0 l 598 0 l 598 550 l 286 550 l 286 0 l 151 0 l 151 550 l 27 550 l 27 668 l 151 668 l 151 780 q 168 879 151 836 q 215 951 186 922 q 285 995 245 980 q 370 1009 325 1009 m 569 923 q 596 991 569 963 q 662 1018 623 1018 q 729 991 702 1018 q 757 923 757 963 q 729 857 757 884 q 662 830 702 830 q 596 857 623 830 q 569 923 569 884 ",
      },
      "{": {
        x_min: 62.5,
        x_max: 483.375,
        ha: 490,
        o: "m 62 501 q 120 509 93 501 q 169 533 148 516 q 202 576 190 550 q 215 641 215 602 l 215 832 q 279 1026 215 962 q 465 1090 343 1090 l 483 1090 l 483 986 l 465 986 q 358 951 387 986 q 329 840 329 916 l 329 612 q 290 497 329 541 q 184 441 251 454 q 290 385 251 429 q 329 270 329 341 l 329 44 q 358 -66 329 -31 q 465 -101 387 -101 l 483 -101 l 483 -205 l 465 -205 q 279 -141 343 -205 q 215 52 215 -77 l 215 241 q 202 306 215 280 q 169 350 190 333 q 120 374 148 366 q 62 381 93 381 l 62 501 ",
      },
      X: {
        x_min: 13.890625,
        x_max: 843.125,
        ha: 857,
        o: "m 508 493 l 838 0 l 676 0 l 427 384 l 173 0 l 13 0 l 350 493 l 16 984 l 180 984 l 429 598 l 682 984 l 843 984 l 508 493 ",
      },
      "\xf4": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 179 757 l 324 950 l 472 950 l 617 757 l 494 757 l 397 869 l 300 757 l 179 757 ",
      },
      "\xbc": {
        x_min: 76.390625,
        x_max: 1013.96875,
        ha: 1083,
        o: "m 195 393 l 195 733 l 76 733 l 76 805 q 162 834 127 807 q 204 900 197 861 l 302 900 l 302 393 l 195 393 m 112 0 l 759 900 l 884 900 l 240 0 l 112 0 m 561 201 l 807 506 l 925 506 l 925 190 l 1013 190 l 1013 100 l 925 100 l 925 0 l 818 0 l 818 100 l 561 100 l 561 201 m 818 383 l 663 190 l 818 190 l 818 383 ",
      },
      "#": {
        x_min: 69.453125,
        x_max: 955.625,
        ha: 1025,
        o: "m 137 668 l 337 668 l 387 900 l 504 900 l 454 668 l 651 668 l 701 900 l 818 900 l 768 668 l 955 668 l 955 562 l 745 562 l 698 340 l 887 340 l 887 234 l 675 234 l 625 0 l 508 0 l 558 234 l 361 234 l 311 0 l 194 0 l 244 234 l 69 234 l 69 340 l 268 340 l 315 562 l 137 562 l 137 668 m 384 340 l 581 340 l 629 562 l 431 562 l 384 340 ",
      },
      "\xca": {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 807,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 555 l 680 555 l 680 427 l 261 427 l 261 126 l 723 126 l 723 0 l 125 0 m 182 1054 l 337 1219 l 504 1219 l 667 1054 l 539 1054 l 421 1143 l 308 1054 l 182 1054 ",
      },
      ")": {
        x_min: 0,
        x_max: 343.078125,
        ha: 419,
        o: "m 343 440 q 322 229 343 326 q 267 52 302 133 q 183 -97 231 -29 q 79 -222 134 -165 l 0 -152 q 168 111 105 -34 q 230 440 230 256 q 214 613 230 531 q 168 769 198 695 q 95 908 138 843 q 0 1033 52 973 l 79 1102 q 183 977 134 1045 q 267 828 231 909 q 322 650 302 747 q 343 440 343 554 ",
      },
      "\xc5": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 312 401 l 651 401 l 480 843 l 312 401 m 551 1055 q 530 1106 551 1084 q 477 1127 509 1127 q 428 1106 448 1127 q 408 1055 408 1084 q 428 1004 408 1025 q 477 984 448 984 q 530 1004 509 984 q 551 1055 551 1025 m 651 1055 q 633 982 651 1015 q 586 925 615 948 l 954 0 l 807 0 l 700 275 l 263 275 l 159 0 l 13 0 l 380 922 q 329 979 348 945 q 311 1055 311 1013 q 325 1121 311 1090 q 361 1175 338 1152 q 416 1210 384 1197 q 480 1223 447 1223 q 546 1210 515 1223 q 600 1175 577 1197 q 637 1121 623 1152 q 651 1055 651 1090 ",
      },
      "\xf8": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 688 q 489 677 445 688 q 570 644 533 665 l 640 734 l 723 668 l 652 576 q 716 468 693 529 q 738 334 738 406 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 304 -9 348 -20 q 225 22 261 2 l 156 -65 l 73 1 l 141 90 q 78 199 101 137 q 55 334 55 261 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 188 334 q 198 255 188 288 q 223 194 208 222 l 495 547 q 397 572 450 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 596 409 605 375 q 572 472 587 444 l 300 119 q 397 95 341 95 ",
      },
      "\xe2": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 149 757 l 294 950 l 442 950 l 587 757 l 464 757 l 367 869 l 270 757 l 149 757 ",
      },
      "}": {
        x_min: 6.9375,
        x_max: 427.8125,
        ha: 490,
        o: "m 427 381 q 369 374 397 381 q 320 350 341 366 q 287 306 300 333 q 275 241 275 280 l 275 52 q 211 -141 275 -77 q 25 -205 147 -205 l 6 -205 l 6 -101 l 25 -101 q 131 -66 102 -101 q 161 44 161 -31 l 161 270 q 200 385 161 341 q 305 441 238 429 q 200 497 238 454 q 161 612 161 541 l 161 840 q 131 951 161 916 q 25 986 102 986 l 6 986 l 6 1090 l 25 1090 q 211 1026 147 1090 q 275 832 275 962 l 275 641 q 287 576 275 602 q 320 533 300 550 q 369 509 341 516 q 427 501 397 501 l 427 381 ",
      },
      "\u2030": {
        x_min: 76.390625,
        x_max: 1402.890625,
        ha: 1465,
        o: "m 191 691 q 222 612 191 643 q 298 581 254 581 q 375 612 344 581 q 405 691 405 643 q 375 769 405 738 q 298 800 344 800 q 222 769 254 800 q 191 691 191 738 m 76 691 q 94 777 76 737 q 143 846 112 816 q 213 893 173 876 q 298 909 254 909 q 384 893 343 909 q 455 846 425 876 q 504 777 486 816 q 522 691 522 737 q 504 605 522 645 q 455 535 486 565 q 384 488 425 505 q 298 472 343 472 q 213 488 254 472 q 143 535 173 505 q 94 605 112 565 q 76 691 76 645 m 741 208 q 772 129 741 159 q 848 98 804 98 q 925 129 894 98 q 955 208 955 159 q 925 286 955 255 q 848 316 894 316 q 772 286 804 316 q 741 208 741 255 m 187 0 l 834 900 l 959 900 l 315 0 l 187 0 m 1072 208 q 1103 129 1072 159 q 1179 98 1134 98 q 1255 129 1225 98 q 1286 208 1286 159 q 1255 286 1286 255 q 1179 316 1225 316 q 1103 286 1134 316 q 1072 208 1072 255 m 626 208 q 644 293 626 254 q 693 363 662 333 q 763 409 723 393 q 848 426 804 426 q 943 404 900 426 q 1013 343 986 381 q 1084 404 1041 381 q 1179 426 1126 426 q 1264 409 1223 426 q 1336 363 1305 393 q 1384 293 1366 333 q 1402 208 1402 254 q 1384 122 1402 162 q 1336 52 1366 81 q 1264 5 1305 22 q 1179 -11 1223 -11 q 1084 11 1126 -11 q 1013 70 1041 33 q 943 11 986 33 q 848 -11 900 -11 q 763 5 804 -11 q 693 52 723 22 q 644 122 662 81 q 626 208 626 162 ",
      },
      "\xc4": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 197 1137 q 220 1195 197 1172 q 279 1219 244 1219 q 337 1195 313 1219 q 361 1137 361 1172 q 337 1079 361 1102 q 279 1055 313 1055 q 220 1079 244 1055 q 197 1137 197 1102 m 601 1137 q 625 1195 601 1172 q 683 1219 648 1219 q 741 1195 718 1219 q 765 1137 765 1172 q 741 1079 765 1102 q 683 1055 718 1055 q 625 1079 648 1055 q 601 1137 601 1102 m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 ",
      },
      "\xb8": {
        x_min: 44.453125,
        x_max: 359.75,
        ha: 408,
        o: "m 113 -86 l 180 19 l 279 19 l 225 -63 q 321 -94 283 -63 q 359 -177 359 -125 q 350 -225 359 -202 q 320 -264 340 -247 q 270 -292 301 -281 q 197 -302 238 -302 q 104 -283 144 -302 q 44 -238 65 -263 l 95 -176 q 134 -206 108 -190 q 195 -223 159 -223 q 240 -212 220 -223 q 261 -177 261 -201 q 245 -145 261 -158 q 200 -133 229 -133 q 159 -140 177 -133 l 113 -86 ",
      },
      a: {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 ",
      },
      "\u2014": {
        x_min: 104.171875,
        x_max: 1427.890625,
        ha: 1532,
        o: "m 104 341 l 104 455 l 1427 455 l 1427 341 l 104 341 ",
      },
      "=": {
        x_min: 90.28125,
        x_max: 733.390625,
        ha: 824,
        o: "m 90 480 l 90 587 l 733 587 l 733 480 l 90 480 m 90 209 l 90 319 l 733 319 l 733 209 l 90 209 ",
      },
      N: {
        x_min: 125.015625,
        x_max: 934.796875,
        ha: 1060,
        o: "m 793 0 l 261 802 l 261 0 l 125 0 l 125 984 l 306 984 l 798 229 l 798 984 l 934 984 l 934 0 l 793 0 ",
      },
      "\u02da": {
        x_min: 48.609375,
        x_max: 358.359375,
        ha: 407,
        o: "m 358 890 q 345 830 358 858 q 312 782 333 802 q 263 750 291 762 q 202 738 234 738 q 144 750 172 738 q 95 782 116 762 q 61 830 73 802 q 48 890 48 858 q 61 950 48 922 q 95 998 73 977 q 144 1031 116 1019 q 202 1043 172 1043 q 263 1031 234 1043 q 312 998 291 1019 q 345 950 333 977 q 358 890 358 922 m 269 890 q 250 938 269 918 q 201 958 230 958 q 154 938 173 958 q 136 890 136 918 q 154 843 136 862 q 201 823 173 823 q 250 843 230 823 q 269 890 269 862 ",
      },
      "\xfa": {
        x_min: 104.171875,
        x_max: 682,
        ha: 786,
        o: "m 551 80 q 468 3 523 27 q 354 -20 412 -20 q 249 0 295 -20 q 170 56 202 20 q 121 141 138 93 q 104 247 104 190 l 104 668 l 234 668 l 234 266 q 243 200 234 231 q 269 145 251 169 q 315 108 287 122 q 386 94 344 94 q 504 141 465 94 q 544 265 544 188 l 544 668 l 675 668 l 675 123 q 677 50 675 83 q 682 0 679 18 l 556 0 q 552 35 554 11 q 551 80 551 59 m 412 754 l 302 754 l 423 957 l 587 957 l 412 754 ",
      },
      2: {
        x_min: 48.609375,
        x_max: 679.21875,
        ha: 735,
        o: "m 59 593 q 58 611 58 602 q 58 629 58 620 q 79 740 58 687 q 139 833 100 793 q 237 897 179 873 q 369 920 295 920 q 498 898 441 920 q 594 838 555 876 q 653 750 633 801 q 673 644 673 700 q 627 485 673 555 q 504 366 581 415 l 326 252 q 256 197 287 227 q 216 126 226 168 l 679 126 l 679 0 l 48 0 q 61 104 50 55 q 99 197 73 152 q 165 281 125 241 q 262 358 205 320 l 412 455 q 506 543 476 495 q 536 643 536 590 q 525 702 536 673 q 494 752 515 730 q 441 788 473 775 q 366 801 409 801 q 289 786 322 801 q 235 747 256 772 q 203 688 213 722 q 193 616 193 655 q 193 597 193 607 q 195 576 194 587 l 59 593 ",
      },
      "\xfc": {
        x_min: 104.171875,
        x_max: 682,
        ha: 786,
        o: "m 551 80 q 468 3 523 27 q 354 -20 412 -20 q 249 0 295 -20 q 170 56 202 20 q 121 141 138 93 q 104 247 104 190 l 104 668 l 234 668 l 234 266 q 243 200 234 231 q 269 145 251 169 q 315 108 287 122 q 386 94 344 94 q 504 141 465 94 q 544 265 544 188 l 544 668 l 675 668 l 675 123 q 677 50 675 83 q 682 0 679 18 l 556 0 q 552 35 554 11 q 551 80 551 59 m 177 862 q 200 919 177 895 q 256 943 223 943 q 315 919 291 943 q 338 862 338 895 q 315 804 338 827 q 256 782 291 782 q 200 804 223 782 q 177 862 177 827 m 437 862 q 460 919 437 895 q 518 943 483 943 q 575 919 551 943 q 598 862 598 895 q 575 804 598 827 q 518 782 551 782 q 460 804 483 782 q 437 862 437 827 ",
      },
      "\xaf": {
        x_min: 48.609375,
        x_max: 427.8125,
        ha: 476,
        o: "m 48 801 l 48 913 l 427 913 l 427 801 l 48 801 ",
      },
      Z: {
        x_min: 62.5,
        x_max: 822.28125,
        ha: 878,
        o: "m 62 0 l 62 136 l 650 858 l 76 858 l 76 984 l 815 984 l 815 852 l 225 127 l 822 127 l 822 0 l 62 0 ",
      },
      u: {
        x_min: 104.171875,
        x_max: 682,
        ha: 786,
        o: "m 551 80 q 468 3 523 27 q 354 -20 412 -20 q 249 0 295 -20 q 170 56 202 20 q 121 141 138 93 q 104 247 104 190 l 104 668 l 234 668 l 234 266 q 243 200 234 231 q 269 145 251 169 q 315 108 287 122 q 386 94 344 94 q 504 141 465 94 q 544 265 544 188 l 544 668 l 675 668 l 675 123 q 677 50 675 83 q 682 0 679 18 l 556 0 q 552 35 554 11 q 551 80 551 59 ",
      },
      "\u02dc": {
        x_min: 43.0625,
        x_max: 480.59375,
        ha: 524,
        o: "m 480 919 q 442 804 480 841 q 345 768 404 768 q 295 777 318 768 q 254 798 273 786 l 234 811 q 209 825 220 819 q 183 830 197 830 q 153 818 163 830 q 143 770 143 805 l 43 770 l 43 791 q 81 906 43 869 q 179 943 120 943 q 229 934 206 943 q 272 912 252 925 l 291 900 q 316 886 305 891 q 341 880 327 880 q 372 893 362 880 q 381 940 381 907 l 480 940 l 480 919 ",
      },
      "\xd3": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 m 610 1054 l 480 1054 l 620 1219 l 801 1219 l 610 1054 ",
      },
      k: {
        x_min: 111.125,
        x_max: 715.328125,
        ha: 729,
        o: "m 425 386 l 715 0 l 551 0 l 333 294 l 240 201 l 240 0 l 111 0 l 111 1005 l 240 1005 l 240 372 l 529 668 l 709 668 l 425 386 ",
      },
      "\u02c7": {
        x_min: 48.609375,
        x_max: 486.15625,
        ha: 535,
        o: "m 169 954 l 266 841 l 363 954 l 486 954 l 344 757 l 190 757 l 48 954 l 169 954 ",
      },
      "\xd9": {
        x_min: 111.125,
        x_max: 819.515625,
        ha: 931,
        o: "m 465 -20 q 325 2 390 -20 q 213 70 261 25 q 138 181 165 115 q 111 336 111 248 l 111 984 l 245 984 l 245 340 q 303 166 245 227 q 465 105 361 105 q 626 166 569 105 q 683 340 683 227 l 683 984 l 819 984 l 819 336 q 792 181 819 248 q 717 70 765 115 q 604 2 669 25 q 465 -20 540 -20 m 240 1219 l 419 1219 l 560 1054 l 431 1054 l 240 1219 ",
      },
      "\u0178": {
        x_min: 13.890625,
        x_max: 844.515625,
        ha: 858,
        o: "m 13 984 l 177 984 l 433 545 l 688 984 l 844 984 l 497 420 l 497 0 l 361 0 l 361 420 l 13 984 m 187 1137 q 210 1195 187 1172 q 269 1219 234 1219 q 327 1195 303 1219 q 351 1137 351 1172 q 327 1079 351 1102 q 269 1055 303 1055 q 210 1079 234 1055 q 187 1137 187 1102 m 508 1137 q 531 1195 508 1172 q 590 1219 555 1219 q 648 1195 624 1219 q 672 1137 672 1172 q 648 1079 672 1102 q 590 1055 624 1055 q 531 1079 555 1055 q 508 1137 508 1102 ",
      },
      "\u20ac": {
        x_min: 90.28125,
        x_max: 922.296875,
        ha: 957,
        o: "m 200 391 q 197 420 198 402 q 197 451 197 437 q 197 480 197 465 q 200 506 198 495 l 90 506 l 90 615 l 220 615 q 291 748 245 691 q 393 843 336 805 q 518 901 451 882 q 651 920 584 920 q 782 904 722 920 q 888 855 841 888 l 833 748 q 750 788 795 776 q 651 800 704 800 q 479 754 558 800 q 362 615 401 708 l 769 615 l 715 506 l 336 506 q 331 451 331 481 q 336 391 331 412 l 665 391 l 611 280 l 365 280 q 479 144 404 188 q 647 100 555 100 q 763 118 709 100 q 854 175 816 137 l 922 77 q 800 6 870 33 q 647 -20 730 -20 q 516 -1 580 -20 q 394 55 451 18 q 293 149 337 93 q 223 280 248 205 l 90 280 l 90 391 l 200 391 ",
      },
      "\xa2": {
        x_min: 69.453125,
        x_max: 683.390625,
        ha: 753,
        o: "m 331 0 l 331 130 q 225 169 273 140 q 142 241 176 198 q 88 338 108 284 q 69 455 69 393 q 88 573 69 519 q 143 670 108 627 q 225 740 177 712 q 331 779 273 768 l 331 901 l 437 901 l 437 782 q 531 757 490 776 q 601 711 572 738 q 649 652 630 684 q 677 587 668 619 l 565 541 q 550 579 559 559 q 525 617 540 600 q 488 647 509 634 q 437 668 466 661 l 437 241 q 492 261 469 247 q 531 293 515 276 q 558 329 548 311 q 572 365 568 348 l 683 319 q 652 256 672 288 q 602 198 632 225 q 530 152 572 172 q 437 127 488 133 l 437 0 l 331 0 m 198 455 q 236 319 198 372 q 331 247 273 266 l 331 662 q 236 591 275 643 q 198 455 198 540 ",
      },
      "\xdf": {
        x_min: 111.125,
        x_max: 752.84375,
        ha: 788,
        o: "m 495 476 q 513 436 495 448 q 559 409 530 423 l 608 386 q 709 306 666 358 q 752 180 752 254 q 739 109 752 145 q 697 44 726 73 q 627 -2 669 15 q 526 -20 584 -20 q 420 -1 463 -20 q 349 47 376 18 q 310 110 322 76 q 298 175 298 144 l 413 205 q 419 168 413 188 q 438 129 425 147 q 472 99 451 111 q 526 87 494 87 q 600 115 576 87 q 623 169 623 143 q 605 229 623 205 q 551 270 587 252 l 504 293 q 454 318 480 304 q 407 352 429 331 q 372 402 386 373 q 358 469 358 430 q 381 556 358 519 q 445 619 405 593 l 490 648 q 547 699 525 670 q 569 766 569 727 q 529 853 569 816 q 416 890 490 890 q 349 877 380 890 q 293 837 318 863 q 255 770 269 811 q 241 677 241 730 l 241 0 l 111 0 l 111 684 q 134 820 111 761 q 200 921 158 880 q 297 984 241 962 q 416 1005 352 1005 q 532 987 480 1005 q 622 937 584 969 q 680 863 659 905 q 701 770 701 820 q 691 698 701 730 q 663 641 680 666 q 625 597 647 616 q 579 565 602 579 l 538 540 q 507 514 519 529 q 495 476 495 500 ",
      },
      "\xe9": {
        x_min: 56.953125,
        x_max: 697.28125,
        ha: 753,
        o: "m 561 402 q 512 524 558 475 q 377 573 466 573 q 303 559 336 573 q 247 520 270 544 q 211 465 225 495 q 195 402 197 434 l 561 402 m 693 190 q 652 107 679 145 q 586 40 625 69 q 500 -4 548 12 q 393 -20 451 -20 q 265 2 326 -20 q 157 72 204 26 q 84 184 111 118 q 56 336 56 251 q 83 479 56 415 q 153 591 109 544 q 255 663 197 637 q 376 688 313 688 q 513 663 452 688 q 613 591 573 637 q 675 481 654 545 q 697 338 697 416 q 696 315 697 326 q 694 297 695 304 l 191 297 q 208 215 193 252 q 250 150 223 177 q 314 109 277 123 q 393 94 351 94 q 518 133 475 94 q 580 229 561 172 l 693 190 m 429 754 l 319 754 l 440 957 l 604 957 l 429 754 ",
      },
      s: {
        x_min: 48.609375,
        x_max: 565.328125,
        ha: 628,
        o: "m 166 215 q 212 126 173 162 q 322 90 251 90 q 406 116 377 90 q 436 179 436 143 q 413 233 436 211 q 350 265 391 255 l 236 290 q 113 356 156 306 q 69 477 69 406 q 88 559 69 520 q 138 626 106 597 q 214 672 170 655 q 306 688 258 688 q 421 669 375 688 q 497 621 468 650 q 541 562 526 593 q 561 509 555 531 l 445 466 q 436 498 443 479 q 413 535 429 518 q 372 565 398 552 q 306 577 345 577 q 226 550 256 577 q 195 488 195 523 q 272 408 195 425 l 380 384 q 518 313 472 365 q 565 186 565 261 q 550 113 565 150 q 504 47 534 77 q 429 -2 475 16 q 320 -20 383 -20 q 202 -1 251 -20 q 120 47 152 18 q 70 110 87 76 q 48 173 52 144 l 166 215 ",
      },
      B: {
        x_min: 125.015625,
        x_max: 773.671875,
        ha: 836,
        o: "m 445 984 q 571 964 516 984 q 664 909 626 944 q 722 825 702 873 q 743 718 743 776 q 702 584 743 638 q 595 505 661 529 q 670 471 637 494 q 727 417 704 448 q 761 347 750 386 q 773 268 773 309 q 751 160 773 209 q 688 75 729 111 q 593 20 648 40 q 469 0 537 0 l 125 0 l 125 984 l 445 984 m 430 554 q 559 597 513 554 q 605 711 605 641 q 557 823 605 782 q 425 865 509 865 l 261 865 l 261 554 l 430 554 m 450 119 q 584 161 533 119 q 634 276 634 204 q 590 392 634 347 q 455 437 545 437 l 261 437 l 261 119 l 450 119 ",
      },
      "\u2026": {
        x_min: 125.015625,
        x_max: 1169.53125,
        ha: 1295,
        o: "m 1169 81 q 1143 18 1169 44 q 1080 -6 1118 -6 q 1016 18 1043 -6 q 990 81 990 44 q 1016 145 990 119 q 1080 172 1043 172 q 1143 145 1118 172 q 1169 81 1169 119 m 736 81 q 710 18 736 44 q 647 -6 684 -6 q 583 18 609 -6 q 556 81 556 44 q 583 145 556 119 q 647 172 609 172 q 710 145 684 172 q 736 81 736 119 m 304 81 q 278 18 304 44 q 215 -6 252 -6 q 151 18 177 -6 q 125 81 125 44 q 151 145 125 119 q 215 172 177 172 q 278 145 252 172 q 304 81 304 119 ",
      },
      "?": {
        x_min: 48.609375,
        x_max: 659.78125,
        ha: 708,
        o: "m 272 281 q 270 305 270 294 q 270 330 270 316 q 297 452 270 400 q 386 547 323 505 l 447 588 q 502 648 483 612 q 520 725 520 684 q 510 784 520 755 q 479 834 500 812 q 428 870 459 857 q 355 883 397 883 q 277 868 309 883 q 223 827 244 852 q 192 770 202 802 q 181 705 181 738 q 184 668 181 687 q 191 637 187 648 l 56 654 q 48 720 48 683 q 66 818 48 768 q 122 911 84 869 q 217 979 159 952 q 355 1005 275 1005 q 484 982 427 1005 q 580 919 541 958 q 639 829 619 880 q 659 726 659 779 q 619 584 659 643 q 518 484 579 525 l 454 441 q 407 384 422 419 q 393 308 393 348 q 393 297 393 302 q 394 281 393 293 l 272 281 m 241 83 q 268 147 241 120 q 331 175 294 175 q 396 147 369 175 q 423 83 423 120 q 396 19 423 45 q 331 -6 369 -6 q 268 19 294 -6 q 241 83 241 45 ",
      },
      H: {
        x_min: 125.015625,
        x_max: 900.078125,
        ha: 1025,
        o: "m 763 0 l 763 437 l 261 437 l 261 0 l 125 0 l 125 984 l 261 984 l 261 563 l 763 563 l 763 984 l 900 984 l 900 0 l 763 0 ",
      },
      "\xee": {
        x_min: -40.390625,
        x_max: 397.15625,
        ha: 351,
        o: "m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 m -40 757 l 104 950 l 252 950 l 397 757 l 274 757 l 177 869 l 80 757 l -40 757 ",
      },
      c: {
        x_min: 55.5625,
        x_max: 694.5,
        ha: 736,
        o: "m 391 568 q 315 553 351 568 q 250 509 279 538 q 205 436 222 480 q 188 334 188 393 q 205 234 188 277 q 250 160 222 190 q 315 115 277 130 q 393 100 352 100 q 472 113 440 100 q 527 148 505 127 q 561 193 548 169 q 579 237 573 218 l 694 187 q 658 114 682 151 q 597 47 634 77 q 509 -2 559 16 q 393 -20 458 -20 q 257 6 319 -20 q 151 81 195 33 q 81 193 106 129 q 55 334 55 258 q 81 477 55 412 q 152 589 106 543 q 259 662 197 636 q 391 688 320 688 q 509 670 458 688 q 596 620 559 651 q 655 552 633 590 q 688 476 677 513 l 570 426 q 551 476 563 451 q 517 521 538 501 q 465 554 495 541 q 391 568 434 568 ",
      },
      "\xb6": {
        x_min: 48.609375,
        x_max: 834.78125,
        ha: 870,
        o: "m 455 -279 l 340 -279 l 340 445 l 318 445 q 214 466 263 445 q 128 521 165 486 q 70 605 91 556 q 48 709 48 654 q 73 827 48 776 q 141 913 98 879 q 241 966 184 948 q 362 984 298 984 l 834 984 l 834 872 l 700 872 l 700 -279 l 584 -279 l 584 872 l 455 872 l 455 -279 ",
      },
      "\u2022": {
        x_min: 97.234375,
        x_max: 672.28125,
        ha: 770,
        o: "m 97 401 q 120 513 97 461 q 181 605 143 566 q 272 667 220 644 q 384 690 325 690 q 496 667 444 690 q 587 605 548 644 q 649 513 626 566 q 672 401 672 461 q 649 290 672 343 q 587 198 626 237 q 496 136 548 159 q 384 113 444 113 q 272 136 325 113 q 181 198 220 159 q 120 290 143 237 q 97 401 97 343 ",
      },
      "\xa5": {
        x_min: 34.71875,
        x_max: 773.671875,
        ha: 808,
        o: "m 479 215 l 479 0 l 344 0 l 344 215 l 109 215 l 109 315 l 344 315 l 344 426 l 109 426 l 109 525 l 272 525 l 34 900 l 193 900 l 411 537 l 618 900 l 773 900 l 547 525 l 712 525 l 712 426 l 479 426 l 479 315 l 712 315 l 712 215 l 479 215 ",
      },
      "(": {
        x_min: 76.390625,
        x_max: 419.484375,
        ha: 419,
        o: "m 76 440 q 96 650 76 554 q 152 828 116 747 q 236 977 187 909 q 340 1102 284 1045 l 419 1033 q 250 768 312 913 q 188 440 188 623 q 250 111 188 256 q 419 -152 312 -34 l 340 -222 q 236 -97 284 -165 q 152 52 187 -29 q 96 229 116 133 q 76 440 76 326 ",
      },
      U: {
        x_min: 111.125,
        x_max: 819.515625,
        ha: 931,
        o: "m 465 -20 q 325 2 390 -20 q 213 70 261 25 q 138 181 165 115 q 111 336 111 248 l 111 984 l 245 984 l 245 340 q 303 166 245 227 q 465 105 361 105 q 626 166 569 105 q 683 340 683 227 l 683 984 l 819 984 l 819 336 q 792 181 819 248 q 717 70 765 115 q 604 2 669 25 q 465 -20 540 -20 ",
      },
      "\xd1": {
        x_min: 125.015625,
        x_max: 934.796875,
        ha: 1060,
        o: "m 793 0 l 261 802 l 261 0 l 125 0 l 125 984 l 306 984 l 798 229 l 798 984 l 934 984 l 934 0 l 793 0 m 753 1201 q 716 1085 753 1123 q 620 1047 678 1047 q 566 1055 589 1047 q 521 1079 542 1063 l 500 1093 q 475 1107 487 1101 q 449 1112 463 1112 q 414 1098 427 1112 q 400 1051 400 1083 l 306 1051 l 306 1073 q 344 1189 306 1151 q 441 1227 382 1227 q 496 1218 470 1227 q 542 1195 521 1208 l 563 1183 q 590 1169 578 1175 q 616 1163 602 1163 q 647 1174 634 1163 q 660 1212 660 1184 l 660 1223 l 753 1223 l 753 1201 ",
      },
      F: {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 765,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 541 l 680 541 l 680 413 l 261 413 l 261 0 l 125 0 ",
      },
      "\xad": {
        x_min: 62.5,
        x_max: 438.921875,
        ha: 501,
        o: "m 62 341 l 62 455 l 438 455 l 438 341 l 62 341 ",
      },
      ":": {
        x_min: 104.171875,
        x_max: 298.640625,
        ha: 403,
        o: "m 105 88 q 133 157 105 129 q 201 186 161 186 q 270 157 241 186 q 298 88 298 129 q 270 20 298 48 q 201 -6 241 -6 q 133 20 161 -6 q 105 88 105 48 m 104 577 q 131 646 104 618 q 200 675 159 675 q 268 646 240 675 q 297 577 297 618 q 268 509 297 537 q 200 481 240 481 q 131 509 159 481 q 104 577 104 537 ",
      },
      "\xdb": {
        x_min: 111.125,
        x_max: 819.515625,
        ha: 931,
        o: "m 465 -20 q 325 2 390 -20 q 213 70 261 25 q 138 181 165 115 q 111 336 111 248 l 111 984 l 245 984 l 245 340 q 303 166 245 227 q 465 105 361 105 q 626 166 569 105 q 683 340 683 227 l 683 984 l 819 984 l 819 336 q 792 181 819 248 q 717 70 765 115 q 604 2 669 25 q 465 -20 540 -20 m 223 1054 l 378 1219 l 545 1219 l 708 1054 l 580 1054 l 462 1143 l 349 1054 l 223 1054 ",
      },
      "*": {
        x_min: 48.609375,
        x_max: 562.546875,
        ha: 611,
        o: "m 359 798 l 530 857 l 562 757 l 390 700 l 504 554 l 419 490 l 304 641 l 195 491 l 111 555 l 220 700 l 48 757 l 80 857 l 250 797 l 250 984 l 359 984 l 359 798 ",
      },
      "\u2020": {
        x_min: 34.71875,
        x_max: 501.421875,
        ha: 536,
        o: "m 211 225 l 211 665 l 34 665 l 34 777 l 211 777 l 211 984 l 325 984 l 325 777 l 501 777 l 501 665 l 325 665 l 325 225 l 211 225 ",
      },
      "\xb0": {
        x_min: 34.71875,
        x_max: 480.59375,
        ha: 515,
        o: "m 150 697 q 181 618 150 648 q 256 587 212 587 q 333 618 302 587 q 363 697 363 648 q 333 775 363 744 q 256 805 302 805 q 181 775 212 805 q 150 697 150 744 m 34 697 q 52 782 34 743 q 101 852 70 822 q 172 898 131 882 q 256 915 212 915 q 342 898 301 915 q 413 852 383 882 q 462 782 444 822 q 480 697 480 743 q 462 611 480 651 q 413 541 444 570 q 342 494 383 511 q 256 477 301 477 q 172 494 212 477 q 101 541 131 511 q 52 611 70 570 q 34 697 34 651 ",
      },
      V: {
        x_min: 13.890625,
        x_max: 898.6875,
        ha: 913,
        o: "m 755 984 l 898 984 l 519 0 l 384 0 l 13 984 l 158 984 l 455 175 l 755 984 ",
      },
      "\xe5": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 518 890 q 505 830 518 858 q 472 782 493 802 q 423 750 451 762 q 362 738 394 738 q 304 750 332 738 q 255 782 276 762 q 221 830 233 802 q 208 890 208 858 q 221 950 208 922 q 255 998 233 977 q 304 1031 276 1019 q 362 1043 332 1043 q 423 1031 394 1043 q 472 998 451 1019 q 505 950 493 977 q 518 890 518 922 m 429 890 q 410 938 429 918 q 361 958 390 958 q 314 938 333 958 q 296 890 296 918 q 314 843 296 862 q 361 823 333 823 q 410 843 390 823 q 429 890 429 862 ",
      },
      "\xa0": {
        x_min: 0,
        x_max: 0,
        ha: 347,
      },
      0: {
        x_min: 69.453125,
        x_max: 783.390625,
        ha: 853,
        o: "m 204 450 q 283 158 204 241 q 343 115 309 130 q 426 100 377 100 q 509 115 475 100 q 569 158 543 130 q 648 450 648 241 q 569 741 648 658 q 509 784 543 769 q 426 800 475 800 q 343 784 377 800 q 283 741 309 769 q 204 450 204 658 m 69 450 q 87 626 69 543 q 150 776 105 709 q 262 882 194 843 q 426 920 330 920 q 590 882 522 920 q 702 776 658 843 q 765 626 747 709 q 783 450 783 543 q 765 273 783 356 q 702 123 747 190 q 590 18 658 56 q 426 -20 522 -20 q 262 18 330 -20 q 150 123 194 56 q 87 273 105 190 q 69 450 69 356 ",
      },
      "\u201d": {
        x_min: 55.5625,
        x_max: 484.765625,
        ha: 540,
        o: "m 55 909 q 81 968 55 944 q 145 993 106 993 q 216 963 186 993 q 247 875 247 934 q 229 769 247 813 q 184 695 211 725 q 124 651 156 666 q 62 632 91 636 l 62 697 q 104 716 84 702 q 136 747 123 729 q 158 787 150 765 q 166 832 166 809 q 156 827 163 829 q 138 825 150 825 q 79 847 104 825 q 55 909 55 869 m 293 909 q 318 968 293 944 q 383 993 344 993 q 454 963 423 993 q 484 875 484 934 q 466 769 484 813 q 421 695 448 725 q 361 651 394 666 q 300 632 329 636 l 300 697 q 341 716 322 702 q 374 747 361 729 q 395 787 387 765 q 404 832 404 809 q 394 827 401 829 q 376 825 387 825 q 317 847 341 825 q 293 909 293 869 ",
      },
      "\xbe": {
        x_min: 76.390625,
        x_max: 1111.203125,
        ha: 1181,
        o: "m 234 0 l 882 900 l 1007 900 l 362 0 l 234 0 m 200 700 l 331 809 l 94 809 l 94 900 l 470 900 l 470 812 l 331 701 q 388 688 361 698 q 436 659 415 677 q 469 612 456 640 q 481 550 481 584 q 467 484 481 515 q 426 431 452 454 q 363 395 400 408 q 280 381 326 381 q 200 394 234 381 q 139 426 165 406 q 97 471 113 445 q 76 525 81 497 l 169 562 q 206 497 176 522 q 279 473 236 473 q 347 495 322 473 q 373 550 373 518 q 343 610 373 593 q 279 627 313 627 q 257 626 268 627 q 240 622 247 625 l 200 700 m 658 201 l 904 506 l 1022 506 l 1022 190 l 1111 190 l 1111 100 l 1022 100 l 1022 0 l 915 0 l 915 100 l 658 100 l 658 201 m 915 383 l 761 190 l 915 190 l 915 383 ",
      },
      "@": {
        x_min: 62.5,
        x_max: 1098.703125,
        ha: 1147,
        o: "m 834 190 q 747 211 786 190 q 697 279 708 233 q 620 211 665 234 q 531 187 576 187 q 445 204 484 187 q 378 252 406 220 q 334 327 350 283 q 319 425 319 370 q 341 554 319 494 q 402 657 363 613 q 490 724 440 700 q 597 748 540 748 q 642 743 619 748 q 685 726 665 737 q 721 697 705 715 q 745 657 737 680 l 758 730 l 868 730 l 793 381 q 788 343 788 361 q 800 302 788 319 q 841 286 812 286 q 897 307 870 286 q 945 366 925 329 q 979 450 966 402 q 991 550 991 497 q 963 691 991 626 q 885 802 936 755 q 762 877 834 850 q 602 904 690 904 q 433 872 511 904 q 297 782 355 840 q 208 642 240 723 q 176 461 176 561 q 206 291 176 369 q 293 156 236 213 q 431 68 350 100 q 618 36 513 36 q 767 59 694 36 q 902 133 840 83 l 959 58 q 888 6 929 29 q 803 -32 848 -16 q 710 -56 758 -48 q 618 -65 662 -65 q 393 -27 495 -65 q 218 80 291 11 q 103 247 144 150 q 62 462 62 344 q 105 683 62 583 q 222 854 148 783 q 393 966 295 926 q 601 1005 491 1005 q 797 970 707 1005 q 955 875 888 936 q 1060 732 1022 815 q 1098 551 1098 648 q 1077 407 1098 473 q 1020 293 1057 341 q 936 217 984 244 q 834 190 888 190 m 715 513 q 685 610 715 576 q 598 644 655 644 q 530 627 561 644 q 478 581 500 609 q 445 516 456 552 q 433 440 433 479 q 438 380 433 408 q 458 332 444 352 q 495 300 472 312 q 551 288 518 288 q 616 305 586 288 q 667 352 645 322 q 701 423 688 381 q 715 513 713 465 ",
      },
      "\xf6": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 185 862 q 208 919 185 895 q 264 943 231 943 q 323 919 299 943 q 346 862 346 895 q 323 804 346 827 q 264 782 299 782 q 208 804 231 782 q 185 862 185 827 m 445 862 q 468 919 445 895 q 526 943 491 943 q 583 919 559 943 q 606 862 606 895 q 583 804 606 827 q 526 782 559 782 q 468 804 491 782 q 445 862 445 827 ",
      },
      i: {
        x_min: 81.953125,
        x_max: 269.46875,
        ha: 351,
        o: "m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 m 81 920 q 109 988 81 961 q 175 1015 136 1015 q 242 988 215 1015 q 269 920 269 961 q 242 854 269 882 q 175 827 215 827 q 109 854 136 827 q 81 920 81 882 ",
      },
      "\xd5": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 m 785 1202 q 748 1086 785 1124 q 652 1048 710 1048 q 598 1056 621 1048 q 553 1080 574 1064 l 532 1094 q 507 1108 519 1102 q 481 1113 495 1113 q 446 1099 459 1113 q 432 1052 432 1084 l 338 1052 l 338 1074 q 376 1190 338 1152 q 473 1228 414 1228 q 528 1219 502 1228 q 574 1196 553 1209 l 595 1184 q 622 1170 610 1176 q 648 1164 634 1164 q 679 1175 666 1164 q 692 1213 692 1185 l 692 1224 l 785 1224 l 785 1202 ",
      },
      "\xfe": {
        x_min: 111.125,
        x_max: 768.109375,
        ha: 824,
        o: "m 111 -263 l 111 1005 l 241 1005 l 241 570 q 325 650 269 618 q 461 683 381 683 q 593 656 536 683 q 689 581 651 629 q 747 470 727 534 q 768 334 768 406 q 747 195 768 259 q 686 84 726 131 q 588 9 645 36 q 456 -18 530 -18 q 323 13 379 -18 q 240 90 268 45 l 240 -263 l 111 -263 m 634 334 q 620 427 634 384 q 581 500 607 469 q 520 550 556 531 q 437 568 483 568 q 356 550 393 568 q 293 500 319 531 q 252 427 266 469 q 238 334 238 384 q 252 239 238 283 q 293 164 266 195 q 356 115 319 133 q 437 98 393 98 q 519 115 483 98 q 581 164 555 133 q 620 239 607 195 q 634 334 634 283 ",
      },
      "]": {
        x_min: 6.9375,
        x_max: 275.015625,
        ha: 400,
        o: "m 6 -205 l 6 -101 l 161 -101 l 161 984 l 6 984 l 6 1090 l 275 1090 l 275 -205 l 6 -205 ",
      },
      m: {
        x_min: 111.125,
        x_max: 1093.140625,
        ha: 1190,
        o: "m 111 0 l 111 668 l 236 668 l 236 579 q 324 661 268 634 q 438 687 380 687 q 556 657 501 687 q 638 561 611 626 q 738 660 679 633 q 862 687 798 687 q 947 672 905 687 q 1021 625 988 657 q 1073 546 1054 594 q 1093 433 1093 498 l 1093 0 l 963 0 l 963 419 q 929 528 963 484 q 822 572 895 572 q 710 524 752 572 q 668 404 668 476 l 668 0 l 537 0 l 537 419 q 504 528 537 484 q 395 572 470 572 q 282 525 325 572 q 240 402 240 477 l 240 0 l 111 0 ",
      },
      "\ufb03": {
        x_min: 27.78125,
        x_max: 1195.921875,
        ha: 1278,
        o: "m 151 780 q 168 879 151 836 q 215 951 186 922 q 285 995 245 980 q 370 1009 325 1009 q 424 1004 404 1009 q 448 995 444 998 l 448 879 q 429 884 443 882 q 391 887 416 887 q 356 882 375 887 q 321 865 337 877 q 295 830 305 852 q 286 773 286 808 l 286 668 l 590 668 l 590 780 q 607 879 590 836 q 654 951 625 922 q 724 995 684 980 q 809 1009 763 1009 q 863 1004 843 1009 q 887 995 883 998 l 887 879 q 868 884 882 882 q 830 887 855 887 q 795 882 813 887 q 760 865 776 877 q 734 830 744 852 q 725 773 725 808 l 725 668 l 1166 668 l 1166 0 l 1037 0 l 1037 550 l 725 550 l 725 0 l 590 0 l 590 550 l 286 550 l 286 0 l 151 0 l 151 550 l 27 550 l 27 668 l 151 668 l 151 780 m 1008 923 q 1035 991 1008 963 q 1101 1018 1062 1018 q 1168 991 1141 1018 q 1195 923 1195 963 q 1168 857 1195 884 q 1101 830 1141 830 q 1035 857 1062 830 q 1008 923 1008 884 ",
      },
      8: {
        x_min: 62.5,
        x_max: 715.328125,
        ha: 778,
        o: "m 388 516 q 508 557 461 518 q 555 663 555 597 q 510 766 555 725 q 388 808 465 808 q 267 766 312 808 q 222 663 222 725 q 269 557 222 597 q 388 516 316 518 m 388 97 q 529 140 480 97 q 577 248 577 184 q 528 358 577 313 q 388 402 479 402 q 249 358 298 402 q 200 248 200 313 q 248 140 200 184 q 388 97 297 97 m 388 -20 q 250 0 311 -20 q 148 54 190 19 q 84 136 106 88 q 62 237 62 183 q 111 378 62 320 q 233 459 161 436 q 175 491 202 470 q 129 539 148 512 q 97 600 109 566 q 86 670 86 633 q 109 772 86 726 q 172 851 131 818 q 268 902 213 884 q 388 920 323 920 q 508 902 452 920 q 604 851 563 884 q 668 772 645 818 q 691 670 691 726 q 649 540 691 597 q 544 459 607 483 q 666 378 616 436 q 715 237 715 320 q 693 136 715 183 q 629 54 670 88 q 527 0 587 19 q 388 -20 466 -20 ",
      },
      "\u017e": {
        x_min: 55.5625,
        x_max: 591.71875,
        ha: 647,
        o: "m 229 954 l 326 841 l 423 954 l 546 954 l 404 757 l 250 757 l 108 954 l 229 954 m 55 0 l 55 113 l 422 550 l 61 550 l 61 668 l 584 668 l 584 554 l 218 118 l 591 118 l 591 0 l 55 0 ",
      },
      R: {
        x_min: 125.015625,
        x_max: 797.28125,
        ha: 860,
        o: "m 409 402 l 262 402 l 262 0 l 125 0 l 125 984 l 495 984 q 621 961 565 984 q 716 899 677 938 q 776 806 755 859 q 797 691 797 752 q 734 509 797 584 q 558 412 670 433 l 793 0 l 634 0 l 409 402 m 470 525 q 605 570 554 525 q 657 691 657 615 q 605 816 657 770 q 470 862 554 862 l 262 862 l 262 525 l 470 525 ",
      },
      "\xe1": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 415 754 l 305 754 l 426 957 l 590 957 l 415 754 ",
      },
      "\xd7": {
        x_min: 55.5625,
        x_max: 680.609375,
        ha: 736,
        o: "m 366 319 l 133 77 l 55 155 l 290 400 l 56 641 l 136 720 l 368 479 l 600 720 l 679 643 l 444 400 l 680 155 l 602 76 l 366 319 ",
      },
      o: {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 ",
      },
      5: {
        x_min: 48.609375,
        x_max: 712.5625,
        ha: 761,
        o: "m 179 283 q 241 148 186 200 q 381 97 297 97 q 457 109 422 97 q 518 146 493 122 q 559 204 544 170 q 575 279 575 237 q 559 360 575 325 q 516 418 543 395 q 454 453 490 441 q 380 465 419 465 q 288 447 331 465 q 216 400 245 430 q 149 427 180 413 q 83 452 118 440 l 200 900 l 675 900 l 675 775 l 290 775 l 223 516 q 304 566 254 550 q 406 583 354 583 q 529 562 473 583 q 625 503 584 541 q 689 409 666 465 q 712 284 712 354 q 688 165 712 220 q 622 68 665 109 q 518 2 579 26 q 381 -22 456 -22 q 250 0 309 -22 q 147 57 191 20 q 78 143 104 94 q 48 244 52 191 l 179 283 ",
      },
      "\xf5": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 618 919 q 580 804 618 841 q 483 768 542 768 q 433 777 456 768 q 392 798 411 786 l 372 811 q 347 825 358 819 q 321 830 335 830 q 291 818 301 830 q 281 770 281 805 l 181 770 l 181 791 q 219 906 181 869 q 317 943 258 943 q 367 934 344 943 q 410 912 390 925 l 429 900 q 454 886 443 891 q 479 880 465 880 q 510 893 500 880 q 519 940 519 907 l 618 940 l 618 919 ",
      },
      7: {
        x_min: 6.9375,
        x_max: 663.9375,
        ha: 671,
        o: "m 663 769 q 575 688 632 744 q 458 538 518 632 q 349 311 398 444 q 283 0 300 179 l 143 0 q 170 182 150 97 q 217 341 190 268 q 277 474 244 413 q 343 583 309 534 q 513 775 419 695 l 6 775 l 6 900 l 663 900 l 663 769 ",
      },
      K: {
        x_min: 125.015625,
        x_max: 907.015625,
        ha: 928,
        o: "m 401 447 l 261 297 l 261 0 l 125 0 l 125 984 l 261 984 l 261 477 l 722 984 l 901 984 l 491 545 l 907 0 l 734 0 l 401 447 ",
      },
      ",": {
        x_min: 97.234375,
        x_max: 311.140625,
        ha: 408,
        o: "m 97 88 q 125 154 97 126 q 198 181 154 181 q 277 149 243 181 q 311 50 311 116 q 291 -68 311 -19 q 240 -150 270 -118 q 173 -199 209 -181 q 105 -220 137 -216 l 105 -148 q 152 -128 130 -143 q 188 -93 173 -113 q 211 -47 202 -72 q 220 1 220 -23 q 209 -3 218 -1 q 190 -5 201 -5 q 124 19 151 -5 q 97 88 97 44 ",
      },
      d: {
        x_min: 55.5625,
        x_max: 712.5625,
        ha: 817,
        o: "m 188 336 q 202 240 188 284 q 240 165 215 197 q 301 115 265 133 q 384 97 337 97 q 465 115 429 97 q 526 166 501 134 q 564 243 551 198 q 577 338 577 287 q 527 506 577 443 q 386 570 476 570 q 304 553 341 570 q 242 504 268 536 q 202 430 216 473 q 188 336 188 387 m 579 101 q 503 17 555 52 q 372 -18 451 -18 q 240 9 298 -18 q 140 84 181 36 q 77 196 100 131 q 55 336 55 261 q 78 470 55 406 q 143 581 101 533 q 243 657 184 629 q 372 686 301 686 q 450 676 416 686 q 509 650 484 666 q 551 614 534 634 q 576 573 568 594 l 576 1005 l 705 1005 l 705 123 q 708 41 705 75 q 712 0 711 8 l 586 0 q 581 35 583 11 q 579 90 579 59 l 579 101 ",
      },
      "\xa8": {
        x_min: 52.78125,
        x_max: 473.65625,
        ha: 526,
        o: "m 52 862 q 75 919 52 895 q 131 943 98 943 q 190 919 166 943 q 213 862 213 895 q 190 804 213 827 q 131 782 166 782 q 75 804 98 782 q 52 862 52 827 m 312 862 q 335 919 312 895 q 393 943 358 943 q 450 919 426 943 q 473 862 473 895 q 450 804 473 827 q 393 782 426 782 q 335 804 358 782 q 312 862 312 827 ",
      },
      "\xd4": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 m 315 1054 l 470 1219 l 637 1219 l 800 1054 l 672 1054 l 554 1143 l 441 1054 l 315 1054 ",
      },
      E: {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 807,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 555 l 680 555 l 680 427 l 261 427 l 261 126 l 723 126 l 723 0 l 125 0 ",
      },
      Y: {
        x_min: 13.890625,
        x_max: 844.515625,
        ha: 858,
        o: "m 13 984 l 177 984 l 433 545 l 688 984 l 844 984 l 497 420 l 497 0 l 361 0 l 361 420 l 13 984 ",
      },
      '"': {
        x_min: 55.5625,
        x_max: 463.921875,
        ha: 519,
        o: "m 55 832 q 79 893 55 869 q 140 916 102 916 q 200 893 176 916 q 223 832 223 869 q 220 807 223 820 l 162 545 l 115 545 l 58 805 q 55 832 55 819 m 295 832 q 319 893 295 869 q 380 916 343 916 q 440 893 416 916 q 463 832 463 869 q 461 807 463 820 l 402 545 l 355 545 l 298 805 q 295 832 295 819 ",
      },
      "\u2039": {
        x_min: 41.671875,
        x_max: 355.578125,
        ha: 383,
        o: "m 226 137 l 41 402 l 226 668 l 355 668 l 173 402 l 355 137 l 226 137 ",
      },
      "\u02d9": {
        x_min: 34.71875,
        x_max: 206.96875,
        ha: 242,
        o: "m 34 855 q 59 916 34 891 q 120 941 84 941 q 181 916 156 941 q 206 855 206 891 q 181 794 206 819 q 120 769 156 769 q 59 794 84 769 q 34 855 34 819 ",
      },
      "\xea": {
        x_min: 56.953125,
        x_max: 697.28125,
        ha: 753,
        o: "m 561 402 q 512 524 558 475 q 377 573 466 573 q 303 559 336 573 q 247 520 270 544 q 211 465 225 495 q 195 402 197 434 l 561 402 m 693 190 q 652 107 679 145 q 586 40 625 69 q 500 -4 548 12 q 393 -20 451 -20 q 265 2 326 -20 q 157 72 204 26 q 84 184 111 118 q 56 336 56 251 q 83 479 56 415 q 153 591 109 544 q 255 663 197 637 q 376 688 313 688 q 513 663 452 688 q 613 591 573 637 q 675 481 654 545 q 697 338 697 416 q 696 315 697 326 q 694 297 695 304 l 191 297 q 208 215 193 252 q 250 150 223 177 q 314 109 277 123 q 393 94 351 94 q 518 133 475 94 q 580 229 561 172 l 693 190 m 169 757 l 314 950 l 462 950 l 607 757 l 484 757 l 387 869 l 290 757 l 169 757 ",
      },
      "\xcf": {
        x_min: 16.71875,
        x_max: 377.859375,
        ha: 389,
        o: "m 125 0 l 125 984 l 263 984 l 263 0 l 125 0 m 16 1137 q 37 1190 16 1169 q 90 1211 58 1211 q 143 1190 122 1211 q 165 1137 165 1169 q 143 1084 165 1105 q 90 1062 122 1062 q 37 1084 58 1062 q 16 1137 16 1105 m 229 1137 q 250 1190 229 1169 q 304 1211 272 1211 q 357 1190 336 1211 q 377 1137 377 1169 q 357 1084 377 1105 q 304 1062 336 1062 q 250 1084 272 1062 q 229 1137 229 1105 ",
      },
      "\u201e": {
        x_min: 55.5625,
        x_max: 484.765625,
        ha: 540,
        o: "m 55 80 q 81 139 55 115 q 145 163 106 163 q 216 134 186 163 q 247 45 247 105 q 229 -59 247 -15 q 184 -133 211 -104 q 124 -177 156 -162 q 62 -197 91 -193 l 62 -131 q 104 -113 84 -126 q 136 -81 123 -100 q 158 -41 150 -63 q 166 2 166 -19 q 156 -2 163 0 q 138 -4 150 -4 q 79 18 104 -4 q 55 80 55 40 m 293 80 q 318 139 293 115 q 383 163 344 163 q 454 134 423 163 q 484 45 484 105 q 466 -59 484 -15 q 421 -133 448 -104 q 361 -177 394 -162 q 300 -197 329 -193 l 300 -131 q 341 -113 322 -126 q 374 -81 361 -100 q 395 -41 387 -63 q 404 2 404 -19 q 394 -2 401 0 q 376 -4 387 -4 q 317 18 341 -4 q 293 80 293 40 ",
      },
      "\xc2": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 m 239 1054 l 394 1219 l 561 1219 l 724 1054 l 596 1054 l 478 1143 l 365 1054 l 239 1054 ",
      },
      "\xcd": {
        x_min: 125.015625,
        x_max: 451.1875,
        ha: 389,
        o: "m 125 0 l 125 984 l 263 984 l 263 0 l 125 0 m 260 1054 l 130 1054 l 270 1219 l 451 1219 l 260 1054 ",
      },
      "\xb4": {
        x_min: 48.609375,
        x_max: 333.359375,
        ha: 381,
        o: "m 158 754 l 48 754 l 169 957 l 333 957 l 158 754 ",
      },
      "\xec": {
        x_min: -44.78125,
        x_max: 240.296875,
        ha: 351,
        o: "m -44 957 l 119 957 l 238 754 l 130 754 l -44 957 m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 ",
      },
      "\xb1": {
        x_min: 90.28125,
        x_max: 697.28125,
        ha: 788,
        o: "m 336 536 l 336 725 l 450 725 l 450 536 l 697 536 l 697 429 l 450 429 l 450 243 l 336 243 l 336 429 l 90 429 l 90 536 l 336 536 m 697 180 l 697 70 l 90 70 l 90 180 l 697 180 ",
      },
      "\xda": {
        x_min: 111.125,
        x_max: 819.515625,
        ha: 931,
        o: "m 465 -20 q 325 2 390 -20 q 213 70 261 25 q 138 181 165 115 q 111 336 111 248 l 111 984 l 245 984 l 245 340 q 303 166 245 227 q 465 105 361 105 q 626 166 569 105 q 683 340 683 227 l 683 984 l 819 984 l 819 336 q 792 181 819 248 q 717 70 765 115 q 604 2 669 25 q 465 -20 540 -20 m 495 1054 l 365 1054 l 505 1219 l 686 1219 l 495 1054 ",
      },
      "|": {
        x_min: 125.015625,
        x_max: 238.90625,
        ha: 364,
        o: "m 125 -205 l 125 1090 l 238 1090 l 238 -205 l 125 -205 ",
      },
      "\xa7": {
        x_min: 118.0625,
        x_max: 677.828125,
        ha: 796,
        o: "m 672 331 q 661 272 672 300 q 633 221 650 244 q 595 182 616 198 q 555 158 575 166 q 645 68 613 122 q 677 -43 677 15 q 654 -148 677 -101 q 592 -229 632 -195 q 501 -280 552 -262 q 393 -298 450 -298 q 275 -279 326 -298 q 190 -227 225 -261 q 138 -145 155 -193 q 119 -40 120 -97 l 243 -15 q 280 -140 243 -91 q 395 -188 318 -188 q 502 -154 461 -188 q 543 -56 543 -120 q 520 13 543 -18 q 461 63 498 44 l 316 138 q 243 180 277 158 q 181 230 208 202 q 139 293 155 258 q 123 376 123 329 q 134 436 123 408 q 163 487 145 465 q 201 525 180 509 q 241 548 222 541 q 150 638 181 584 q 118 751 118 693 q 140 857 118 809 q 203 936 163 904 q 294 987 243 969 q 402 1005 345 1005 q 520 985 469 1005 q 606 930 572 965 q 658 849 640 895 q 676 748 676 802 l 551 723 q 513 848 551 801 q 400 895 476 895 q 292 859 333 895 q 251 763 251 823 q 334 644 251 687 l 477 569 q 551 526 516 548 q 613 476 586 504 q 656 413 640 448 q 672 331 672 377 m 316 508 q 271 466 293 497 q 250 397 250 436 q 270 329 250 358 q 338 275 290 300 l 477 200 q 522 240 501 211 q 544 311 544 270 q 524 379 544 350 q 455 433 504 408 l 316 508 ",
      },
      "\xdd": {
        x_min: 13.890625,
        x_max: 844.515625,
        ha: 858,
        o: "m 13 984 l 177 984 l 433 545 l 688 984 l 844 984 l 497 420 l 497 0 l 361 0 l 361 420 l 13 984 m 457 1054 l 327 1054 l 467 1219 l 648 1219 l 457 1054 ",
      },
      b: {
        x_min: 111.125,
        x_max: 768.109375,
        ha: 824,
        o: "m 111 0 l 111 1005 l 240 1005 l 240 573 q 320 652 263 618 q 461 687 377 687 q 594 660 537 687 q 690 585 651 633 q 748 473 729 537 q 768 337 768 409 q 747 197 768 262 q 686 85 726 133 q 589 9 647 37 q 456 -18 531 -18 q 327 12 381 -18 q 240 97 272 43 l 240 0 l 111 0 m 634 337 q 581 509 634 445 q 437 572 529 572 q 357 555 394 572 q 294 509 320 538 q 253 435 268 479 q 238 337 238 391 q 253 238 238 283 q 294 163 268 194 q 357 115 320 131 q 437 98 394 98 q 581 163 527 98 q 634 337 634 229 ",
      },
      q: {
        x_min: 55.5625,
        x_max: 709.78125,
        ha: 807,
        o: "m 580 -263 l 580 94 q 500 12 554 43 q 372 -18 447 -18 q 241 9 300 -18 q 141 86 183 37 q 77 198 100 134 q 55 336 55 262 q 77 470 55 406 q 138 581 98 533 q 237 657 179 629 q 369 684 295 684 q 447 674 412 684 q 509 647 481 663 q 554 609 536 630 q 583 565 572 587 l 583 668 l 709 668 l 709 -263 l 580 -263 m 188 336 q 202 240 188 284 q 242 165 216 197 q 304 115 268 133 q 384 97 340 97 q 465 115 429 97 q 527 165 501 133 q 568 240 554 197 q 581 336 581 284 q 568 430 581 387 q 527 504 554 473 q 465 552 501 534 q 384 569 429 569 q 240 504 293 569 q 188 336 188 440 ",
      },
      "\xd6": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 259 1137 q 283 1195 259 1172 q 341 1219 306 1219 q 400 1195 376 1219 q 423 1137 423 1172 q 400 1079 423 1102 q 341 1055 376 1055 q 283 1079 306 1055 q 259 1137 259 1102 m 691 1137 q 715 1195 691 1172 q 773 1219 738 1219 q 832 1195 808 1219 q 855 1137 855 1172 q 832 1079 855 1102 q 773 1055 808 1055 q 715 1079 738 1055 q 691 1137 691 1102 m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 ",
      },
      "\ufb02": {
        x_min: 27.78125,
        x_max: 725.0625,
        ha: 836,
        o: "m 391 887 q 356 882 375 887 q 321 865 337 877 q 295 830 305 852 q 286 773 286 808 l 286 668 l 594 668 l 594 1005 l 725 1005 l 725 0 l 594 0 l 594 550 l 286 550 l 286 0 l 151 0 l 151 550 l 27 550 l 27 668 l 151 668 l 151 780 q 168 879 151 836 q 215 951 186 922 q 285 995 245 980 q 370 1009 325 1009 q 424 1004 404 1009 q 448 995 444 998 l 448 879 q 429 884 443 882 q 391 887 416 887 ",
      },
      z: {
        x_min: 55.5625,
        x_max: 591.71875,
        ha: 647,
        o: "m 55 0 l 55 113 l 422 550 l 61 550 l 61 668 l 584 668 l 584 554 l 218 118 l 591 118 l 591 0 l 55 0 ",
      },
      "\u2122": {
        x_min: 41.671875,
        x_max: 1109.8125,
        ha: 1193,
        o: "m 302 890 l 302 477 l 197 477 l 197 890 l 41 890 l 41 984 l 458 984 l 458 890 l 302 890 m 1009 477 l 1009 801 l 869 477 l 787 477 l 651 797 l 651 477 l 545 477 l 545 984 l 683 984 l 832 632 l 980 984 l 1109 984 l 1109 477 l 1009 477 ",
      },
      "\xe3": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 586 919 q 548 804 586 841 q 451 768 510 768 q 401 777 424 768 q 360 798 379 786 l 340 811 q 315 825 326 819 q 289 830 303 830 q 259 818 269 830 q 249 770 249 805 l 149 770 l 149 791 q 187 906 149 869 q 285 943 226 943 q 335 934 312 943 q 378 912 358 925 l 397 900 q 422 886 411 891 q 447 880 433 880 q 478 893 468 880 q 487 940 487 907 l 586 940 l 586 919 ",
      },
      "\xe6": {
        x_min: 69.453125,
        x_max: 1158.421875,
        ha: 1214,
        o: "m 1154 190 q 1112 107 1140 145 q 1045 40 1084 69 q 958 -4 1007 12 q 854 -20 909 -20 q 696 15 769 -20 q 576 123 623 52 q 538 71 561 97 q 484 25 516 45 q 409 -8 452 4 q 308 -20 365 -20 q 206 -4 251 -20 q 131 39 162 12 q 85 102 101 66 q 69 179 69 138 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 465 408 q 508 428 498 413 q 518 458 518 443 q 479 543 518 506 q 365 579 441 579 q 253 540 294 579 q 205 448 212 501 l 83 472 q 114 562 87 522 q 181 631 141 602 q 268 674 220 659 q 365 688 316 688 q 511 658 451 688 q 602 577 570 627 q 708 659 647 630 q 837 688 769 688 q 974 663 913 688 q 1075 591 1034 637 q 1136 481 1115 545 q 1158 338 1158 416 q 1157 315 1158 329 q 1155 297 1157 302 l 652 297 q 670 215 654 252 q 713 152 686 179 q 776 109 740 125 q 854 94 812 94 q 977 133 934 94 q 1040 229 1020 172 l 1154 190 m 318 88 q 388 99 352 88 q 452 132 423 109 q 500 193 481 155 q 518 284 518 230 l 518 316 l 300 286 q 229 254 255 279 q 202 183 202 229 q 232 118 202 147 q 318 88 262 88 m 1022 402 q 973 524 1019 475 q 838 573 926 573 q 764 559 797 573 q 709 520 732 544 q 672 465 686 495 q 657 402 658 434 l 1022 402 ",
      },
      "\xae": {
        x_min: 62.5,
        x_max: 1077.859375,
        ha: 1140,
        o: "m 62 493 q 102 691 62 598 q 210 854 141 784 q 370 965 279 925 q 568 1005 462 1005 q 766 965 673 1005 q 928 854 859 925 q 1037 691 997 784 q 1077 493 1077 598 q 1037 293 1077 387 q 928 130 997 200 q 766 20 859 61 q 568 -20 673 -20 q 370 20 462 -20 q 210 130 279 61 q 102 293 141 200 q 62 493 62 387 m 170 493 q 201 329 170 405 q 286 199 231 254 q 412 112 340 144 q 568 80 484 80 q 723 112 651 80 q 850 199 795 144 q 934 329 904 254 q 965 493 965 405 q 934 655 965 580 q 850 786 904 730 q 723 872 795 841 q 568 904 651 904 q 412 872 484 904 q 286 786 340 841 q 201 655 231 730 q 170 493 170 580 m 576 518 q 648 539 623 518 q 673 600 673 561 q 576 684 673 684 l 504 684 l 504 518 l 576 518 m 504 218 l 398 218 l 398 776 l 591 776 q 666 763 632 776 q 726 726 701 750 q 766 670 751 702 q 780 601 780 638 q 746 498 780 543 q 658 436 712 454 l 783 218 l 662 218 l 545 426 l 504 426 l 504 218 ",
      },
      "\xc9": {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 807,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 555 l 680 555 l 680 427 l 261 427 l 261 126 l 723 126 l 723 0 l 125 0 m 455 1054 l 325 1054 l 465 1219 l 646 1219 l 455 1054 ",
      },
      "~": {
        x_min: 48.609375,
        x_max: 743.109375,
        ha: 792,
        o: "m 336 366 q 261 387 295 387 q 188 366 222 387 q 127 308 155 344 l 48 372 q 141 470 87 436 q 259 504 195 504 q 325 495 291 504 q 391 468 358 487 l 455 433 q 534 411 494 411 q 606 431 573 411 q 663 487 640 451 l 743 423 q 650 327 704 359 q 534 294 597 294 q 400 331 468 294 l 336 366 ",
      },
      "\xb3": {
        x_min: 83.34375,
        x_max: 488.921875,
        ha: 572,
        o: "m 206 784 l 338 894 l 101 894 l 101 984 l 477 984 l 477 897 l 338 786 q 395 772 368 783 q 443 743 422 762 q 476 697 463 725 q 488 634 488 669 q 474 569 488 600 q 433 516 459 538 q 370 479 406 493 q 287 466 333 466 q 206 479 241 466 q 146 511 172 491 q 104 556 120 530 q 83 609 88 581 l 176 647 q 213 582 183 607 q 286 558 243 558 q 354 580 329 558 q 380 634 380 602 q 350 695 380 677 q 286 712 320 712 q 264 711 275 712 q 247 707 254 709 l 206 784 ",
      },
      "\xa1": {
        x_min: 101.390625,
        x_max: 283.359375,
        ha: 385,
        o: "m 273 -301 l 109 -301 l 145 400 l 238 400 l 273 -301 m 101 597 q 127 661 101 634 q 191 688 154 688 q 256 661 229 688 q 283 597 283 634 q 256 533 283 559 q 191 506 229 506 q 127 533 154 506 q 101 597 101 559 ",
      },
      "[": {
        x_min: 125.015625,
        x_max: 393.09375,
        ha: 400,
        o: "m 125 -205 l 125 1090 l 393 1090 l 393 984 l 238 984 l 238 -101 l 393 -101 l 393 -205 l 125 -205 ",
      },
      L: {
        x_min: 125.015625,
        x_max: 726.453125,
        ha: 761,
        o: "m 125 0 l 125 984 l 261 984 l 261 127 l 726 127 l 726 0 l 125 0 ",
      },
      " ": {
        x_min: 0,
        x_max: 0,
        ha: 347,
      },
      "%": {
        x_min: 76.390625,
        x_max: 1072.3125,
        ha: 1135,
        o: "m 191 691 q 222 612 191 643 q 298 581 254 581 q 375 612 344 581 q 405 691 405 643 q 375 769 405 738 q 298 800 344 800 q 222 769 254 800 q 191 691 191 738 m 76 691 q 94 777 76 737 q 143 846 112 816 q 213 893 173 876 q 298 909 254 909 q 384 893 343 909 q 455 846 425 876 q 504 777 486 816 q 522 691 522 737 q 504 605 522 645 q 455 535 486 565 q 384 488 425 505 q 298 472 343 472 q 213 488 254 472 q 143 535 173 505 q 94 605 112 565 q 76 691 76 645 m 741 208 q 772 129 741 159 q 848 98 804 98 q 925 129 894 98 q 955 208 955 159 q 925 286 955 255 q 848 316 894 316 q 772 286 804 316 q 741 208 741 255 m 626 208 q 644 293 626 254 q 693 363 662 333 q 763 409 723 393 q 848 426 804 426 q 934 409 893 426 q 1005 363 975 393 q 1054 293 1036 333 q 1072 208 1072 254 q 1054 122 1072 162 q 1005 52 1036 81 q 934 5 975 22 q 848 -11 893 -11 q 763 5 804 -11 q 693 52 723 22 q 644 122 662 81 q 626 208 626 162 m 187 0 l 834 900 l 959 900 l 315 0 l 187 0 ",
      },
      P: {
        x_min: 125.015625,
        x_max: 787.5625,
        ha: 829,
        o: "m 458 525 q 597 570 547 525 q 648 691 648 615 q 597 816 648 770 q 458 862 547 862 l 261 862 l 261 525 l 458 525 m 261 402 l 261 0 l 125 0 l 125 984 l 483 984 q 607 962 551 984 q 703 900 663 940 q 765 808 743 861 q 787 693 787 755 q 765 577 787 630 q 703 485 743 523 q 607 425 663 447 q 483 402 551 402 l 261 402 ",
      },
      "\xc0": {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 m 226 1219 l 405 1219 l 546 1054 l 417 1054 l 226 1219 ",
      },
      _: {
        x_min: 20.828125,
        x_max: 732,
        ha: 753,
        o: "m 20 -109 l 20 0 l 732 0 l 732 -109 l 20 -109 ",
      },
      "\xf1": {
        x_min: 111.125,
        x_max: 683.390625,
        ha: 781,
        o: "m 241 0 l 111 0 l 111 668 l 238 668 l 238 572 q 330 661 275 634 q 444 687 386 687 q 549 667 504 687 q 624 611 594 647 q 668 527 654 576 q 683 423 683 479 l 683 0 l 552 0 l 552 401 q 545 466 552 436 q 518 520 537 497 q 470 556 500 543 q 397 569 440 569 q 329 554 358 569 q 280 515 300 540 q 251 456 261 490 q 241 386 241 423 l 241 0 m 627 919 q 589 804 627 841 q 492 768 551 768 q 442 777 465 768 q 401 798 420 786 l 381 811 q 356 825 367 819 q 330 830 344 830 q 300 818 310 830 q 290 770 290 805 l 190 770 l 190 791 q 228 906 190 869 q 326 943 267 943 q 376 934 353 943 q 419 912 399 925 l 438 900 q 463 886 452 891 q 488 880 474 880 q 519 893 509 880 q 528 940 528 907 l 627 940 l 627 919 ",
      },
      "+": {
        x_min: 76.390625,
        x_max: 711.171875,
        ha: 788,
        o: "m 336 454 l 336 725 l 450 725 l 450 454 l 711 454 l 711 344 l 450 344 l 450 70 l 336 70 l 336 344 l 76 344 l 76 454 l 336 454 ",
      },
      "\u201a": {
        x_min: 55.5625,
        x_max: 255.578125,
        ha: 311,
        o: "m 55 84 q 82 145 55 119 q 150 170 109 170 q 223 140 191 170 q 255 48 255 109 q 236 -62 255 -16 q 189 -138 218 -108 q 127 -184 161 -169 q 63 -204 94 -200 l 63 -137 q 140 -85 111 -126 q 170 2 169 -44 q 161 -2 168 0 q 143 -4 154 -4 q 81 19 106 -4 q 55 84 55 43 ",
      },
      "\xbd": {
        x_min: 76.390625,
        x_max: 1015.359375,
        ha: 1082,
        o: "m 111 0 l 758 900 l 883 900 l 238 0 l 111 0 m 195 393 l 195 733 l 76 733 l 76 805 q 162 834 127 807 q 204 900 197 861 l 302 900 l 302 393 l 195 393 m 651 311 q 647 334 648 322 q 647 354 647 345 q 659 416 647 387 q 695 468 672 445 q 753 503 719 490 q 830 516 787 516 q 907 503 873 516 q 963 468 940 490 q 1000 418 987 447 q 1012 356 1012 388 q 986 270 1012 308 q 915 204 959 231 l 815 141 q 787 118 800 130 q 772 90 775 105 l 1015 90 l 1015 0 l 643 0 l 643 18 q 670 131 643 80 q 761 219 698 181 l 844 270 q 904 358 904 306 q 884 406 904 386 q 829 427 865 427 q 771 405 793 427 q 750 347 750 383 q 750 331 750 343 q 754 311 751 320 l 651 311 ",
      },
      "\xc6": {
        x_min: 6.9375,
        x_max: 1341.78125,
        ha: 1425,
        o: "m 743 0 l 743 272 l 356 272 l 181 0 l 6 0 l 662 984 l 1341 984 l 1341 858 l 879 858 l 879 555 l 1298 555 l 1298 427 l 879 427 l 879 126 l 1341 126 l 1341 0 l 743 0 m 743 394 l 743 872 l 434 394 l 743 394 ",
      },
      "\xcb": {
        x_min: 125.015625,
        x_max: 723.671875,
        ha: 807,
        o: "m 125 0 l 125 984 l 723 984 l 723 858 l 261 858 l 261 555 l 680 555 l 680 427 l 261 427 l 261 126 l 723 126 l 723 0 l 125 0 m 184 1137 q 207 1195 184 1172 q 266 1219 231 1219 q 324 1195 300 1219 q 348 1137 348 1172 q 324 1079 348 1102 q 266 1055 300 1055 q 207 1079 231 1055 q 184 1137 184 1102 m 505 1137 q 528 1195 505 1172 q 587 1219 552 1219 q 645 1195 621 1219 q 669 1137 669 1172 q 645 1079 669 1102 q 587 1055 621 1055 q 528 1079 552 1055 q 505 1137 505 1102 ",
      },
      "'": {
        x_min: 55.5625,
        x_max: 223.625,
        ha: 279,
        o: "m 55 832 q 79 893 55 869 q 140 916 102 916 q 200 893 176 916 q 223 832 223 869 q 220 807 223 820 l 162 545 l 115 545 l 58 805 q 55 832 55 819 ",
      },
      "\u0160": {
        x_min: 52.78125,
        x_max: 761.171875,
        ha: 824,
        o: "m 630 718 q 612 774 626 744 q 573 829 598 804 q 511 870 548 854 q 422 886 473 886 q 345 873 380 886 q 285 838 311 861 q 245 786 259 816 q 231 722 231 757 q 263 631 231 669 q 358 579 295 593 l 505 547 q 695 447 629 519 q 761 270 761 375 q 737 161 761 213 q 669 68 713 108 q 562 3 625 27 q 420 -20 500 -20 q 265 5 331 -20 q 154 73 200 31 q 84 167 109 115 q 52 272 59 219 l 183 313 q 203 234 187 272 q 249 166 219 195 q 321 120 279 137 q 419 102 363 102 q 571 148 520 102 q 622 259 622 194 q 586 354 622 312 q 475 412 550 397 l 334 443 q 161 534 229 466 q 94 712 94 601 q 119 823 94 770 q 188 916 144 876 q 291 981 231 957 q 419 1005 351 1005 q 561 982 502 1005 q 660 923 620 959 q 722 844 700 887 q 752 761 744 801 l 630 718 m 310 1219 l 423 1130 l 541 1219 l 669 1219 l 506 1054 l 339 1054 l 184 1219 l 310 1219 ",
      },
      "\xaa": {
        x_min: 91.671875,
        x_max: 501.421875,
        ha: 594,
        o: "m 91 556 q 133 655 91 619 q 234 700 175 691 l 356 716 q 385 729 377 719 q 393 751 393 738 q 370 806 393 783 q 298 829 348 829 q 227 803 252 829 q 197 738 201 777 l 101 761 q 119 820 104 793 q 160 869 134 848 q 220 902 186 890 q 297 915 255 915 q 388 900 351 915 q 450 862 426 886 q 485 807 475 838 q 495 740 495 775 l 495 505 q 497 457 495 481 q 501 429 500 433 l 402 429 q 398 452 400 437 q 397 490 397 468 q 345 439 381 463 q 251 415 309 415 q 184 427 213 415 q 134 458 155 438 q 102 503 113 477 q 91 556 91 529 m 268 498 q 316 504 293 498 q 356 526 338 511 q 383 566 373 541 q 393 627 393 591 l 393 648 l 261 627 q 214 608 233 623 q 195 562 195 593 q 214 518 195 537 q 268 498 233 498 ",
      },
      "\u0152": {
        x_min: 62.5,
        x_max: 1511.234375,
        ha: 1595,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 912 0 l 912 129 q 748 16 841 54 q 556 -20 655 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 748 968 655 1005 q 912 855 841 930 l 912 984 l 1511 984 l 1511 858 l 1048 858 l 1048 555 l 1468 555 l 1468 427 l 1048 427 l 1048 126 l 1511 126 l 1511 0 l 912 0 ",
      },
      "\u02db": {
        x_min: 45.84375,
        x_max: 275.015625,
        ha: 324,
        o: "m 45 -159 q 59 -92 45 -122 q 93 -40 72 -62 q 138 -4 113 -19 q 187 22 163 11 l 275 0 q 234 -22 255 -9 q 196 -51 213 -34 q 168 -88 179 -68 q 156 -134 156 -109 q 179 -185 156 -170 q 230 -200 202 -200 q 256 -198 247 -200 q 275 -194 266 -197 l 275 -288 q 246 -297 261 -294 q 205 -300 231 -300 q 144 -290 173 -300 q 93 -263 115 -280 q 58 -219 70 -245 q 45 -159 45 -193 ",
      },
      "\xf0": {
        x_min: 55.5625,
        x_max: 737.5625,
        ha: 792,
        o: "m 547 832 q 620 748 586 795 q 681 643 655 701 q 722 515 707 584 q 737 362 737 445 q 713 211 737 280 q 646 90 690 141 q 539 9 602 38 q 395 -19 476 -19 q 258 5 320 -19 q 150 75 195 30 q 80 181 105 120 q 55 315 55 243 q 83 452 55 391 q 155 556 111 513 q 257 622 200 600 q 376 644 315 644 q 489 627 438 644 q 570 575 540 609 q 511 687 547 638 q 430 773 475 736 l 248 683 l 208 770 l 338 836 q 261 873 300 858 q 183 900 222 888 l 223 1005 q 329 970 263 995 q 465 898 395 945 l 616 975 l 659 887 l 547 832 m 395 97 q 475 111 437 97 q 541 152 512 125 q 586 221 569 180 q 602 315 602 262 q 586 409 602 369 q 541 477 569 450 q 475 519 512 505 q 395 533 437 533 q 316 518 354 533 q 250 476 279 504 q 204 408 220 448 q 187 315 187 368 q 204 221 187 262 q 250 152 220 180 q 316 111 279 125 q 395 97 354 97 ",
      },
      T: {
        x_min: 13.890625,
        x_max: 808.390625,
        ha: 822,
        o: "m 479 858 l 479 0 l 343 0 l 343 858 l 13 858 l 13 984 l 808 984 l 808 858 l 479 858 ",
      },
      "\u0161": {
        x_min: 48.609375,
        x_max: 565.328125,
        ha: 628,
        o: "m 166 215 q 212 126 173 162 q 322 90 251 90 q 406 116 377 90 q 436 179 436 143 q 413 233 436 211 q 350 265 391 255 l 236 290 q 113 356 156 306 q 69 477 69 406 q 88 559 69 520 q 138 626 106 597 q 214 672 170 655 q 306 688 258 688 q 421 669 375 688 q 497 621 468 650 q 541 562 526 593 q 561 509 555 531 l 445 466 q 436 498 443 479 q 413 535 429 518 q 372 565 398 552 q 306 577 345 577 q 226 550 256 577 q 195 488 195 523 q 272 408 195 425 l 380 384 q 518 313 472 365 q 565 186 565 261 q 550 113 565 150 q 504 47 534 77 q 429 -2 475 16 q 320 -20 383 -20 q 202 -1 251 -20 q 120 47 152 18 q 70 110 87 76 q 48 173 52 144 l 166 215 m 216 954 l 313 841 l 410 954 l 533 954 l 391 757 l 237 757 l 95 954 l 216 954 ",
      },
      "\xde": {
        x_min: 125.015625,
        x_max: 787.5625,
        ha: 822,
        o: "m 461 338 q 599 383 550 338 q 648 504 648 427 q 599 628 648 583 q 461 673 550 673 l 261 673 l 261 338 l 461 338 m 261 218 l 261 0 l 125 0 l 125 984 l 261 984 l 261 794 l 476 794 q 601 772 544 794 q 700 711 658 750 q 764 620 741 673 q 787 505 787 568 q 764 390 787 443 q 700 299 741 337 q 602 239 659 261 q 477 218 545 218 l 261 218 ",
      },
      j: {
        x_min: -20.828125,
        x_max: 269.46875,
        ha: 353,
        o: "m 111 668 l 241 668 l 241 -77 q 193 -227 241 -169 q 56 -284 144 -284 q 2 -281 19 -284 q -20 -275 -13 -277 l -20 -165 q -4 -168 -15 -166 q 20 -169 5 -169 q 91 -143 72 -169 q 111 -72 111 -118 l 111 668 m 81 923 q 109 991 81 963 q 175 1018 136 1018 q 242 991 215 1018 q 269 923 269 963 q 242 857 269 884 q 175 830 215 830 q 109 857 136 830 q 81 923 81 884 ",
      },
      1: {
        x_min: 34.71875,
        x_max: 386.140625,
        ha: 490,
        o: "m 252 0 l 252 634 l 34 634 l 34 730 q 190 779 129 733 q 266 900 251 826 l 386 900 l 386 0 l 252 0 ",
      },
      "\u203a": {
        x_min: 27.78125,
        x_max: 341.6875,
        ha: 383,
        o: "m 27 137 l 209 402 l 27 668 l 156 668 l 341 402 l 156 137 l 27 137 ",
      },
      "\u0131": {
        x_min: 111.125,
        x_max: 240.296875,
        ha: 351,
        o: "m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 ",
      },
      "\xe4": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 152 862 q 175 919 152 895 q 231 943 198 943 q 290 919 266 943 q 313 862 313 895 q 290 804 313 827 q 231 782 266 782 q 175 804 198 782 q 152 862 152 827 m 412 862 q 435 919 412 895 q 493 943 458 943 q 550 919 526 943 q 573 862 573 895 q 550 804 573 827 q 493 782 526 782 q 435 804 458 782 q 412 862 412 827 ",
      },
      "<": {
        x_min: 48.609375,
        x_max: 620.890625,
        ha: 670,
        o: "m 48 456 l 620 743 l 620 611 l 190 398 l 620 186 l 620 54 l 48 338 l 48 456 ",
      },
      "\xa3": {
        x_min: 90.28125,
        x_max: 788.953125,
        ha: 824,
        o: "m 195 498 q 167 574 180 534 q 154 662 154 613 q 175 765 154 718 q 234 847 197 812 q 320 901 270 882 q 429 920 370 920 q 563 897 509 920 q 650 838 616 875 q 697 759 683 802 q 715 673 712 715 l 579 650 q 536 764 577 727 q 431 801 495 801 q 378 792 404 801 q 333 766 352 783 q 302 722 313 748 q 290 662 290 695 q 304 578 290 618 q 336 498 318 538 l 605 498 l 605 379 l 372 379 q 374 360 373 369 q 375 341 375 351 q 340 210 375 268 q 243 120 305 152 l 525 120 q 585 133 559 120 q 627 165 611 145 q 650 212 643 186 q 658 268 658 238 l 788 248 q 772 148 788 194 q 727 70 757 102 q 655 18 698 37 q 558 0 612 0 l 90 0 l 90 131 q 202 214 161 161 q 243 326 243 268 q 237 379 243 356 l 98 379 l 98 498 l 195 498 ",
      },
      "\xb9": {
        x_min: 69.453125,
        x_max: 295.859375,
        ha: 407,
        o: "m 188 477 l 188 818 l 69 818 l 69 890 q 155 918 120 891 q 197 984 190 945 l 295 984 l 295 477 l 188 477 ",
      },
      t: {
        x_min: 27.78125,
        x_max: 430.59375,
        ha: 493,
        o: "m 286 668 l 430 668 l 430 550 l 286 550 l 286 202 q 306 134 286 156 q 379 111 327 111 q 406 112 391 111 q 430 116 422 113 l 430 5 q 398 -2 422 2 q 341 -6 375 -6 q 205 42 255 -6 q 155 183 155 91 l 155 550 l 27 550 l 27 668 l 63 668 q 142 697 118 668 q 166 770 166 726 l 166 879 l 286 879 l 286 668 ",
      },
      "\xac": {
        x_min: 62.5,
        x_max: 705.609375,
        ha: 796,
        o: "m 588 206 l 588 477 l 62 477 l 62 591 l 705 591 l 705 206 l 588 206 ",
      },
      "\xf9": {
        x_min: 104.171875,
        x_max: 682,
        ha: 786,
        o: "m 551 80 q 468 3 523 27 q 354 -20 412 -20 q 249 0 295 -20 q 170 56 202 20 q 121 141 138 93 q 104 247 104 190 l 104 668 l 234 668 l 234 266 q 243 200 234 231 q 269 145 251 169 q 315 108 287 122 q 386 94 344 94 q 504 141 465 94 q 544 265 544 188 l 544 668 l 675 668 l 675 123 q 677 50 675 83 q 682 0 679 18 l 556 0 q 552 35 554 11 q 551 80 551 59 m 180 957 l 344 957 l 463 754 l 355 754 l 180 957 ",
      },
      W: {
        x_min: 20.828125,
        x_max: 1373.71875,
        ha: 1395,
        o: "m 1233 984 l 1373 984 l 1093 0 l 952 0 l 695 798 l 441 0 l 305 0 l 20 984 l 161 984 l 377 213 l 625 984 l 768 984 l 1020 205 l 1233 984 ",
      },
      "\xef": {
        x_min: 5.953125,
        x_max: 350.421875,
        ha: 351,
        o: "m 111 0 l 111 668 l 240 668 l 240 0 l 111 0 m 5 862 q 26 916 5 894 q 79 937 47 937 q 133 916 111 937 q 154 862 154 894 q 133 809 154 830 q 79 788 111 788 q 26 809 47 788 q 5 862 5 830 m 201 862 q 222 916 201 894 q 275 937 243 937 q 328 916 307 937 q 350 862 350 894 q 328 809 350 830 q 275 788 307 788 q 222 809 243 788 q 201 862 201 830 ",
      },
      ">": {
        x_min: 48.609375,
        x_max: 620.890625,
        ha: 670,
        o: "m 620 338 l 48 54 l 48 186 l 481 398 l 48 611 l 48 743 l 620 456 l 620 338 ",
      },
      v: {
        x_min: 13.890625,
        x_max: 683.390625,
        ha: 697,
        o: "m 416 0 l 284 0 l 13 668 l 161 668 l 351 152 l 543 668 l 683 668 l 416 0 ",
      },
      "\xfb": {
        x_min: 104.171875,
        x_max: 682,
        ha: 786,
        o: "m 551 80 q 468 3 523 27 q 354 -20 412 -20 q 249 0 295 -20 q 170 56 202 20 q 121 141 138 93 q 104 247 104 190 l 104 668 l 234 668 l 234 266 q 243 200 234 231 q 269 145 251 169 q 315 108 287 122 q 386 94 344 94 q 504 141 465 94 q 544 265 544 188 l 544 668 l 675 668 l 675 123 q 677 50 675 83 q 682 0 679 18 l 556 0 q 552 35 554 11 q 551 80 551 59 m 170 757 l 315 950 l 463 950 l 608 757 l 485 757 l 388 869 l 291 757 l 170 757 ",
      },
      "\xd2": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 m 310 1219 l 489 1219 l 630 1054 l 501 1054 l 310 1219 ",
      },
      "&": {
        x_min: 97.234375,
        x_max: 968.140625,
        ha: 968,
        o: "m 658 130 q 531 22 597 62 q 381 -16 465 -16 q 259 4 312 -16 q 169 61 205 26 q 115 142 133 97 q 97 234 97 187 q 109 320 97 281 q 145 391 122 358 q 200 452 168 423 q 270 509 231 480 l 284 520 l 266 540 q 229 581 250 558 q 190 632 208 604 q 160 691 172 659 q 148 759 148 723 q 170 865 148 819 q 229 942 193 911 q 311 989 266 973 q 402 1005 356 1005 q 506 988 458 1005 q 588 941 554 972 q 643 865 623 909 q 663 765 663 820 q 652 697 663 729 q 620 639 640 666 q 576 589 601 612 q 525 547 551 566 l 475 509 l 658 319 l 877 563 l 877 384 l 744 230 l 968 0 l 783 0 l 658 130 m 383 108 q 483 140 440 108 q 566 216 526 172 l 570 222 l 370 431 l 320 394 q 261 331 284 366 q 237 245 237 297 q 247 196 237 220 q 277 152 258 172 q 322 120 295 131 q 383 108 350 108 m 283 768 q 290 727 283 747 q 308 691 297 708 q 332 658 319 673 q 358 630 345 643 l 388 597 l 455 647 q 514 708 500 679 q 529 769 529 737 q 493 853 529 818 q 404 888 458 888 q 361 881 383 888 q 322 857 340 873 q 294 819 305 841 q 283 768 283 797 ",
      },
      "\u02dd": {
        x_min: 48.609375,
        x_max: 461.140625,
        ha: 510,
        o: "m 140 754 l 48 754 l 119 957 l 265 957 l 140 754 m 322 754 l 230 754 l 315 957 l 461 957 l 322 754 ",
      },
      "\xd0": {
        x_min: 25,
        x_max: 943.125,
        ha: 1006,
        o: "m 130 0 l 130 451 l 25 451 l 25 565 l 130 565 l 130 984 l 475 984 q 653 952 568 984 q 802 858 738 920 q 904 703 866 795 q 943 490 943 611 q 904 277 943 369 q 801 124 866 186 q 650 31 736 62 q 472 0 565 0 l 130 0 m 468 120 q 597 143 536 120 q 704 212 658 166 q 776 327 750 258 q 802 490 802 397 q 776 653 802 583 q 704 770 750 723 q 599 840 659 816 q 470 863 538 863 l 266 863 l 266 565 l 436 565 l 436 451 l 266 451 l 266 120 l 468 120 ",
      },
      I: {
        x_min: 125.015625,
        x_max: 263.90625,
        ha: 389,
        o: "m 125 0 l 125 984 l 263 984 l 263 0 l 125 0 ",
      },
      "\u02c9": {
        x_min: 48.609375,
        x_max: 427.8125,
        ha: 476,
        o: "m 48 801 l 48 913 l 427 913 l 427 801 l 48 801 ",
      },
      G: {
        x_min: 62.5,
        x_max: 986.1875,
        ha: 1063,
        o: "m 868 0 l 855 138 q 811 81 838 109 q 743 29 783 52 q 653 -6 704 6 q 540 -20 602 -20 q 361 12 447 -20 q 208 111 275 45 q 102 272 141 176 q 62 493 62 368 q 104 713 62 618 q 214 874 145 809 q 370 972 283 938 q 550 1005 458 1005 q 700 984 630 1005 q 827 923 770 962 q 924 829 883 884 q 986 708 965 775 l 862 655 q 747 821 829 762 q 550 880 665 880 q 420 857 483 880 q 309 784 358 833 q 231 663 261 736 q 201 493 201 590 q 229 321 201 394 q 306 200 258 248 q 416 127 354 151 q 544 102 477 102 q 683 128 626 102 q 776 193 740 154 q 829 277 812 231 q 848 359 845 322 l 506 359 l 506 481 l 977 481 l 977 0 l 868 0 ",
      },
      "`": {
        x_min: 47.21875,
        x_max: 330.578125,
        ha: 378,
        o: "m 47 957 l 211 957 l 330 754 l 222 754 l 47 957 ",
      },
      "\xb7": {
        x_min: 97.234375,
        x_max: 290.296875,
        ha: 388,
        o: "m 97 394 q 125 463 97 434 q 193 491 152 491 q 261 463 233 491 q 290 394 290 434 q 261 326 290 354 q 193 298 233 298 q 125 326 152 298 q 97 394 97 354 ",
      },
      r: {
        x_min: 111.125,
        x_max: 481.984375,
        ha: 510,
        o: "m 481 536 q 425 540 452 540 q 292 492 343 540 q 241 334 241 444 l 241 0 l 111 0 l 111 668 l 238 668 l 238 551 q 281 614 256 590 q 331 653 305 638 q 386 673 358 668 q 438 679 413 679 q 464 677 452 679 q 481 675 476 676 l 481 536 ",
      },
      "\xbf": {
        x_min: 27.78125,
        x_max: 638.9375,
        ha: 708,
        o: "m 415 401 q 416 377 416 388 q 416 352 416 366 q 390 230 416 283 q 301 136 363 177 l 240 94 q 185 34 204 70 q 166 -41 166 -1 q 177 -100 166 -72 q 207 -151 187 -129 q 259 -186 227 -173 q 331 -200 290 -200 q 410 -184 377 -200 q 463 -144 443 -169 q 495 -87 484 -119 q 505 -22 505 -55 q 502 15 505 -4 q 495 45 500 34 l 630 29 q 638 -37 638 0 q 620 -136 638 -86 q 565 -227 602 -186 q 470 -295 527 -269 q 331 -322 412 -322 q 202 -298 258 -322 q 106 -236 145 -275 q 47 -146 68 -197 q 27 -43 27 -95 q 68 99 27 40 q 169 198 108 158 l 233 241 q 279 299 265 263 q 294 375 294 334 q 294 388 294 381 q 293 401 294 394 l 415 401 m 444 598 q 418 534 444 561 q 354 506 391 506 q 289 534 316 506 q 262 598 262 561 q 289 662 262 636 q 354 688 316 688 q 418 662 391 688 q 444 598 444 636 ",
      },
      "\xfd": {
        x_min: 13.890625,
        x_max: 712.5625,
        ha: 726,
        o: "m 134 -279 l 301 73 l 13 668 l 163 668 l 372 206 l 572 668 l 712 668 l 277 -279 l 134 -279 m 393 754 l 283 754 l 404 957 l 568 957 l 393 754 ",
      },
      x: {
        x_min: 13.890625,
        x_max: 668.109375,
        ha: 682,
        o: "m 262 340 l 22 668 l 180 668 l 344 433 l 505 668 l 659 668 l 422 340 q 451 300 431 326 q 495 240 470 273 q 545 170 519 206 q 595 100 570 133 q 638 40 619 66 q 668 0 658 13 l 511 0 l 338 245 l 169 0 l 13 0 l 262 340 ",
      },
      "\xe8": {
        x_min: 56.953125,
        x_max: 697.28125,
        ha: 753,
        o: "m 561 402 q 512 524 558 475 q 377 573 466 573 q 303 559 336 573 q 247 520 270 544 q 211 465 225 495 q 195 402 197 434 l 561 402 m 693 190 q 652 107 679 145 q 586 40 625 69 q 500 -4 548 12 q 393 -20 451 -20 q 265 2 326 -20 q 157 72 204 26 q 84 184 111 118 q 56 336 56 251 q 83 479 56 415 q 153 591 109 544 q 255 663 197 637 q 376 688 313 688 q 513 663 452 688 q 613 591 573 637 q 675 481 654 545 q 697 338 697 416 q 696 315 697 326 q 694 297 695 304 l 191 297 q 208 215 193 252 q 250 150 223 177 q 314 109 277 123 q 393 94 351 94 q 518 133 475 94 q 580 229 561 172 l 693 190 m 172 957 l 336 957 l 455 754 l 347 754 l 172 957 ",
      },
      "\xba": {
        x_min: 93.0625,
        x_max: 579.21875,
        ha: 672,
        o: "m 336 508 q 431 547 390 508 q 473 665 473 587 q 431 782 473 743 q 336 820 390 820 q 238 782 280 820 q 197 665 197 743 q 238 547 197 587 q 336 508 280 508 m 336 915 q 433 896 388 915 q 510 844 477 877 q 561 765 543 811 q 579 665 579 719 q 561 565 579 611 q 510 486 543 519 q 433 434 477 452 q 336 415 388 415 q 238 434 283 415 q 161 486 193 452 q 111 565 129 519 q 93 665 93 611 q 111 765 93 719 q 161 844 129 811 q 238 896 193 877 q 336 915 283 915 ",
      },
      "\xd8": {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 695 986 627 1005 q 822 929 762 966 l 922 1057 l 1016 984 l 915 854 q 1014 698 977 788 q 1051 493 1051 608 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 420 -2 487 -20 q 294 52 354 16 l 200 -70 l 102 0 l 201 127 q 100 284 138 193 q 62 493 62 375 m 201 493 q 222 345 201 409 q 283 231 244 280 l 744 827 q 556 880 659 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 912 493 q 891 636 912 573 q 833 748 869 700 l 372 152 q 461 115 413 127 q 556 104 508 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 ",
      },
      "\xf7": {
        x_min: 76.390625,
        x_max: 711.171875,
        ha: 788,
        o: "m 302 152 q 329 215 302 188 q 393 241 356 241 q 455 215 429 241 q 481 152 481 188 q 455 89 481 116 q 393 62 429 62 q 329 89 356 62 q 302 152 302 116 m 302 645 q 329 708 302 682 q 393 734 356 734 q 455 708 429 734 q 481 645 481 682 q 455 582 481 609 q 393 555 429 555 q 329 582 356 555 q 302 645 302 609 m 76 456 l 711 456 l 711 341 l 76 341 l 76 456 ",
      },
      h: {
        x_min: 111.125,
        x_max: 683.390625,
        ha: 781,
        o: "m 241 0 l 111 0 l 111 1005 l 241 1005 l 241 590 q 331 665 277 643 q 444 687 386 687 q 549 667 504 687 q 624 611 594 647 q 668 527 654 576 q 683 423 683 479 l 683 0 l 552 0 l 552 401 q 545 466 552 436 q 518 520 537 497 q 470 556 500 543 q 397 569 440 569 q 331 555 359 569 q 283 518 302 541 q 253 462 263 494 q 241 393 243 430 l 241 0 ",
      },
      ".": {
        x_min: 97.234375,
        x_max: 290.296875,
        ha: 388,
        o: "m 97 88 q 125 157 97 129 q 193 186 152 186 q 261 157 233 186 q 290 88 290 129 q 261 20 290 48 q 193 -6 233 -6 q 125 20 152 -6 q 97 88 97 48 ",
      },
      ";": {
        x_min: 104.171875,
        x_max: 308.359375,
        ha: 413,
        o: "m 104 86 q 131 147 104 120 q 201 173 158 173 q 275 143 243 173 q 308 48 308 112 q 288 -63 308 -16 q 240 -140 269 -111 q 177 -187 211 -170 q 112 -208 143 -204 l 112 -140 q 156 -120 136 -134 q 191 -86 177 -106 q 213 -43 205 -66 q 222 2 222 -20 q 211 -2 219 0 q 193 -4 204 -4 q 130 19 156 -4 q 104 86 104 43 m 105 577 q 133 646 105 618 q 201 675 161 675 q 270 646 241 675 q 298 577 298 618 q 270 509 298 537 q 201 481 241 481 q 133 509 161 481 q 105 577 105 537 ",
      },
      f: {
        x_min: 27.78125,
        x_max: 448.640625,
        ha: 476,
        o: "m 286 550 l 286 0 l 151 0 l 151 550 l 27 550 l 27 668 l 151 668 l 151 780 q 168 879 151 836 q 215 951 186 922 q 285 995 245 980 q 370 1009 325 1009 q 424 1004 404 1009 q 448 995 444 998 l 448 879 q 429 884 443 882 q 391 887 416 887 q 356 882 375 887 q 321 865 337 877 q 295 830 305 852 q 286 773 286 808 l 286 668 l 447 668 l 447 550 l 286 550 ",
      },
      "\u201c": {
        x_min: 55.5625,
        x_max: 484.765625,
        ha: 540,
        o: "m 484 722 q 459 663 484 687 q 394 638 433 638 q 323 668 354 638 q 293 757 293 697 q 311 862 293 818 q 356 936 329 907 q 416 982 383 966 q 477 1000 448 997 l 477 934 q 403 883 431 923 q 373 800 375 843 q 383 804 376 802 q 401 807 390 807 q 460 784 436 807 q 484 722 484 762 m 247 722 q 221 663 247 687 q 156 638 195 638 q 86 668 116 638 q 55 757 55 697 q 73 862 55 818 q 118 936 91 907 q 178 982 145 966 q 240 1000 211 997 l 240 934 q 165 883 194 923 q 136 800 137 843 q 145 804 138 802 q 163 807 152 807 q 222 784 198 807 q 247 722 247 762 ",
      },
      A: {
        x_min: 13.890625,
        x_max: 954.25,
        ha: 968,
        o: "m 700 275 l 263 275 l 159 0 l 13 0 l 405 984 l 562 984 l 954 0 l 807 0 l 700 275 m 312 401 l 651 401 l 480 843 l 312 401 ",
      },
      6: {
        x_min: 70.84375,
        x_max: 755.609375,
        ha: 806,
        o: "m 687 759 q 620 786 662 775 q 526 798 577 798 q 399 774 455 798 q 302 707 343 750 q 237 604 261 663 q 209 476 213 545 q 297 556 237 520 q 447 593 356 593 q 570 572 513 593 q 668 513 626 552 q 732 416 709 473 q 755 286 755 359 q 728 156 755 213 q 655 60 701 100 q 549 0 609 20 q 422 -20 488 -20 q 294 2 356 -20 q 181 76 231 26 q 101 205 131 126 q 70 395 70 284 q 106 618 70 520 q 204 784 141 716 q 351 886 266 851 q 534 920 436 920 q 647 907 597 920 q 729 870 697 893 l 687 759 m 229 286 q 245 206 229 241 q 289 147 262 172 q 351 110 316 123 q 423 97 386 97 q 497 109 462 97 q 560 146 533 122 q 602 206 587 170 q 618 286 618 241 q 602 367 618 331 q 559 427 586 402 q 497 463 533 451 q 423 476 462 476 q 349 463 384 476 q 287 427 313 451 q 245 367 261 402 q 229 286 229 331 ",
      },
      "\u2018": {
        x_min: 55.5625,
        x_max: 247.234375,
        ha: 303,
        o: "m 247 715 q 221 656 247 680 q 156 632 195 632 q 86 661 116 632 q 55 750 55 690 q 73 855 55 811 q 118 929 91 900 q 178 975 145 959 q 240 993 211 990 l 240 927 q 165 876 194 916 q 136 793 137 836 q 145 797 138 795 q 163 800 152 800 q 222 777 198 800 q 247 715 247 755 ",
      },
      O: {
        x_min: 62.5,
        x_max: 1051.46875,
        ha: 1114,
        o: "m 201 493 q 231 324 201 397 q 310 202 261 251 q 423 128 359 152 q 556 104 487 104 q 689 128 625 104 q 803 202 754 152 q 882 324 852 251 q 912 493 912 397 q 882 661 912 588 q 803 783 852 734 q 689 856 754 832 q 556 880 625 880 q 423 856 487 880 q 310 783 359 832 q 231 661 261 734 q 201 493 201 588 m 62 493 q 104 711 62 616 q 216 872 147 807 q 375 971 286 937 q 556 1005 463 1005 q 738 971 650 1005 q 897 872 827 937 q 1009 711 966 807 q 1051 493 1051 616 q 1009 273 1051 369 q 897 112 966 177 q 738 13 827 47 q 556 -20 650 -20 q 375 13 463 -20 q 216 112 286 47 q 104 273 147 177 q 62 493 62 369 ",
      },
      n: {
        x_min: 111.125,
        x_max: 683.390625,
        ha: 781,
        o: "m 241 0 l 111 0 l 111 668 l 238 668 l 238 572 q 330 661 275 634 q 444 687 386 687 q 549 667 504 687 q 624 611 594 647 q 668 527 654 576 q 683 423 683 479 l 683 0 l 552 0 l 552 401 q 545 466 552 436 q 518 520 537 497 q 470 556 500 543 q 397 569 440 569 q 329 554 358 569 q 280 515 300 540 q 251 456 261 490 q 241 386 241 423 l 241 0 ",
      },
      "\ufeff": {
        x_min: 0,
        x_max: 0,
        ha: 0,
      },
      3: {
        x_min: 51.390625,
        x_max: 712.5625,
        ha: 768,
        o: "m 245 530 l 511 775 l 80 775 l 80 900 l 691 900 l 691 777 l 434 540 q 534 523 484 540 q 622 472 583 506 q 687 387 662 438 q 712 266 712 336 q 691 157 712 209 q 627 65 669 105 q 525 1 586 25 q 386 -22 465 -22 q 247 1 308 -22 q 143 64 186 25 q 77 154 101 104 q 51 261 54 205 l 184 291 q 202 211 186 247 q 246 150 219 175 q 309 111 273 125 q 384 97 344 97 q 466 110 430 97 q 526 146 502 123 q 562 200 550 169 q 575 263 575 230 q 559 340 575 308 q 516 392 543 372 q 457 422 490 412 q 391 431 425 431 q 312 418 351 431 l 245 530 ",
      },
      9: {
        x_min: 55.5625,
        x_max: 737.5625,
        ha: 807,
        o: "m 123 144 q 197 113 152 126 q 287 101 243 101 q 427 126 369 101 q 523 195 486 151 q 579 296 561 238 q 600 420 597 354 q 517 341 576 376 q 366 305 458 305 q 252 325 308 305 q 152 383 195 344 q 81 478 108 422 q 55 609 55 534 q 82 736 55 679 q 155 835 109 794 q 261 898 201 876 q 387 920 320 920 q 516 896 454 920 q 628 821 579 872 q 707 693 677 770 q 737 506 737 615 q 709 285 737 383 q 625 119 682 187 q 485 15 569 51 q 287 -20 401 -20 q 231 -16 261 -20 q 174 -5 202 -12 q 120 11 145 1 q 79 31 95 20 l 123 144 m 581 612 q 565 691 581 655 q 521 750 548 726 q 459 788 494 775 q 387 801 425 801 q 314 788 350 801 q 252 750 279 775 q 209 691 225 726 q 193 612 193 657 q 209 531 193 566 q 252 471 225 495 q 313 434 279 447 q 387 422 348 422 q 459 435 425 422 q 521 472 494 448 q 565 532 548 497 q 581 612 581 568 ",
      },
      l: {
        x_min: 111.125,
        x_max: 241.6875,
        ha: 353,
        o: "m 111 0 l 111 1005 l 241 1005 l 241 0 l 111 0 ",
      },
      "\xa4": {
        x_min: 61.109375,
        x_max: 747.28125,
        ha: 808,
        o: "m 113 331 q 127 421 113 379 q 165 500 141 463 l 61 607 l 144 688 l 248 580 q 325 616 284 604 q 409 629 365 629 q 563 586 493 629 l 663 688 l 747 607 l 650 505 q 691 425 676 469 q 707 331 707 380 q 692 239 707 283 q 651 161 677 195 l 747 62 l 665 -19 l 568 80 q 493 46 533 58 q 409 34 452 34 q 322 48 363 34 q 244 86 280 62 l 143 -19 l 61 62 l 162 168 q 126 245 138 204 q 113 331 113 286 m 229 331 q 243 257 229 291 q 281 199 256 223 q 339 161 306 175 q 409 148 372 148 q 479 161 447 148 q 536 199 512 175 q 573 257 559 223 q 587 331 587 291 q 573 405 587 372 q 536 463 559 438 q 479 500 512 487 q 409 513 447 513 q 339 500 372 513 q 281 463 306 487 q 243 405 256 438 q 229 331 229 372 ",
      },
      4: {
        x_min: 48.609375,
        x_max: 776.453125,
        ha: 797,
        o: "m 48 359 l 434 900 l 622 900 l 622 329 l 776 329 l 776 202 l 622 202 l 622 0 l 490 0 l 490 202 l 48 202 l 48 359 m 490 769 l 173 329 l 490 329 l 490 769 ",
      },
      p: {
        x_min: 111.125,
        x_max: 768.109375,
        ha: 824,
        o: "m 111 -263 l 111 668 l 237 668 l 237 563 q 322 648 265 613 q 461 683 379 683 q 593 656 536 683 q 689 581 651 629 q 747 470 727 534 q 768 334 768 406 q 747 195 768 259 q 686 84 726 131 q 588 9 645 36 q 456 -18 530 -18 q 323 13 379 -18 q 240 90 268 45 l 240 -263 l 111 -263 m 634 334 q 620 427 634 384 q 581 500 607 469 q 520 550 556 531 q 437 568 483 568 q 356 550 393 568 q 293 500 319 531 q 252 427 266 469 q 238 334 238 384 q 252 239 238 283 q 293 164 266 195 q 356 115 319 133 q 437 98 393 98 q 519 115 483 98 q 581 164 555 133 q 620 239 607 195 q 634 334 634 283 ",
      },
      "\u2021": {
        x_min: 62.5,
        x_max: 529.203125,
        ha: 592,
        o: "m 238 319 l 238 665 l 62 665 l 62 777 l 238 777 l 238 984 l 352 984 l 352 777 l 529 777 l 529 665 l 352 665 l 352 319 l 529 319 l 529 206 l 352 206 l 352 0 l 238 0 l 238 206 l 62 206 l 62 319 l 238 319 ",
      },
      "\xe0": {
        x_min: 69.453125,
        x_max: 643.109375,
        ha: 726,
        o: "m 69 179 q 84 259 69 223 q 127 319 100 294 q 191 359 154 344 q 272 381 229 375 l 452 408 q 493 426 483 412 q 504 458 504 440 q 470 542 504 506 q 359 577 436 577 q 252 539 290 577 q 208 443 215 501 l 83 472 q 111 559 88 519 q 170 628 134 600 q 254 672 206 657 q 356 688 302 688 q 484 668 431 688 q 570 615 537 648 q 619 537 604 581 q 634 444 634 493 l 634 109 q 637 38 634 65 q 643 0 640 12 l 515 0 q 510 33 512 12 q 508 90 508 54 q 479 52 497 72 q 434 16 461 33 q 372 -10 408 0 q 293 -20 337 -20 q 200 -4 241 -20 q 130 39 159 12 q 85 102 101 66 q 69 179 69 138 m 311 88 q 386 99 351 88 q 447 132 422 109 q 488 193 473 155 q 504 286 504 231 l 504 316 l 300 286 q 230 254 258 279 q 202 186 202 230 q 231 118 202 148 q 311 88 261 88 m 151 957 l 315 957 l 434 754 l 326 754 l 151 957 ",
      },
      "\xdc": {
        x_min: 111.125,
        x_max: 819.515625,
        ha: 931,
        o: "m 230 1137 q 254 1195 230 1172 q 312 1219 277 1219 q 370 1195 347 1219 q 394 1137 394 1172 q 370 1079 394 1102 q 312 1055 347 1055 q 254 1079 277 1055 q 230 1137 230 1102 m 537 1137 q 561 1195 537 1172 q 619 1219 584 1219 q 677 1195 654 1219 q 701 1137 701 1172 q 677 1079 701 1102 q 619 1055 654 1055 q 561 1079 584 1055 q 537 1137 537 1102 m 465 -20 q 325 2 390 -20 q 213 70 261 25 q 138 181 165 115 q 111 336 111 248 l 111 984 l 245 984 l 245 340 q 303 166 245 227 q 465 105 361 105 q 626 166 569 105 q 683 340 683 227 l 683 984 l 819 984 l 819 336 q 792 181 819 248 q 717 70 765 115 q 604 2 669 25 q 465 -20 540 -20 ",
      },
      "\xf3": {
        x_min: 55.5625,
        x_max: 738.953125,
        ha: 795,
        o: "m 397 95 q 476 111 438 95 q 543 156 513 126 q 588 231 572 187 q 605 334 605 276 q 588 436 605 393 q 543 511 572 480 q 476 556 513 541 q 397 572 438 572 q 318 556 355 572 q 251 511 280 541 q 205 436 222 480 q 188 334 188 393 q 205 231 188 276 q 251 156 222 187 q 318 111 280 126 q 397 95 355 95 m 397 688 q 534 661 472 688 q 643 587 597 634 q 713 475 688 540 q 738 334 738 411 q 713 193 738 258 q 643 80 688 127 q 534 6 597 33 q 397 -20 472 -20 q 259 6 322 -20 q 151 80 197 33 q 80 193 105 127 q 55 334 55 258 q 80 475 55 411 q 151 587 105 540 q 259 661 197 634 q 397 688 322 688 m 429 754 l 319 754 l 440 957 l 604 957 l 429 754 ",
      },
    },
    cssFontWeight: "normal",
    ascender: 1385,
    underlinePosition: -155,
    cssFontStyle: "normal",
    boundingBox: {
      yMin: -322.25,
      xMin: -61,
      yMax: 1228.875,
      xMax: 1511.234375,
    },
    resolution: 1e3,
    descender: -373,
    familyName: "Circular",
    lineHeight: 1757,
    underlineThickness: 80,
  }),
  (function (e) {
    function t() {
      i(null, thumbSheetData);
    }
    function i(e, t) {
      var i = t;
      itemField = new ItemField(api.itemListArray, e, i, r);
    }
    function r() {
      (window.vis = new VisManager(sceneManager, api, itemField)),
        vis.add(new DriftVis(sceneManager, api, itemField)),
        vis.add(new TagsVis(sceneManager, api, itemField)),
        vis.setTo("drift", {
          isIntro: !0,
        });
      vis.getCurrentVis().disableItemInteraction(),
        e("body").css("overflow", "hidden");
      var t = 5000,
        i = sceneManager.SKYDOME_VIEW_COLORS[vis.getCurrentVis().name];
      (i.easing = TWEEN.Easing.Quadratic.Out),
        sceneManager.tweenSkyDomeState(i, t, null),
        sceneManager.setUpdateFunc(function () {
          vis.update();
        }),
        vis.getCurrentVis().initCamPos(t, function () {});
    }

    window.img3d = {
      init: function () {
        $("body").css("overflow", "hidden"),
          //   $("#img").css({
          //     position: "fixed",
          //     top: "0",
          //     left: "0",
          //     width: "100%",
          //     height: "100%",
          //   }).show();
          (sceneManager = new SceneManager(e("#img")));
        t();
      },
      setTo: function (id) {
        $("#img")
          .css({
            position: "fixed",
            top: "0",
            left: "0",
            width: "100%",
            height: "100%",
          })
          .show();
        vis.setTo("tags", {
          tagIds: [api.itemList[id + "_1"].tags[0].tag_goya_id],
          // center: sceneManager.getCamera().position.clone(),
          lastView: "drift",
        });
        // back.add(function () {
        //     vis.setTo("drift");
        // });
      },
    };
  })(window.jQuery);
